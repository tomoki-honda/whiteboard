/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/helpers/esm/extends.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _extends)
/* harmony export */ });
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _inheritsLoose)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/setPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  (0,_babel_runtime_helpers_esm_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__.default)(subClass, superClass);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _objectWithoutPropertiesLoose)
/* harmony export */ });
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _setPrototypeOf)
/* harmony export */ });
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

/***/ }),

/***/ "./node_modules/@tensorflow-models/handpose/dist/handpose.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow-models/handpose/dist/handpose.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HandPose": () => (/* binding */ K),
/* harmony export */   "load": () => (/* binding */ G)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-converter */ "./node_modules/@tensorflow/tfjs-converter/dist/index.js");
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/**
    * @license
    * Copyright 2021 Google LLC. All Rights Reserved.
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    * =============================================================================
    */
function y(t,n,e,r){return new(e||(e=Promise))((function(o,i){function s(t){try{u(r.next(t))}catch(t){i(t)}}function a(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(s,a)}u((r=r.apply(t,n||[])).next())}))}function x(t,n){var e,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;s;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(t,s)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function w(t){return[Math.abs(t.endPoint[0]-t.startPoint[0]),Math.abs(t.endPoint[1]-t.startPoint[1])]}function L(t){return[t.startPoint[0]+(t.endPoint[0]-t.startPoint[0])/2,t.startPoint[1]+(t.endPoint[1]-t.startPoint[1])/2]}function B(t,n){void 0===n&&(n=1.5);var e=L(t),r=w(t),o=[n*r[0]/2,n*r[1]/2];return{startPoint:[e[0]-o[0],e[1]-o[1]],endPoint:[e[0]+o[0],e[1]+o[1]],palmLandmarks:t.palmLandmarks}}function I(t){var n=L(t),e=w(t),r=Math.max.apply(Math,e)/2;return{startPoint:[n[0]-r,n[1]-r],endPoint:[n[0]+r,n[1]+r],palmLandmarks:t.palmLandmarks}}function C(t,n){var e=[t.endPoint[0]-t.startPoint[0],t.endPoint[1]-t.startPoint[1]],r=[e[0]*n[0],e[1]*n[1]];return{startPoint:[t.startPoint[0]+r[0],t.startPoint[1]+r[1]],endPoint:[t.endPoint[0]+r[0],t.endPoint[1]+r[1]],palmLandmarks:t.palmLandmarks}}var H=function(){function t(t,n,o,i,s,a){this.model=t,this.width=n,this.height=o,this.iouThreshold=s,this.scoreThreshold=a,this.anchors=i.map((function(t){return[t.x_center,t.y_center]})),this.anchorsTensor=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor2d)(this.anchors),this.inputSizeTensor=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor1d)([n,o]),this.doubleInputSizeTensor=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tensor1d)([2*n,2*o])}return t.prototype.normalizeBoxes=function(t){var n=this;return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)((function(){var e=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.slice)(t,[0,0],[-1,2]),r=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.slice)(t,[0,2],[-1,2]),o=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.add)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.div)(e,n.inputSizeTensor),n.anchorsTensor),c=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.div)(r,n.doubleInputSizeTensor),f=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.sub)(o,c),n.inputSizeTensor),l=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.add)(o,c),n.inputSizeTensor);return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.concat2d)([f,l],1)}))},t.prototype.normalizeLandmarks=function(t,n){var e=this;return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)((function(){var r=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.add)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.div)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.reshape)(t,[-1,7,2]),e.inputSizeTensor),e.anchors[n]);return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mul)(r,e.inputSizeTensor)}))},t.prototype.getBoundingBoxes=function(t){return y(this,void 0,void 0,(function(){var e,r,s,a,d,v,P,g,b,k,y,w,L,B,I,C=this;return x(this,(function(x){switch(x.label){case 0:return e=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)((function(){return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.sub)(t,.5),2)})),"webgl"===(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.getBackend)()?(s=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get("WEBGL_PACK_DEPTHWISECONV"),(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().set("WEBGL_PACK_DEPTHWISECONV",!0),r=this.model.predict(e),(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().set("WEBGL_PACK_DEPTHWISECONV",s)):r=this.model.predict(e),a=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.squeeze)(r),d=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)((function(){return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.squeeze)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.sigmoid)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.slice)(a,[0,0],[-1,1])))})),v=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.slice)(a,[0,1],[-1,4]),P=this.normalizeBoxes(v),g=console.warn,console.warn=function(){},b=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.image.nonMaxSuppression(P,d,1,this.iouThreshold,this.scoreThreshold),console.warn=g,[4,b.array()];case 1:return k=x.sent(),y=[e,r,b,a,P,v,d],0===k.length?(y.forEach((function(t){return t.dispose()})),[2,null]):(w=k[0],L=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.slice)(P,[w,0],[1,-1]),B=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.slice)(a,[w,5],[1,14]),I=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)((function(){return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.reshape)(C.normalizeLandmarks(B,w),[-1,2])})),y.push(B),y.forEach((function(t){return t.dispose()})),[2,{boxes:L,palmLandmarks:I}])}}))}))},t.prototype.estimateHandBounds=function(t){return y(this,void 0,void 0,(function(){var e,r,i,s,u,h,d,c,f=this;return x(this,(function(l){switch(l.label){case 0:return e=t.shape[1],r=t.shape[2],i=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)((function(){return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.div)(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.image.resizeBilinear(t,[f.width,f.height]),255)})),[4,this.getBoundingBoxes(i)];case 1:return null===(s=l.sent())?(i.dispose(),[2,null]):(u=s.boxes.arraySync(),h=u[0].slice(0,2),d=u[0].slice(2,4),c=s.palmLandmarks.arraySync(),i.dispose(),s.boxes.dispose(),s.palmLandmarks.dispose(),[2,(p={startPoint:h,endPoint:d,palmLandmarks:c},m=[r/this.width,e/this.height],{startPoint:[p.startPoint[0]*m[0],p.startPoint[1]*m[1]],endPoint:[p.endPoint[0]*m[0],p.endPoint[1]*m[1]],palmLandmarks:p.palmLandmarks.map((function(t){return[t[0]*m[0],t[1]*m[1]]}))})])}var p,m}))}))},t}(),M={thumb:[1,2,3,4],indexFinger:[5,6,7,8],middleFinger:[9,10,11,12],ringFinger:[13,14,15,16],pinky:[17,18,19,20],palmBase:[0]};function T(t,n){var e,r=Math.PI/2-Math.atan2(-(n[1]-t[1]),n[0]-t[0]);return(e=r)-2*Math.PI*Math.floor((e+Math.PI)/(2*Math.PI))}var E=function(t,n){return[[1,0,t],[0,1,n],[0,0,1]]};function O(t,n){for(var e=0,r=0;r<t.length;r++)e+=t[r]*n[r];return e}function S(t,n){for(var e=[],r=0;r<t.length;r++)e.push(t[r][n]);return e}function W(t,n){for(var e=[],r=t.length,o=0;o<r;o++){e.push([]);for(var i=0;i<r;i++)e[o].push(O(t[o],S(n,i)))}return e}function D(t,n){var e=Math.cos(t),r=Math.sin(t),o=[[e,-r,0],[r,e,0],[0,0,1]],i=W(E(n[0],n[1]),o);return W(i,E(-n[0],-n[1]))}function z(t,n){return[O(t,n[0]),O(t,n[1])]}var _=[0,-.4],R=[0,-.1],j=[0,5,9,13,17,1,2],V=function(){function t(t,n,e,r,o,i){this.boundingBoxDetector=t,this.meshDetector=n,this.meshWidth=e,this.meshHeight=r,this.maxContinuousChecks=o,this.detectionConfidence=i,this.regionsOfInterest=[],this.runsWithoutHandDetector=0,this.maxHandsNumber=1}return t.prototype.getBoxForPalmLandmarks=function(t,n){var e=t.map((function(t){return z(t.concat([1]),n)}));return B(I(C(this.calculateLandmarksBoundingBox(e),_)),3)},t.prototype.getBoxForHandLandmarks=function(t){for(var n=B(I(C(this.calculateLandmarksBoundingBox(t),R)),1.65),e=[],r=0;r<j.length;r++)e.push(t[j[r]].slice(0,2));return n.palmLandmarks=e,n},t.prototype.transformRawCoords=function(t,n,e,r){var o,i,s,a,u=this,h=w(n),d=[h[0]/this.meshWidth,h[1]/this.meshHeight],c=t.map((function(t){return[d[0]*(t[0]-u.meshWidth/2),d[1]*(t[1]-u.meshHeight/2),t[2]]})),f=D(e,[0,0]),l=c.map((function(t){return z(t,f).concat([t[2]])})),p=(i=[[(o=r)[0][0],o[1][0]],[o[0][1],o[1][1]]],s=[o[0][2],o[1][2]],a=[-O(i[0],s),-O(i[1],s)],[i[0].concat(a[0]),i[1].concat(a[1]),[0,0,1]]),m=L(n).concat([1]),v=[O(m,p[0]),O(m,p[1])];return l.map((function(t){return[t[0]+v[0],t[1]+v[1],t[2]]}))},t.prototype.estimateHand=function(t){return y(this,void 0,void 0,(function(){var e,r,o,i,s,u,h,d,p,m,v,P,g,b,k,y,w,B,I,C;return x(this,(function(x){switch(x.label){case 0:return!0!==(e=this.shouldUpdateRegionsOfInterest())?[3,2]:[4,this.boundingBoxDetector.estimateHandBounds(t)];case 1:return null===(r=x.sent())?(t.dispose(),this.regionsOfInterest=[],[2,null]):(this.updateRegionsOfInterest(r,!0),this.runsWithoutHandDetector=0,[3,3]);case 2:this.runsWithoutHandDetector++,x.label=3;case 3:return o=this.regionsOfInterest[0],i=T(o.palmLandmarks[0],o.palmLandmarks[2]),s=L(o),u=[s[0]/t.shape[2],s[1]/t.shape[1]],h=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.image.rotateWithOffset(t,i,0,u),d=D(-i,s),p=!0===e?this.getBoxForPalmLandmarks(o.palmLandmarks,d):o,m=function(t,e,r){var o=e.shape[1],i=e.shape[2],s=[[t.startPoint[1]/o,t.startPoint[0]/i,t.endPoint[1]/o,t.endPoint[0]/i]];return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.image.cropAndResize(e,s,[0],r)}(p,h,[this.meshWidth,this.meshHeight]),v=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.div)(m,255),m.dispose(),h.dispose(),"webgl"===(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.getBackend)()?(g=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().get("WEBGL_PACK_DEPTHWISECONV"),(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().set("WEBGL_PACK_DEPTHWISECONV",!0),P=this.meshDetector.predict(v),(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.env)().set("WEBGL_PACK_DEPTHWISECONV",g)):P=this.meshDetector.predict(v),b=P[0],k=P[1],v.dispose(),y=b.dataSync()[0],b.dispose(),y<this.detectionConfidence?(k.dispose(),this.regionsOfInterest=[],[2,null]):(w=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.reshape)(k,[-1,3]),B=w.arraySync(),k.dispose(),w.dispose(),I=this.transformRawCoords(B,p,i,d),C=this.getBoxForHandLandmarks(I),this.updateRegionsOfInterest(C,!1),[2,{landmarks:I,handInViewConfidence:y,boundingBox:{topLeft:C.startPoint,bottomRight:C.endPoint}}])}}))}))},t.prototype.calculateLandmarksBoundingBox=function(t){var n=t.map((function(t){return t[0]})),e=t.map((function(t){return t[1]}));return{startPoint:[Math.min.apply(Math,n),Math.min.apply(Math,e)],endPoint:[Math.max.apply(Math,n),Math.max.apply(Math,e)]}},t.prototype.updateRegionsOfInterest=function(t,n){if(n)this.regionsOfInterest=[t];else{var e=this.regionsOfInterest[0],r=0;if(null!=e&&null!=e.startPoint){var o=t.startPoint,i=o[0],s=o[1],a=t.endPoint,u=a[0],h=a[1],d=e.startPoint,c=d[0],f=d[1],l=e.endPoint,p=l[0],m=l[1],v=Math.max(i,c),P=Math.max(s,f),g=(Math.min(u,p)-v)*(Math.min(h,m)-P);r=g/((u-i)*(h-s)+(p-c)*(m-s)-g)}this.regionsOfInterest[0]=r>.8?e:t}},t.prototype.shouldUpdateRegionsOfInterest=function(){return this.regionsOfInterest.length!==this.maxHandsNumber||this.runsWithoutHandDetector>=this.maxContinuousChecks},t}();function F(){return y(this,void 0,void 0,(function(){return x(this,(function(n){return"https://tfhub.dev/mediapipe/tfjs-model/handdetector/1/default/1",[2,(0,_tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_0__.loadGraphModel)("https://tfhub.dev/mediapipe/tfjs-model/handdetector/1/default/1",{fromTFHub:!0})]}))}))}function A(){return y(this,void 0,void 0,(function(){return x(this,(function(n){return"https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1",[2,(0,_tensorflow_tfjs_converter__WEBPACK_IMPORTED_MODULE_0__.loadGraphModel)("https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1",{fromTFHub:!0})]}))}))}function N(){return y(this,void 0,void 0,(function(){return x(this,(function(t){return[2,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.util.fetch("https://tfhub.dev/mediapipe/tfjs-model/handskeleton/1/default/1/anchors.json?tfjs-format=file").then((function(t){return t.json()}))]}))}))}function G(t){var n=void 0===t?{}:t,e=n.maxContinuousChecks,r=void 0===e?1/0:e,o=n.detectionConfidence,i=void 0===o?.8:o,s=n.iouThreshold,a=void 0===s?.3:s,u=n.scoreThreshold,h=void 0===u?.5:u;return y(this,void 0,void 0,(function(){var t,n,e,o,s,u;return x(this,(function(d){switch(d.label){case 0:return[4,Promise.all([N(),F(),A()])];case 1:return t=d.sent(),n=t[0],e=t[1],o=t[2],s=new H(e,256,256,n,a,h),u=new V(s,o,256,256,r,i),[2,new K(u)]}}))}))}var K=function(){function t(t){this.pipeline=t}return t.getAnnotations=function(){return M},t.prototype.estimateHands=function(t,n){return void 0===n&&(n=!1),y(this,void 0,void 0,(function(){var e,r,i,s,a,u,h,d,c;return x(this,(function(f){switch(f.label){case 0:return e=function(t){return t instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.Tensor?[t.shape[0],t.shape[1]]:[t.height,t.width]}(t),r=e[1],i=(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.tidy)((function(){return t instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.Tensor||(t=_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.browser.fromPixels(t)),(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.expandDims)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_1__.cast)(t,"float32"))})),[4,this.pipeline.estimateHand(i)];case 1:if(s=f.sent(),i.dispose(),null===s)return[2,[]];for(a=s,!0===n&&(a=function(t,n){var e=t.handInViewConfidence,r=t.landmarks,o=t.boundingBox;return{handInViewConfidence:e,landmarks:r.map((function(t){return[n-1-t[0],t[1],t[2]]})),boundingBox:{topLeft:[n-1-o.topLeft[0],o.topLeft[1]],bottomRight:[n-1-o.bottomRight[0],o.bottomRight[1]]}}}(s,r)),u={},h=0,d=Object.keys(M);h<d.length;h++)c=d[h],u[c]=M[c].map((function(t){return a.landmarks[t]}));return[2,[{handInViewConfidence:a.handInViewConfidence,boundingBox:a.boundingBox,landmarks:a.landmarks,annotations:u}]]}}))}))},t}();


/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataType": () => (/* binding */ DataType),
/* harmony export */   "SaverDef": () => (/* binding */ SaverDef)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
/** DataType enum. */
var DataType;
(function (DataType) {
    DataType[DataType["DT_INVALID"] = 0] = "DT_INVALID";
    DataType[DataType["DT_FLOAT"] = 1] = "DT_FLOAT";
    DataType[DataType["DT_DOUBLE"] = 2] = "DT_DOUBLE";
    DataType[DataType["DT_INT32"] = 3] = "DT_INT32";
    DataType[DataType["DT_UINT8"] = 4] = "DT_UINT8";
    DataType[DataType["DT_INT16"] = 5] = "DT_INT16";
    DataType[DataType["DT_INT8"] = 6] = "DT_INT8";
    DataType[DataType["DT_STRING"] = 7] = "DT_STRING";
    DataType[DataType["DT_COMPLEX64"] = 8] = "DT_COMPLEX64";
    DataType[DataType["DT_INT64"] = 9] = "DT_INT64";
    DataType[DataType["DT_BOOL"] = 10] = "DT_BOOL";
    DataType[DataType["DT_QINT8"] = 11] = "DT_QINT8";
    DataType[DataType["DT_QUINT8"] = 12] = "DT_QUINT8";
    DataType[DataType["DT_QINT32"] = 13] = "DT_QINT32";
    DataType[DataType["DT_BFLOAT16"] = 14] = "DT_BFLOAT16";
    DataType[DataType["DT_FLOAT_REF"] = 101] = "DT_FLOAT_REF";
    DataType[DataType["DT_DOUBLE_REF"] = 102] = "DT_DOUBLE_REF";
    DataType[DataType["DT_INT32_REF"] = 103] = "DT_INT32_REF";
    DataType[DataType["DT_UINT8_REF"] = 104] = "DT_UINT8_REF";
    DataType[DataType["DT_INT16_REF"] = 105] = "DT_INT16_REF";
    DataType[DataType["DT_INT8_REF"] = 106] = "DT_INT8_REF";
    DataType[DataType["DT_STRING_REF"] = 107] = "DT_STRING_REF";
    DataType[DataType["DT_COMPLEX64_REF"] = 108] = "DT_COMPLEX64_REF";
    DataType[DataType["DT_INT64_REF"] = 109] = "DT_INT64_REF";
    DataType[DataType["DT_BOOL_REF"] = 110] = "DT_BOOL_REF";
    DataType[DataType["DT_QINT8_REF"] = 111] = "DT_QINT8_REF";
    DataType[DataType["DT_QUINT8_REF"] = 112] = "DT_QUINT8_REF";
    DataType[DataType["DT_QINT32_REF"] = 113] = "DT_QINT32_REF";
    DataType[DataType["DT_BFLOAT16_REF"] = 114] = "DT_BFLOAT16_REF";
})(DataType || (DataType = {}));
var SaverDef;
(function (SaverDef) {
    /** CheckpointFormatVersion enum. */
    let CheckpointFormatVersion;
    (function (CheckpointFormatVersion) {
        CheckpointFormatVersion[CheckpointFormatVersion["LEGACY"] = 0] = "LEGACY";
        CheckpointFormatVersion[CheckpointFormatVersion["V1"] = 1] = "V1";
        CheckpointFormatVersion[CheckpointFormatVersion["V2"] = 2] = "V2";
    })(CheckpointFormatVersion = SaverDef.CheckpointFormatVersion || (SaverDef.CheckpointFormatVersion = {}));
})(SaverDef || (SaverDef = {}));
//# sourceMappingURL=compiled_api.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExecutionContext": () => (/* binding */ ExecutionContext)
/* harmony export */ });
/**
 * ExecutionContext captures the runtime environment of the node. It keeps
 * track of the current frame and iteration for the control flow ops.
 *
 * For example, typical Dynamic RNN model may contain loops, for which
 * TensorFlow will generate graphs with Enter/Exit nodes to control the
 * current execution frame, and NextIteration Nodes for iteration id increment.
 * For model with branch logic, TensorFLow will generate Switch/Merge ops.
 */
class ExecutionContext {
    constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}) {
        this.weightMap = weightMap;
        this.tensorArrayMap = tensorArrayMap;
        this.tensorListMap = tensorListMap;
        this.functionMap = functionMap;
        this.rootContext = { id: 0, frameName: '', iterationId: 0 };
        this.contexts = [this.rootContext];
        this.lastId = 0;
        this.generateCurrentContextIds();
    }
    newFrame(id, frameName) {
        return { id, frameName, iterationId: 0 };
    }
    /**
     * Set the current context
     * @param contexts: ExecutionContextInfo[] the current path of execution
     * frames
     */
    set currentContext(contexts) {
        if (this.contexts !== contexts) {
            this.contexts = contexts;
            this.generateCurrentContextIds();
        }
    }
    get currentContext() {
        return this.contexts;
    }
    /**
     * Returns the current context in string format.
     */
    get currentContextId() {
        return this._currentContextIds[0];
    }
    /**
     * Returns the current context and all parent contexts in string format.
     * This allow access to the nodes in the current and parent frames.
     */
    get currentContextIds() {
        return this._currentContextIds;
    }
    generateCurrentContextIds() {
        const names = [];
        for (let i = 0; i < this.contexts.length - 1; i++) {
            const contexts = this.contexts.slice(0, this.contexts.length - i);
            names.push(this.contextIdforContexts(contexts));
        }
        names.push('');
        this._currentContextIds = names;
    }
    contextIdforContexts(contexts) {
        return contexts ?
            contexts
                .map(context => (context.id === 0 && context.iterationId === 0) ?
                '' :
                `${context.frameName}-${context.iterationId}`)
                .join('/') :
            '';
    }
    /**
     * Enter a new frame, a new context is pushed on the current context list.
     * @param frameId new frame id
     */
    enterFrame(frameId) {
        if (this.contexts) {
            this.lastId++;
            this.contexts = this.contexts.slice();
            this.contexts.push(this.newFrame(this.lastId, frameId));
            this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));
        }
    }
    /**
     * Exit the current frame, the last context is removed from the current
     * context list.
     */
    exitFrame() {
        if (this.contexts && this.contexts.length > 1) {
            this.contexts = this.contexts.slice();
            this.contexts.splice(-1);
            this.currentContextIds.shift();
        }
        else {
            throw new Error('Cannot exit frame, the context is empty');
        }
    }
    /**
     * Enter the next iteration of a loop, the iteration id of last context is
     * increased.
     */
    nextIteration() {
        if (this.contexts && this.contexts.length > 0) {
            this.contexts = this.contexts.slice();
            this.lastId++;
            const context = Object.assign({}, this.contexts[this.contexts.length - 1]);
            context.iterationId += 1;
            context.id = this.lastId;
            this.contexts.splice(-1, 1, context);
            this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
        }
        else {
            throw new Error('Cannot increase frame iteration, the context is empty');
        }
    }
    getWeight(name) {
        return this.weightMap[name];
    }
    addTensorArray(tensorArray) {
        this.tensorArrayMap[tensorArray.id] = tensorArray;
    }
    getTensorArray(id) {
        return this.tensorArrayMap[id];
    }
    addTensorList(tensorList) {
        this.tensorListMap[tensorList.id] = tensorList;
    }
    getTensorList(id) {
        return this.tensorListMap[id];
    }
    dispose(keepIds) {
        for (const key in this.tensorArrayMap) {
            this.tensorArrayMap[key].clearAndClose(keepIds);
        }
        for (const key in this.tensorListMap) {
            this.tensorListMap[key].clearAndClose(keepIds);
        }
    }
}
//# sourceMappingURL=execution_context.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GraphExecutor": () => (/* binding */ GraphExecutor)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operations/executors/utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/* harmony import */ var _operations_operation_executor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operations/operation_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js");
/* harmony import */ var _execution_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./execution_context */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js");
/* harmony import */ var _model_analysis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model_analysis */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





class GraphExecutor {
    /**
     *
     * @param graph Graph the model or function graph to be executed.
     * @param parent When building function exector you need to set the parent
     * executor. Since the weights and function executor maps are set at parant
     * level, that function executor can access the function maps and weight maps
     * through the parent.
     */
    constructor(graph, parent) {
        this.graph = graph;
        this.parent = parent;
        this.compiledMap = new Map();
        this._weightMap = {};
        this.SEPERATOR = ',';
        this._functions = {};
        this._functionExecutorMap = {};
        this._outputs = graph.outputs;
        this._inputs = graph.inputs;
        this._initNodes = graph.initNodes;
        this._signature = graph.signature;
        this._functions = graph.functions;
        // create sub-graph executors
        if (graph.functions != null) {
            Object.keys(graph.functions).forEach(name => {
                this._functionExecutorMap[name] =
                    new GraphExecutor(graph.functions[name], this);
            });
        }
    }
    get weightIds() {
        return this.parent ? this.parent.weightIds : this._weightIds;
    }
    get functionExecutorMap() {
        return this.parent ? this.parent.functionExecutorMap :
            this._functionExecutorMap;
    }
    get weightMap() {
        return this.parent ? this.parent.weightMap : this._weightMap;
    }
    set weightMap(weightMap) {
        const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));
        this._weightIds = [].concat(...weightIds);
        this._weightMap = weightMap;
    }
    /**
     * Set `ResourceManager` shared by executors of a model.
     * @param resourceManager: `ResourceManager` of the `GraphModel`.
     */
    set resourceManager(resourceManager) {
        this._resourceManager = resourceManager;
    }
    get inputs() {
        return this._inputs.map(node => {
            return {
                name: node.name,
                shape: node.attrParams['shape'] ?
                    node.attrParams['shape'].value :
                    undefined,
                dtype: node.attrParams['dtype'] ?
                    node.attrParams['dtype'].value :
                    undefined
            };
        });
    }
    get outputs() {
        return this._outputs.map(node => {
            return {
                name: node.name,
                shape: node.attrParams['shape'] ?
                    node.attrParams['shape'].value :
                    undefined,
                dtype: node.attrParams['dtype'] ?
                    node.attrParams['dtype'].value :
                    undefined
            };
        });
    }
    get inputNodes() {
        return this._inputs.map(node => node.signatureKey || node.name);
    }
    get outputNodes() {
        return this._outputs.map((node) => {
            const name = node.signatureKey || node.name;
            return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;
        });
    }
    get functions() {
        return Object.keys(this._functions).reduce((map, key) => {
            map[key] = this._functions[key].signature;
            return map;
        }, {});
    }
    getCompilationKey(inputs, outputs) {
        const sortedInputs = inputs.map(node => node.name).sort();
        const sortedOutputs = outputs.map(node => node.name).sort();
        return sortedInputs.join(this.SEPERATOR) + '--' +
            sortedOutputs.join(this.SEPERATOR);
    }
    /**
     * Compiles the inference graph and returns the minimal set of nodes that are
     * required for execution, in the correct execution order.
     */
    compile(inputs, outputs) {
        const executionInfo = (0,_model_analysis__WEBPACK_IMPORTED_MODULE_4__.getExecutionSubgraph)(inputs, outputs, this.weightMap, this._initNodes);
        const { missingInputs, dynamicNode, syncInputs } = executionInfo;
        if (dynamicNode != null) {
            throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` +
                `the dynamic op '${dynamicNode.op}'. Please use ` +
                `model.executeAsync() instead. Alternatively, to avoid the ` +
                `dynamic ops, specify the inputs [${syncInputs}]`);
        }
        if (missingInputs.length > 0) {
            const outNames = outputs.map(n => n.name);
            const inNames = Object.keys(inputs);
            throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` +
                `[${inNames}]. Missing the following inputs: [${missingInputs}]`);
        }
        return (0,_model_analysis__WEBPACK_IMPORTED_MODULE_4__.getNodesInTopologicalOrder)(this.graph, this.weightMap, executionInfo);
    }
    /**
     * Executes the inference for given input tensors.
     * @param inputs Tensor map for the model inputs, keyed by the input node
     * names.
     * @param outputs Optional. output node name from the Tensorflow model, if
     * no outputs are specified, the default outputs of the model would be used.
     * You can inspect intermediate nodes of the model by adding them to the
     * outputs array.
     */
    execute(inputs, outputs) {
        inputs = this.mapInputs(inputs);
        const names = Object.keys(inputs).sort();
        this.checkInputs(inputs);
        this.checkInputShapeAndType(inputs);
        outputs = this.mapOutputs(outputs);
        this.checkOutputs(outputs);
        const inputNodes = names.map(name => this.graph.nodes[(0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.parseNodeName)(name)[0]]);
        const outputNodeNames = outputs.map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.parseNodeName)(name)[0]);
        let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);
        // If no outputs are specified, then use the default outputs of the model.
        if (outputNodes.length === 0) {
            outputNodes = this._outputs;
        }
        const compilationKey = this.getCompilationKey(inputNodes, outputNodes);
        // Do nothing if the compiled graph cache contains the input.
        let orderedNodes = this.compiledMap.get(compilationKey);
        if (orderedNodes == null) {
            orderedNodes = this.compile(inputs, outputNodes);
            this.compiledMap.set(compilationKey, orderedNodes);
        }
        const tensorArrayMap = {};
        const tensorListMap = {};
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
            const context = new _execution_context__WEBPACK_IMPORTED_MODULE_3__.ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);
            const tensorsMap = Object.assign({}, this.weightMap);
            Object.keys(inputs).forEach(name => {
                const [nodeName, index] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.parseNodeName)(name);
                const tensors = [];
                tensors[index] = inputs[name];
                tensorsMap[nodeName] = tensors;
            });
            const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
            const intermediateTensorConsumerCount = {};
            for (let i = 0; i < orderedNodes.length; i++) {
                const node = orderedNodes[i];
                if (!tensorsMap[node.name]) {
                    const tensors = (0,_operations_operation_executor__WEBPACK_IMPORTED_MODULE_2__.executeOp)(node, tensorsMap, context, this._resourceManager);
                    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.isPromise(tensors)) {
                        throw new Error(`The execution of the op '${node.op}' returned a promise. ` +
                            `Please use model.executeAsync() instead.`);
                    }
                    tensorsMap[node.name] = tensors;
                    this.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount);
                }
            }
            // dispose the context for the root executor
            if (this.parent == null) {
                context.dispose(tensorsToKeep);
            }
            return outputs.map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.getTensor)(name, tensorsMap, context));
        });
    }
    getFrozenTensorIds(tensorMap) {
        const ids = [].concat.apply([], Object.keys(tensorMap)
            .map(key => tensorMap[key])
            .map(tensors => tensors.map(tensor => tensor.id)));
        return new Set(ids);
    }
    checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {
        // Skip output nodes and any control flow nodes, since its dependency is
        // tricky to track correctly.
        if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {
            return;
        }
        tensorMap[nodeName].forEach(tensor => {
            if (tensor != null) {
                intermediateTensorConsumerCount[tensor.id] =
                    (intermediateTensorConsumerCount[tensor.id] || 0) +
                        node.children.length;
            }
        });
        node.inputs.forEach(input => {
            // Skip any control flow nodes, since its dependency is tricky to track
            // correctly.
            if (input.category !== 'control') {
                const tensors = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.getTensorsForCurrentContenxt)(input.name, tensorMap, context);
                if (tensors != null) {
                    tensors.forEach(tensor => {
                        if (tensor && !tensorsToKeep.has(tensor.id)) {
                            const count = intermediateTensorConsumerCount[tensor.id];
                            if (count === 1) {
                                tensor.dispose();
                                delete intermediateTensorConsumerCount[tensor.id];
                            }
                            else if (count != null) {
                                // only intermediate nodes has count set, inputs and weights are
                                // not.
                                intermediateTensorConsumerCount[tensor.id]--;
                            }
                        }
                    });
                }
            }
        });
    }
    /**
     * Executes the inference for given input tensors in Async fashion.
     * @param inputs Tensor map for the model inputs, keyed by the input node
     * names.
     * @param outputs output node name from the Tensorflow model, if no outputs
     * are specified, the default outputs of the model would be used. You can
     * inspect intermediate nodes of the model by adding them to the outputs
     * array.
     */
    async executeAsync(inputs, outputs) {
        return this._executeAsync(inputs, outputs);
    }
    /**
     * Executes the inference for given input tensors in Async fashion.
     * @param inputs Tensor map for the model inputs, keyed by the input node
     * names.
     * @param outputs Optional. output node name from the Tensorflow model,
     * if no outputs are specified, the default outputs of the model would be
     * used. You can inspect intermediate nodes of the model by adding them to the
     * outputs array.
     * @param isFunctionExecution Optional. Flag for executing a function.
     * @param tensorArrayMap Optional, global TensorArray map by id. Used for
     * function execution.
     * @param tensorArrayMap Optinal global TensorList map by id. Used for
     * function execution.
     */
    async _executeAsync(inputs, outputs, isFunctionExecution = false, tensorArrayMap = {}, tensorListMap = {}) {
        if (!isFunctionExecution) {
            inputs = this.mapInputs(inputs);
            this.checkInputs(inputs);
            this.checkInputShapeAndType(inputs);
            outputs = this.mapOutputs(outputs);
            this.checkOutputs(outputs);
        }
        const context = new _execution_context__WEBPACK_IMPORTED_MODULE_3__.ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);
        // Graph with control flow op requires runtime evaluation of the execution
        // order, while without control flow the execution order is pre-determined
        // in the compile method.
        const tensorMap = await this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);
        const results = outputs.map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.getTensor)(name, tensorMap, context));
        // dispose all the intermediate tensors
        const outputIds = results.map(t => t.id);
        const inputIds = Object.keys(inputs).map(name => inputs[name].id);
        const keepIds = new Set([...outputIds, ...inputIds, ...this.weightIds]);
        Object.keys(tensorMap).forEach(key => {
            const tensorArray = tensorMap[key];
            tensorArray.forEach(tensor => {
                if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {
                    tensor.dispose();
                }
            });
        });
        // dispose the context for the root executor
        if (this.parent == null) {
            context.dispose(keepIds);
        }
        return results;
    }
    async executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {
        const mappedInputs = inputs.reduce((map, tensor, index) => {
            map[this.inputs[index].name] = tensor;
            return map;
        }, {});
        return this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);
    }
    /**
     * When there are control flow nodes in the graph, the graph execution use
     * ExecutionContext to keep track of the frames and loop iterators.
     * @param inputs placeholder tensors for the graph.
     * @param context the execution context object for current execution.
     * @param outputNames Optional. output node name from the Tensorflow model,
     * if no outputs are specified, the default outputs of the model would be
     * used. You can inspect intermediate nodes of the model by adding them to the
     * outputs array.
     * @param isFunctionExecution Flag for executing a function.
     */
    async executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {
        const names = Object.keys(inputs);
        const inputNodes = names.map(name => this.graph.nodes[(0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.parseNodeName)(name)[0]]);
        const outputNodeNames = outputNames.map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.parseNodeName)(name)[0]);
        let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);
        // If no outputs are specified, then use the default outputs of the model.
        if (outputNodes.length === 0) {
            outputNodes = this._outputs;
        }
        const { usedNodes, missingInputs, dynamicNode, syncInputs } = (0,_model_analysis__WEBPACK_IMPORTED_MODULE_4__.getExecutionSubgraph)(inputs, outputNodes, this.weightMap, this._initNodes);
        // First nodes to execute include inputNodes, weights, and initNodes.
        const stack = [
            ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])
        ].map(node => {
            return { node, contexts: context.currentContext };
        });
        const tensorsMap = Object.assign({}, this.weightMap);
        Object.keys(inputs).forEach(name => {
            const [nodeName, index] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.parseNodeName)(name);
            const tensors = [];
            tensors[index] = inputs[name];
            tensorsMap[nodeName] = tensors;
        });
        const intermediateTensorConsumerCount = {};
        const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);
        const added = {};
        while (stack.length > 0) {
            const promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount, usedNodes);
            await Promise.all(promises);
        }
        if (dynamicNode == null && !isFunctionExecution) {
            console.warn(`This model execution did not contain any nodes with control flow ` +
                `or dynamic output shapes. You can use model.execute() instead.`);
        }
        const missingOutputs = outputNodes
            .filter(node => !(0,_model_analysis__WEBPACK_IMPORTED_MODULE_4__.isControlFlow)(node) &&
            !(0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.getTensor)(node.name, tensorsMap, context))
            .map(node => node.name);
        if (missingOutputs.length > 0) {
            let alternativeMsg = '';
            if (dynamicNode != null) {
                alternativeMsg =
                    `Alternatively, to avoid the dynamic ops, use model.execute() ` +
                        `and specify the inputs [${syncInputs}]`;
            }
            throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` +
                `inputs [${names}]. Consider providing the following inputs: ` +
                `[${missingInputs}]. ${alternativeMsg}`);
        }
        return tensorsMap;
    }
    processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {
        const promises = [];
        while (stack.length > 0) {
            const item = stack.pop();
            context.currentContext = item.contexts;
            let nodeName = '';
            // The tensor of the Enter op with isConstant set should be set
            // in the parent scope, so it will be available as constant for the
            // whole loop.
            if (item.node.op === 'Enter' &&
                (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('isConstant', item.node, tensorMap, context)) {
                [nodeName] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.getNodeNameAndIndex)(item.node.name, context);
            }
            // only process nodes that are not in the tensorMap yet, this include
            // inputNodes and internal initNodes.
            if (tensorMap[item.node.name] == null) {
                const tensors = (0,_operations_operation_executor__WEBPACK_IMPORTED_MODULE_2__.executeOp)(item.node, tensorMap, context, this._resourceManager);
                if (!nodeName) {
                    [nodeName] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.getNodeNameAndIndex)(item.node.name, context);
                }
                const currentContext = context.currentContext;
                if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.isPromise(tensors)) {
                    promises.push(tensors.then(t => {
                        tensorMap[nodeName] = t;
                        context.currentContext = currentContext;
                        this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
                        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
                        return t;
                    }));
                }
                else {
                    tensorMap[nodeName] = tensors;
                    this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);
                    this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
                }
            }
            else {
                this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);
            }
        }
        return promises;
    }
    processChildNodes(node, stack, context, tensorMap, added, usedNodes) {
        node.children.forEach((childNode) => {
            const [nodeName,] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.getNodeNameAndIndex)(childNode.name, context);
            if (added[nodeName] || !usedNodes.has(childNode.name)) {
                return;
            }
            // Merge op can be pushed if any of its inputs has value.
            if (childNode.op === 'Merge') {
                if (childNode.inputNames.some(name => {
                    return !!(0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.getTensor)(name, tensorMap, context);
                })) {
                    added[nodeName] = true;
                    stack.push({ contexts: context.currentContext, node: childNode });
                }
            }
            else // Otherwise all inputs must to have value.
             if (childNode.inputNames.every(name => {
                return !!(0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.getTensor)(name, tensorMap, context);
            })) {
                added[nodeName] = true;
                stack.push({ contexts: context.currentContext, node: childNode });
            }
        });
    }
    /**
     * Releases the memory used by the weight tensors.
     */
    dispose() {
        Object.keys(this.weightMap)
            .forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));
    }
    checkInputShapeAndType(inputs) {
        Object.keys(inputs).forEach(name => {
            const input = inputs[name];
            const [nodeName,] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.parseNodeName)(name);
            const node = this.graph.nodes[nodeName];
            if (node.attrParams['shape'] && node.attrParams['shape'].value) {
                const shape = node.attrParams['shape'].value;
                const match = shape.length === input.shape.length &&
                    input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);
                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(match, () => `The shape of dict['${node.name}'] provided in ` +
                    `model.execute(dict) must be [${shape}], but was ` +
                    `[${input.shape}]`);
            }
            if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {
                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(input.dtype === node.attrParams['dtype'].value, () => `The dtype of dict['${node.name}'] provided in ` +
                    `model.execute(dict) must be ` +
                    `${node.attrParams['dtype'].value}, but was ${input.dtype}`);
            }
        });
    }
    mapInputs(inputs) {
        const result = {};
        for (const inputName in inputs) {
            if (this._signature != null && this._signature.inputs != null &&
                this._signature.inputs[inputName] != null) {
                const tensor = this._signature.inputs[inputName];
                result[tensor.name] = inputs[inputName];
            }
            else {
                result[inputName] = inputs[inputName];
            }
        }
        return result;
    }
    checkInputs(inputs) {
        const notInGraph = Object.keys(inputs).filter(name => {
            const [nodeName] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.parseNodeName)(name);
            return this.graph.nodes[nodeName] == null;
        });
        if (notInGraph.length > 0) {
            throw new Error(`The dict provided in model.execute(dict) has ` +
                `keys: [${notInGraph}] that are not part of graph`);
        }
    }
    mapOutputs(outputs) {
        return outputs.map(name => {
            if (this._signature != null && this._signature.outputs != null &&
                this._signature.outputs[name] != null) {
                const tensor = this._signature.outputs[name];
                return tensor.name;
            }
            return name;
        }, {});
    }
    checkOutputs(outputs) {
        outputs.forEach(name => {
            const [normalizedName] = (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_1__.parseNodeName)(name);
            if (!this.graph.nodes[normalizedName]) {
                throw new Error(`The output '${name}' is not found in the graph`);
            }
        });
    }
}
//# sourceMappingURL=graph_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TFHUB_SEARCH_PARAM": () => (/* binding */ TFHUB_SEARCH_PARAM),
/* harmony export */   "DEFAULT_MODEL_NAME": () => (/* binding */ DEFAULT_MODEL_NAME),
/* harmony export */   "GraphModel": () => (/* binding */ GraphModel),
/* harmony export */   "loadGraphModel": () => (/* binding */ loadGraphModel)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _operations_operation_mapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operations/operation_mapper */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js");
/* harmony import */ var _graph_executor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./graph_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js");
/* harmony import */ var _resource_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resource_manager */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const TFHUB_SEARCH_PARAM = '?tfjs-format=file';
const DEFAULT_MODEL_NAME = 'model.json';
/**
 * A `tf.GraphModel` is a directed, acyclic graph built from a
 * SavedModel GraphDef and allows inference execution.
 *
 * A `tf.GraphModel` can only be created by loading from a model converted from
 * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using
 * the command line converter tool and loaded via `tf.loadGraphModel`.
 *
 * @doc {heading: 'Models', subheading: 'Classes'}
 */
class GraphModel {
    /**
     * @param modelUrl url for the model, or an `io.IOHandler`.
     * @param weightManifestUrl url for the weight file generated by
     * scripts/convert.py script.
     * @param requestOption options for Request, which allows to send credentials
     * and custom headers.
     * @param onProgress Optional, progress callback function, fired periodically
     * before the load is completed.
     */
    constructor(modelUrl, loadOptions = {}) {
        this.modelUrl = modelUrl;
        this.loadOptions = loadOptions;
        this.version = 'n/a';
        if (loadOptions == null) {
            this.loadOptions = {};
        }
        this.resourceManager = new _resource_manager__WEBPACK_IMPORTED_MODULE_3__.ResourceManager();
    }
    // Returns the version information for the tensorflow model GraphDef.
    get modelVersion() {
        return this.version;
    }
    get inputNodes() {
        return this.executor.inputNodes;
    }
    get outputNodes() {
        return this.executor.outputNodes;
    }
    get inputs() {
        return this.executor.inputs;
    }
    get outputs() {
        return this.executor.outputs;
    }
    get weights() {
        return this.executor.weightMap;
    }
    get metadata() {
        return this.artifacts.userDefinedMetadata;
    }
    get modelSignature() {
        return this.signature;
    }
    findIOHandler() {
        const path = this.modelUrl;
        if (path.load != null) {
            // Path is an IO Handler.
            this.handler = path;
        }
        else if (this.loadOptions.requestInit != null) {
            this.handler = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.browserHTTPRequest(path, this.loadOptions);
        }
        else {
            const handlers = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.getLoadHandlers(path, this.loadOptions);
            if (handlers.length === 0) {
                // For backward compatibility: if no load handler can be found,
                // assume it is a relative http path.
                handlers.push(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.browserHTTPRequest(path, this.loadOptions));
            }
            else if (handlers.length > 1) {
                throw new Error(`Found more than one (${handlers.length}) load handlers for ` +
                    `URL '${[path]}'`);
            }
            this.handler = handlers[0];
        }
    }
    /**
     * Loads the model and weight files, construct the in memory weight map and
     * compile the inference graph.
     */
    async load() {
        this.findIOHandler();
        if (this.handler.load == null) {
            throw new Error('Cannot proceed with model loading because the IOHandler provided ' +
                'does not have the `load` method implemented.');
        }
        const artifacts = await this.handler.load();
        return this.loadSync(artifacts);
    }
    /**
     * Synchronously construct the in memory weight map and
     * compile the inference graph. Also initialize hashtable if any.
     *
     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
     */
    loadSync(artifacts) {
        this.artifacts = artifacts;
        const graph = this.artifacts.modelTopology;
        let signature;
        if (this.artifacts.userDefinedMetadata != null &&
            this.artifacts.userDefinedMetadata.signature != null) {
            signature = // tslint:disable-next-line:no-any
                this.artifacts.userDefinedMetadata.signature;
        }
        else {
            signature = this.artifacts.signature;
        }
        this.signature = signature;
        this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;
        const weightMap = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
        this.executor = new _graph_executor__WEBPACK_IMPORTED_MODULE_2__.GraphExecutor(_operations_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.OperationMapper.Instance.transformGraph(graph, this.signature));
        this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);
        // Attach a model-level resourceManager to each executor to share resources,
        // such as `HashTable`.
        this.executor.resourceManager = this.resourceManager;
        if (artifacts.modelInitializer != null &&
            artifacts.modelInitializer.node != null) {
            const initializer = _operations_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.OperationMapper.Instance.transformGraph(artifacts.modelInitializer);
            this.initializer = new _graph_executor__WEBPACK_IMPORTED_MODULE_2__.GraphExecutor(initializer);
            this.initializer.weightMap = this.executor.weightMap;
            // Attach a model-level resourceManager to the initializer, the
            // hashTables created from when executing the initializer will be stored
            // in the resourceManager.
            this.initializer.resourceManager = this.resourceManager;
            this.initializer.executeAsync({}, []);
        }
        return true;
    }
    /**
     * Save the configuration and/or weights of the GraphModel.
     *
     * An `IOHandler` is an object that has a `save` method of the proper
     * signature defined. The `save` method manages the storing or
     * transmission of serialized data ("artifacts") that represent the
     * model's topology and weights onto or via a specific medium, such as
     * file downloads, local storage, IndexedDB in the web browser and HTTP
     * requests to a server. TensorFlow.js provides `IOHandler`
     * implementations for a number of frequently used saving mediums, such as
     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
     * for more details.
     *
     * This method also allows you to refer to certain types of `IOHandler`s
     * as URL-like string shortcuts, such as 'localstorage://' and
     * 'indexeddb://'.
     *
     * Example 1: Save `model`'s topology and weights to browser [local
     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
     * then load it back.
     *
     * ```js
     * const modelUrl =
     *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
     * const model = await tf.loadGraphModel(modelUrl);
     * const zeros = tf.zeros([1, 224, 224, 3]);
     * model.predict(zeros).print();
     *
     * const saveResults = await model.save('localstorage://my-model-1');
     *
     * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');
     * console.log('Prediction from loaded model:');
     * model.predict(zeros).print();
     * ```
     *
     * @param handlerOrURL An instance of `IOHandler` or a URL-like,
     * scheme-based string shortcut for `IOHandler`.
     * @param config Options for saving the model.
     * @returns A `Promise` of `SaveResult`, which summarizes the result of
     * the saving, such as byte sizes of the saved artifacts for the model's
     *   topology and weight values.
     *
     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
     */
    async save(handlerOrURL, config) {
        if (typeof handlerOrURL === 'string') {
            const handlers = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.getSaveHandlers(handlerOrURL);
            if (handlers.length === 0) {
                throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);
            }
            else if (handlers.length > 1) {
                throw new Error(`Found more than one (${handlers.length}) save handlers for ` +
                    `URL '${handlerOrURL}'`);
            }
            handlerOrURL = handlers[0];
        }
        if (handlerOrURL.save == null) {
            throw new Error('GraphModel.save() cannot proceed because the IOHandler ' +
                'provided does not have the `save` attribute defined.');
        }
        return handlerOrURL.save(this.artifacts);
    }
    /**
     * Execute the inference for the input tensors.
     *
     * @param input The input tensors, when there is single input for the model,
     * inputs param should be a `tf.Tensor`. For models with mutliple inputs,
     * inputs params should be in either `tf.Tensor`[] if the input order is
     * fixed, or otherwise NamedTensorMap format.
     *
     * For model with multiple inputs, we recommend you use NamedTensorMap as the
     * input type, if you use `tf.Tensor`[], the order of the array needs to
     * follow the
     * order of inputNodes array. @see {@link GraphModel.inputNodes}
     *
     * You can also feed any intermediate nodes using the NamedTensorMap as the
     * input type. For example, given the graph
     *    InputNode => Intermediate => OutputNode,
     * you can execute the subgraph Intermediate => OutputNode by calling
     *    model.execute('IntermediateNode' : tf.tensor(...));
     *
     * This is useful for models that uses tf.dynamic_rnn, where the intermediate
     * state needs to be fed manually.
     *
     * For batch inference execution, the tensors for each input need to be
     * concatenated together. For example with mobilenet, the required input shape
     * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
     * If we are provide a batched data of 100 images, the input tensor should be
     * in the shape of [100, 244, 244, 3].
     *
     * @param config Prediction configuration for specifying the batch size and
     * output node names. Currently the batch size option is ignored for graph
     * model.
     *
     * @returns Inference result tensors. The output would be single `tf.Tensor`
     * if model has single output node, otherwise Tensor[] or NamedTensorMap[]
     * will be returned for model with multiple outputs.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    predict(inputs, config) {
        return this.execute(inputs, this.outputNodes);
    }
    normalizeInputs(inputs) {
        if (!(inputs instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tensor) && !Array.isArray(inputs)) {
            // The input is already a NamedTensorMap.
            return inputs;
        }
        inputs = Array.isArray(inputs) ? inputs : [inputs];
        if (inputs.length !== this.inputNodes.length) {
            throw new Error('Input tensor count mismatch,' +
                `the graph model has ${this.inputNodes.length} placeholders, ` +
                `while there are ${inputs.length} input tensors.`);
        }
        return this.inputNodes.reduce((map, inputName, i) => {
            map[inputName] = inputs[i];
            return map;
        }, {});
    }
    normalizeOutputs(outputs) {
        outputs = outputs || this.outputNodes;
        return !Array.isArray(outputs) ? [outputs] : outputs;
    }
    /**
     * Executes inference for the model for given input tensors.
     * @param inputs tensor, tensor array or tensor map of the inputs for the
     * model, keyed by the input node names.
     * @param outputs output node name from the Tensorflow model, if no
     * outputs are specified, the default outputs of the model would be used.
     * You can inspect intermediate nodes of the model by adding them to the
     * outputs array.
     *
     * @returns A single tensor if provided with a single output or no outputs
     * are provided and there is only one default output, otherwise return a
     * tensor array. The order of the tensor array is the same as the outputs
     * if provided, otherwise the order of outputNodes attribute of the model.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    execute(inputs, outputs) {
        inputs = this.normalizeInputs(inputs);
        outputs = this.normalizeOutputs(outputs);
        const result = this.executor.execute(inputs, outputs);
        return result.length > 1 ? result : result[0];
    }
    /**
     * Executes inference for the model for given input tensors in async
     * fashion, use this method when your model contains control flow ops.
     * @param inputs tensor, tensor array or tensor map of the inputs for the
     * model, keyed by the input node names.
     * @param outputs output node name from the Tensorflow model, if no outputs
     * are specified, the default outputs of the model would be used. You can
     * inspect intermediate nodes of the model by adding them to the outputs
     * array.
     *
     * @returns A Promise of single tensor if provided with a single output or
     * no outputs are provided and there is only one default output, otherwise
     * return a tensor map.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    async executeAsync(inputs, outputs) {
        inputs = this.normalizeInputs(inputs);
        outputs = this.normalizeOutputs(outputs);
        const result = await this.executor.executeAsync(inputs, outputs);
        return result.length > 1 ? result : result[0];
    }
    convertTensorMapToTensorsMap(map) {
        return Object.keys(map).reduce((newMap, key) => {
            newMap[key] = [map[key]];
            return newMap;
        }, {});
    }
    /**
     * Releases the memory used by the weight tensors and resourceManager.
     *
     * @doc {heading: 'Models', subheading: 'Classes'}
     */
    dispose() {
        this.executor.dispose();
        if (this.initializer) {
            this.initializer.dispose();
        }
        this.resourceManager.dispose();
    }
}
/**
 * Load a graph model given a URL to the model definition.
 *
 * Example of loading MobileNetV2 from a URL and making a prediction with a
 * zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
 * const model = await tf.loadGraphModel(modelUrl);
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 *
 * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with
 * a zeros input:
 *
 * ```js
 * const modelUrl =
 *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';
 * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});
 * const zeros = tf.zeros([1, 224, 224, 3]);
 * model.predict(zeros).print();
 * ```
 * @param modelUrl The url or an `io.IOHandler` that loads the model.
 * @param options Options for the HTTP request, which allows to send credentials
 *    and custom headers.
 *
 * @doc {heading: 'Models', subheading: 'Loading'}
 */
async function loadGraphModel(modelUrl, options = {}) {
    if (modelUrl == null) {
        throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' +
            'or an IOHandler that loads the model');
    }
    if (options == null) {
        options = {};
    }
    if (options.fromTFHub) {
        if (modelUrl.load == null) {
            if (!modelUrl.endsWith('/')) {
                modelUrl = modelUrl + '/';
            }
            modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;
        }
    }
    const model = new GraphModel(modelUrl, options);
    await model.load();
    return model;
}
//# sourceMappingURL=graph_model.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HashTable": () => (/* binding */ HashTable)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Hashtable contains a set of tensors, which can be accessed by key.
 */
class HashTable {
    /**
     * Constructor of HashTable. Creates a hash table.
     *
     * @param keyDType `dtype` of the table keys.
     * @param valueDType `dtype` of the table values.
     */
    constructor(keyDType, valueDType) {
        this.keyDType = keyDType;
        this.valueDType = valueDType;
        this.handle = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(0);
        // tslint:disable-next-line: no-any
        this.tensorMap = new Map();
        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(this.handle);
    }
    get id() {
        return this.handle.id;
    }
    /**
     * Dispose the tensors and handle and clear the hashtable.
     */
    clearAndClose() {
        this.tensorMap.forEach(value => value.dispose());
        this.tensorMap.clear();
        this.handle.dispose();
    }
    /**
     * The number of items in the hash table.
     */
    size() {
        return this.tensorMap.size;
    }
    /**
     * Replaces the contents of the table with the specified keys and values.
     * @param keys Keys to store in the hashtable.
     * @param values Values to store in the hashtable.
     */
    async import(keys, values) {
        this.checkKeyAndValueTensor(keys, values);
        // We only store the primitive values of the keys, this allows lookup
        // to be O(1).
        const $keys = await keys.data();
        // Clear the hashTable before inserting new values.
        this.tensorMap.forEach(value => value.dispose());
        this.tensorMap.clear();
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
            const $values = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack)(values);
            const keysLength = $keys.length;
            const valuesLength = $values.length;
            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` +
                `${keysLength} elements, the values has ${valuesLength} ` +
                `elements.`);
            for (let i = 0; i < keysLength; i++) {
                const key = $keys[i];
                const value = $values[i];
                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(value);
                this.tensorMap.set(key, value);
            }
            return this.handle;
        });
    }
    /**
     * Looks up keys in a hash table, outputs the corresponding values.
     *
     * Performs batch lookups, for every element in the key tensor, `find`
     * stacks the corresponding value into the return tensor.
     *
     * If an element is not present in the table, the given `defaultValue` is
     * used.
     *
     * @param keys Keys to look up. Must have the same type as the keys of the
     *     table.
     * @param defaultValue The scalar `defaultValue` is the value output for keys
     *     not present in the table. It must also be of the same type as the
     *     table values.
     */
    async find(keys, defaultValue) {
        this.checkKeyAndValueTensor(keys, defaultValue);
        const $keys = await keys.data();
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
            const result = [];
            for (let i = 0; i < $keys.length; i++) {
                const key = $keys[i];
                const value = this.findWithDefault(key, defaultValue);
                result.push(value);
            }
            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack)(result);
        });
    }
    // tslint:disable-next-line: no-any
    findWithDefault(key, defaultValue) {
        const result = this.tensorMap.get(key);
        return result != null ? result : defaultValue;
    }
    checkKeyAndValueTensor(key, value) {
        if (key.dtype !== this.keyDType) {
            throw new Error(`Expect key dtype ${this.keyDType}, but got ` +
                `${key.dtype}`);
        }
        if (value.dtype !== this.valueDType) {
            throw new Error(`Expect value dtype ${this.valueDType}, but got ` +
                `${value.dtype}`);
        }
    }
}
//# sourceMappingURL=hash_table.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getExecutionSubgraph": () => (/* binding */ getExecutionSubgraph),
/* harmony export */   "getNodesInTopologicalOrder": () => (/* binding */ getNodesInTopologicalOrder),
/* harmony export */   "isControlFlow": () => (/* binding */ isControlFlow),
/* harmony export */   "isDynamicShape": () => (/* binding */ isDynamicShape),
/* harmony export */   "isHashTable": () => (/* binding */ isHashTable)
/* harmony export */ });
/* harmony import */ var _operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operations/executors/utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Given graph inputs and desired outputs, find the minimal set of nodes
 * to execute in order to compute the outputs. In addition return other useful
 * info such:
 * - Missing inputs needed to compute the output.
 * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).
 * - Alternative inputs in order to avoid async (dynamic op) execution.
 */
function getExecutionSubgraph(inputs, outputs, weightMap, initNodes) {
    const usedNodes = new Set();
    const missingInputs = [];
    let dynamicNode = null;
    let syncInputs = null;
    // Start with the outputs, going backwards and find all the nodes that are
    // needed to compute those outputs.
    const seen = new Set();
    const inputNodeNames = Object.keys(inputs).map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__.parseNodeName)(name)[0]);
    let initNodeNames = [];
    if (initNodes != null) {
        initNodeNames = initNodes.map(node => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__.parseNodeName)(node.name)[0]);
    }
    const frontier = [...outputs];
    while (frontier.length > 0) {
        const node = frontier.pop();
        if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {
            if (dynamicNode == null) {
                dynamicNode = node;
                syncInputs = dynamicNode.children.map(child => child.name)
                    .filter(name => usedNodes.has(name));
            }
        }
        usedNodes.add(node.name);
        // Weights are dead end since we already have their values.
        if (weightMap[node.name] != null) {
            continue;
        }
        // This node is a dead end since it's one of the user-provided inputs.
        if (inputNodeNames.indexOf(node.name) !== -1) {
            continue;
        }
        // This node is a dead end since it doesn't have any inputs.
        if (initNodeNames.indexOf(node.name) !== -1) {
            continue;
        }
        if (node.inputs.length === 0) {
            missingInputs.push(node.name);
            continue;
        }
        node.inputs.forEach(input => {
            // Don't add to the frontier if it is already there.
            if (seen.has(input.name)) {
                return;
            }
            seen.add(input.name);
            frontier.push(input);
        });
    }
    return { inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs };
}
/**
 * Given the execution info, return a list of nodes in topological order that
 * need to be executed to compute the output.
 */
function getNodesInTopologicalOrder(graph, weightMap, executionInfo) {
    const { usedNodes, inputs } = executionInfo;
    const frontier = [];
    const inputNodes = Object.keys(inputs)
        .map(name => (0,_operations_executors_utils__WEBPACK_IMPORTED_MODULE_0__.parseNodeName)(name)[0])
        .map(name => graph.nodes[name]);
    const initNodes = graph.initNodes;
    inputNodes.forEach(input => {
        if (usedNodes.has(input.name)) {
            frontier.push(input);
        }
    });
    graph.weights.forEach(weight => {
        if (usedNodes.has(weight.name)) {
            frontier.push(weight);
        }
    });
    if (initNodes != null) {
        initNodes.forEach(node => {
            if (usedNodes.has(node.name)) {
                frontier.push(node);
            }
        });
    }
    const seen = new Set();
    const orderedNodes = [];
    while (frontier.length > 0) {
        const node = frontier.pop();
        seen.add(node.name);
        if (!weightMap[node.name]) {
            orderedNodes.push(node);
        }
        node.children.forEach(child => {
            if (!seen.has(child.name) && usedNodes.has(child.name) &&
                child.inputs.every(input => seen.has(input.name))) {
                frontier.push(child);
            }
        });
    }
    return orderedNodes;
}
const CONTROL_FLOW_OPS = [
    'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',
    'StatelessWhile', 'if', 'While'
];
const DYNAMIC_SHAPE_OPS = [
    'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'
];
const HASH_TABLE_OPS = [
    'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',
    'LookupTableFind', 'LookupTableFindV2'
];
function isControlFlow(node) {
    return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;
}
function isDynamicShape(node) {
    return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;
}
function isHashTable(node) {
    return HASH_TABLE_OPS.indexOf(node.op) >= 0;
}
//# sourceMappingURL=model_analysis.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResourceManager": () => (/* binding */ ResourceManager)
/* harmony export */ });
/**
 * Contains global resources of a model.
 */
class ResourceManager {
    constructor(hashTableNameToHandle = {}, hashTableMap = {}) {
        this.hashTableNameToHandle = hashTableNameToHandle;
        this.hashTableMap = hashTableMap;
    }
    /**
     * Register a `HashTable` in the resource manager.
     *
     * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,
     * where id is the table handle tensor's id.
     *
     * @param name Op node name that creates the `HashTable`.
     * @param hashTable The `HashTable` to be added to resource manager.
     */
    addHashTable(name, hashTable) {
        this.hashTableNameToHandle[name] = hashTable.handle;
        this.hashTableMap[hashTable.id] = hashTable;
    }
    /**
     * Get the table handle by node name.
     * @param name Op node name that creates the `HashTable`. This name is also
     *     used in the inputs list of lookup and import `HashTable` ops.
     */
    getHashTableHandleByName(name) {
        return this.hashTableNameToHandle[name];
    }
    /**
     * Get the actual `HashTable` by its handle tensor's id.
     * @param id The id of the handle tensor.
     */
    getHashTableById(id) {
        return this.hashTableMap[id];
    }
    /**
     * Dispose `ResourceManager`, including its hashTables and tensors in them.
     */
    dispose() {
        for (const key in this.hashTableMap) {
            this.hashTableMap[key].clearAndClose();
            delete this.hashTableMap[key];
        }
        for (const name in this.hashTableNameToHandle) {
            this.hashTableNameToHandle[name].dispose();
            delete this.hashTableNameToHandle[name];
        }
    }
}
//# sourceMappingURL=resource_manager.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TensorArray": () => (/* binding */ TensorArray)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _tensor_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor_utils */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * The TensorArray object keeps an array of Tensors.  It
 * allows reading from the array and writing to the array.
 */
class TensorArray {
    constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {
        this.name = name;
        this.dtype = dtype;
        this.maxSize = maxSize;
        this.elementShape = elementShape;
        this.identicalElementShapes = identicalElementShapes;
        this.dynamicSize = dynamicSize;
        this.clearAfterRead = clearAfterRead;
        this.tensors = [];
        this.closed_ = false;
        this.idTensor = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(0);
        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(this.idTensor);
    }
    get id() {
        return this.idTensor.id;
    }
    get closed() {
        return this.closed_;
    }
    /**
     * Dispose the tensors and idTensor and mark the TensoryArray as closed.
     */
    clearAndClose(keepIds) {
        this.tensors.forEach(tensor => {
            if (keepIds == null || !keepIds.has(tensor.tensor.id)) {
                tensor.tensor.dispose();
            }
        });
        this.tensors = [];
        this.closed_ = true;
        this.idTensor.dispose();
    }
    size() {
        return this.tensors.length;
    }
    /**
     * Read the value at location index in the TensorArray.
     * @param index Number the index to read from.
     */
    read(index) {
        if (this.closed_) {
            throw new Error(`TensorArray ${this.name} has already been closed.`);
        }
        if (index < 0 || index >= this.size()) {
            throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);
        }
        const tensorWithState = this.tensors[index];
        if (tensorWithState.cleared) {
            throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` +
                `(perhaps try setting clear_after_read = false?).`);
        }
        if (this.clearAfterRead) {
            tensorWithState.cleared = true;
        }
        tensorWithState.read = true;
        return tensorWithState.tensor;
    }
    /**
     * Helper method to read multiple tensors from the specified indices.
     */
    readMany(indices) {
        return indices.map(index => this.read(index));
    }
    /**
     * Write value into the index of the TensorArray.
     * @param index number the index to write to.
     * @param tensor
     */
    write(index, tensor) {
        if (this.closed_) {
            throw new Error(`TensorArray ${this.name} has already been closed.`);
        }
        if (index < 0 || !this.dynamicSize && index >= this.maxSize) {
            throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);
        }
        const t = this.tensors[index] || {};
        if (tensor.dtype !== this.dtype) {
            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},
          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);
        }
        // Set the shape for the first time write to unknow shape tensor array
        if (this.size() === 0 &&
            (this.elementShape == null || this.elementShape.length === 0)) {
            this.elementShape = tensor.shape;
        }
        (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);
        if (t.read) {
            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);
        }
        if (t.written) {
            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);
        }
        t.tensor = tensor;
        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(tensor);
        t.written = true;
        this.tensors[index] = t;
    }
    /**
     * Helper method to write multiple tensors to the specified indices.
     */
    writeMany(indices, tensors) {
        if (indices.length !== tensors.length) {
            throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` +
                `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);
        }
        indices.forEach((i, index) => this.write(i, tensors[index]));
    }
    /**
     * Return selected values in the TensorArray as a packed Tensor. All of
     * selected values must have been written and their shapes must all match.
     * @param [indices] number[] Optional. Taking values in [0, max_value). If the
     *    TensorArray is not dynamic, max_value=size(). If not specified returns
     *    all tensors in the original order.
     * @param [dtype]
     */
    gather(indices, dtype) {
        if (!!dtype && dtype !== this.dtype) {
            throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);
        }
        if (!indices) {
            indices = [];
            for (let i = 0; i < this.size(); i++) {
                indices.push(i);
            }
        }
        else {
            indices = indices.slice(0, this.size());
        }
        if (indices.length === 0) {
            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor)([], [0].concat(this.elementShape));
        }
        // Read all the PersistentTensors into a vector to keep track of
        // their memory.
        const tensors = this.readMany(indices);
        (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack)(tensors, 0);
    }
    /**
     * Return the values in the TensorArray as a concatenated Tensor.
     */
    concat(dtype) {
        if (!!dtype && dtype !== this.dtype) {
            throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);
        }
        if (this.size() === 0) {
            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor)([], [0].concat(this.elementShape));
        }
        const indices = [];
        for (let i = 0; i < this.size(); i++) {
            indices.push(i);
        }
        // Collect all the tensors from the tensors array.
        const tensors = this.readMany(indices);
        (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat)(tensors, 0);
    }
    /**
     * Scatter the values of a Tensor in specific indices of a TensorArray.
     * @param indices nummber[] values in [0, max_value). If the
     *    TensorArray is not dynamic, max_value=size().
     * @param tensor Tensor input tensor.
     */
    scatter(indices, tensor) {
        if (tensor.dtype !== this.dtype) {
            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
        }
        if (indices.length !== tensor.shape[0]) {
            throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);
        }
        const maxIndex = Math.max(...indices);
        if (!this.dynamicSize && maxIndex >= this.maxSize) {
            throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);
        }
        this.writeMany(indices, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack)(tensor, 0));
    }
    /**
     * Split the values of a Tensor into the TensorArray.
     * @param length number[] with the lengths to use when splitting value along
     *    its first dimension.
     * @param tensor Tensor, the tensor to split.
     */
    split(length, tensor) {
        if (tensor.dtype !== this.dtype) {
            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);
        }
        let totalLength = 0;
        const cumulativeLengths = length.map(len => {
            totalLength += len;
            return totalLength;
        });
        if (totalLength !== tensor.shape[0]) {
            throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${totalLength}, and tensor's shape is: ${tensor.shape}`);
        }
        if (!this.dynamicSize && length.length !== this.maxSize) {
            throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` +
                'and the TensorArray is not marked as dynamically resizeable');
        }
        const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
        const tensors = [];
        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
            tensor = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(tensor, [1, totalLength, elementPerRow]);
            for (let i = 0; i < length.length; ++i) {
                const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];
                const indices = [0, previousLength, 0];
                const sizes = [1, length[i], elementPerRow];
                tensors[i] = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice)(tensor, indices, sizes), this.elementShape);
            }
            return tensors;
        });
        const indices = [];
        for (let i = 0; i < length.length; i++) {
            indices[i] = i;
        }
        this.writeMany(indices, tensors);
    }
}
//# sourceMappingURL=tensor_array.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TensorList": () => (/* binding */ TensorList),
/* harmony export */   "fromTensor": () => (/* binding */ fromTensor),
/* harmony export */   "reserve": () => (/* binding */ reserve),
/* harmony export */   "scatter": () => (/* binding */ scatter),
/* harmony export */   "split": () => (/* binding */ split)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _tensor_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor_utils */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * TensorList stores a container of `tf.Tensor` objects, which are accessible
 * via tensors field.
 *
 * In order to get a copy of the underlying list, use the copy method:
 * ```
 *    TensorList b = a.copy();
 *    b.tensors().pushBack(t);  // This does not modify a.tensors().
 * ```
 *
 * Note that this is not a deep copy: the memory locations of the underlying
 * tensors will still point to the same locations of the corresponding tensors
 * in the original.
 */
class TensorList {
    /**
     *
     * @param tensors list of tensors
     * @param elementShape shape of each tensor
     * @param elementDtype data type of each tensor
     * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1
     *   meaning that the size of `tensors` is unbounded.
     */
    constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {
        this.tensors = tensors;
        this.elementShape = elementShape;
        this.elementDtype = elementDtype;
        if (tensors != null) {
            tensors.forEach(tensor => {
                if (elementDtype !== tensor.dtype) {
                    throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);
                }
                (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(elementShape, tensor.shape, 'TensorList shape mismatch: ');
                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(tensor);
            });
        }
        this.idTensor = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(0);
        this.maxNumElements = maxNumElements;
        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(this.idTensor);
    }
    get id() {
        return this.idTensor.id;
    }
    /**
     * Get a new TensorList containing a copy of the underlying tensor container.
     */
    copy() {
        return new TensorList([...this.tensors], this.elementShape, this.elementDtype);
    }
    /**
     * Dispose the tensors and idTensor and clear the tensor list.
     */
    clearAndClose(keepIds) {
        this.tensors.forEach(tensor => {
            if (keepIds == null || !keepIds.has(tensor.id)) {
                tensor.dispose();
            }
        });
        this.tensors.length = 0;
        this.idTensor.dispose();
    }
    /**
     * The size of the tensors in the tensor list.
     */
    size() {
        return this.tensors.length;
    }
    /**
     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)
     * tf.Tensor.
     * @param elementShape shape of each tensor
     * @param elementDtype data type of each tensor
     * @param numElements the number of elements to stack
     */
    stack(elementShape, elementDtype, numElements = -1) {
        if (elementDtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
        }
        if (numElements !== -1 && this.tensors.length !== numElements) {
            throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);
        }
        (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(elementShape, this.elementShape, 'TensorList shape mismatch: ');
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
            const reshapedTensors = this.tensors.map(tensor => (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(tensor, elementShape));
            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack)(reshapedTensors, 0);
        });
    }
    /**
     * Pop a tensor from the end of the list.
     * @param elementShape shape of the tensor
     * @param elementDtype data type of the tensor
     */
    popBack(elementShape, elementDtype) {
        if (elementDtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
        }
        if (this.size() === 0) {
            throw new Error('Trying to pop from an empty list.');
        }
        const tensor = this.tensors.pop();
        (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(tensor.shape, elementShape, 'TensorList shape mismatch: ');
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(tensor, elementShape);
    }
    /**
     * Push a tensor to the end of the list.
     * @param tensor Tensor to be pushed.
     */
    pushBack(tensor) {
        if (tensor.dtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);
        }
        (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');
        if (this.maxNumElements === this.size()) {
            throw new Error(`Trying to push element into a full list.`);
        }
        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(tensor);
        this.tensors.push(tensor);
    }
    /**
     * Update the size of the list.
     * @param size the new size of the list.
     */
    resize(size) {
        if (size < 0) {
            throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);
        }
        if (this.maxNumElements !== -1 && size > this.maxNumElements) {
            throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);
        }
        this.tensors.length = size;
    }
    /**
     * Retrieve the element at the provided index
     * @param elementShape shape of the tensor
     * @param elementDtype dtype of the tensor
     * @param elementIndex index of the tensor
     */
    getItem(elementIndex, elementShape, elementDtype) {
        if (elementDtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
        }
        if (elementIndex < 0 || elementIndex > this.tensors.length) {
            throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);
        }
        if (this.tensors[elementIndex] == null) {
            throw new Error(`element at index ${elementIndex} is null.`);
        }
        (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');
        return this.tensors[elementIndex];
    }
    /**
     * Set the tensor at the index
     * @param elementIndex index of the tensor
     * @param tensor the tensor to be inserted into the list
     */
    setItem(elementIndex, tensor) {
        if (tensor.dtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);
        }
        if (elementIndex < 0 ||
            this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {
            throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);
        }
        (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');
        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.keep)(tensor);
        this.tensors[elementIndex] = tensor;
    }
    /**
     * Return selected values in the TensorList as a stacked Tensor. All of
     * selected values must have been written and their shapes must all match.
     * @param indices indices of tensors to gather
     * @param elementDtype output tensor dtype
     * @param elementShape output tensor element shape
     */
    gather(indices, elementDtype, elementShape) {
        if (elementDtype !== this.elementDtype) {
            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);
        }
        (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, elementShape, 'TensorList shape mismatch: ');
        // When indices is greater than the size of the list, indices beyond the
        // size of the list are ignored.
        indices = indices.slice(0, this.size());
        if (indices.length === 0) {
            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor)([], [0].concat(this.elementShape));
        }
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
            const tensors = indices.map(i => (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(this.tensors[i], elementShape));
            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack)(tensors, 0);
        });
    }
    /**
     * Return the values in the TensorList as a concatenated Tensor.
     * @param elementDtype output tensor dtype
     * @param elementShape output tensor element shape
     */
    concat(elementDtype, elementShape) {
        if (!!elementDtype && elementDtype !== this.elementDtype) {
            throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);
        }
        (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(this.elementShape, elementShape, 'TensorList shape mismatch: ');
        if (this.size() === 0) {
            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor)([], [0].concat(this.elementShape));
        }
        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
            const tensors = this.tensors.map(t => (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(t, elementShape));
            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat)(tensors, 0);
        });
    }
}
/**
 * Creates a TensorList which, when stacked, has the value of tensor.
 * @param tensor from tensor
 * @param elementShape output tensor element shape
 */
function fromTensor(tensor, elementShape, elementDtype) {
    const dtype = tensor.dtype;
    if (tensor.shape.length < 1) {
        throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);
    }
    if (tensor.dtype !== elementDtype) {
        throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);
    }
    const outputShape = tensor.shape.slice(1);
    (0,_tensor_utils__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatchAllowUndefinedSize)(outputShape, elementShape, 'TensorList shape mismatch: ');
    const tensorList = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack)(tensor);
    return new TensorList(tensorList, elementShape, dtype);
}
/**
 * Return a TensorList of the given size with empty elements.
 * @param elementShape the shape of the future elements of the list
 * @param elementDtype the desired type of elements in the list
 * @param numElements the number of elements to reserve
 */
function reserve(elementShape, elementDtype, numElements) {
    return new TensorList([], elementShape, elementDtype, numElements);
}
/**
 * Put tensors at specific indices of a stacked tensor into a TensorList.
 * @param indices list of indices on how to scatter the tensor.
 * @param tensor input tensor.
 * @param elementShape the shape of the future elements of the list
 * @param numElements the number of elements to scatter
 */
function scatter(tensor, indices, elementShape, numElements) {
    if (indices.length !== tensor.shape[0]) {
        throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);
    }
    const maxIndex = Math.max(...indices);
    if (numElements != null && numElements !== -1 && maxIndex >= numElements) {
        throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);
    }
    const list = new TensorList([], elementShape, tensor.dtype, numElements);
    const tensors = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack)(tensor, 0);
    indices.forEach((value, index) => {
        list.setItem(value, tensors[index]);
    });
    return list;
}
/**
 * Split the values of a Tensor into a TensorList.
 * @param length the lengths to use when splitting value along
 *    its first dimension.
 * @param tensor the tensor to split.
 * @param elementShape the shape of the future elements of the list
 */
function split(tensor, length, elementShape) {
    let totalLength = 0;
    const cumulativeLengths = length.map(len => {
        totalLength += len;
        return totalLength;
    });
    if (totalLength !== tensor.shape[0]) {
        throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${totalLength}, and tensor's shape is: ${tensor.shape}`);
    }
    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;
    const tensors = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
        const tensors = [];
        tensor = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(tensor, [1, totalLength, elementPerRow]);
        for (let i = 0; i < length.length; ++i) {
            const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];
            const indices = [0, previousLength, 0];
            const sizes = [1, length[i], elementPerRow];
            tensors[i] = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)((0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice)(tensor, indices, sizes), elementShape);
        }
        tensor.dispose();
        return tensors;
    });
    const list = new TensorList([], elementShape, tensor.dtype, length.length);
    for (let i = 0; i < tensors.length; i++) {
        list.setItem(i, tensors[i]);
    }
    return list;
}
//# sourceMappingURL=tensor_list.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertShapesMatchAllowUndefinedSize": () => (/* binding */ assertShapesMatchAllowUndefinedSize),
/* harmony export */   "shapesEqualAllowUndefinedSize": () => (/* binding */ shapesEqualAllowUndefinedSize)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * This differs from util.assertShapesMatch in that it allows values of
 * negative one, an undefined size of a dimensinon, in a shape to match
 * anything.
 */

function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {
    _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(shapesEqualAllowUndefinedSize(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
}
function shapesEqualAllowUndefinedSize(n1, n2) {
    if (n1.length !== n2.length) {
        return false;
    }
    for (let i = 0; i < n1.length; i++) {
        if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=tensor_utils.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GraphModel": () => (/* reexport safe */ _executor_graph_model__WEBPACK_IMPORTED_MODULE_0__.GraphModel),
/* harmony export */   "loadGraphModel": () => (/* reexport safe */ _executor_graph_model__WEBPACK_IMPORTED_MODULE_0__.loadGraphModel),
/* harmony export */   "deregisterOp": () => (/* reexport safe */ _operations_custom_op_register__WEBPACK_IMPORTED_MODULE_1__.deregisterOp),
/* harmony export */   "registerOp": () => (/* reexport safe */ _operations_custom_op_register__WEBPACK_IMPORTED_MODULE_1__.registerOp),
/* harmony export */   "version_converter": () => (/* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_2__.version)
/* harmony export */ });
/* harmony import */ var _executor_graph_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./executor/graph_model */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js");
/* harmony import */ var _operations_custom_op_register__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operations/custom_op/register */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js");
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./version */ "./node_modules/@tensorflow/tfjs-converter/dist/version.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NodeValueImpl": () => (/* binding */ NodeValueImpl)
/* harmony export */ });
/* harmony import */ var _executors_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../executors/utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/* harmony import */ var _operation_mapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation_mapper */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Helper class for lookup inputs and params for nodes in the model graph.
 */
class NodeValueImpl {
    constructor(node, tensorMap, context) {
        this.node = node;
        this.tensorMap = tensorMap;
        this.context = context;
        this.inputs = [];
        this.attrs = {};
        this.inputs = node.inputNames.map(name => this.getInput(name));
        if (node.rawAttrs != null) {
            this.attrs = Object.keys(node.rawAttrs)
                .reduce((attrs, key) => {
                attrs[key] = this.getAttr(key);
                return attrs;
            }, {});
        }
    }
    /**
     * Return the value of the attribute or input param.
     * @param name String: name of attribute or input param.
     */
    getInput(name) {
        return (0,_executors_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(name, this.tensorMap, this.context);
    }
    /**
     * Return the value of the attribute or input param.
     * @param name String: name of attribute or input param.
     */
    getAttr(name, defaultValue) {
        const value = this.node.rawAttrs[name];
        if (value.tensor != null) {
            return (0,_executors_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(name, this.tensorMap, this.context);
        }
        if (value.i != null || value.f != null) {
            return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getNumberParam)(this.node.rawAttrs, name, defaultValue);
        }
        if (value.s != null) {
            return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getStringParam)(this.node.rawAttrs, name, defaultValue);
        }
        if (value.b != null) {
            return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getBoolParam)(this.node.rawAttrs, name, defaultValue);
        }
        if (value.shape != null) {
            return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getTensorShapeParam)(this.node.rawAttrs, name, defaultValue);
        }
        if (value.type != null) {
            return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getDtypeParam)(this.node.rawAttrs, name, defaultValue);
        }
        if (value.list != null) {
            if (value.list.i != null || value.list.f != null) {
                return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getNumericArrayParam)(this.node.rawAttrs, name, defaultValue);
            }
            if (value.list.s != null) {
                return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getStringArrayParam)(this.node.rawAttrs, name, defaultValue);
            }
            if (value.list.shape != null) {
                return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getTensorShapeArrayParam)(this.node.rawAttrs, name, defaultValue);
            }
            if (value.list.b != null) {
                return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getBoolArrayParam)(this.node.rawAttrs, name, defaultValue);
            }
            if (value.list.type != null) {
                return (0,_operation_mapper__WEBPACK_IMPORTED_MODULE_1__.getDtypeArrayParam)(this.node.rawAttrs, name, defaultValue);
            }
        }
        return defaultValue;
    }
}
//# sourceMappingURL=node_value_impl.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "registerOp": () => (/* binding */ registerOp),
/* harmony export */   "getRegisteredOp": () => (/* binding */ getRegisteredOp),
/* harmony export */   "deregisterOp": () => (/* binding */ deregisterOp)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CUSTOM_OPS = {};
/**
 * Register an Op for graph model executor. This allow you to register
 * TensorFlow custom op or override existing op.
 *
 * Here is an example of registering a new MatMul Op.
 * ```js
 * const customMatmul = (node) =>
 *    tf.matMul(
 *        node.inputs[0], node.inputs[1],
 *        node.attrs['transpose_a'], node.attrs['transpose_b']);
 *
 * tf.registerOp('MatMul', customMatmul);
 * ```
 * The inputs and attrs of the node object is based on the TensorFlow op
 * registry.
 *
 * @param name The Tensorflow Op name.
 * @param opFunc An op function which is called with the current graph node
 * during execution and needs to return a tensor or a list of tensors. The node
 * has the following attributes:
 *    - attr: A map from attribute name to its value
 *    - inputs: A list of input tensors
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */
function registerOp(name, opFunc) {
    const opMapper = {
        tfOpName: name,
        category: 'custom',
        inputs: [],
        attrs: [],
        customExecutor: opFunc
    };
    CUSTOM_OPS[name] = opMapper;
}
/**
 * Retrieve the OpMapper object for the registered op.
 *
 * @param name The Tensorflow Op name.
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */
function getRegisteredOp(name) {
    return CUSTOM_OPS[name];
}
/**
 * Deregister the Op for graph model executor.
 *
 * @param name The Tensorflow Op name.
 *
 * @doc {heading: 'Models', subheading: 'Op Registry'}
 */
function deregisterOp(name) {
    delete CUSTOM_OPS[name];
}
//# sourceMappingURL=register.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'BiasAdd':
        case 'AddV2':
        case 'Add': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.add((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'AddN': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.addN((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('tensors', node, tensorMap, context))];
        }
        case 'FloorMod':
        case 'Mod':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.mod((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        case 'Mul':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.mul((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        case 'RealDiv':
        case 'Div': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__.div((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'DivNoNan': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__.divNoNan((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'FloorDiv': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__.floorDiv((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'Sub': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__.sub((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'Minimum': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__.minimum((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'Maximum': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__.maximum((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'Pow': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__.pow((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'SquaredDifference': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_12__.squaredDifference((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'arithmetic';
//# sourceMappingURL=arithmetic_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/acos.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/asin.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/erf.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/real.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/round.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sin.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sign.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tan.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prod.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Abs':
        case 'ComplexAbs':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.abs((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Acos':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.acos((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Acosh':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.acosh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Asin':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.asin((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Asinh':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__.asinh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Atan':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__.atan((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Atan2':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__.atan2((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('y', node, tensorMap, context))];
        case 'Atanh':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__.atanh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Ceil':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__.ceil((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Complex':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__.complex((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('real', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('imag', node, tensorMap, context))];
        case 'Cos':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__.cos((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Cosh':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_12__.cosh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Elu':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_13__.elu((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Erf':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_14__.erf((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Exp':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_15__.exp((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Expm1': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_16__.expm1((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'Floor':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_17__.floor((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Log':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_18__.log((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Log1p': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_19__.log1p((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'Imag':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_20__.imag((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Neg':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_21__.neg((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Reciprocal': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_22__.reciprocal((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'Real':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_23__.real((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Relu':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_24__.relu((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Round': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_25__.round((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'Selu':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_26__.selu((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Sigmoid':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_27__.sigmoid((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Sin':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_28__.sin((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Sign': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_29__.sign((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'Sinh': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_30__.sinh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'Softplus': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_31__.softplus((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'Sqrt': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_32__.sqrt((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'Square': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_33__.square((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'Tanh': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_34__.tanh((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'Tan':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_35__.tan((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'ClipByValue':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_36__.clipByValue((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('clipValueMin', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('clipValueMax', node, tensorMap, context))];
        case 'Relu6':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_37__.relu6((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        case 'Rsqrt':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_38__.rsqrt((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(node.inputNames[0], tensorMap, context))];
        case 'Prod':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_39__.prod((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axes', node, tensorMap, context))];
        case 'LeakyRelu':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_40__.leakyRelu((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('alpha', node, tensorMap, context))];
        case 'Prelu':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_41__.prelu((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('alpha', node, tensorMap, context))];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'basic_math';
//# sourceMappingURL=basic_math_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _executor_tensor_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../executor/tensor_array */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js");
/* harmony import */ var _executor_tensor_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../executor/tensor_list */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const executeOp = async (node, tensorMap, context) => {
    switch (node.op) {
        case 'If':
        case 'StatelessIf': {
            const thenFunc = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('thenBranch', node, tensorMap, context);
            const elseFunc = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elseBranch', node, tensorMap, context);
            const cond = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('cond', node, tensorMap, context);
            const args = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('args', node, tensorMap, context);
            const condValue = await cond.data();
            if (condValue[0]) {
                return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
            }
            else {
                return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);
            }
        }
        case 'While':
        case 'StatelessWhile': {
            const bodyFunc = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('body', node, tensorMap, context);
            const condFunc = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('cond', node, tensorMap, context);
            const args = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('args', node, tensorMap, context);
            // Calculate the condition of the loop
            const condResult = (await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));
            const argIds = args.map(tensor => tensor.id);
            let condValue = await condResult[0].data();
            // Dispose the intermediate tensors for condition function
            condResult.forEach(tensor => {
                if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {
                    tensor.dispose();
                }
            });
            let result = args;
            while (condValue[0]) {
                // Record the previous result for intermediate tensor tracking
                const origResult = result;
                // Execution the body of the loop
                result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);
                const resultIds = result.map(tensor => tensor.id);
                // Dispose the intermediate tensor for body function that is not global
                // kept, not input/output of the body function
                origResult.forEach(tensor => {
                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&
                        resultIds.indexOf(tensor.id) === -1) {
                        tensor.dispose();
                    }
                });
                // Recalcuate the condition of the loop using the latest results.
                const condResult = (await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap));
                condValue = await condResult[0].data();
                // Dispose the intermediate tensors for condition function
                condResult.forEach(tensor => {
                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&
                        resultIds.indexOf(tensor.id) === -1) {
                        tensor.dispose();
                    }
                });
            }
            return result;
        }
        case 'LoopCond': {
            const pred = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('pred', node, tensorMap, context);
            return [(0,_utils__WEBPACK_IMPORTED_MODULE_3__.cloneTensor)(pred)];
        }
        case 'Switch': {
            const pred = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('pred', node, tensorMap, context);
            let data = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('data', node, tensorMap, context);
            if (!data.kept) {
                data = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.cloneTensor)(data);
            }
            // Outputs nodes :0 => false, :1 => true
            return (await pred.data())[0] ? [undefined, data] : [data, undefined];
        }
        case 'Merge': {
            const inputName = node.inputNames.find(name => (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getTensor)(name, tensorMap, context) !== undefined);
            if (inputName) {
                const data = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getTensor)(inputName, tensorMap, context);
                return [(0,_utils__WEBPACK_IMPORTED_MODULE_3__.cloneTensor)(data)];
            }
            return undefined;
        }
        case 'Enter': {
            const frameId = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('frameName', node, tensorMap, context);
            const data = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensor', node, tensorMap, context);
            context.enterFrame(frameId);
            return [(0,_utils__WEBPACK_IMPORTED_MODULE_3__.cloneTensor)(data)];
        }
        case 'Exit': {
            const data = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensor', node, tensorMap, context);
            context.exitFrame();
            return [(0,_utils__WEBPACK_IMPORTED_MODULE_3__.cloneTensor)(data)];
        }
        case 'NextIteration': {
            const data = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensor', node, tensorMap, context);
            context.nextIteration();
            return [(0,_utils__WEBPACK_IMPORTED_MODULE_3__.cloneTensor)(data)];
        }
        case 'TensorArrayV3': {
            const size = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('size', node, tensorMap, context);
            const dtype = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('dtype', node, tensorMap, context);
            const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementShape', node, tensorMap, context);
            const dynamicSize = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('dynamicSize', node, tensorMap, context);
            const clearAfterRead = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('clearAfterRead', node, tensorMap, context);
            const identicalElementShapes = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('identicalElementShapes', node, tensorMap, context);
            const name = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('name', node, tensorMap, context);
            const tensorArray = new _executor_tensor_array__WEBPACK_IMPORTED_MODULE_1__.TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);
            context.addTensorArray(tensorArray);
            return [tensorArray.idTensor, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(1.0)];
        }
        case 'TensorArrayWriteV3': {
            const id = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorArrayId', node, tensorMap, context);
            const index = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('index', node, tensorMap, context);
            const writeTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensor', node, tensorMap, context);
            const writeTensorArray = context.getTensorArray(id.id);
            writeTensorArray.write(index, writeTensor);
            return [writeTensorArray.idTensor];
        }
        case 'TensorArrayReadV3': {
            const readId = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorArrayId', node, tensorMap, context);
            const readIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('index', node, tensorMap, context);
            const readTensorArray = context.getTensorArray(readId.id);
            return [readTensorArray.read(readIndex)];
        }
        case 'TensorArrayGatherV3': {
            const gatherId = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorArrayId', node, tensorMap, context);
            const gatherIndices = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('indices', node, tensorMap, context);
            const gatherDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('dtype', node, tensorMap, context);
            const gatherTensorArray = context.getTensorArray(gatherId.id);
            return [gatherTensorArray.gather(gatherIndices, gatherDtype)];
        }
        case 'TensorArrayScatterV3': {
            const scatterId = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorArrayId', node, tensorMap, context);
            const scatterIndices = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('indices', node, tensorMap, context);
            const scatterTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensor', node, tensorMap, context);
            const scatterTensorArray = context.getTensorArray(scatterId.id);
            scatterTensorArray.scatter(scatterIndices, scatterTensor);
            return [scatterTensorArray.idTensor];
        }
        case 'TensorArrayConcatV3': {
            const concatId = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorArrayId', node, tensorMap, context);
            const concatTensorArray = context.getTensorArray(concatId.id);
            const concatDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('dtype', node, tensorMap, context);
            return [concatTensorArray.concat(concatDtype)];
        }
        case 'TensorArraySplitV3': {
            const splitId = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorArrayId', node, tensorMap, context);
            const splitTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensor', node, tensorMap, context);
            const lengths = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('lengths', node, tensorMap, context);
            const splitTensorArray = context.getTensorArray(splitId.id);
            splitTensorArray.split(lengths, splitTensor);
            return [splitTensorArray.idTensor];
        }
        case 'TensorArraySizeV3': {
            const sizeId = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorArrayId', node, tensorMap, context);
            const sizeTensorArray = context.getTensorArray(sizeId.id);
            return [(0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(sizeTensorArray.size(), 'int32')];
        }
        case 'TensorArrayCloseV3': {
            const closeId = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorArrayId', node, tensorMap, context);
            const closeTensorArray = context.getTensorArray(closeId.id);
            closeTensorArray.clearAndClose();
            return [closeTensorArray.idTensor];
        }
        case 'TensorListSetItem': {
            const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorListId', node, tensorMap, context);
            const index = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('index', node, tensorMap, context);
            const writeTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensor', node, tensorMap, context);
            const tensorList = context.getTensorList(idTensor.id);
            tensorList.setItem(index, writeTensor);
            return [tensorList.idTensor];
        }
        case 'TensorListGetItem': {
            const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorListId', node, tensorMap, context);
            const readIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('index', node, tensorMap, context);
            const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementShape', node, tensorMap, context);
            const elementDType = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementDType', node, tensorMap, context);
            const tensorList = context.getTensorList(idTensor.id);
            return [tensorList.getItem(readIndex, elementShape, elementDType)];
        }
        case 'TensorListScatterV2':
        case 'TensorListScatter': {
            const scatterIndices = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('indices', node, tensorMap, context);
            const scatterTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensor', node, tensorMap, context);
            const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementShape', node, tensorMap, context);
            const numElements = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('numElements', node, tensorMap, context);
            const tensorList = (0,_executor_tensor_list__WEBPACK_IMPORTED_MODULE_2__.scatter)(scatterTensor, scatterIndices, elementShape, numElements);
            context.addTensorList(tensorList);
            return [tensorList.idTensor];
        }
        case 'TensorListReserve':
        case 'EmptyTensorList': {
            const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementShape', node, tensorMap, context);
            const elementDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementDType', node, tensorMap, context);
            let numElementsParam;
            if (node.op === 'TensorListReserve') {
                numElementsParam = 'numElements';
            }
            else {
                numElementsParam = 'maxNumElements';
            }
            const numElements = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)(numElementsParam, node, tensorMap, context);
            const tensorList = (0,_executor_tensor_list__WEBPACK_IMPORTED_MODULE_2__.reserve)(elementShape, elementDtype, numElements);
            context.addTensorList(tensorList);
            return [tensorList.idTensor];
        }
        case 'TensorListGather': {
            const gatherId = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorListId', node, tensorMap, context);
            const gatherIndices = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('indices', node, tensorMap, context);
            const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementShape', node, tensorMap, context);
            const elementDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementDType', node, tensorMap, context);
            const tensorList = context.getTensorList(gatherId.id);
            return [tensorList.gather(gatherIndices, elementDtype, elementShape)];
        }
        case 'TensorListStack': {
            const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorListId', node, tensorMap, context);
            const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementShape', node, tensorMap, context);
            const elementDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementDType', node, tensorMap, context);
            const numElements = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('numElements', node, tensorMap, context);
            const tensorList = context.getTensorList(idTensor.id);
            return [tensorList.stack(elementShape, elementDtype, numElements)];
        }
        case 'TensorListFromTensor': {
            const tensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensor', node, tensorMap, context);
            const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementShape', node, tensorMap, context);
            const elementDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementDType', node, tensorMap, context);
            const tensorList = (0,_executor_tensor_list__WEBPACK_IMPORTED_MODULE_2__.fromTensor)(tensor, elementShape, elementDtype);
            context.addTensorList(tensorList);
            return [tensorList.idTensor];
        }
        case 'TensorListConcat': {
            const concatId = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorListId', node, tensorMap, context);
            const tensorList = context.getTensorList(concatId.id);
            const concatDtype = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('dtype', node, tensorMap, context);
            const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementShape', node, tensorMap, context);
            return [tensorList.concat(concatDtype, elementShape)];
        }
        case 'TensorListPushBack': {
            const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorListId', node, tensorMap, context);
            const writeTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensor', node, tensorMap, context);
            const tensorList = context.getTensorList(idTensor.id);
            tensorList.pushBack(writeTensor);
            return [tensorList.idTensor];
        }
        case 'TensorListPopBack': {
            const idTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensorListId', node, tensorMap, context);
            const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementShape', node, tensorMap, context);
            const elementDType = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementDType', node, tensorMap, context);
            const tensorList = context.getTensorList(idTensor.id);
            return [tensorList.popBack(elementShape, elementDType)];
        }
        case 'TensorListSplit': {
            const splitTensor = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('tensor', node, tensorMap, context);
            const elementShape = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('elementShape', node, tensorMap, context);
            const lengths = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getParamValue)('lengths', node, tensorMap, context);
            const tensorList = (0,_executor_tensor_list__WEBPACK_IMPORTED_MODULE_2__.split)(splitTensor, lengths, elementShape);
            context.addTensorList(tensorList);
            return [tensorList.idTensor];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'control';
//# sourceMappingURL=control_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


function fusedConvAndDepthWiseParams(node, tensorMap, context) {
    const [extraOp, activationFunc] = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('fusedOps', node, tensorMap, context);
    const isBiasAdd = extraOp === 'biasadd';
    const isPrelu = activationFunc === 'prelu';
    const isBatchNorm = extraOp === 'fusedbatchnorm';
    const numArgs = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('numArgs', node, tensorMap, context);
    if (isBiasAdd) {
        if (isPrelu && numArgs !== 2) {
            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +
                'must have two extra arguments: bias and alpha.');
        }
        if (!isPrelu && numArgs !== 1) {
            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +
                'one extra argument: bias.');
        }
    }
    if (isBatchNorm) {
        throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');
    }
    const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
    const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getPadding)(node, tensorMap, context);
    const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context)
        .toUpperCase();
    const dilations = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilations', node, tensorMap, context);
    const [biasArg, preluArg] = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('args', node, tensorMap, context);
    const leakyreluAlpha = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('leakyreluAlpha', node, tensorMap, context);
    return {
        stride,
        pad,
        dataFormat,
        dilations,
        biasArg,
        preluArg,
        activationFunc,
        leakyreluAlpha
    };
}
const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Conv1D': {
            const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('stride', node, tensorMap, context);
            const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
            const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context)
                .toUpperCase();
            const dilation = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilation', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.conv1d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];
        }
        case 'Conv2D': {
            const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
            const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getPadding)(node, tensorMap, context);
            const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context)
                .toUpperCase();
            const dilations = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilations', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.conv2d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
        }
        case '_FusedConv2D': {
            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha } = fusedConvAndDepthWiseParams(node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.conv2d({
                    x: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context),
                    filter: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context),
                    strides: [stride[1], stride[2]],
                    pad: pad,
                    dataFormat: dataFormat,
                    dilations: [dilations[1], dilations[2]],
                    bias: biasArg,
                    activation: activationFunc,
                    preluActivationWeights: preluArg,
                    leakyreluAlpha
                })];
        }
        case 'FusedDepthwiseConv2dNative': {
            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha, } = fusedConvAndDepthWiseParams(node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.depthwiseConv2d({
                    x: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context),
                    filter: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context),
                    strides: [stride[1], stride[2]],
                    pad: pad,
                    dataFormat: dataFormat,
                    dilations: [dilations[1], dilations[2]],
                    bias: biasArg,
                    activation: activationFunc,
                    preluActivationWeights: preluArg,
                    leakyreluAlpha
                })];
        }
        case 'Conv2DBackpropInput':
        case 'Conv2dTranspose': {
            const shape = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('outputShape', node, tensorMap, context);
            const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
            const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getPadding)(node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.conv2dTranspose((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];
        }
        case 'DepthwiseConv2dNative':
        case 'DepthwiseConv2d': {
            const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
            const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getPadding)(node, tensorMap, context);
            const dilations = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilations', node, tensorMap, context);
            const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context)
                .toUpperCase();
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__.depthwiseConv2d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('input', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];
        }
        case 'Conv3D': {
            const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
            const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
            const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context)
                .toUpperCase();
            const dilations = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilations', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__.conv3d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];
        }
        case 'AvgPool': {
            const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
            const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
            const kernelSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('kernelSize', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__.avgPool((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
        }
        case 'MaxPool': {
            const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
            const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
            const kernelSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('kernelSize', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__.maxPool((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];
        }
        case 'MaxPoolWithArgmax': {
            const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
            const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
            const kernelSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('kernelSize', node, tensorMap, context);
            const includeBatchInIndex = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('includeBatchInIndex', node, tensorMap, context);
            const { result, indexes } = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__.maxPoolWithArgmax((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);
            return [result, indexes];
        }
        case 'AvgPool3D': {
            const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
            const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
            const kernelSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('kernelSize', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__.avgPool3d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
        }
        case 'MaxPool3D': {
            const stride = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
            const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
            const kernelSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('kernelSize', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__.maxPool3d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];
        }
        case 'Dilation2D': {
            const strides = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('strides', node, tensorMap, context);
            const pad = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('pad', node, tensorMap, context);
            const dilations = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dilations', node, tensorMap, context);
            // strides: [1, stride_height, stride_width, 1].
            const strideHeight = strides[1];
            const strideWidth = strides[2];
            // dilations: [1, dilation_height, dilation_width, 1].
            const dilationHeight = dilations[1];
            const dilationWidth = dilations[2];
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_12__.dilation2d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'convolution';
//# sourceMappingURL=convolution_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/linspace.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/range.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Fill': {
            const shape = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context);
            const dtype = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context);
            const value = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('value', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.fill(shape, value, dtype)];
        }
        case 'LinSpace': {
            const start = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('start', node, tensorMap, context);
            const stop = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('stop', node, tensorMap, context);
            const num = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('num', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.linspace(start, stop, num)];
        }
        case 'Multinomial': {
            const logits = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('logits', node, tensorMap, context);
            const numSamples = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('numSamples', node, tensorMap, context);
            const seed = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('seed', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.multinomial(logits, numSamples, seed)];
        }
        case 'OneHot': {
            const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('indices', node, tensorMap, context);
            const depth = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('depth', node, tensorMap, context);
            const onValue = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('onValue', node, tensorMap, context);
            const offValue = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('offValue', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.oneHot(indices, depth, onValue, offValue)];
        }
        case 'Ones': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__.ones((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context))];
        }
        case 'OnesLike': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__.onesLike((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'RandomUniform': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__.randomUniform(
                // tslint:disable-next-line:no-any
                (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('minval', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('maxval', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context))];
        }
        case 'Range': {
            const start = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('start', node, tensorMap, context);
            const stop = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('stop', node, tensorMap, context);
            const step = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('step', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__.range(start, stop, step, (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context))];
        }
        case 'TruncatedNormal': {
            const shape = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context);
            const mean = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('mean', node, tensorMap, context);
            const stdDev = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('stdDev', node, tensorMap, context);
            const seed = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('seed', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__.truncatedNormal(shape, mean, stdDev, (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context), seed)];
        }
        case 'Zeros': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__.zeros((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context))];
        }
        case 'ZerosLike': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__.zerosLike((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'creation';
//# sourceMappingURL=creation_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


function nmsParams(node, tensorMap, context) {
    const boxes = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('boxes', node, tensorMap, context);
    const scores = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('scores', node, tensorMap, context);
    const maxOutputSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('maxOutputSize', node, tensorMap, context);
    const iouThreshold = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('iouThreshold', node, tensorMap, context);
    const scoreThreshold = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('scoreThreshold', node, tensorMap, context);
    const softNmsSigma = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('softNmsSigma', node, tensorMap, context);
    return {
        boxes,
        scores,
        maxOutputSize,
        iouThreshold,
        scoreThreshold,
        softNmsSigma
    };
}
const executeOp = async (node, tensorMap, context) => {
    switch (node.op) {
        case 'NonMaxSuppressionV5': {
            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = nmsParams(node, tensorMap, context);
            const result = await _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
            return [result.selectedIndices, result.selectedScores];
        }
        case 'NonMaxSuppressionV4': {
            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);
            const padToMaxOutputSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('padToMaxOutputSize', node, tensorMap, context);
            const result = await _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
            return [result.selectedIndices, result.validOutputs];
        }
        case 'NonMaxSuppressionV3':
        case 'NonMaxSuppressionV2': {
            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);
            return [await _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];
        }
        case 'Where': {
            const condition = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.cast((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('condition', node, tensorMap, context), 'bool');
            const result = [await _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.whereAsync(condition)];
            condition.dispose();
            return result;
        }
        case 'ListDiff': {
            return _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.setdiff1dAsync((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('y', node, tensorMap, context));
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'dynamic';
//# sourceMappingURL=dynamic_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/topk.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unique.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'TopKV2': {
            const x = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
            const k = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('k', node, tensorMap, context);
            const sorted = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('sorted', node, tensorMap, context);
            const result = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.topk(x, k, sorted);
            return [result.values, result.indices];
        }
        case 'Unique': {
            const x = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
            const result = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.unique(x);
            return [result.values, result.indices];
        }
        case 'UniqueV2': {
            const x = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            const result = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.unique(x, axis);
            return [result.values, result.indices];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'evaluation';
//# sourceMappingURL=evaluation_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Const': {
            return tensorMap[node.name];
        }
        case 'PlaceholderWithDefault':
            const def = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('default', node, tensorMap, context);
            return [(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(node.name, tensorMap, context) || def];
        case 'Placeholder':
            return [(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getTensor)(node.name, tensorMap, context)];
        case 'Identity':
        case 'StopGradient':
        case 'FakeQuantWithMinMaxVars': { // This op is currently ignored.
            const data = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
            return [(0,_utils__WEBPACK_IMPORTED_MODULE_0__.cloneTensor)(data)];
        }
        case 'IdentityN':
            return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context)
                .map((t) => (0,_utils__WEBPACK_IMPORTED_MODULE_0__.cloneTensor)(t));
        case 'Snapshot':
            const snapshot = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
            return [(0,_utils__WEBPACK_IMPORTED_MODULE_0__.cloneTensor)(snapshot)];
        case 'Shape':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.tensor1d((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context).shape, 'int32')];
        case 'ShapeN':
            return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context)
                .map((t) => _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.tensor1d(t.shape));
        case 'Size':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.scalar((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context).size, 'int32')];
        case 'Rank':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.scalar((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context).rank, 'int32')];
        case 'NoOp':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.scalar(1)];
        case 'Print':
            const input = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
            const data = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('data', node, tensorMap, context);
            const message = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('message', node, tensorMap, context);
            const summarize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('summarize', node, tensorMap, context);
            console.warn('The graph has a tf.print() operation,' +
                'usually used for debugging, which slows down performance.');
            console.log(message);
            for (let i = 0; i < data.length; i++) {
                console.log(Array.prototype.slice.call(data[i].dataSync())
                    .slice(0, summarize));
            }
            return [input];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'graph';
//# sourceMappingURL=graph_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _executor_hash_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../executor/hash_table */ "./node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const executeOp = async (node, tensorMap, context, resourceManager) => {
    switch (node.op) {
        case 'HashTable':
        case 'HashTableV2': {
            const keyDType = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('keyDType', node, tensorMap, context);
            const valueDType = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('valueDType', node, tensorMap, context);
            const hashTable = new _executor_hash_table__WEBPACK_IMPORTED_MODULE_0__.HashTable(keyDType, valueDType);
            resourceManager.addHashTable(node.name, hashTable);
            return [hashTable.handle];
        }
        case 'LookupTableImport':
        case 'LookupTableImportV2': {
            const handle = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('tableHandle', node, tensorMap, context, resourceManager);
            const keys = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('keys', node, tensorMap, context);
            const values = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('values', node, tensorMap, context);
            const hashTable = resourceManager.getHashTableById(handle.id);
            return [await hashTable.import(keys, values)];
        }
        case 'LookupTableFind':
        case 'LookupTableFindV2': {
            const handle = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('tableHandle', node, tensorMap, context, resourceManager);
            const keys = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('keys', node, tensorMap, context);
            const defaultValue = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('defaultValue', node, tensorMap, context);
            const hashTable = resourceManager.getHashTableById(handle.id);
            return [await hashTable.find(keys, defaultValue)];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'hash_table';
//# sourceMappingURL=hash_table_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'ResizeBilinear': {
            const images = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('images', node, tensorMap, context);
            const size = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('size', node, tensorMap, context);
            const alignCorners = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('alignCorners', node, tensorMap, context);
            const halfPixelCenters = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('halfPixelCenters', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.image.resizeBilinear(images, [size[0], size[1]], alignCorners, halfPixelCenters)];
        }
        case 'ResizeNearestNeighbor': {
            const images = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('images', node, tensorMap, context);
            const size = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('size', node, tensorMap, context);
            const alignCorners = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('alignCorners', node, tensorMap, context);
            const halfPixelCenters = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('halfPixelCenters', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners, halfPixelCenters)];
        }
        case 'CropAndResize': {
            const image = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('image', node, tensorMap, context);
            const boxes = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('boxes', node, tensorMap, context);
            const boxInd = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('boxInd', node, tensorMap, context);
            const cropSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('cropSize', node, tensorMap, context);
            const method = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('method', node, tensorMap, context);
            const extrapolationValue = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('extrapolationValue', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'image';
//# sourceMappingURL=image_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Equal': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.equal((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'NotEqual': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.notEqual((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'Greater': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.greater((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'GreaterEqual': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.greaterEqual((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'Less': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__.less((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'LessEqual': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__.lessEqual((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'LogicalAnd': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__.logicalAnd((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'LogicalNot': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__.logicalNot((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context))];
        }
        case 'LogicalOr': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__.logicalOr((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        case 'Select':
        case 'SelectV2': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__.where((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('condition', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'logical';
//# sourceMappingURL=logical_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'BatchMatMul':
        case 'BatchMatMulV2':
        case 'MatMul':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.matMul((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('transposeA', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('transposeB', node, tensorMap, context))];
        case 'Transpose':
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.transpose((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('perm', node, tensorMap, context))];
        case '_FusedMatMul':
            const [extraOp, activationFunc] = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('fusedOps', node, tensorMap, context);
            const isBiasAdd = extraOp === 'biasadd';
            const isPrelu = activationFunc === 'prelu';
            const numArgs = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('numArgs', node, tensorMap, context);
            const leakyreluAlpha = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('leakyreluAlpha', node, tensorMap, context);
            if (isBiasAdd) {
                if (isPrelu && numArgs !== 2) {
                    throw new Error('Fused MatMul with BiasAdd and Prelu must have two ' +
                        'extra arguments: bias and alpha.');
                }
                if (!isPrelu && numArgs !== 1) {
                    throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');
                }
            }
            const [biasArg, preluArg] = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('args', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.matMul({
                    a: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('a', node, tensorMap, context),
                    b: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('b', node, tensorMap, context),
                    transposeA: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('transposeA', node, tensorMap, context),
                    transposeB: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('transposeB', node, tensorMap, context),
                    bias: biasArg,
                    activation: activationFunc,
                    preluActivationWeights: preluArg,
                    leakyreluAlpha
                })];
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'matrices';
//# sourceMappingURL=matrices_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'FusedBatchNorm':
        case 'FusedBatchNormV2': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.batchNorm((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('mean', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('variance', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('offset', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('scale', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('epsilon', node, tensorMap, context))];
        }
        case 'FusedBatchNormV3': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.batchNorm((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('mean', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('variance', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('offset', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('scale', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('epsilon', node, tensorMap, context))];
        }
        case 'LRN': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.localResponseNormalization((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('radius', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('bias', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('alpha', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('beta', node, tensorMap, context))];
        }
        case 'Softmax': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.softmax((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'LogSoftmax': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.logSoftmax((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'SparseToDense': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__.sparseToDense((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('sparseIndices', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('outputShape', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('sparseValues', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('defaultValue', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'normalization';
//# sourceMappingURL=normalization_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/min.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/all.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/any.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prod.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/bincount.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dense_bincount.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Max': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.max((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'Mean': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.mean((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'Min': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.min((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'Sum': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.sum((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'All': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__.all((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'Any': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__.any((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'ArgMax': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__.argMax((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis)];
        }
        case 'ArgMin': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__.argMin((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis)];
        }
        case 'Prod': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            const keepDims = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('keepDims', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__.prod((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, keepDims)];
        }
        case 'Cumsum': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            const exclusive = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('exclusive', node, tensorMap, context);
            const reverse = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('reverse', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__.cumsum((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis, exclusive, reverse)];
        }
        case 'Bincount':
            const x = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
            const weights = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('weights', node, tensorMap, context);
            const size = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('size', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__.bincount(x, weights, size)];
        case 'DenseBincount': {
            const x = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context);
            const weights = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('weights', node, tensorMap, context);
            const size = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('size', node, tensorMap, context);
            const binaryOutput = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('binaryOutput', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_12__.denseBincount(x, weights, size, binaryOutput)];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'reduction';
//# sourceMappingURL=reduction_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'ConcatV2':
        case 'Concat': {
            const n = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('n', node, tensorMap, context);
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
            let inputs = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('tensors', node, tensorMap, context);
            inputs = inputs.slice(0, n);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.concat(inputs, axis)];
        }
        case 'Gather': {
            const input = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
            const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('indices', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.gather(input, _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.cast(indices, 'int32'), 0)];
        }
        case 'GatherV2': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
            const batchDims = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('batchDims', node, tensorMap, context);
            const input = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
            const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('indices', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.gather(input, _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.cast(indices, 'int32'), axis, batchDims)];
        }
        case 'Reverse': {
            const dims = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('dims', node, tensorMap, context);
            const axis = [];
            for (let i = 0; i < dims.length; i++) {
                if (dims[i]) {
                    axis.push(i);
                }
            }
            const input = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__.reverse(input, axis)];
        }
        case 'ReverseV2': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
            const input = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__.reverse(input, axis)];
        }
        case 'Slice': {
            // tslint:disable-next-line:no-any
            const begin = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('begin', node, tensorMap, context);
            // tslint:disable-next-line:no-any
            const size = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('size', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__.slice((0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context), begin, size)];
        }
        case 'StridedSlice': {
            const begin = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('begin', node, tensorMap, context);
            const end = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('end', node, tensorMap, context);
            const strides = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('strides', node, tensorMap, context);
            const beginMask = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('beginMask', node, tensorMap, context);
            const endMask = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('endMask', node, tensorMap, context);
            const ellipsisMask = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('ellipsisMask', node, tensorMap, context);
            const newAxisMask = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('newAxisMask', node, tensorMap, context);
            const shrinkAxisMask = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('shrinkAxisMask', node, tensorMap, context);
            const tensor = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];
        }
        case 'Pack': {
            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(() => {
                const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
                const tensors = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('tensors', node, tensorMap, context);
                // Reshape the tensors to the first tensor's shape if they don't
                // match.
                const shape = tensors[0].shape;
                const squeezedShape = _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__.squeeze(tensors[0]).shape;
                const mapped = tensors.map(tensor => {
                    const sameShape = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(tensor.shape, shape);
                    if (!sameShape &&
                        !_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__.squeeze(tensor).shape, squeezedShape)) {
                        throw new Error('the input tensors shape does not match');
                    }
                    return sameShape ? tensor : _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__.reshape(tensor, shape);
                });
                return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__.stack(mapped, axis)];
            });
        }
        case 'Unpack': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
            const tensor = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('tensor', node, tensorMap, context);
            return _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_11__.unstack(tensor, axis);
        }
        case 'Tile': {
            const reps = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('reps', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_12__.tile((0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context), reps)];
        }
        case 'Split':
        case 'SplitV': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('axis', node, tensorMap, context);
            const numOrSizeSplits = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('numOrSizeSplits', node, tensorMap, context);
            const tensor = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
            return _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_13__.split(tensor, numOrSizeSplits, axis);
        }
        case 'ScatterNd': {
            const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('indices', node, tensorMap, context);
            const values = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('values', node, tensorMap, context);
            const shape = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('shape', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_14__.scatterND(indices, values, shape)];
        }
        case 'GatherNd': {
            const x = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('x', node, tensorMap, context);
            const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('indices', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_15__.gatherND(x, indices)];
        }
        case 'SparseToDense': {
            const indices = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('sparseIndices', node, tensorMap, context);
            const shape = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('outputShape', node, tensorMap, context);
            const sparseValues = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('sparseValues', node, tensorMap, context);
            const defaultValue = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getParamValue)('defaultValue', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_16__.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ?
                    defaultValue :
                    _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.cast(defaultValue, sparseValues.dtype))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'slice_join';
//# sourceMappingURL=slice_join_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'FFT': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.fft((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'IFFT': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.ifft((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'RFFT': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.rfft((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        case 'IRFFT': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.irfft((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'spectral';
//# sourceMappingURL=spectral_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp),
/* harmony export */   "CATEGORY": () => (/* binding */ CATEGORY)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mirror_pad.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js");
/* harmony import */ var _tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tensorflow/tfjs-core/dist/ops/ops_for_converter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line: no-imports-from-dist


const executeOp = (node, tensorMap, context) => {
    switch (node.op) {
        case 'Cast': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_1__.cast((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dtype', node, tensorMap, context))];
        }
        case 'ExpandDims': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_2__.expandDims((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis)];
        }
        case 'Squeeze': {
            const axis = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('axis', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_3__.squeeze((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), axis)];
        }
        case 'Reshape': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_4__.reshape((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context))];
        }
        case 'MirrorPad': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_5__.mirrorPad((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('padding', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('mode', node, tensorMap, context))];
        }
        case 'PadV2':
        case 'Pad': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_6__.pad((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('padding', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('constantValue', node, tensorMap, context))];
        }
        case 'SpaceToBatchND': {
            const blockShape = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('blockShape', node, tensorMap, context);
            const paddings = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('paddings', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_7__.spaceToBatchND((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), blockShape, paddings)];
        }
        case 'BatchToSpaceND': {
            const blockShape = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('blockShape', node, tensorMap, context);
            const crops = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('crops', node, tensorMap, context);
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_8__.batchToSpaceND((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), blockShape, crops)];
        }
        case 'DepthToSpace': {
            const blockSize = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('blockSize', node, tensorMap, context);
            const dataFormat = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('dataFormat', node, tensorMap, context).toUpperCase();
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_9__.depthToSpace((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), blockSize, dataFormat)];
        }
        case 'BroadcastTo': {
            return [_tensorflow_tfjs_core_dist_ops_ops_for_converter__WEBPACK_IMPORTED_MODULE_10__.broadcastTo((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('x', node, tensorMap, context), (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getParamValue)('shape', node, tensorMap, context))];
        }
        default:
            throw TypeError(`Node type ${node.op} is not implemented`);
    }
};
const CATEGORY = 'transformation';
//# sourceMappingURL=transformation_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getParamValue": () => (/* binding */ getParamValue),
/* harmony export */   "getTensor": () => (/* binding */ getTensor),
/* harmony export */   "getTensorsForCurrentContenxt": () => (/* binding */ getTensorsForCurrentContenxt),
/* harmony export */   "getNodeNameAndIndex": () => (/* binding */ getNodeNameAndIndex),
/* harmony export */   "parseNodeName": () => (/* binding */ parseNodeName),
/* harmony export */   "split": () => (/* binding */ split),
/* harmony export */   "getPadding": () => (/* binding */ getPadding),
/* harmony export */   "cloneTensor": () => (/* binding */ cloneTensor)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function getParamValue(paramName, node, tensorMap, context, resourceManager) {
    const inputParam = node.inputParams[paramName];
    if (inputParam && inputParam.inputIndexStart !== undefined) {
        const start = inputParam.inputIndexStart;
        const end = inputParam.inputIndexEnd === 0 ?
            undefined :
            (inputParam.inputIndexEnd === undefined ? start + 1 :
                inputParam.inputIndexEnd);
        if (inputParam.type === 'tensor') {
            return getTensor(node.inputNames[inputParam.inputIndexStart], tensorMap, context, resourceManager);
        }
        if (inputParam.type === 'tensors') {
            const inputs = node.inputNames.slice(start, end);
            return inputs.map(name => getTensor(name, tensorMap, context, resourceManager));
        }
        const tensor = getTensor(node.inputNames.slice(start)[0], tensorMap, context, resourceManager);
        const data = tensor.dataSync();
        return inputParam.type === 'number' ?
            data[0] :
            _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.toNestedArray(tensor.shape, data);
    }
    const attrParam = node.attrParams[paramName];
    return attrParam && attrParam.value;
}
/**
 * Retrieve the tensor from tensorsMap based on input name.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 * @param context contains tensors and information for running the current node.
 * @param resourceManager Optional. Contains global resources of the model.
 */
function getTensor(name, tensorsMap, context, resourceManager) {
    const [nodeName, index] = parseNodeName(name);
    if (resourceManager != null) {
        const tensor = resourceManager.getHashTableHandleByName(nodeName);
        if (tensor != null) {
            return tensor;
        }
    }
    const contextId = context.currentContextIds.find(contextId => {
        return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];
    });
    return contextId !== undefined ?
        tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :
        undefined;
}
/**
 * Retrieve the tensors based on input name for current context.
 * @param name Node input name
 * @param tensorsMap Tensors map keyed by the node
 */
function getTensorsForCurrentContenxt(name, tensorsMap, context) {
    return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];
}
/**
 * Returns the node name and index from the Node input name.
 * @param inputName The input name of the node, in format of
 * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is
 * default to 0.
 */
function getNodeNameAndIndex(inputName, context) {
    const [nodeName, index] = parseNodeName(inputName);
    return [
        getNodeNameWithContextId(nodeName, context && context.currentContextId),
        index
    ];
}
function getNodeNameWithContextId(name, contextId) {
    return !!contextId ? `${name}-${contextId}` : name;
}
function parseNodeName(name) {
    const parts = name.split(':');
    if (parts.length === 1) {
        return [name, 0];
    }
    const nodeName = parts[0];
    return [nodeName, Number(parts[parts.length - 1])];
}
function split(arr, size) {
    const res = [];
    for (let i = 0; i < arr.length; i += size) {
        res.push(arr.slice(i, i + size));
    }
    return res;
}
function getPadding(node, tensorMap, context) {
    let pad = getParamValue('pad', node, tensorMap, context);
    if (pad === 'explicit') {
        // This is 1d array, we need to convert it to 2d array
        pad = getParamValue('explicitPaddings', node, tensorMap, context);
        const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];
        for (let i = 0; i < 4; i++) {
            explicitPadding[i][0] = pad[i * 2];
            explicitPadding[i][1] = pad[i * 2 + 1];
        }
        return explicitPadding;
    }
    return pad;
}
/**
 *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to
 *  avoid disposal. This is important for TensorArray and TensorList ops, since
 *  internally they use a tensor as the id for TensorArray and TensorList, and
 * to simplify lookup, they also use Tensor.id as the key to the internal map.
 * These id tensors have been marked as kept in the backend, we need avoid clone
 * them in order to create new Tensor.id.
 * @param tensor
 */
function cloneTensor(tensor) {
    return tensor.kept ? tensor : (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clone)(tensor);
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Add',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'AddV2',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'AddN',
        'category': 'arithmetic',
        'inputs': [{ 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' }]
    },
    {
        'tfOpName': 'BiasAdd',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'Sub',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'RealDiv',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Div',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'DivNoNan',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'FloorDiv',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Mul',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Maximum',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' }
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Minimum',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' }
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Pow',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'SquaredDifference',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Mod',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'FloorMod',
        'category': 'arithmetic',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'T',
                'name': 'dtype',
                'type': 'dtype',
                'notSupported': true
            }]
    }
];
//# sourceMappingURL=arithmetic.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Abs',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Acos',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Asin',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Atan',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Atan2',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'y', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Ceil',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'ClipByValue',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'clipValueMin', 'type': 'number' },
            { 'start': 2, 'name': 'clipValueMax', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Complex',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'real', 'type': 'tensor' },
            { 'start': 1, 'name': 'imag', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'ComplexAbs',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Cos',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Cosh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Elu',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Exp',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Floor',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Log',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Imag',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'outputType',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'Neg',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Real',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'outputType',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'Prelu',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'alpha', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Relu',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Relu6',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Selu',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Sigmoid',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Sin',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Sinh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Sqrt',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Rsqrt',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Square',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Tan',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Tanh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Sign',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Round',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Expm1',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Log1p',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Reciprocal',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Softplus',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Asinh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Acosh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Atanh',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Erf',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Prod',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axes', 'type': 'number[]' },
        ],
        'attrs': [
            {
                'tfName': 'keep_dims',
                'name': 'keepDims',
                'type': 'bool',
                'notSupported': true
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'LeakyRelu',
        'category': 'basic_math',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'alpha',
                'name': 'alpha',
                'type': 'number',
                'defaultValue': 0.2
            },
            {
                'tfName': 'T',
                'name': 'dtype',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    }
];
//# sourceMappingURL=basic_math.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
const json = [
    {
        'tfOpName': 'EmptyTensorList',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'elementShape', 'type': 'shape' },
            { 'start': 1, 'name': 'maxNumElements', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'LoopCond',
        'category': 'control',
        'inputs': [{ 'start': 0, 'name': 'pred', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'Switch',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'data', 'type': 'tensor' },
            { 'start': 1, 'name': 'pred', 'type': 'tensor' }
        ]
    },
    {
        'tfOpName': 'Merge',
        'category': 'control',
        'inputs': [{ 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' }]
    },
    {
        'tfOpName': 'Enter',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
            { 'tfName': 'frame_name', 'name': 'frameName', 'type': 'string' },
            { 'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool' }
        ]
    },
    {
        'tfOpName': 'Exit',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'NextIteration',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'TensorArrayV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'size', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
            { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' },
            { 'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool' },
            { 'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool' },
            {
                'tfName': 'identical_element_shapes',
                'name': 'identicalElementShapes',
                'type': 'bool'
            },
            { 'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string' }
        ]
    },
    {
        'tfOpName': 'TensorArrayWriteV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'index', 'type': 'number' },
            { 'start': 2, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 3, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'TensorArrayReadV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'index', 'type': 'number' },
            { 'start': 2, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [{
                'tfName': 'dtype',
                'name': 'dtype',
                'type': 'dtype',
                'notSupported': true
            }]
    },
    {
        'tfOpName': 'TensorArrayGatherV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'number[]' },
            { 'start': 2, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
            { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' }
        ]
    },
    {
        'tfOpName': 'TensorArrayScatterV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'number[]' },
            { 'start': 2, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 3, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorArrayConcatV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }, {
                'tfName': 'element_shape_except0',
                'name': 'elementShapeExcept0',
                'type': 'shape',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'TensorArraySplitV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 2, 'name': 'lengths', 'type': 'number[]' },
            { 'start': 3, 'name': 'flowIn', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorArraySizeV3',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' },
            { 'start': 1, 'name': 'flowIn', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'TensorArrayCloseV3',
        'category': 'control',
        'inputs': [{ 'start': 0, 'name': 'tensorArrayId', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'StatelessIf',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'cond', 'type': 'tensor' },
            { 'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors' }
        ],
        'attrs': [
            { 'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func' },
            { 'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func' }
        ]
    },
    {
        'tfOpName': 'If',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'cond', 'type': 'tensor' },
            { 'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors' }
        ],
        'attrs': [
            { 'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func' },
            { 'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func' }
        ]
    },
    {
        'tfOpName': 'StatelessWhile',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'cond', 'name': 'cond', 'type': 'func' },
            { 'tfName': 'body', 'name': 'body', 'type': 'func' }
        ]
    },
    {
        'tfOpName': 'While',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'cond', 'name': 'cond', 'type': 'func' },
            { 'tfName': 'body', 'name': 'body', 'type': 'func' }
        ]
    },
    {
        'tfOpName': 'TensorListScatter',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'number[]' },
            { 'start': 2, 'name': 'elementShape', 'type': 'shape' }
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListScatterV2',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'number[]' },
            { 'start': 2, 'name': 'elementShape', 'type': 'shape' },
            { 'start': 3, 'name': 'numElements', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListGather',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'number[]' },
            { 'start': 2, 'name': 'elementShape', 'type': 'shape' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListGetItem',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'index', 'type': 'number' },
            { 'start': 2, 'name': 'elementShape', 'type': 'shape' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListSetItem',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'index', 'type': 'number' },
            { 'start': 2, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListReserve',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'elementShape', 'type': 'shape' },
            { 'start': 1, 'name': 'numElements', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListFromTensor',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 1, 'name': 'elementShape', 'type': 'shape' }
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListStack',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'elementShape', 'type': 'shape' },
        ],
        'attrs': [
            { 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' },
            { 'tfName': 'num_elements', 'name': 'numElements', 'type': 'dtype' }
        ]
    },
    {
        'tfOpName': 'TensorListSplit',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
            { 'start': 1, 'name': 'elementShape', 'type': 'shape' },
            { 'start': 2, 'name': 'lengths', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListConcat',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape' },
            { 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }
        ]
    },
    {
        'tfOpName': 'TensorListPopBack',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'elementShape', 'type': 'shape' },
        ],
        'attrs': [{ 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TensorListPushBack',
        'category': 'control',
        'inputs': [
            { 'start': 0, 'name': 'tensorListId', 'type': 'tensor' },
            { 'start': 1, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype' }
        ]
    }
];
//# sourceMappingURL=control.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'AvgPool',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            },
            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'MaxPool',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            },
            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' }, {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': [],
                'notSupported': true
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'MaxPoolWithArgmax',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },
            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' }, {
                'tfName': 'include_batch_in_index',
                'name': 'includeBatchInIndex',
                'type': 'bool'
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'AvgPool3D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            },
            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'MaxPool3D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            },
            { 'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Conv1D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'stride', 'name': 'stride', 'type': 'number' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NWC'
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'dilation',
                'name': 'dilation',
                'type': 'number',
                'defaultValue': 1
            }
        ]
    },
    {
        'tfOpName': 'Conv2D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' },
            { 'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': []
            },
            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': '_FusedConv2D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
            { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': []
            },
            {
                'tfName': 'use_cudnn_on_gpu',
                'name': 'useCudnnOnGpu',
                'type': 'bool',
                'defaultValue': true
            },
            {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            {
                'tfName': 'dilations',
                'name': 'dilations',
                'type': 'number[]',
                'defaultValue': [1, 1, 1, 1]
            },
            {
                'tfName': 'fused_ops',
                'name': 'fusedOps',
                'type': 'string[]',
                'defaultValue': []
            },
            {
                'tfName': 'epsilon',
                'name': 'epsilon',
                'type': 'number',
                'defaultValue': 0.0001
            },
            {
                'tfName': 'leakyrelu_alpha',
                'name': 'leakyreluAlpha',
                'type': 'number'
            }
        ]
    },
    {
        'tfOpName': 'Conv2DBackpropInput',
        'category': 'convolution',
        'inputs': [
            { 'start': 2, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
            { 'start': 0, 'name': 'outputShape', 'type': 'number[]' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            },
            {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': []
            },
            {
                'tfName': 'dilations',
                'name': 'dilations',
                'type': 'number[]',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'DepthwiseConv2d',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'input', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': []
            },
            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'DepthwiseConv2dNative',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'input', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': []
            },
            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'FusedDepthwiseConv2dNative',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
            { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true },
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            {
                'tfName': 'dilations',
                'name': 'dilations',
                'type': 'number[]',
                'defaultValue': [1, 1, 1, 1]
            },
            {
                'tfName': 'fused_ops',
                'name': 'fusedOps',
                'type': 'string[]',
                'defaultValue': []
            },
            {
                'tfName': 'explicit_paddings',
                'name': 'explicitPaddings',
                'type': 'number[]',
                'defaultValue': []
            }
        ]
    },
    {
        'tfOpName': 'Conv3D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }, {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'defaultValue': 'NHWC'
            },
            { 'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]' }
        ],
    },
    {
        'tfOpName': 'Dilation2D',
        'category': 'convolution',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'filter', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'strides', 'name': 'strides', 'type': 'number[]' },
            { 'tfName': 'rates', 'name': 'dilations', 'type': 'number[]' },
            { 'tfName': 'padding', 'name': 'pad', 'type': 'string' }
        ]
    }
];
//# sourceMappingURL=convolution.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Fill',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'shape', 'type': 'number[]' },
            { 'start': 1, 'name': 'value', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'LinSpace',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'start', 'type': 'number' },
            { 'start': 1, 'name': 'stop', 'type': 'number' },
            { 'start': 2, 'name': 'num', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'OneHot',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'indices', 'type': 'tensor' },
            { 'start': 1, 'name': 'depth', 'type': 'number' },
            { 'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1 },
            { 'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0 },
        ],
        'attrs': [
            {
                'tfName': 'axis',
                'name': 'axis',
                'type': 'number',
                'notSupported': true
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Ones',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'shape', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'OnesLike',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [{ 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'RandomUniform',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'shape', 'type': 'number[]' },
        ],
        'attrs': [
            {
                'tfName': 'minval',
                'name': 'minval',
                'type': 'number',
                'defaultValue': 0
            },
            {
                'tfName': 'maxval',
                'name': 'maxval',
                'type': 'number',
                'defaultValue': 1
            },
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
            { 'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0 }, {
                'tfName': 'seed2',
                'name': 'seed2',
                'type': 'number',
                'defaultValue': 0,
                'notSupported': true
            },
            { 'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Range',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'start', 'type': 'number' },
            { 'start': 1, 'name': 'stop', 'type': 'number' },
            { 'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0 },
        ],
        'attrs': [{ 'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'TruncatedNormal',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'shape', 'type': 'number[]' },
        ],
        'attrs': [
            {
                'tfName': 'means',
                'name': 'mean',
                'type': 'number',
                'defaultValue': 0.0
            },
            {
                'tfName': 'stddev',
                'name': 'stdDev',
                'type': 'number',
                'defaultValue': 1.0
            },
            { 'tfName': 'seed', 'name': 'seed', 'type': 'number' }, {
                'tfName': 'seed2',
                'name': 'seed2',
                'type': 'number',
                'defaultValue': 0,
                'notSupported': true
            },
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' },
            { 'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Zeros',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'shape', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'ZerosLike',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [{ 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' }]
    },
    {
        'tfOpName': 'Multinomial',
        'category': 'creation',
        'inputs': [
            { 'start': 0, 'name': 'logits', 'type': 'tensor' },
            { 'start': 1, 'name': 'numSamples', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'seed', 'name': 'seed', 'type': 'number' },
            { 'tfName': 'seed2', 'name': 'seed2', 'type': 'number' },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype' },
            { 'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype' }
        ]
    }
];
//# sourceMappingURL=creation.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'NonMaxSuppressionV2',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
            { 'start': 1, 'name': 'scores', 'type': 'tensor' },
            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'NonMaxSuppressionV3',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
            { 'start': 1, 'name': 'scores', 'type': 'tensor' },
            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },
            { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'NonMaxSuppressionV4',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
            { 'start': 1, 'name': 'scores', 'type': 'tensor' },
            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },
            { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' }
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'T_threshold',
                'name': 'threshold',
                'type': 'dtype',
                'notSupported': true
            },
            {
                'tfName': 'pad_to_max_output_size',
                'name': 'padToMaxOutputSize',
                'type': 'bool'
            }
        ]
    },
    {
        'tfOpName': 'NonMaxSuppressionV5',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'boxes', 'type': 'tensor' },
            { 'start': 1, 'name': 'scores', 'type': 'tensor' },
            { 'start': 2, 'name': 'maxOutputSize', 'type': 'number' },
            { 'start': 3, 'name': 'iouThreshold', 'type': 'number' },
            { 'start': 4, 'name': 'scoreThreshold', 'type': 'number' },
            { 'start': 5, 'name': 'softNmsSigma', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'Where',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'condition', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'ListDiff',
        'category': 'dynamic',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'y', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'T',
                'name': 'dtype',
                'type': 'dtype',
                'notSupported': true
            }]
    }
];
//# sourceMappingURL=dynamic.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'TopKV2',
        'category': 'evaluation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'k', 'type': 'number' },
        ],
        'attrs': [{ 'tfName': 'sorted', 'name': 'sorted', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Unique',
        'category': 'evaluation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
    },
    {
        'tfOpName': 'UniqueV2',
        'category': 'evaluation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number' },
        ],
    },
];
//# sourceMappingURL=evaluation.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'PlaceholderWithDefault',
        'category': 'graph',
        'inputs': [
            { 'start': 0, 'name': 'default', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'shape', 'name': 'shape', 'type': 'shape' },
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }
        ]
    },
    {
        'tfOpName': 'Placeholder',
        'category': 'graph',
        'attrs': [
            { 'tfName': 'shape', 'name': 'shape', 'type': 'shape' },
            { 'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype' }
        ]
    },
    { 'tfOpName': 'Const', 'category': 'graph' }, {
        'tfOpName': 'Identity',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'IdentityN',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors' }]
    },
    {
        'tfOpName': 'Snapshot',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'Rank',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'Size',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'Shape',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'ShapeN',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors' }]
    },
    {
        'tfOpName': 'Print',
        'category': 'graph',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'data', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'message', 'name': 'message', 'type': 'string' }, {
                'tfName': 'first_n',
                'name': 'firstN',
                'type': 'number',
                'notSupported': true
            },
            {
                'tfName': 'summarize',
                'name': 'summarize',
                'type': 'number',
                'defaultValue': 3
            }
        ]
    },
    { 'tfOpName': 'NoOp', 'category': 'graph', 'inputs': [] }, {
        'tfOpName': 'StopGradient',
        'category': 'graph',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'FakeQuantWithMinMaxVars',
        'category': 'graph',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'min', 'name': 'min', 'type': 'number' },
            { 'tfName': 'max', 'name': 'max', 'type': 'number' }
        ]
    }
];
//# sourceMappingURL=graph.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
const json = [
    {
        'tfOpName': 'HashTable',
        'category': 'hash_table',
        'inputs': [],
        'attrs': [
            { 'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string' },
            {
                'tfName': 'use_node_name_sharing',
                'name': 'useNodeNameSharing',
                'type': 'bool'
            },
            { 'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype' },
            { 'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype' },
        ]
    },
    {
        'tfOpName': 'HashTableV2',
        'category': 'hash_table',
        'inputs': [],
        'attrs': [
            { 'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string' },
            {
                'tfName': 'use_node_name_sharing',
                'name': 'useNodeNameSharing',
                'type': 'bool'
            },
            { 'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype' },
            { 'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype' },
        ]
    },
    {
        'tfOpName': 'LookupTableImport',
        'category': 'hash_table',
        'inputs': [
            { 'start': 0, 'name': 'tableHandle', 'type': 'tensor' },
            { 'start': 1, 'name': 'keys', 'type': 'tensor' },
            { 'start': 2, 'name': 'values', 'type': 'tensor' }
        ],
        'attrs': [
            { 'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'tOut',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'LookupTableImportV2',
        'category': 'hash_table',
        'inputs': [
            { 'start': 0, 'name': 'tableHandle', 'type': 'tensor' },
            { 'start': 1, 'name': 'keys', 'type': 'tensor' },
            { 'start': 2, 'name': 'values', 'type': 'tensor' }
        ],
        'attrs': [
            { 'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'tOut',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'LookupTableFind',
        'category': 'hash_table',
        'inputs': [
            { 'start': 0, 'name': 'tableHandle', 'type': 'tensor' },
            { 'start': 1, 'name': 'keys', 'type': 'tensor' },
            { 'start': 2, 'name': 'defaultValue', 'type': 'tensor' }
        ],
        'attrs': [
            { 'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'tOut',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'LookupTableFindV2',
        'category': 'hash_table',
        'inputs': [
            { 'start': 0, 'name': 'tableHandle', 'type': 'tensor' },
            { 'start': 1, 'name': 'keys', 'type': 'tensor' },
            { 'start': 2, 'name': 'defaultValue', 'type': 'tensor' }
        ],
        'attrs': [
            { 'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true }, {
                'tfName': 'Tout',
                'name': 'tOut',
                'type': 'dtype',
                'notSupported': true
            }
        ]
    }
];
//# sourceMappingURL=hash_table.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'ResizeBilinear',
        'category': 'image',
        'inputs': [
            { 'start': 0, 'name': 'images', 'type': 'tensor' },
            { 'start': 1, 'name': 'size', 'type': 'number[]' },
        ],
        'attrs': [
            { 'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool' }, {
                'tfName': 'half_pixel_centers',
                'name': 'halfPixelCenters',
                'type': 'bool'
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'ResizeNearestNeighbor',
        'category': 'image',
        'inputs': [
            { 'start': 0, 'name': 'images', 'type': 'tensor' },
            { 'start': 1, 'name': 'size', 'type': 'number[]' },
        ],
        'attrs': [
            { 'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool' }, {
                'tfName': 'half_pixel_centers',
                'name': 'halfPixelCenters',
                'type': 'bool'
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'CropAndResize',
        'category': 'image',
        'inputs': [
            { 'start': 0, 'name': 'image', 'type': 'tensor' },
            { 'start': 1, 'name': 'boxes', 'type': 'tensor' },
            { 'start': 2, 'name': 'boxInd', 'type': 'tensor' },
            { 'start': 3, 'name': 'cropSize', 'type': 'number[]' },
        ],
        'attrs': [
            { 'tfName': 'method', 'name': 'method', 'type': 'string' }, {
                'tfName': 'extrapolation_value',
                'name': 'extrapolationValue',
                'type': 'number'
            }
        ]
    }
];
//# sourceMappingURL=image.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Equal',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'NotEqual',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Greater',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'GreaterEqual',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Less',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'LessEqual',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'LogicalAnd',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'LogicalNot',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'LogicalOr',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Select',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'condition', 'type': 'tensor' },
            { 'start': 1, 'name': 'a', 'type': 'tensor' },
            { 'start': 2, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'SelectV2',
        'category': 'logical',
        'inputs': [
            { 'start': 0, 'name': 'condition', 'type': 'tensor' },
            { 'start': 1, 'name': 'a', 'type': 'tensor' },
            { 'start': 2, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'T',
                'name': 'dtype',
                'type': 'dtype',
                'notSupported': true
            }]
    }
];
//# sourceMappingURL=logical.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': '_FusedMatMul',
        'category': 'matrices',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
            { 'start': 2, end: 0, 'name': 'args', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'num_args', 'name': 'numArgs', 'type': 'number' }, {
                'tfName': 'fused_ops',
                'name': 'fusedOps',
                'type': 'string[]',
                'defaultValue': []
            },
            {
                'tfName': 'epsilon',
                'name': 'epsilon',
                'type': 'number',
                'defaultValue': 0.0001
            },
            {
                'tfName': 'transpose_a',
                'name': 'transposeA',
                'type': 'bool',
                'defaultValue': false
            },
            {
                'tfName': 'transpose_b',
                'name': 'transposeB',
                'type': 'bool',
                'defaultValue': false
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'MatMul',
        'category': 'matrices',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'transpose_a',
                'name': 'transposeA',
                'type': 'bool',
                'defaultValue': false
            },
            {
                'tfName': 'transpose_b',
                'name': 'transposeB',
                'type': 'bool',
                'defaultValue': false
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'BatchMatMul',
        'category': 'matrices',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'adj_x',
                'name': 'transposeA',
                'type': 'bool',
                'defaultValue': false
            },
            {
                'tfName': 'adj_y',
                'name': 'transposeB',
                'type': 'bool',
                'defaultValue': false
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'BatchMatMulV2',
        'category': 'matrices',
        'inputs': [
            { 'start': 0, 'name': 'a', 'type': 'tensor' },
            { 'start': 1, 'name': 'b', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'adj_x',
                'name': 'transposeA',
                'type': 'bool',
                'defaultValue': false
            },
            {
                'tfName': 'adj_y',
                'name': 'transposeB',
                'type': 'bool',
                'defaultValue': false
            },
            { 'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true }
        ]
    },
    {
        'tfOpName': 'Transpose',
        'category': 'matrices',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'perm', 'type': 'number[]' },
        ],
        'attrs': [{
                'tfName': 'T',
                'name': 'dtype',
                'type': 'dtype',
                'notSupported': true
            }]
    }
];
//# sourceMappingURL=matrices.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'FusedBatchNorm',
        'category': 'normalization',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'scale', 'type': 'tensor' },
            { 'start': 2, 'name': 'offset', 'type': 'tensor' },
            { 'start': 3, 'name': 'mean', 'type': 'tensor' },
            { 'start': 4, 'name': 'variance', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'epsilon',
                'name': 'epsilon',
                'type': 'number',
                'defaultValue': 0.001
            },
            {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'FusedBatchNormV2',
        'category': 'normalization',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'scale', 'type': 'tensor' },
            { 'start': 2, 'name': 'offset', 'type': 'tensor' },
            { 'start': 3, 'name': 'mean', 'type': 'tensor' },
            { 'start': 4, 'name': 'variance', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'epsilon',
                'name': 'epsilon',
                'type': 'number',
                'defaultValue': 0.001
            },
            {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'FusedBatchNormV3',
        'category': 'normalization',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'scale', 'type': 'tensor' },
            { 'start': 2, 'name': 'offset', 'type': 'tensor' },
            { 'start': 3, 'name': 'mean', 'type': 'tensor' },
            { 'start': 4, 'name': 'variance', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'epsilon',
                'name': 'epsilon',
                'type': 'number',
                'defaultValue': 0.001
            },
            {
                'tfName': 'data_format',
                'name': 'dataFormat',
                'type': 'string',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'LRN',
        'category': 'normalization',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'depth_radius',
                'name': 'radius',
                'type': 'number',
                'defaultValue': 5
            },
            { 'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0 },
            {
                'tfName': 'alpha',
                'name': 'alpha',
                'type': 'number',
                'defaultValue': 1.0
            },
            {
                'tfName': 'beta',
                'name': 'beta',
                'type': 'number',
                'defaultValue': 0.5
            }
        ]
    },
    {
        'tfOpName': 'Softmax',
        'category': 'normalization',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'LogSoftmax',
        'category': 'normalization',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'SparseToDense',
        'category': 'normalization',
        'inputs': [
            { 'start': 0, 'name': 'sparseIndices', 'type': 'tensor' },
            { 'start': 1, 'name': 'outputShape', 'type': 'number[]' },
            { 'start': 2, 'name': 'sparseValues', 'type': 'tensor' },
            { 'start': 3, 'name': 'defaultValue', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'validate_indices',
                'name': 'validateIndices',
                'type': 'bool',
                'defaultValue': true,
                'notSupported': true
            }]
    }
];
//# sourceMappingURL=normalization.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Bincount',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'size', 'type': 'number' },
            { 'start': 2, 'name': 'weights', 'type': 'tensor' }
        ]
    },
    {
        'tfOpName': 'DenseBincount',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'size', 'type': 'number' },
            { 'start': 2, 'name': 'weights', 'type': 'tensor' }
        ],
        'attrs': [{ 'tfName': 'binary_output', 'name': 'binaryOutput', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Max',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Mean',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Min',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Sum',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'All',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Any',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'ArgMax',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'ArgMin',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'Prod',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool' }]
    },
    {
        'tfOpName': 'Cumsum',
        'category': 'reduction',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number' },
        ],
        'attrs': [
            { 'tfName': 'exclusive', 'name': 'exclusive', 'type': 'bool' },
            { 'tfName': 'reverse', 'name': 'reverse', 'type': 'bool' }
        ]
    }
];
//# sourceMappingURL=reduction.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'ConcatV2',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors' },
            { 'start': -1, 'name': 'axis', 'type': 'number' }
        ],
        'attrs': [{ 'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2 }]
    },
    {
        'tfOpName': 'Concat',
        'category': 'slice_join',
        'inputs': [
            { 'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors' },
            { 'start': 0, 'name': 'axis', 'type': 'number' }
        ],
        'attrs': [{ 'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2 }]
    },
    {
        'tfOpName': 'GatherV2',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'tensor' },
            { 'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0 }
        ],
        'attrs': [{
                'tfName': 'batch_dims',
                'name': 'batchDims',
                'type': 'number',
                'defaultValue': 0
            }]
    },
    {
        'tfOpName': 'Gather',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'validate_indices',
                'name': 'validateIndices',
                'type': 'bool',
                'notSupported': true
            }]
    },
    {
        'tfOpName': 'Reverse',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'dims', 'type': 'bool[]' }
        ]
    },
    {
        'tfOpName': 'ReverseV2',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'Slice',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'begin', 'type': 'number[]' },
            { 'start': 2, 'name': 'size', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'StridedSlice',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'begin', 'type': 'number[]' },
            { 'start': 2, 'name': 'end', 'type': 'number[]' },
            { 'start': 3, 'name': 'strides', 'type': 'number[]' },
        ],
        'attrs': [
            {
                'tfName': 'begin_mask',
                'name': 'beginMask',
                'type': 'number',
                'defaultValue': 0
            },
            {
                'tfName': 'end_mask',
                'name': 'endMask',
                'type': 'number',
                'defaultValue': 0
            },
            {
                'tfName': 'new_axis_mask',
                'name': 'newAxisMask',
                'type': 'number',
                'defaultValue': 0
            },
            {
                'tfName': 'ellipsis_mask',
                'name': 'ellipsisMask',
                'type': 'number',
                'defaultValue': 0
            },
            {
                'tfName': 'shrink_axis_mask',
                'name': 'shrinkAxisMask',
                'type': 'number',
                'defaultValue': 0
            }
        ]
    },
    {
        'tfOpName': 'Pack',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors' },
        ],
        'attrs': [
            { 'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0 }
        ]
    },
    {
        'tfOpName': 'Unpack',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'tensor', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0 }, {
                'tfName': 'num',
                'name': 'num',
                'type': 'number',
                'defaultValue': 0,
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'Tile',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'reps', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'Split',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0 },
            { 'start': 1, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'num_split',
                'name': 'numOrSizeSplits',
                'type': 'number',
                'defaultValue': 1
            }]
    },
    {
        'tfOpName': 'SplitV',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]' },
            { 'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0 }
        ]
    },
    {
        'tfOpName': 'ScatterNd',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'indices', 'type': 'tensor' },
            { 'start': 1, 'name': 'values', 'type': 'tensor' },
            { 'start': 2, 'name': 'shape', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'GatherNd',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'indices', 'type': 'tensor' }
        ]
    },
    {
        'tfOpName': 'SparseToDense',
        'category': 'slice_join',
        'inputs': [
            { 'start': 0, 'name': 'sparseIndices', 'type': 'tensor' },
            { 'start': 1, 'name': 'outputShape', 'type': 'number[]' },
            { 'start': 2, 'name': 'sparseValues', 'type': 'tensor' },
            { 'start': 3, 'name': 'defaultValue', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'validate_indices',
                'name': 'validateIndices',
                'type': 'bool',
                'defaultValue': false,
                'notSupported': true
            }]
    }
];
//# sourceMappingURL=slice_join.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'FFT',
        'category': 'spectral',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'IFFT',
        'category': 'spectral',
        'inputs': [{ 'start': 0, 'name': 'x', 'type': 'tensor' }]
    },
    {
        'tfOpName': 'RFFT',
        'category': 'spectral',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' }, {
                'start': 1,
                'name': 'fft_length',
                'type': 'number',
                'notSupported': true
            }
        ]
    },
    {
        'tfOpName': 'IRFFT',
        'category': 'spectral',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' }, {
                'start': 1,
                'name': 'fft_length',
                'type': 'number',
                'notSupported': true
            }
        ]
    }
];
//# sourceMappingURL=spectral.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "json": () => (/* binding */ json)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const json = [
    {
        'tfOpName': 'Cast',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            {
                'tfName': 'SrcT',
                'name': 'sdtype',
                'type': 'dtype',
                'notSupported': true
            },
            { 'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype' }
        ]
    },
    {
        'tfOpName': 'ExpandDims',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'axis', 'type': 'number' }
        ]
    },
    {
        'tfOpName': 'MirrorPad',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'padding', 'type': 'number[]' },
        ],
        'attrs': [{ 'tfName': 'mode', 'name': 'mode', 'type': 'string' }]
    },
    {
        'tfOpName': 'Pad',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'padding', 'type': 'number[]' },
        ],
        'attrs': [{
                'tfName': 'constant_value',
                'name': 'constantValue',
                'type': 'number',
                'defaultValue': 0
            }]
    },
    {
        'tfOpName': 'PadV2',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'padding', 'type': 'number[]' }, {
                'start': 2,
                'name': 'constantValue',
                'type': 'number',
                'defaultValue': 0
            }
        ]
    },
    {
        'tfOpName': 'Reshape',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'shape', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'Squeeze',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [{
                'tfName': 'axis',
                'tfDeprecatedName': 'squeeze_dims',
                'name': 'axis',
                'type': 'number[]'
            }]
    },
    {
        'tfOpName': 'SpaceToBatchND',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'blockShape', 'type': 'number[]' },
            { 'start': 2, 'name': 'paddings', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'BatchToSpaceND',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'blockShape', 'type': 'number[]' },
            { 'start': 2, 'name': 'crops', 'type': 'number[]' }
        ]
    },
    {
        'tfOpName': 'DepthToSpace',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
        ],
        'attrs': [
            { 'tfName': 'block_size', 'name': 'blockSize', 'type': 'number' },
            { 'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string' }
        ]
    },
    {
        'tfOpName': 'BroadcastTo',
        'category': 'transformation',
        'inputs': [
            { 'start': 0, 'name': 'x', 'type': 'tensor' },
            { 'start': 1, 'name': 'shape', 'type': 'number[]' },
        ],
        'attrs': []
    }
];
//# sourceMappingURL=transformation.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executeOp": () => (/* binding */ executeOp)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _custom_op_node_value_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./custom_op/node_value_impl */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js");
/* harmony import */ var _custom_op_register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./custom_op/register */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js");
/* harmony import */ var _executors_arithmetic_executor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./executors/arithmetic_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js");
/* harmony import */ var _executors_basic_math_executor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./executors/basic_math_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js");
/* harmony import */ var _executors_control_executor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./executors/control_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js");
/* harmony import */ var _executors_convolution_executor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./executors/convolution_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js");
/* harmony import */ var _executors_creation_executor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./executors/creation_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js");
/* harmony import */ var _executors_dynamic_executor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./executors/dynamic_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js");
/* harmony import */ var _executors_evaluation_executor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./executors/evaluation_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js");
/* harmony import */ var _executors_graph_executor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./executors/graph_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js");
/* harmony import */ var _executors_hash_table_executor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./executors/hash_table_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js");
/* harmony import */ var _executors_image_executor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./executors/image_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js");
/* harmony import */ var _executors_logical_executor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./executors/logical_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js");
/* harmony import */ var _executors_matrices_executor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./executors/matrices_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js");
/* harmony import */ var _executors_normalization_executor__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./executors/normalization_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js");
/* harmony import */ var _executors_reduction_executor__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./executors/reduction_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js");
/* harmony import */ var _executors_slice_join_executor__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./executors/slice_join_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js");
/* harmony import */ var _executors_spectral_executor__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./executors/spectral_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js");
/* harmony import */ var _executors_transformation_executor__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./executors/transformation_executor */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




















/**
 * Executes the op defined by the node object.
 * @param node
 * @param tensorMap contains tensors for executed nodes and weights
 * @param context contains tensors and information for running the current node.
 * @param resourceManager Optional. Contains global resources of the model.
 */
function executeOp(node, tensorMap, context, resourceManager) {
    const value = ((node, tensorMap, context) => {
        switch (node.category) {
            case 'arithmetic':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_arithmetic_executor__WEBPACK_IMPORTED_MODULE_3__.executeOp(node, tensorMap, context));
            case 'basic_math':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_basic_math_executor__WEBPACK_IMPORTED_MODULE_4__.executeOp(node, tensorMap, context));
            case 'control':
                return _executors_control_executor__WEBPACK_IMPORTED_MODULE_5__.executeOp(node, tensorMap, context);
            case 'convolution':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_convolution_executor__WEBPACK_IMPORTED_MODULE_6__.executeOp(node, tensorMap, context));
            case 'creation':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_creation_executor__WEBPACK_IMPORTED_MODULE_7__.executeOp(node, tensorMap, context));
            case 'dynamic':
                return _executors_dynamic_executor__WEBPACK_IMPORTED_MODULE_8__.executeOp(node, tensorMap, context);
            case 'evaluation':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_evaluation_executor__WEBPACK_IMPORTED_MODULE_9__.executeOp(node, tensorMap, context));
            case 'image':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_image_executor__WEBPACK_IMPORTED_MODULE_12__.executeOp(node, tensorMap, context));
            case 'graph':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_graph_executor__WEBPACK_IMPORTED_MODULE_10__.executeOp(node, tensorMap, context));
            case 'logical':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_logical_executor__WEBPACK_IMPORTED_MODULE_13__.executeOp(node, tensorMap, context));
            case 'matrices':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_matrices_executor__WEBPACK_IMPORTED_MODULE_14__.executeOp(node, tensorMap, context));
            case 'normalization':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_normalization_executor__WEBPACK_IMPORTED_MODULE_15__.executeOp(node, tensorMap, context));
            case 'reduction':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_reduction_executor__WEBPACK_IMPORTED_MODULE_16__.executeOp(node, tensorMap, context));
            case 'slice_join':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_slice_join_executor__WEBPACK_IMPORTED_MODULE_17__.executeOp(node, tensorMap, context));
            case 'spectral':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_spectral_executor__WEBPACK_IMPORTED_MODULE_18__.executeOp(node, tensorMap, context));
            case 'transformation':
                return _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy(() => _executors_transformation_executor__WEBPACK_IMPORTED_MODULE_19__.executeOp(node, tensorMap, context));
            case 'hash_table':
                return _executors_hash_table_executor__WEBPACK_IMPORTED_MODULE_11__.executeOp(node, tensorMap, context, resourceManager);
            case 'custom':
                const opMapper = (0,_custom_op_register__WEBPACK_IMPORTED_MODULE_2__.getRegisteredOp)(node.op);
                if (opMapper && opMapper.customExecutor) {
                    return opMapper.customExecutor(new _custom_op_node_value_impl__WEBPACK_IMPORTED_MODULE_1__.NodeValueImpl(node, tensorMap, context));
                }
                else {
                    throw TypeError(`Custom op ${node.op} is not registered.`);
                }
            default:
                throw TypeError(`Unknown op '${node.op}'. File an issue at ` +
                    `https://github.com/tensorflow/tfjs/issues so we can add it` +
                    `, or register a custom execution with tf.registerOp()`);
        }
    })(node, tensorMap, context);
    if (_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.isPromise(value)) {
        return value.then((data) => [].concat(data));
    }
    return [].concat(value);
}
//# sourceMappingURL=operation_executor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OperationMapper": () => (/* binding */ OperationMapper),
/* harmony export */   "decodeBase64": () => (/* binding */ decodeBase64),
/* harmony export */   "parseStringParam": () => (/* binding */ parseStringParam),
/* harmony export */   "getStringParam": () => (/* binding */ getStringParam),
/* harmony export */   "getBoolParam": () => (/* binding */ getBoolParam),
/* harmony export */   "getNumberParam": () => (/* binding */ getNumberParam),
/* harmony export */   "parseDtypeParam": () => (/* binding */ parseDtypeParam),
/* harmony export */   "getFuncParam": () => (/* binding */ getFuncParam),
/* harmony export */   "getDtypeParam": () => (/* binding */ getDtypeParam),
/* harmony export */   "getDtypeArrayParam": () => (/* binding */ getDtypeArrayParam),
/* harmony export */   "parseTensorShapeParam": () => (/* binding */ parseTensorShapeParam),
/* harmony export */   "getTensorShapeParam": () => (/* binding */ getTensorShapeParam),
/* harmony export */   "getNumericArrayParam": () => (/* binding */ getNumericArrayParam),
/* harmony export */   "getStringArrayParam": () => (/* binding */ getStringArrayParam),
/* harmony export */   "getTensorShapeArrayParam": () => (/* binding */ getTensorShapeArrayParam),
/* harmony export */   "getBoolArrayParam": () => (/* binding */ getBoolArrayParam)
/* harmony export */ });
/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ "./node_modules/@tensorflow/tfjs-core/dist/index.js");
/* harmony import */ var _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/compiled_api */ "./node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js");
/* harmony import */ var _custom_op_register__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./custom_op/register */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js");
/* harmony import */ var _executors_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./executors/utils */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js");
/* harmony import */ var _op_list_arithmetic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./op_list/arithmetic */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js");
/* harmony import */ var _op_list_basic_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./op_list/basic_math */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js");
/* harmony import */ var _op_list_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./op_list/control */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js");
/* harmony import */ var _op_list_convolution__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./op_list/convolution */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js");
/* harmony import */ var _op_list_creation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./op_list/creation */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js");
/* harmony import */ var _op_list_dynamic__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./op_list/dynamic */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js");
/* harmony import */ var _op_list_evaluation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./op_list/evaluation */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js");
/* harmony import */ var _op_list_graph__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./op_list/graph */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js");
/* harmony import */ var _op_list_hash_table__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./op_list/hash_table */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js");
/* harmony import */ var _op_list_image__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./op_list/image */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js");
/* harmony import */ var _op_list_logical__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./op_list/logical */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js");
/* harmony import */ var _op_list_matrices__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./op_list/matrices */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js");
/* harmony import */ var _op_list_normalization__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./op_list/normalization */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js");
/* harmony import */ var _op_list_reduction__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./op_list/reduction */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js");
/* harmony import */ var _op_list_slice_join__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./op_list/slice_join */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js");
/* harmony import */ var _op_list_spectral__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./op_list/spectral */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js");
/* harmony import */ var _op_list_transformation__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./op_list/transformation */ "./node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





















class OperationMapper {
    // Singleton instance for the mapper
    static get Instance() {
        return this._instance || (this._instance = new this());
    }
    // Loads the op mapping from the JSON file.
    constructor() {
        const ops = [
            _op_list_arithmetic__WEBPACK_IMPORTED_MODULE_4__, _op_list_basic_math__WEBPACK_IMPORTED_MODULE_5__, _op_list_control__WEBPACK_IMPORTED_MODULE_6__, _op_list_convolution__WEBPACK_IMPORTED_MODULE_7__, _op_list_creation__WEBPACK_IMPORTED_MODULE_8__, _op_list_dynamic__WEBPACK_IMPORTED_MODULE_9__,
            _op_list_evaluation__WEBPACK_IMPORTED_MODULE_10__, _op_list_logical__WEBPACK_IMPORTED_MODULE_14__, _op_list_image__WEBPACK_IMPORTED_MODULE_13__, _op_list_graph__WEBPACK_IMPORTED_MODULE_11__, _op_list_matrices__WEBPACK_IMPORTED_MODULE_15__, _op_list_normalization__WEBPACK_IMPORTED_MODULE_16__, _op_list_reduction__WEBPACK_IMPORTED_MODULE_17__,
            _op_list_slice_join__WEBPACK_IMPORTED_MODULE_18__, _op_list_spectral__WEBPACK_IMPORTED_MODULE_19__, _op_list_transformation__WEBPACK_IMPORTED_MODULE_20__, _op_list_hash_table__WEBPACK_IMPORTED_MODULE_12__
        ];
        const mappersJson = [].concat(...ops.map(op => op.json));
        this.opMappers = mappersJson.reduce((map, mapper) => {
            map[mapper.tfOpName] = mapper;
            return map;
        }, {});
    }
    // Converts the model inference graph from Tensorflow GraphDef to local
    // representation for TensorFlow.js API
    transformGraph(graph, signature = {}) {
        const tfNodes = graph.node;
        const placeholders = [];
        const weights = [];
        const initNodes = [];
        const nodes = tfNodes.reduce((map, node) => {
            map[node.name] = this.mapNode(node);
            if (node.op.startsWith('Placeholder')) {
                placeholders.push(map[node.name]);
            }
            else if (node.op === 'Const') {
                weights.push(map[node.name]);
            }
            else if (node.input == null || node.input.length === 0) {
                initNodes.push(map[node.name]);
            }
            return map;
        }, {});
        let inputs = [];
        const outputs = [];
        let inputNodeNameToKey = {};
        let outputNodeNameToKey = {};
        if (signature != null) {
            inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);
            outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);
        }
        const allNodes = Object.keys(nodes);
        allNodes.forEach(key => {
            const node = nodes[key];
            node.inputNames.forEach(name => {
                const [nodeName,] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(name);
                node.inputs.push(nodes[nodeName]);
                nodes[nodeName].children.push(node);
            });
        });
        // if signature has not outputs set, add any node that does not have
        // outputs.
        if (Object.keys(outputNodeNameToKey).length === 0) {
            allNodes.forEach(key => {
                const node = nodes[key];
                if (node.children.length === 0) {
                    outputs.push(node);
                }
            });
        }
        else {
            Object.keys(outputNodeNameToKey).forEach(name => {
                const [nodeName,] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(name);
                const node = nodes[nodeName];
                if (node != null) {
                    node.signatureKey = outputNodeNameToKey[name];
                    outputs.push(node);
                }
            });
        }
        if (Object.keys(inputNodeNameToKey).length > 0) {
            Object.keys(inputNodeNameToKey).forEach(name => {
                const [nodeName,] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(name);
                const node = nodes[nodeName];
                if (node) {
                    node.signatureKey = inputNodeNameToKey[name];
                    inputs.push(node);
                }
            });
        }
        else {
            inputs = placeholders;
        }
        let functions = {};
        if (graph.library != null && graph.library.function != null) {
            functions = graph.library.function.reduce((functions, func) => {
                functions[func.signature.name] = this.mapFunction(func);
                return functions;
            }, {});
        }
        const result = { nodes, inputs, outputs, weights, placeholders, signature, functions };
        if (initNodes.length > 0) {
            result.initNodes = initNodes;
        }
        return result;
    }
    mapSignatureEntries(entries) {
        return Object.keys(entries || {})
            .reduce((prev, curr) => {
            prev[entries[curr].name] = curr;
            return prev;
        }, {});
    }
    mapNode(node) {
        // Unsupported ops will cause an error at run-time (not parse time), since
        // they may not be used by the actual execution subgraph.
        const mapper = (0,_custom_op_register__WEBPACK_IMPORTED_MODULE_2__.getRegisteredOp)(node.op) || this.opMappers[node.op] || {};
        if (node.attr == null) {
            node.attr = {};
        }
        const newNode = {
            name: node.name,
            op: node.op,
            category: mapper.category,
            inputNames: (node.input ||
                []).map(input => input.startsWith('^') ? input.substr(1) : input),
            inputs: [],
            children: [],
            inputParams: {},
            attrParams: {},
            rawAttrs: node.attr
        };
        if (mapper.inputs != null) {
            newNode.inputParams =
                mapper.inputs.reduce((map, param) => {
                    map[param.name] = {
                        type: param.type,
                        inputIndexStart: param.start,
                        inputIndexEnd: param.end
                    };
                    return map;
                }, {});
        }
        if (mapper.attrs != null) {
            newNode.attrParams =
                mapper.attrs.reduce((map, param) => {
                    const type = param.type;
                    let value = undefined;
                    switch (param.type) {
                        case 'string':
                            value = getStringParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'string[]':
                            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'number':
                            value = getNumberParam(node.attr, param.tfName, (param.defaultValue || 0));
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'number[]':
                            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'bool':
                            value = getBoolParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'bool[]':
                            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'shape':
                            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'shape[]':
                            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'dtype':
                            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'dtype[]':
                            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'func':
                            value = getFuncParam(node.attr, param.tfName, param.defaultValue);
                            if (value === undefined && !!param.tfDeprecatedName) {
                                value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);
                            }
                            break;
                        case 'tensor':
                        case 'tensors':
                            break;
                        default:
                            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);
                    }
                    map[param.name] = { value, type };
                    return map;
                }, {});
        }
        return newNode;
    }
    // map the TFunctionDef to TFJS graph object
    mapFunction(functionDef) {
        const tfNodes = functionDef.nodeDef;
        const placeholders = [];
        const weights = [];
        let nodes = {};
        if (tfNodes != null) {
            nodes = tfNodes.reduce((map, node) => {
                map[node.name] = this.mapNode(node);
                if (node.op === 'Const') {
                    weights.push(map[node.name]);
                }
                return map;
            }, {});
        }
        const inputs = [];
        const outputs = [];
        functionDef.signature.inputArg.forEach(arg => {
            const [nodeName,] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(arg.name);
            const node = {
                name: nodeName,
                op: 'Placeholder',
                inputs: [],
                inputNames: [],
                category: 'graph',
                inputParams: {},
                attrParams: { dtype: { value: parseDtypeParam(arg.type), type: 'dtype' } },
                children: []
            };
            node.signatureKey = arg.name;
            inputs.push(node);
            nodes[nodeName] = node;
        });
        const allNodes = Object.keys(nodes);
        allNodes.forEach(key => {
            const node = nodes[key];
            node.inputNames.forEach(name => {
                const [nodeName,] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(name);
                node.inputs.push(nodes[nodeName]);
                nodes[nodeName].children.push(node);
            });
        });
        const returnNodeMap = functionDef.ret;
        functionDef.signature.outputArg.forEach(output => {
            const [nodeName, index] = (0,_executors_utils__WEBPACK_IMPORTED_MODULE_3__.getNodeNameAndIndex)(returnNodeMap[output.name]);
            const node = nodes[nodeName];
            if (node != null) {
                node.defaultOutput = index;
                outputs.push(node);
            }
        });
        const signature = this.mapArgsToSignature(functionDef);
        return { nodes, inputs, outputs, weights, placeholders, signature };
    }
    mapArgsToSignature(functionDef) {
        return {
            methodName: functionDef.signature.name,
            inputs: functionDef.signature.inputArg.reduce((map, arg) => {
                map[arg.name] = this.mapArgToTensorInfo(arg);
                return map;
            }, {}),
            outputs: functionDef.signature.outputArg.reduce((map, arg) => {
                map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);
                return map;
            }, {}),
        };
    }
    mapArgToTensorInfo(arg, nameMap) {
        let name = arg.name;
        if (nameMap != null) {
            name = nameMap[name];
        }
        return { name, dtype: arg.type };
    }
}
function decodeBase64(text) {
    const global = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().global;
    if (typeof global.atob !== 'undefined') {
        return global.atob(text);
    }
    else if (typeof Buffer !== 'undefined') {
        return new Buffer(text, 'base64').toString();
    }
    else {
        throw new Error('Unable to decode base64 in this environment. ' +
            'Missing built-in atob() or Buffer()');
    }
}
function parseStringParam(s, keepCase) {
    const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);
    return keepCase ? value : value.toLowerCase();
}
function getStringParam(attrs, name, def, keepCase = false) {
    const param = attrs[name];
    if (param != null) {
        return parseStringParam(param.s, keepCase);
    }
    return def;
}
function getBoolParam(attrs, name, def) {
    const param = attrs[name];
    return param ? param.b : def;
}
function getNumberParam(attrs, name, def) {
    const param = attrs[name] || {};
    const value = param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);
    return (typeof value === 'number') ? value : parseInt(value, 10);
}
function parseDtypeParam(value) {
    if (typeof (value) === 'string') {
        // tslint:disable-next-line:no-any
        value = _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType[value];
    }
    switch (value) {
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_FLOAT:
            return 'float32';
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_INT32:
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_INT64:
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_INT8:
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_UINT8:
            return 'int32';
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_BOOL:
            return 'bool';
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_DOUBLE:
            return 'float32';
        case _data_compiled_api__WEBPACK_IMPORTED_MODULE_1__.DataType.DT_STRING:
            return 'string';
        default:
            // Unknown dtype error will happen at runtime (instead of parse time),
            // since these nodes might not be used by the actual subgraph execution.
            return null;
    }
}
function getFuncParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.func) {
        return param.func.name;
    }
    return def;
}
function getDtypeParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.type) {
        return parseDtypeParam(param.type);
    }
    return def;
}
function getDtypeArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.list && param.list.type) {
        return param.list.type.map(v => parseDtypeParam(v));
    }
    return def;
}
function parseTensorShapeParam(shape) {
    if (shape.unknownRank) {
        return undefined;
    }
    if (shape.dim != null) {
        return shape.dim.map(dim => (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));
    }
    return [];
}
function getTensorShapeParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.shape) {
        return parseTensorShapeParam(param.shape);
    }
    return def;
}
function getNumericArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param) {
        return ((param.list.f && param.list.f.length ? param.list.f :
            param.list.i) ||
            [])
            .map(v => (typeof v === 'number') ? v : parseInt(v, 10));
    }
    return def;
}
function getStringArrayParam(attrs, name, def, keepCase = false) {
    const param = attrs[name];
    if (param && param.list && param.list.s) {
        return param.list.s.map((v) => {
            return parseStringParam(v, keepCase);
        });
    }
    return def;
}
function getTensorShapeArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.list && param.list.shape) {
        return param.list.shape.map((v) => {
            return parseTensorShapeParam(v);
        });
    }
    return def;
}
function getBoolArrayParam(attrs, name, def) {
    const param = attrs[name];
    if (param && param.list && param.list.b) {
        return param.list.b;
    }
    return def;
}
//# sourceMappingURL=operation_mapper.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-converter/dist/version.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/version.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '2.8.6';

//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/backend.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/backend.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EPSILON_FLOAT32": () => (/* binding */ EPSILON_FLOAT32),
/* harmony export */   "EPSILON_FLOAT16": () => (/* binding */ EPSILON_FLOAT16),
/* harmony export */   "DataStorage": () => (/* binding */ DataStorage),
/* harmony export */   "KernelBackend": () => (/* binding */ KernelBackend)
/* harmony export */ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EPSILON_FLOAT32 = 1e-7;
const EPSILON_FLOAT16 = 1e-4;
/** Convenient class for storing tensor-related data. */
class DataStorage {
    constructor(backend, dataMover) {
        this.backend = backend;
        this.dataMover = dataMover;
        this.data = new WeakMap();
        this.dataIdsCount = 0;
    }
    get(dataId) {
        if (!this.data.has(dataId)) {
            this.dataMover.moveData(this.backend, dataId);
        }
        return this.data.get(dataId);
    }
    set(dataId, value) {
        this.dataIdsCount++;
        this.data.set(dataId, value);
    }
    has(dataId) {
        return this.data.has(dataId);
    }
    delete(dataId) {
        this.dataIdsCount--;
        return this.data.delete(dataId);
    }
    numDataIds() {
        return this.dataIdsCount;
    }
}
/**
 * The interface that defines the kernels that should be implemented when
 * adding a new backend. New backends don't need to implement every one of the
 * methods, this can be done gradually (throw an error for unimplemented
 * methods).
 */
class KernelBackend {
    /**
     * Decrease the complex ref count for the dataId, this is useful for WebGL
     * backend to keep the real and imag components of the complex tensor in sync
     * with the engine. WASM and node do not have internal ref count, they will
     * use on the default implementation.
     * @param dataId
     */
    decComplexRef(dataId) {
        return;
    }
    time(f) {
        return notYetImplemented('time');
    }
    read(dataId) {
        return notYetImplemented('read');
    }
    readSync(dataId) {
        return notYetImplemented('readSync');
    }
    numDataIds() {
        return notYetImplemented('numDataIds');
    }
    disposeData(dataId) {
        return notYetImplemented('disposeData');
    }
    write(values, shape, dtype) {
        return notYetImplemented('write');
    }
    move(dataId, values, shape, dtype) {
        return notYetImplemented('move');
    }
    memory() {
        return notYetImplemented('memory');
    }
    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */
    floatPrecision() {
        return notYetImplemented('floatPrecision');
    }
    /** Returns the smallest representable number.  */
    epsilon() {
        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
    }
    batchMatMul(a, b, transposeA, transposeB) {
        return notYetImplemented('batchMatMul');
    }
    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {
        return notYetImplemented('fusedBatchMatMul');
    }
    slice(x, begin, size) {
        return notYetImplemented('slice');
    }
    stridedSlice(x, begin, end, strides) {
        return notYetImplemented('stridedSlice');
    }
    unstack(x, axis) {
        return notYetImplemented('unstack');
    }
    reverse(a, axis) {
        return notYetImplemented('reverse');
    }
    concat(tensors, axis) {
        return notYetImplemented('concat');
    }
    neg(a) {
        return notYetImplemented('neg');
    }
    add(a, b) {
        return notYetImplemented('add');
    }
    addN(tensors) {
        return notYetImplemented('addN');
    }
    subtract(a, b) {
        return notYetImplemented('subtract');
    }
    multiply(a, b) {
        return notYetImplemented('multiply');
    }
    realDivide(a, b) {
        return notYetImplemented('realDivide');
    }
    floorDiv(a, b) {
        return notYetImplemented('floorDiv');
    }
    sum(x, axes) {
        return notYetImplemented('sum');
    }
    prod(x, axes) {
        return notYetImplemented('prod');
    }
    unsortedSegmentSum(x, segmentIds, numSegments) {
        return notYetImplemented('unsortedSegmentSum');
    }
    argMin(x, axis) {
        return notYetImplemented('argMin');
    }
    argMax(x, axis) {
        return notYetImplemented('argMax');
    }
    equal(a, b) {
        return notYetImplemented('equal');
    }
    notEqual(a, b) {
        return notYetImplemented('notEqual');
    }
    less(a, b) {
        return notYetImplemented('less');
    }
    lessEqual(a, b) {
        return notYetImplemented('lessEqual');
    }
    greater(a, b) {
        return notYetImplemented('greater');
    }
    greaterEqual(a, b) {
        return notYetImplemented('greaterEqual');
    }
    logicalNot(a) {
        return notYetImplemented('logicalNot');
    }
    logicalAnd(a, b) {
        return notYetImplemented('logicalAnd');
    }
    logicalOr(a, b) {
        return notYetImplemented('logicalOr');
    }
    where(condition) {
        return notYetImplemented('where');
    }
    select(condition, a, b) {
        return notYetImplemented('select');
    }
    topk(x, k, sorted) {
        return notYetImplemented('topk');
    }
    min(x, axes) {
        return notYetImplemented('min');
    }
    minimum(a, b) {
        return notYetImplemented('minimum');
    }
    mod(a, b) {
        return notYetImplemented('mod');
    }
    max(x, axes) {
        return notYetImplemented('max');
    }
    maximum(a, b) {
        return notYetImplemented('maximum');
    }
    all(x, axes) {
        return notYetImplemented('all');
    }
    any(x, axes) {
        return notYetImplemented('any');
    }
    squaredDifference(a, b) {
        return notYetImplemented('squaredDifference');
    }
    ceil(x) {
        return notYetImplemented('ceil');
    }
    floor(x) {
        return notYetImplemented('floor');
    }
    round(x) {
        return notYetImplemented('round');
    }
    sign(x) {
        return notYetImplemented('sign');
    }
    isNaN(x) {
        return notYetImplemented('isNaN');
    }
    isInf(x) {
        return notYetImplemented('isInf');
    }
    isFinite(x) {
        return notYetImplemented('isFinite');
    }
    pow(a, b) {
        return notYetImplemented('pow');
    }
    exp(x) {
        return notYetImplemented('exp');
    }
    expm1(x) {
        return notYetImplemented('expm1');
    }
    softmax(x, dim) {
        return notYetImplemented('softmax');
    }
    log(x) {
        return notYetImplemented('log');
    }
    log1p(x) {
        return notYetImplemented('log1p');
    }
    sqrt(x) {
        return notYetImplemented('sqrt');
    }
    rsqrt(x) {
        return notYetImplemented('rsqrt');
    }
    square(x) {
        return notYetImplemented('square');
    }
    reciprocal(x) {
        return notYetImplemented('reciprocal');
    }
    relu(x) {
        return notYetImplemented('relu');
    }
    relu6(x) {
        return notYetImplemented('relu6');
    }
    prelu(x, a) {
        return notYetImplemented('prelu');
    }
    elu(x) {
        return notYetImplemented('elu');
    }
    eluDer(dy, y) {
        return notYetImplemented('eluDer');
    }
    selu(x) {
        return notYetImplemented('selu');
    }
    int(x) {
        return notYetImplemented('int');
    }
    clip(x, min, max) {
        return notYetImplemented('clip');
    }
    abs(x) {
        return notYetImplemented('abs');
    }
    complexAbs(x) {
        return notYetImplemented('complexAbs');
    }
    sigmoid(x) {
        return notYetImplemented('sigmoid');
    }
    softplus(x) {
        return notYetImplemented('softplus');
    }
    sin(x) {
        return notYetImplemented('sin');
    }
    cos(x) {
        return notYetImplemented('cos');
    }
    tan(x) {
        return notYetImplemented('tan');
    }
    asin(x) {
        return notYetImplemented('asin');
    }
    acos(x) {
        return notYetImplemented('acos');
    }
    atan(x) {
        return notYetImplemented('atan');
    }
    atan2(a, b) {
        return notYetImplemented('atan2');
    }
    sinh(x) {
        return notYetImplemented('sinh');
    }
    cosh(x) {
        return notYetImplemented('cosh');
    }
    tanh(x) {
        return notYetImplemented('tanh');
    }
    asinh(x) {
        return notYetImplemented('asinh');
    }
    acosh(x) {
        return notYetImplemented('acosh');
    }
    atanh(x) {
        return notYetImplemented('atanh');
    }
    erf(x) {
        return notYetImplemented('erf');
    }
    step(x, alpha) {
        return notYetImplemented('step');
    }
    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {
        return notYetImplemented('fusedConv2d');
    }
    conv2d(x, filter, convInfo) {
        return notYetImplemented('conv2d');
    }
    conv2dDerInput(dy, filter, convInfo) {
        return notYetImplemented('conv2dDerInput');
    }
    conv2dDerFilter(x, dY, convInfo) {
        return notYetImplemented('conv2dDerFilter');
    }
    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {
        return notYetImplemented('fusedDepthwiseConv2D');
    }
    depthwiseConv2D(input, filter, convInfo) {
        return notYetImplemented('depthwiseConv2D');
    }
    depthwiseConv2DDerInput(dy, filter, convInfo) {
        return notYetImplemented('depthwiseConv2DDerInput');
    }
    depthwiseConv2DDerFilter(x, dY, convInfo) {
        return notYetImplemented('depthwiseConv2DDerFilter');
    }
    conv3d(x, filter, convInfo) {
        return notYetImplemented('conv3d');
    }
    conv3dDerInput(dy, filter, convInfo) {
        return notYetImplemented('conv3dDerInput');
    }
    conv3dDerFilter(x, dY, convInfo) {
        return notYetImplemented('conv3dDerFilter');
    }
    maxPool(x, convInfo) {
        return notYetImplemented('maxPool');
    }
    maxPoolBackprop(dy, x, y, convInfo) {
        return notYetImplemented('maxPoolBackprop');
    }
    avgPool(x, convInfo) {
        return notYetImplemented('avgPool');
    }
    avgPoolBackprop(dy, x, convInfo) {
        return notYetImplemented('avgPoolBackprop');
    }
    avgPool3d(x, convInfo) {
        return notYetImplemented('avgPool3d');
    }
    avgPool3dBackprop(dy, x, convInfo) {
        return notYetImplemented('avgPool3dBackprop');
    }
    maxPool3d(x, convInfo) {
        return notYetImplemented('maxPool3d');
    }
    maxPool3dBackprop(dy, x, y, convInfo) {
        return notYetImplemented('maxPool3dBackprop');
    }
    reshape(x, shape) {
        return notYetImplemented('reshape');
    }
    cast(x, dtype) {
        return notYetImplemented('cast');
    }
    tile(x, reps) {
        return notYetImplemented('tile');
    }
    pad(x, paddings, constantValue) {
        return notYetImplemented('pad');
    }
    transpose(x, perm) {
        return notYetImplemented('transpose');
    }
    gather(x, indices, axis, batchDims = 0) {
        return notYetImplemented('gather');
    }
    gatherND(x, indices) {
        return notYetImplemented('gatherND');
    }
    scatterND(indices, updates, shape) {
        return notYetImplemented('scatterND');
    }
    batchToSpaceND(x, blockShape, crops) {
        return notYetImplemented('batchToSpaceND');
    }
    spaceToBatchND(x, blockShape, paddings) {
        return notYetImplemented('spaceToBatchND');
    }
    resizeBilinear(x, newHeight, newWidth, alignCorners, halfPixelCenters) {
        return notYetImplemented('resizeBilinear');
    }
    resizeBilinearBackprop(dy, x, alignCorners) {
        return notYetImplemented('resizeBilinearBackprop');
    }
    resizeNearestNeighbor(x, newHEight, newWidth, alignCorners, halfPixelCenters) {
        return notYetImplemented('resizeNearestNeighbor');
    }
    resizeNearestNeighborBackprop(dy, x, alignCorners) {
        return notYetImplemented('resizeNearestNeighborBackprop');
    }
    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {
        return notYetImplemented('batchNorm');
    }
    localResponseNormalization4D(x, radius, bias, alpha, beta) {
        return notYetImplemented('localResponseNormalization4D');
    }
    LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {
        return notYetImplemented('LRNGrad');
    }
    multinomial(logits, normalized, numSamples, seed) {
        return notYetImplemented('multinomial');
    }
    oneHot(indices, depth, onValue, offValue) {
        return notYetImplemented('oneHot');
    }
    cumsum(x, axis, exclusive, reverse) {
        return notYetImplemented('cumsum');
    }
    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
        return notYetImplemented('nonMaxSuppression');
    }
    fft(x) {
        return notYetImplemented('fft');
    }
    ifft(x) {
        return notYetImplemented('ifft');
    }
    complex(real, imag) {
        return notYetImplemented('complex');
    }
    real(input) {
        return notYetImplemented('real');
    }
    imag(input) {
        return notYetImplemented('imag');
    }
    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {
        return notYetImplemented('cropAndResize');
    }
    depthToSpace(x, blockSize, dataFormat) {
        return notYetImplemented('depthToSpace');
    }
    // Aligns with the "SplitV" kernel in TensorFlow.
    split(value, sizeSplits, axis) {
        return notYetImplemented('split');
    }
    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {
        return notYetImplemented('sparseToDense');
    }
    diag(x) {
        return notYetImplemented('diag');
    }
    fill(shape, value, dtype) {
        return notYetImplemented('fill');
    }
    onesLike(x) {
        return notYetImplemented('onesLike');
    }
    zerosLike(x) {
        return notYetImplemented('zerosLike');
    }
    linspace(start, stop, num) {
        return notYetImplemented('linspace');
    }
    dispose() {
        return notYetImplemented('dispose');
    }
}
function notYetImplemented(kernelName) {
    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +
        `This kernel may not be supported by the tfjs backend you have chosen`);
}
//# sourceMappingURL=backend.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertAxesAreInnerMostDims": () => (/* reexport safe */ _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.assertAxesAreInnerMostDims),
/* harmony export */   "axesAreInnerMostDims": () => (/* reexport safe */ _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.axesAreInnerMostDims),
/* harmony export */   "combineLocations": () => (/* reexport safe */ _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.combineLocations),
/* harmony export */   "computeOutAndReduceShapes": () => (/* reexport safe */ _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.computeOutAndReduceShapes),
/* harmony export */   "expandShapeToKeepDim": () => (/* reexport safe */ _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.expandShapeToKeepDim),
/* harmony export */   "getAxesPermutation": () => (/* reexport safe */ _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.getAxesPermutation),
/* harmony export */   "getInnerMostAxes": () => (/* reexport safe */ _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.getInnerMostAxes),
/* harmony export */   "getUndoAxesPermutation": () => (/* reexport safe */ _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.getUndoAxesPermutation),
/* harmony export */   "assertAndGetBroadcastShape": () => (/* reexport safe */ _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__.assertAndGetBroadcastShape),
/* harmony export */   "getBroadcastDims": () => (/* reexport safe */ _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__.getBroadcastDims),
/* harmony export */   "getReductionAxes": () => (/* reexport safe */ _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__.getReductionAxes),
/* harmony export */   "assertParamsConsistent": () => (/* reexport safe */ _ops_concat_util__WEBPACK_IMPORTED_MODULE_3__.assertParamsConsistent),
/* harmony export */   "computeOutShape": () => (/* reexport safe */ _ops_concat_util__WEBPACK_IMPORTED_MODULE_3__.computeOutShape),
/* harmony export */   "computeConv2DInfo": () => (/* reexport safe */ _ops_conv_util__WEBPACK_IMPORTED_MODULE_4__.computeConv2DInfo),
/* harmony export */   "computeConv3DInfo": () => (/* reexport safe */ _ops_conv_util__WEBPACK_IMPORTED_MODULE_4__.computeConv3DInfo),
/* harmony export */   "computeDefaultPad": () => (/* reexport safe */ _ops_conv_util__WEBPACK_IMPORTED_MODULE_4__.computeDefaultPad),
/* harmony export */   "computeDilation2DInfo": () => (/* reexport safe */ _ops_conv_util__WEBPACK_IMPORTED_MODULE_4__.computeDilation2DInfo),
/* harmony export */   "computePool2DInfo": () => (/* reexport safe */ _ops_conv_util__WEBPACK_IMPORTED_MODULE_4__.computePool2DInfo),
/* harmony export */   "computePool3DInfo": () => (/* reexport safe */ _ops_conv_util__WEBPACK_IMPORTED_MODULE_4__.computePool3DInfo),
/* harmony export */   "convertConv2DDataFormat": () => (/* reexport safe */ _ops_conv_util__WEBPACK_IMPORTED_MODULE_4__.convertConv2DDataFormat),
/* harmony export */   "eitherStridesOrDilationsAreOne": () => (/* reexport safe */ _ops_conv_util__WEBPACK_IMPORTED_MODULE_4__.eitherStridesOrDilationsAreOne),
/* harmony export */   "tupleValuesAreOne": () => (/* reexport safe */ _ops_conv_util__WEBPACK_IMPORTED_MODULE_4__.tupleValuesAreOne),
/* harmony export */   "applyActivation": () => (/* reexport safe */ _ops_fused_util__WEBPACK_IMPORTED_MODULE_5__.applyActivation),
/* harmony export */   "getFusedBiasGradient": () => (/* reexport safe */ _ops_fused_util__WEBPACK_IMPORTED_MODULE_5__.getFusedBiasGradient),
/* harmony export */   "getFusedDyActivation": () => (/* reexport safe */ _ops_fused_util__WEBPACK_IMPORTED_MODULE_5__.getFusedDyActivation),
/* harmony export */   "shouldFuse": () => (/* reexport safe */ _ops_fused_util__WEBPACK_IMPORTED_MODULE_5__.shouldFuse),
/* harmony export */   "PARALLELIZE_THRESHOLD": () => (/* reexport safe */ _ops_reduce_util__WEBPACK_IMPORTED_MODULE_6__.PARALLELIZE_THRESHOLD),
/* harmony export */   "computeOptimalWindowSize": () => (/* reexport safe */ _ops_reduce_util__WEBPACK_IMPORTED_MODULE_6__.computeOptimalWindowSize),
/* harmony export */   "slice_util": () => (/* reexport module object */ _ops_slice_util__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   "upcastType": () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_8__.upcastType),
/* harmony export */   "getImageCenter": () => (/* reexport safe */ _ops_rotate_util__WEBPACK_IMPORTED_MODULE_9__.getImageCenter),
/* harmony export */   "getPermuted": () => (/* reexport safe */ _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_10__.getPermuted),
/* harmony export */   "getReshaped": () => (/* reexport safe */ _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_10__.getReshaped),
/* harmony export */   "getReshapedPermuted": () => (/* reexport safe */ _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_10__.getReshapedPermuted),
/* harmony export */   "getSliceBeginCoords": () => (/* reexport safe */ _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_10__.getSliceBeginCoords),
/* harmony export */   "getSliceSize": () => (/* reexport safe */ _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_10__.getSliceSize),
/* harmony export */   "prepareAndValidate": () => (/* reexport safe */ _ops_gather_nd_util__WEBPACK_IMPORTED_MODULE_11__.prepareAndValidate),
/* harmony export */   "calculateShapes": () => (/* reexport safe */ _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_12__.calculateShapes),
/* harmony export */   "validateInput": () => (/* reexport safe */ _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_12__.validateInput),
/* harmony export */   "validateUpdateShape": () => (/* reexport safe */ _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_12__.validateUpdateShape),
/* harmony export */   "SELU_SCALE": () => (/* reexport safe */ _ops_selu_util__WEBPACK_IMPORTED_MODULE_13__.SELU_SCALE),
/* harmony export */   "SELU_SCALEALPHA": () => (/* reexport safe */ _ops_selu_util__WEBPACK_IMPORTED_MODULE_13__.SELU_SCALEALPHA),
/* harmony export */   "ERF_A1": () => (/* reexport safe */ _ops_erf_util__WEBPACK_IMPORTED_MODULE_14__.ERF_A1),
/* harmony export */   "ERF_A2": () => (/* reexport safe */ _ops_erf_util__WEBPACK_IMPORTED_MODULE_14__.ERF_A2),
/* harmony export */   "ERF_A3": () => (/* reexport safe */ _ops_erf_util__WEBPACK_IMPORTED_MODULE_14__.ERF_A3),
/* harmony export */   "ERF_A4": () => (/* reexport safe */ _ops_erf_util__WEBPACK_IMPORTED_MODULE_14__.ERF_A4),
/* harmony export */   "ERF_A5": () => (/* reexport safe */ _ops_erf_util__WEBPACK_IMPORTED_MODULE_14__.ERF_A5),
/* harmony export */   "ERF_P": () => (/* reexport safe */ _ops_erf_util__WEBPACK_IMPORTED_MODULE_14__.ERF_P),
/* harmony export */   "log": () => (/* reexport safe */ _log__WEBPACK_IMPORTED_MODULE_15__.log),
/* harmony export */   "warn": () => (/* reexport safe */ _log__WEBPACK_IMPORTED_MODULE_15__.warn),
/* harmony export */   "assignToTypedArray": () => (/* reexport safe */ _backends_complex_util__WEBPACK_IMPORTED_MODULE_16__.assignToTypedArray),
/* harmony export */   "complexWithEvenIndex": () => (/* reexport safe */ _backends_complex_util__WEBPACK_IMPORTED_MODULE_16__.complexWithEvenIndex),
/* harmony export */   "complexWithOddIndex": () => (/* reexport safe */ _backends_complex_util__WEBPACK_IMPORTED_MODULE_16__.complexWithOddIndex),
/* harmony export */   "exponent": () => (/* reexport safe */ _backends_complex_util__WEBPACK_IMPORTED_MODULE_16__.exponent),
/* harmony export */   "exponents": () => (/* reexport safe */ _backends_complex_util__WEBPACK_IMPORTED_MODULE_16__.exponents),
/* harmony export */   "getComplexWithIndex": () => (/* reexport safe */ _backends_complex_util__WEBPACK_IMPORTED_MODULE_16__.getComplexWithIndex),
/* harmony export */   "mergeRealAndImagArrays": () => (/* reexport safe */ _backends_complex_util__WEBPACK_IMPORTED_MODULE_16__.mergeRealAndImagArrays),
/* harmony export */   "splitRealAndImagArrays": () => (/* reexport safe */ _backends_complex_util__WEBPACK_IMPORTED_MODULE_16__.splitRealAndImagArrays),
/* harmony export */   "prepareSplitSize": () => (/* reexport safe */ _ops_split_util__WEBPACK_IMPORTED_MODULE_17__.prepareSplitSize),
/* harmony export */   "segment_util": () => (/* reexport module object */ _ops_segment_util__WEBPACK_IMPORTED_MODULE_18__),
/* harmony export */   "castTensor": () => (/* binding */ castTensor),
/* harmony export */   "reshapeTensor": () => (/* binding */ reshapeTensor),
/* harmony export */   "fromUint8ToStringArray": () => (/* binding */ fromUint8ToStringArray),
/* harmony export */   "fromStringArrayToUint8": () => (/* binding */ fromStringArrayToUint8)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_zeros__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../ops/zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_concat_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/concat_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js");
/* harmony import */ var _ops_conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _ops_fused_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/fused_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js");
/* harmony import */ var _ops_reduce_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/reduce_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js");
/* harmony import */ var _ops_slice_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/slice_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../types */ "./node_modules/@tensorflow/tfjs-core/dist/types.js");
/* harmony import */ var _ops_rotate_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/rotate_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js");
/* harmony import */ var _ops_array_ops_util__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ops/array_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js");
/* harmony import */ var _ops_gather_nd_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ops/gather_nd_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js");
/* harmony import */ var _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ops/scatter_nd_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js");
/* harmony import */ var _ops_selu_util__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../ops/selu_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js");
/* harmony import */ var _ops_erf_util__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../ops/erf_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../log */ "./node_modules/@tensorflow/tfjs-core/dist/log.js");
/* harmony import */ var _backends_complex_util__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../backends/complex_util */ "./node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js");
/* harmony import */ var _ops_split_util__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../ops/split_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js");
/* harmony import */ var _ops_segment_util__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../ops/segment_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





// Utilities needed by backend consumers of tf-core.





















function castTensor(x, dtype, backend) {
    if (dtype === 'complex64') {
        if (x.dtype === 'complex64') {
            return x.clone();
        }
        const zerosTensor = (0,_ops_zeros__WEBPACK_IMPORTED_MODULE_19__.zeros)(x.shape);
        const floatX = (0,_ops_cast__WEBPACK_IMPORTED_MODULE_20__.cast)(x, 'float32');
        const result = backend.complex(floatX, zerosTensor);
        zerosTensor.dispose();
        floatX.dispose();
        return result;
    }
    if (!(0,_util__WEBPACK_IMPORTED_MODULE_21__.hasEncodingLoss)(x.dtype, dtype)) {
        // We don't change the underlying data, since we cast to higher
        // precision.
        return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.makeTensorFromDataId(x.dataId, x.shape, dtype);
    }
    if (x.dtype === 'complex64') {
        const real = backend.real(x);
        const result = (0,_ops_cast__WEBPACK_IMPORTED_MODULE_20__.cast)(real, dtype);
        real.dispose();
        return result;
    }
    if (dtype === 'int32') {
        return backend.int(x);
    }
    else if (dtype === 'bool') {
        const zero = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_22__.scalar)(0, x.dtype);
        const result = backend.notEqual(x, zero);
        zero.dispose();
        return result;
    }
    else {
        throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);
    }
}
function reshapeTensor(x, shape) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.makeTensorFromDataId(x.dataId, shape, x.dtype);
}
function fromUint8ToStringArray(vals) {
    try {
        // Decode the bytes into string.
        return vals.map(val => (0,_util__WEBPACK_IMPORTED_MODULE_23__.decodeString)(val));
    }
    catch (err) {
        throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${err}`);
    }
}
function fromStringArrayToUint8(strings) {
    return strings.map(s => (0,_util__WEBPACK_IMPORTED_MODULE_23__.encodeString)(s));
}
//# sourceMappingURL=backend_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/complex_util.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mergeRealAndImagArrays": () => (/* binding */ mergeRealAndImagArrays),
/* harmony export */   "splitRealAndImagArrays": () => (/* binding */ splitRealAndImagArrays),
/* harmony export */   "complexWithEvenIndex": () => (/* binding */ complexWithEvenIndex),
/* harmony export */   "complexWithOddIndex": () => (/* binding */ complexWithOddIndex),
/* harmony export */   "getComplexWithIndex": () => (/* binding */ getComplexWithIndex),
/* harmony export */   "assignToTypedArray": () => (/* binding */ assignToTypedArray),
/* harmony export */   "exponents": () => (/* binding */ exponents),
/* harmony export */   "exponent": () => (/* binding */ exponent)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Merges real and imaginary Float32Arrays into a single complex Float32Array.
 *
 * The memory layout is interleaved as follows:
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 * complex: [r0, i0, r1, i1, r2, i2]
 *
 * This is the inverse of splitRealAndImagArrays.
 *
 * @param real The real values of the complex tensor values.
 * @param imag The imag values of the complex tensor values.
 * @returns A complex tensor as a Float32Array with merged values.
 */
function mergeRealAndImagArrays(real, imag) {
    if (real.length !== imag.length) {
        throw new Error(`Cannot merge real and imag arrays of different lengths. real:` +
            `${real.length}, imag: ${imag.length}.`);
    }
    const result = new Float32Array(real.length * 2);
    for (let i = 0; i < result.length; i += 2) {
        result[i] = real[i / 2];
        result[i + 1] = imag[i / 2];
    }
    return result;
}
/**
 * Splits a complex Float32Array into real and imag parts.
 *
 * The memory layout is interleaved as follows:
 * complex: [r0, i0, r1, i1, r2, i2]
 * real: [r0, r1, r2]
 * imag: [i0, i1, i2]
 *
 * This is the inverse of mergeRealAndImagArrays.
 *
 * @param complex The complex tensor values.
 * @returns An object with real and imag Float32Array components of the complex
 *     tensor.
 */
function splitRealAndImagArrays(complex) {
    const real = new Float32Array(complex.length / 2);
    const imag = new Float32Array(complex.length / 2);
    for (let i = 0; i < complex.length; i += 2) {
        real[i / 2] = complex[i];
        imag[i / 2] = complex[i + 1];
    }
    return { real, imag };
}
/**
 * Extracts even indexed complex values in the given array.
 * @param complex The complex tensor values
 */
function complexWithEvenIndex(complex) {
    const len = Math.ceil(complex.length / 4);
    const real = new Float32Array(len);
    const imag = new Float32Array(len);
    for (let i = 0; i < complex.length; i += 4) {
        real[Math.floor(i / 4)] = complex[i];
        imag[Math.floor(i / 4)] = complex[i + 1];
    }
    return { real, imag };
}
/**
 * Extracts odd indexed comple values in the given array.
 * @param complex The complex tensor values
 */
function complexWithOddIndex(complex) {
    const len = Math.floor(complex.length / 4);
    const real = new Float32Array(len);
    const imag = new Float32Array(len);
    for (let i = 2; i < complex.length; i += 4) {
        real[Math.floor(i / 4)] = complex[i];
        imag[Math.floor(i / 4)] = complex[i + 1];
    }
    return { real, imag };
}
/**
 * Get the map representing a complex value in the given array.
 * @param complex The complex tensor values.
 * @param index An index of the target complex value.
 */
function getComplexWithIndex(complex, index) {
    const real = complex[index * 2];
    const imag = complex[index * 2 + 1];
    return { real, imag };
}
/**
 * Insert a given complex value into the TypedArray.
 * @param data The array in which the complex value is inserted.
 * @param c The complex value to be inserted.
 * @param index An index of the target complex value.
 */
function assignToTypedArray(data, real, imag, index) {
    data[index * 2] = real;
    data[index * 2 + 1] = imag;
}
/**
 * Make the list of exponent terms used by FFT.
 */
function exponents(n, inverse) {
    const real = new Float32Array(n / 2);
    const imag = new Float32Array(n / 2);
    for (let i = 0; i < Math.ceil(n / 2); i++) {
        const x = (inverse ? 2 : -2) * Math.PI * (i / n);
        real[i] = Math.cos(x);
        imag[i] = Math.sin(x);
    }
    return { real, imag };
}
/**
 * Make the exponent term used by FFT.
 */
function exponent(k, n, inverse) {
    const x = (inverse ? 2 : -2) * Math.PI * (k / n);
    const real = Math.cos(x);
    const imag = Math.sin(x);
    return { real, imag };
}
//# sourceMappingURL=complex_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionV3Impl": () => (/* reexport safe */ _non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__.nonMaxSuppressionV3Impl),
/* harmony export */   "nonMaxSuppressionV4Impl": () => (/* reexport safe */ _non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__.nonMaxSuppressionV4Impl),
/* harmony export */   "nonMaxSuppressionV5Impl": () => (/* reexport safe */ _non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__.nonMaxSuppressionV5Impl),
/* harmony export */   "whereImpl": () => (/* reexport safe */ _where_impl__WEBPACK_IMPORTED_MODULE_1__.whereImpl)
/* harmony export */ });
/* harmony import */ var _non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./non_max_suppression_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js");
/* harmony import */ var _where_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./where_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


//# sourceMappingURL=kernel_impls.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionV3Impl": () => (/* binding */ nonMaxSuppressionV3Impl),
/* harmony export */   "nonMaxSuppressionV4Impl": () => (/* binding */ nonMaxSuppressionV4Impl),
/* harmony export */   "nonMaxSuppressionV5Impl": () => (/* binding */ nonMaxSuppressionV5Impl)
/* harmony export */ });
/* harmony import */ var _non_max_suppression_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./non_max_suppression_util */ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */);
}
function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {
    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0 /* softNmsSigma */, false /* returnScoresTensor */, padToMaxOutputSize /* padToMaxOutputSize */, true
    /* returnValidOutputs */ );
}
function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
    return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true /* returnScoresTensor */);
}
function nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, returnScoresTensor = false, padToMaxOutputSize = false, returnValidOutputs = false) {
    // The list is sorted in ascending order, so that we can always pop the
    // candidate with the largest score in O(1) time.
    const candidates = [];
    for (let i = 0; i < scores.length; i++) {
        if (scores[i] > scoreThreshold) {
            candidates.push({ score: scores[i], boxIndex: i, suppressBeginIndex: 0 });
        }
    }
    candidates.sort(ascendingComparator);
    // If softNmsSigma is 0, the outcome of this algorithm is exactly same as
    // before.
    const scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;
    const selectedIndices = [];
    const selectedScores = [];
    while (selectedIndices.length < maxOutputSize && candidates.length > 0) {
        const candidate = candidates.pop();
        const { score: originalScore, boxIndex, suppressBeginIndex } = candidate;
        if (originalScore < scoreThreshold) {
            break;
        }
        // Overlapping boxes are likely to have similar scores, therefore we
        // iterate through the previously selected boxes backwards in order to
        // see if candidate's score should be suppressed. We use
        // suppressBeginIndex to track and ensure a candidate can be suppressed
        // by a selected box no more than once. Also, if the overlap exceeds
        // iouThreshold, we simply ignore the candidate.
        let ignoreCandidate = false;
        for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {
            const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);
            if (iou >= iouThreshold) {
                ignoreCandidate = true;
                break;
            }
            candidate.score =
                candidate.score * suppressWeight(iouThreshold, scale, iou);
            if (candidate.score <= scoreThreshold) {
                break;
            }
        }
        // At this point, if `candidate.score` has not dropped below
        // `scoreThreshold`, then we know that we went through all of the
        // previous selections and can safely update `suppressBeginIndex` to the
        // end of the selected array. Then we can re-insert the candidate with
        // the updated score and suppressBeginIndex back in the candidate list.
        // If on the other hand, `candidate.score` has dropped below the score
        // threshold, we will not add it back to the candidates list.
        candidate.suppressBeginIndex = selectedIndices.length;
        if (!ignoreCandidate) {
            // Candidate has passed all the tests, and is not suppressed, so
            // select the candidate.
            if (candidate.score === originalScore) {
                selectedIndices.push(boxIndex);
                selectedScores.push(candidate.score);
            }
            else if (candidate.score > scoreThreshold) {
                // Candidate's score is suppressed but is still high enough to be
                // considered, so add back to the candidates list.
                (0,_non_max_suppression_util__WEBPACK_IMPORTED_MODULE_0__.binaryInsert)(candidates, candidate, ascendingComparator);
            }
        }
    }
    // NonMaxSuppressionV4 feature: padding output to maxOutputSize.
    const validOutputs = selectedIndices.length;
    const elemsToPad = maxOutputSize - validOutputs;
    if (padToMaxOutputSize && elemsToPad > 0) {
        selectedIndices.push(...new Array(elemsToPad).fill(0));
        selectedScores.push(...new Array(elemsToPad).fill(0.0));
    }
    const result = { selectedIndices };
    if (returnScoresTensor) {
        result['selectedScores'] = selectedScores;
    }
    if (returnValidOutputs) {
        result['validOutputs'] = validOutputs;
    }
    return result;
}
function intersectionOverUnion(boxes, i, j) {
    const iCoord = boxes.subarray(i * 4, i * 4 + 4);
    const jCoord = boxes.subarray(j * 4, j * 4 + 4);
    const yminI = Math.min(iCoord[0], iCoord[2]);
    const xminI = Math.min(iCoord[1], iCoord[3]);
    const ymaxI = Math.max(iCoord[0], iCoord[2]);
    const xmaxI = Math.max(iCoord[1], iCoord[3]);
    const yminJ = Math.min(jCoord[0], jCoord[2]);
    const xminJ = Math.min(jCoord[1], jCoord[3]);
    const ymaxJ = Math.max(jCoord[0], jCoord[2]);
    const xmaxJ = Math.max(jCoord[1], jCoord[3]);
    const areaI = (ymaxI - yminI) * (xmaxI - xminI);
    const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);
    if (areaI <= 0 || areaJ <= 0) {
        return 0.0;
    }
    const intersectionYmin = Math.max(yminI, yminJ);
    const intersectionXmin = Math.max(xminI, xminJ);
    const intersectionYmax = Math.min(ymaxI, ymaxJ);
    const intersectionXmax = Math.min(xmaxI, xmaxJ);
    const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *
        Math.max(intersectionXmax - intersectionXmin, 0.0);
    return intersectionArea / (areaI + areaJ - intersectionArea);
}
// A Gaussian penalty function, this method always returns values in [0, 1].
// The weight is a function of similarity, the more overlap two boxes are, the
// smaller the weight is, meaning highly overlapping boxe will be significantly
// penalized. On the other hand, a non-overlapping box will not be penalized.
function suppressWeight(iouThreshold, scale, iou) {
    const weight = Math.exp(scale * iou * iou);
    return iou <= iouThreshold ? weight : 0.0;
}
function ascendingComparator(c1, c2) {
    // For objects with same scores, we make the object with the larger index go
    // first. In an array that pops from the end, this means that the object with
    // the smaller index will be popped first. This ensures the same output as
    // the TensorFlow python version.
    return (c1.score - c2.score) ||
        ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));
}
//# sourceMappingURL=non_max_suppression_impl.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_util.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_util.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "binaryInsert": () => (/* binding */ binaryInsert),
/* harmony export */   "binarySearch": () => (/* binding */ binarySearch)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Inserts a value into a sorted array. This method allows duplicate, meaning it
 * allows inserting duplicate value, in which case, the element will be inserted
 * at the lowest index of the value.
 * @param arr The array to modify.
 * @param element The element to insert.
 * @param comparator Optional. If no comparator is specified, elements are
 * compared using array_util.defaultComparator, which is suitable for Strings
 * and Numbers in ascending arrays. If the array contains multiple instances of
 * the target value, the left-most instance will be returned. To provide a
 * comparator, it should take 2 arguments to compare and return a negative,
 * zero, or a positive number.
 */
function binaryInsert(arr, element, comparator) {
    const index = binarySearch(arr, element, comparator);
    const insertionPoint = index < 0 ? -(index + 1) : index;
    arr.splice(insertionPoint, 0, element);
}
/**
 * Searches the array for the target using binary search, returns the index
 * of the found element, or position to insert if element not found. If no
 * comparator is specified, elements are compared using array_
 * util.defaultComparator, which is suitable for Strings and Numbers in
 * ascending arrays. If the array contains multiple instances of the target
 * value, the left-most instance will be returned.
 * @param arr The array to be searched in.
 * @param target The target to be searched for.
 * @param comparator Should take 2 arguments to compare and return a negative,
 *    zero, or a positive number.
 * @return Lowest index of the target value if found, otherwise the insertion
 *    point where the target should be inserted, in the form of
 *    (-insertionPoint - 1).
 */
function binarySearch(arr, target, comparator) {
    return binarySearch_(arr, target, comparator || defaultComparator);
}
/**
 * Compares its two arguments for order.
 * @param a The first element to be compared.
 * @param b The second element to be compared.
 * @return A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second.
 */
function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
}
function binarySearch_(arr, target, comparator) {
    let left = 0;
    let right = arr.length;
    let middle = 0;
    let found = false;
    while (left < right) {
        middle = left + ((right - left) >>> 1);
        const compareResult = comparator(target, arr[middle]);
        if (compareResult > 0) {
            left = middle + 1;
        }
        else {
            right = middle;
            // If compareResult is 0, the value is found. We record it is found,
            // and then keep looking because there may be duplicate.
            found = !compareResult;
        }
    }
    return found ? left : -left - 1;
}
//# sourceMappingURL=non_max_suppression_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "whereImpl": () => (/* binding */ whereImpl)
/* harmony export */ });
/* harmony import */ var _ops_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ops/buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/** An implementation of the Where kernel shared between cpu and webgl */

function whereImpl(condShape, condVals) {
    const indices = [];
    for (let i = 0; i < condVals.length; i++) {
        if (condVals[i]) {
            indices.push(i);
        }
    }
    const inBuffer = (0,_ops_buffer__WEBPACK_IMPORTED_MODULE_0__.buffer)(condShape, 'int32');
    const out = (0,_ops_buffer__WEBPACK_IMPORTED_MODULE_0__.buffer)([indices.length, condShape.length], 'int32');
    for (let i = 0; i < indices.length; i++) {
        const loc = inBuffer.indexToLoc(indices[i]);
        const offset = i * condShape.length;
        out.values.set(loc, offset);
    }
    return out.toTensor();
}
//# sourceMappingURL=where_impl.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/base.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/base.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdadeltaOptimizer": () => (/* reexport safe */ _optimizers_adadelta_optimizer__WEBPACK_IMPORTED_MODULE_1__.AdadeltaOptimizer),
/* harmony export */   "AdagradOptimizer": () => (/* reexport safe */ _optimizers_adagrad_optimizer__WEBPACK_IMPORTED_MODULE_2__.AdagradOptimizer),
/* harmony export */   "AdamOptimizer": () => (/* reexport safe */ _optimizers_adam_optimizer__WEBPACK_IMPORTED_MODULE_3__.AdamOptimizer),
/* harmony export */   "AdamaxOptimizer": () => (/* reexport safe */ _optimizers_adamax_optimizer__WEBPACK_IMPORTED_MODULE_4__.AdamaxOptimizer),
/* harmony export */   "MomentumOptimizer": () => (/* reexport safe */ _optimizers_momentum_optimizer__WEBPACK_IMPORTED_MODULE_5__.MomentumOptimizer),
/* harmony export */   "Optimizer": () => (/* reexport safe */ _optimizers_optimizer__WEBPACK_IMPORTED_MODULE_6__.Optimizer),
/* harmony export */   "RMSPropOptimizer": () => (/* reexport safe */ _optimizers_rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_7__.RMSPropOptimizer),
/* harmony export */   "SGDOptimizer": () => (/* reexport safe */ _optimizers_sgd_optimizer__WEBPACK_IMPORTED_MODULE_8__.SGDOptimizer),
/* harmony export */   "Tensor": () => (/* reexport safe */ _tensor__WEBPACK_IMPORTED_MODULE_9__.Tensor),
/* harmony export */   "TensorBuffer": () => (/* reexport safe */ _tensor__WEBPACK_IMPORTED_MODULE_9__.TensorBuffer),
/* harmony export */   "Variable": () => (/* reexport safe */ _tensor__WEBPACK_IMPORTED_MODULE_9__.Variable),
/* harmony export */   "Rank": () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_10__.Rank),
/* harmony export */   "sumOutType": () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_10__.sumOutType),
/* harmony export */   "upcastType": () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_10__.upcastType),
/* harmony export */   "OP_SCOPE_SUFFIX": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.OP_SCOPE_SUFFIX),
/* harmony export */   "abs": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.abs),
/* harmony export */   "acos": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.acos),
/* harmony export */   "acosh": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.acosh),
/* harmony export */   "add": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.add),
/* harmony export */   "addN": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.addN),
/* harmony export */   "addStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.addStrict),
/* harmony export */   "all": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.all),
/* harmony export */   "any": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.any),
/* harmony export */   "argMax": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.argMax),
/* harmony export */   "argMin": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.argMin),
/* harmony export */   "asin": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.asin),
/* harmony export */   "asinh": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.asinh),
/* harmony export */   "atan": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.atan),
/* harmony export */   "atan2": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.atan2),
/* harmony export */   "atanh": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.atanh),
/* harmony export */   "avgPool": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.avgPool),
/* harmony export */   "avgPool3d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.avgPool3d),
/* harmony export */   "basicLSTMCell": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.basicLSTMCell),
/* harmony export */   "batchNorm": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.batchNorm),
/* harmony export */   "batchNorm2d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.batchNorm2d),
/* harmony export */   "batchNorm3d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.batchNorm3d),
/* harmony export */   "batchNorm4d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.batchNorm4d),
/* harmony export */   "batchToSpaceND": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.batchToSpaceND),
/* harmony export */   "bincount": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.bincount),
/* harmony export */   "booleanMaskAsync": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.booleanMaskAsync),
/* harmony export */   "broadcastTo": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.broadcastTo),
/* harmony export */   "buffer": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.buffer),
/* harmony export */   "cast": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.cast),
/* harmony export */   "ceil": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.ceil),
/* harmony export */   "clipByValue": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.clipByValue),
/* harmony export */   "clone": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.clone),
/* harmony export */   "complex": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.complex),
/* harmony export */   "concat": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.concat),
/* harmony export */   "concat1d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.concat1d),
/* harmony export */   "concat2d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.concat2d),
/* harmony export */   "concat3d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.concat3d),
/* harmony export */   "concat4d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.concat4d),
/* harmony export */   "conv1d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.conv1d),
/* harmony export */   "conv2d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.conv2d),
/* harmony export */   "conv2dTranspose": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.conv2dTranspose),
/* harmony export */   "conv3d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.conv3d),
/* harmony export */   "conv3dTranspose": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.conv3dTranspose),
/* harmony export */   "cos": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.cos),
/* harmony export */   "cosh": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.cosh),
/* harmony export */   "cosineWindow": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.cosineWindow),
/* harmony export */   "cumsum": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.cumsum),
/* harmony export */   "denseBincount": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.denseBincount),
/* harmony export */   "depthToSpace": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.depthToSpace),
/* harmony export */   "depthwiseConv2d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.depthwiseConv2d),
/* harmony export */   "diag": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.diag),
/* harmony export */   "dilation2d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.dilation2d),
/* harmony export */   "div": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.div),
/* harmony export */   "divNoNan": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.divNoNan),
/* harmony export */   "divStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.divStrict),
/* harmony export */   "dot": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.dot),
/* harmony export */   "dropout": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.dropout),
/* harmony export */   "elu": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.elu),
/* harmony export */   "enclosingPowerOfTwo": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.enclosingPowerOfTwo),
/* harmony export */   "equal": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.equal),
/* harmony export */   "equalStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.equalStrict),
/* harmony export */   "erf": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.erf),
/* harmony export */   "exp": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.exp),
/* harmony export */   "expandDims": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.expandDims),
/* harmony export */   "expm1": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.expm1),
/* harmony export */   "eye": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.eye),
/* harmony export */   "fft": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.fft),
/* harmony export */   "fill": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.fill),
/* harmony export */   "floor": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.floor),
/* harmony export */   "floorDiv": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.floorDiv),
/* harmony export */   "fused": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.fused),
/* harmony export */   "gather": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.gather),
/* harmony export */   "gatherND": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.gatherND),
/* harmony export */   "greater": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.greater),
/* harmony export */   "greaterEqual": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.greaterEqual),
/* harmony export */   "greaterEqualStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.greaterEqualStrict),
/* harmony export */   "greaterStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.greaterStrict),
/* harmony export */   "ifft": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.ifft),
/* harmony export */   "imag": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.imag),
/* harmony export */   "image": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.image),
/* harmony export */   "inTopKAsync": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.inTopKAsync),
/* harmony export */   "irfft": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.irfft),
/* harmony export */   "isFinite": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.isFinite),
/* harmony export */   "isInf": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.isInf),
/* harmony export */   "isNaN": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.isNaN),
/* harmony export */   "leakyRelu": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.leakyRelu),
/* harmony export */   "less": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.less),
/* harmony export */   "lessEqual": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.lessEqual),
/* harmony export */   "lessEqualStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.lessEqualStrict),
/* harmony export */   "lessStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.lessStrict),
/* harmony export */   "linalg": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.linalg),
/* harmony export */   "linspace": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.linspace),
/* harmony export */   "localResponseNormalization": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.localResponseNormalization),
/* harmony export */   "log": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.log),
/* harmony export */   "log1p": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.log1p),
/* harmony export */   "logSigmoid": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.logSigmoid),
/* harmony export */   "logSoftmax": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.logSoftmax),
/* harmony export */   "logSumExp": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.logSumExp),
/* harmony export */   "logicalAnd": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.logicalAnd),
/* harmony export */   "logicalNot": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.logicalNot),
/* harmony export */   "logicalOr": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.logicalOr),
/* harmony export */   "logicalXor": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.logicalXor),
/* harmony export */   "losses": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.losses),
/* harmony export */   "matMul": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.matMul),
/* harmony export */   "max": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.max),
/* harmony export */   "maxPool": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.maxPool),
/* harmony export */   "maxPool3d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.maxPool3d),
/* harmony export */   "maxPoolWithArgmax": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.maxPoolWithArgmax),
/* harmony export */   "maximum": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.maximum),
/* harmony export */   "maximumStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.maximumStrict),
/* harmony export */   "mean": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.mean),
/* harmony export */   "min": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.min),
/* harmony export */   "minimum": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.minimum),
/* harmony export */   "minimumStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.minimumStrict),
/* harmony export */   "mirrorPad": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.mirrorPad),
/* harmony export */   "mod": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.mod),
/* harmony export */   "modStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.modStrict),
/* harmony export */   "moments": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.moments),
/* harmony export */   "movingAverage": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.movingAverage),
/* harmony export */   "mul": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.mul),
/* harmony export */   "mulStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.mulStrict),
/* harmony export */   "multiRNNCell": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.multiRNNCell),
/* harmony export */   "multinomial": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.multinomial),
/* harmony export */   "neg": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.neg),
/* harmony export */   "norm": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.norm),
/* harmony export */   "notEqual": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.notEqual),
/* harmony export */   "notEqualStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.notEqualStrict),
/* harmony export */   "oneHot": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.oneHot),
/* harmony export */   "ones": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.ones),
/* harmony export */   "onesLike": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.onesLike),
/* harmony export */   "op": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.op),
/* harmony export */   "outerProduct": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.outerProduct),
/* harmony export */   "pad": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.pad),
/* harmony export */   "pad1d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.pad1d),
/* harmony export */   "pad2d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.pad2d),
/* harmony export */   "pad3d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.pad3d),
/* harmony export */   "pad4d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.pad4d),
/* harmony export */   "pool": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.pool),
/* harmony export */   "pow": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.pow),
/* harmony export */   "powStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.powStrict),
/* harmony export */   "prelu": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.prelu),
/* harmony export */   "print": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.print),
/* harmony export */   "prod": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.prod),
/* harmony export */   "rand": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.rand),
/* harmony export */   "randomGamma": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.randomGamma),
/* harmony export */   "randomNormal": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.randomNormal),
/* harmony export */   "randomUniform": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.randomUniform),
/* harmony export */   "range": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.range),
/* harmony export */   "real": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.real),
/* harmony export */   "reciprocal": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.reciprocal),
/* harmony export */   "relu": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.relu),
/* harmony export */   "relu6": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.relu6),
/* harmony export */   "reshape": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.reshape),
/* harmony export */   "reverse": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.reverse),
/* harmony export */   "reverse1d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.reverse1d),
/* harmony export */   "reverse2d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.reverse2d),
/* harmony export */   "reverse3d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.reverse3d),
/* harmony export */   "reverse4d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.reverse4d),
/* harmony export */   "rfft": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.rfft),
/* harmony export */   "round": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.round),
/* harmony export */   "rsqrt": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.rsqrt),
/* harmony export */   "scalar": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.scalar),
/* harmony export */   "scatterND": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.scatterND),
/* harmony export */   "selu": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.selu),
/* harmony export */   "separableConv2d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.separableConv2d),
/* harmony export */   "setdiff1dAsync": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.setdiff1dAsync),
/* harmony export */   "sigmoid": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.sigmoid),
/* harmony export */   "sign": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.sign),
/* harmony export */   "signal": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.signal),
/* harmony export */   "sin": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.sin),
/* harmony export */   "sinh": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.sinh),
/* harmony export */   "slice": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.slice),
/* harmony export */   "slice1d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.slice1d),
/* harmony export */   "slice2d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.slice2d),
/* harmony export */   "slice3d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.slice3d),
/* harmony export */   "slice4d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.slice4d),
/* harmony export */   "softmax": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.softmax),
/* harmony export */   "softplus": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.softplus),
/* harmony export */   "spaceToBatchND": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.spaceToBatchND),
/* harmony export */   "sparseToDense": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.sparseToDense),
/* harmony export */   "spectral": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.spectral),
/* harmony export */   "split": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.split),
/* harmony export */   "sqrt": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.sqrt),
/* harmony export */   "square": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.square),
/* harmony export */   "squaredDifference": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.squaredDifference),
/* harmony export */   "squaredDifferenceStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.squaredDifferenceStrict),
/* harmony export */   "squeeze": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.squeeze),
/* harmony export */   "stack": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.stack),
/* harmony export */   "step": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.step),
/* harmony export */   "stridedSlice": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.stridedSlice),
/* harmony export */   "sub": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.sub),
/* harmony export */   "subStrict": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.subStrict),
/* harmony export */   "sum": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.sum),
/* harmony export */   "tan": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.tan),
/* harmony export */   "tanh": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.tanh),
/* harmony export */   "tensor": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.tensor),
/* harmony export */   "tensor1d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.tensor1d),
/* harmony export */   "tensor2d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.tensor2d),
/* harmony export */   "tensor3d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.tensor3d),
/* harmony export */   "tensor4d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.tensor4d),
/* harmony export */   "tensor5d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.tensor5d),
/* harmony export */   "tensor6d": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.tensor6d),
/* harmony export */   "tile": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.tile),
/* harmony export */   "topk": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.topk),
/* harmony export */   "transpose": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.transpose),
/* harmony export */   "truncatedNormal": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.truncatedNormal),
/* harmony export */   "unique": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.unique),
/* harmony export */   "unsortedSegmentSum": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.unsortedSegmentSum),
/* harmony export */   "unstack": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.unstack),
/* harmony export */   "variable": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.variable),
/* harmony export */   "where": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.where),
/* harmony export */   "whereAsync": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.whereAsync),
/* harmony export */   "zeros": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.zeros),
/* harmony export */   "zerosLike": () => (/* reexport safe */ _ops_ops__WEBPACK_IMPORTED_MODULE_11__.zerosLike),
/* harmony export */   "Reduction": () => (/* reexport safe */ _ops_loss_ops_utils__WEBPACK_IMPORTED_MODULE_12__.Reduction),
/* harmony export */   "train": () => (/* reexport safe */ _train__WEBPACK_IMPORTED_MODULE_13__.train),
/* harmony export */   "backend": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.backend),
/* harmony export */   "deprecationWarn": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.deprecationWarn),
/* harmony export */   "disableDeprecationWarnings": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.disableDeprecationWarnings),
/* harmony export */   "dispose": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.dispose),
/* harmony export */   "disposeVariables": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.disposeVariables),
/* harmony export */   "enableDebugMode": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.enableDebugMode),
/* harmony export */   "enableProdMode": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.enableProdMode),
/* harmony export */   "engine": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.engine),
/* harmony export */   "findBackend": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.findBackend),
/* harmony export */   "findBackendFactory": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.findBackendFactory),
/* harmony export */   "getBackend": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.getBackend),
/* harmony export */   "keep": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.keep),
/* harmony export */   "memory": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.memory),
/* harmony export */   "profile": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.profile),
/* harmony export */   "ready": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.ready),
/* harmony export */   "registerBackend": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.registerBackend),
/* harmony export */   "removeBackend": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.removeBackend),
/* harmony export */   "setBackend": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.setBackend),
/* harmony export */   "setPlatform": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.setPlatform),
/* harmony export */   "tidy": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.tidy),
/* harmony export */   "time": () => (/* reexport safe */ _globals__WEBPACK_IMPORTED_MODULE_14__.time),
/* harmony export */   "copyRegisteredKernels": () => (/* reexport safe */ _kernel_registry__WEBPACK_IMPORTED_MODULE_15__.copyRegisteredKernels),
/* harmony export */   "getGradient": () => (/* reexport safe */ _kernel_registry__WEBPACK_IMPORTED_MODULE_15__.getGradient),
/* harmony export */   "getKernel": () => (/* reexport safe */ _kernel_registry__WEBPACK_IMPORTED_MODULE_15__.getKernel),
/* harmony export */   "getKernelsForBackend": () => (/* reexport safe */ _kernel_registry__WEBPACK_IMPORTED_MODULE_15__.getKernelsForBackend),
/* harmony export */   "registerGradient": () => (/* reexport safe */ _kernel_registry__WEBPACK_IMPORTED_MODULE_15__.registerGradient),
/* harmony export */   "registerKernel": () => (/* reexport safe */ _kernel_registry__WEBPACK_IMPORTED_MODULE_15__.registerKernel),
/* harmony export */   "unregisterGradient": () => (/* reexport safe */ _kernel_registry__WEBPACK_IMPORTED_MODULE_15__.unregisterGradient),
/* harmony export */   "unregisterKernel": () => (/* reexport safe */ _kernel_registry__WEBPACK_IMPORTED_MODULE_15__.unregisterKernel),
/* harmony export */   "customGrad": () => (/* reexport safe */ _gradients__WEBPACK_IMPORTED_MODULE_16__.customGrad),
/* harmony export */   "grad": () => (/* reexport safe */ _gradients__WEBPACK_IMPORTED_MODULE_16__.grad),
/* harmony export */   "grads": () => (/* reexport safe */ _gradients__WEBPACK_IMPORTED_MODULE_16__.grads),
/* harmony export */   "valueAndGrad": () => (/* reexport safe */ _gradients__WEBPACK_IMPORTED_MODULE_16__.valueAndGrad),
/* harmony export */   "valueAndGrads": () => (/* reexport safe */ _gradients__WEBPACK_IMPORTED_MODULE_16__.valueAndGrads),
/* harmony export */   "variableGrads": () => (/* reexport safe */ _gradients__WEBPACK_IMPORTED_MODULE_16__.variableGrads),
/* harmony export */   "Environment": () => (/* reexport safe */ _environment__WEBPACK_IMPORTED_MODULE_17__.Environment),
/* harmony export */   "env": () => (/* reexport safe */ _environment__WEBPACK_IMPORTED_MODULE_17__.env),
/* harmony export */   "ENV": () => (/* reexport safe */ _environment__WEBPACK_IMPORTED_MODULE_17__.ENV),
/* harmony export */   "version_core": () => (/* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_18__.version),
/* harmony export */   "nextFrame": () => (/* reexport safe */ _browser_util__WEBPACK_IMPORTED_MODULE_19__.nextFrame),
/* harmony export */   "browser": () => (/* reexport module object */ _ops_browser__WEBPACK_IMPORTED_MODULE_20__),
/* harmony export */   "io": () => (/* reexport module object */ _io_io__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   "math": () => (/* reexport module object */ _math__WEBPACK_IMPORTED_MODULE_21__),
/* harmony export */   "serialization": () => (/* reexport module object */ _serialization__WEBPACK_IMPORTED_MODULE_22__),
/* harmony export */   "test_util": () => (/* reexport module object */ _test_util__WEBPACK_IMPORTED_MODULE_23__),
/* harmony export */   "util": () => (/* reexport module object */ _util__WEBPACK_IMPORTED_MODULE_24__),
/* harmony export */   "backend_util": () => (/* reexport module object */ _backends_backend_util__WEBPACK_IMPORTED_MODULE_25__),
/* harmony export */   "tensor_util": () => (/* reexport module object */ _tensor_util__WEBPACK_IMPORTED_MODULE_26__),
/* harmony export */   "slice_util": () => (/* reexport module object */ _ops_slice_util__WEBPACK_IMPORTED_MODULE_27__),
/* harmony export */   "gather_util": () => (/* reexport module object */ _ops_gather_nd_util__WEBPACK_IMPORTED_MODULE_28__),
/* harmony export */   "scatter_util": () => (/* reexport module object */ _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_29__),
/* harmony export */   "device_util": () => (/* reexport module object */ _device_util__WEBPACK_IMPORTED_MODULE_30__),
/* harmony export */   "kernel_impls": () => (/* reexport module object */ _backends_kernel_impls__WEBPACK_IMPORTED_MODULE_31__),
/* harmony export */   "KernelBackend": () => (/* reexport safe */ _backends_backend__WEBPACK_IMPORTED_MODULE_32__.KernelBackend),
/* harmony export */   "DataStorage": () => (/* reexport safe */ _backends_backend__WEBPACK_IMPORTED_MODULE_32__.DataStorage),
/* harmony export */   "Abs": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Abs),
/* harmony export */   "Acos": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Acos),
/* harmony export */   "Acosh": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Acosh),
/* harmony export */   "Add": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Add),
/* harmony export */   "AddN": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.AddN),
/* harmony export */   "All": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.All),
/* harmony export */   "Any": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Any),
/* harmony export */   "ArgMax": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.ArgMax),
/* harmony export */   "ArgMin": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.ArgMin),
/* harmony export */   "Asin": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Asin),
/* harmony export */   "Asinh": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Asinh),
/* harmony export */   "Atan": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Atan),
/* harmony export */   "Atan2": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Atan2),
/* harmony export */   "Atanh": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Atanh),
/* harmony export */   "AvgPool": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.AvgPool),
/* harmony export */   "AvgPool3D": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.AvgPool3D),
/* harmony export */   "AvgPool3DGrad": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.AvgPool3DGrad),
/* harmony export */   "AvgPoolGrad": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.AvgPoolGrad),
/* harmony export */   "BatchMatMul": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.BatchMatMul),
/* harmony export */   "BatchToSpaceND": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.BatchToSpaceND),
/* harmony export */   "Bincount": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Bincount),
/* harmony export */   "BroadcastTo": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.BroadcastTo),
/* harmony export */   "Cast": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Cast),
/* harmony export */   "Ceil": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Ceil),
/* harmony export */   "ClipByValue": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.ClipByValue),
/* harmony export */   "Complex": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Complex),
/* harmony export */   "ComplexAbs": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.ComplexAbs),
/* harmony export */   "Concat": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Concat),
/* harmony export */   "Conv2D": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Conv2D),
/* harmony export */   "Conv2DBackpropFilter": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Conv2DBackpropFilter),
/* harmony export */   "Conv2DBackpropInput": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Conv2DBackpropInput),
/* harmony export */   "Conv3D": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Conv3D),
/* harmony export */   "Conv3DBackpropFilterV2": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Conv3DBackpropFilterV2),
/* harmony export */   "Conv3DBackpropInputV2": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Conv3DBackpropInputV2),
/* harmony export */   "Cos": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Cos),
/* harmony export */   "Cosh": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Cosh),
/* harmony export */   "CropAndResize": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.CropAndResize),
/* harmony export */   "Cumsum": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Cumsum),
/* harmony export */   "DenseBincount": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.DenseBincount),
/* harmony export */   "DepthToSpace": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.DepthToSpace),
/* harmony export */   "DepthwiseConv2dNative": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.DepthwiseConv2dNative),
/* harmony export */   "DepthwiseConv2dNativeBackpropFilter": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.DepthwiseConv2dNativeBackpropFilter),
/* harmony export */   "DepthwiseConv2dNativeBackpropInput": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.DepthwiseConv2dNativeBackpropInput),
/* harmony export */   "Diag": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Diag),
/* harmony export */   "Dilation2D": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Dilation2D),
/* harmony export */   "Dilation2DBackpropFilter": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Dilation2DBackpropFilter),
/* harmony export */   "Dilation2DBackpropInput": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Dilation2DBackpropInput),
/* harmony export */   "Elu": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Elu),
/* harmony export */   "EluGrad": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.EluGrad),
/* harmony export */   "Equal": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Equal),
/* harmony export */   "Erf": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Erf),
/* harmony export */   "Exp": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Exp),
/* harmony export */   "ExpandDims": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.ExpandDims),
/* harmony export */   "Expm1": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Expm1),
/* harmony export */   "FFT": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.FFT),
/* harmony export */   "Fill": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Fill),
/* harmony export */   "FlipLeftRight": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.FlipLeftRight),
/* harmony export */   "Floor": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Floor),
/* harmony export */   "FloorDiv": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.FloorDiv),
/* harmony export */   "FromPixels": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.FromPixels),
/* harmony export */   "FusedBatchNorm": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.FusedBatchNorm),
/* harmony export */   "FusedConv2D": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.FusedConv2D),
/* harmony export */   "FusedDepthwiseConv2D": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.FusedDepthwiseConv2D),
/* harmony export */   "GatherNd": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.GatherNd),
/* harmony export */   "GatherV2": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.GatherV2),
/* harmony export */   "Greater": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Greater),
/* harmony export */   "GreaterEqual": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.GreaterEqual),
/* harmony export */   "IFFT": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.IFFT),
/* harmony export */   "Identity": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Identity),
/* harmony export */   "Imag": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Imag),
/* harmony export */   "IsFinite": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.IsFinite),
/* harmony export */   "IsInf": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.IsInf),
/* harmony export */   "IsNan": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.IsNan),
/* harmony export */   "LRN": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.LRN),
/* harmony export */   "LRNGrad": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.LRNGrad),
/* harmony export */   "LeakyRelu": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.LeakyRelu),
/* harmony export */   "Less": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Less),
/* harmony export */   "LessEqual": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.LessEqual),
/* harmony export */   "LinSpace": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.LinSpace),
/* harmony export */   "Log": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Log),
/* harmony export */   "Log1p": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Log1p),
/* harmony export */   "LogSoftmax": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.LogSoftmax),
/* harmony export */   "LogicalAnd": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.LogicalAnd),
/* harmony export */   "LogicalNot": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.LogicalNot),
/* harmony export */   "LogicalOr": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.LogicalOr),
/* harmony export */   "Max": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Max),
/* harmony export */   "MaxPool": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.MaxPool),
/* harmony export */   "MaxPool3D": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.MaxPool3D),
/* harmony export */   "MaxPool3DGrad": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.MaxPool3DGrad),
/* harmony export */   "MaxPoolGrad": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.MaxPoolGrad),
/* harmony export */   "MaxPoolWithArgmax": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.MaxPoolWithArgmax),
/* harmony export */   "Maximum": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Maximum),
/* harmony export */   "Mean": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Mean),
/* harmony export */   "Min": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Min),
/* harmony export */   "Minimum": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Minimum),
/* harmony export */   "MirrorPad": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.MirrorPad),
/* harmony export */   "Mod": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Mod),
/* harmony export */   "Multinomial": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Multinomial),
/* harmony export */   "Multiply": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Multiply),
/* harmony export */   "Neg": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Neg),
/* harmony export */   "NonMaxSuppressionV3": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.NonMaxSuppressionV3),
/* harmony export */   "NonMaxSuppressionV4": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.NonMaxSuppressionV4),
/* harmony export */   "NonMaxSuppressionV5": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.NonMaxSuppressionV5),
/* harmony export */   "NotEqual": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.NotEqual),
/* harmony export */   "OneHot": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.OneHot),
/* harmony export */   "OnesLike": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.OnesLike),
/* harmony export */   "Pack": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Pack),
/* harmony export */   "PadV2": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.PadV2),
/* harmony export */   "Pool": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Pool),
/* harmony export */   "Pow": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Pow),
/* harmony export */   "Prelu": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Prelu),
/* harmony export */   "Prod": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Prod),
/* harmony export */   "Range": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Range),
/* harmony export */   "Real": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Real),
/* harmony export */   "RealDiv": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.RealDiv),
/* harmony export */   "Reciprocal": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Reciprocal),
/* harmony export */   "Relu": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Relu),
/* harmony export */   "Relu6": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Relu6),
/* harmony export */   "Reshape": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Reshape),
/* harmony export */   "ResizeBilinear": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.ResizeBilinear),
/* harmony export */   "ResizeBilinearGrad": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.ResizeBilinearGrad),
/* harmony export */   "ResizeNearestNeighbor": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.ResizeNearestNeighbor),
/* harmony export */   "ResizeNearestNeighborGrad": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.ResizeNearestNeighborGrad),
/* harmony export */   "Reverse": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Reverse),
/* harmony export */   "RotateWithOffset": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.RotateWithOffset),
/* harmony export */   "Round": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Round),
/* harmony export */   "Rsqrt": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Rsqrt),
/* harmony export */   "ScatterNd": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.ScatterNd),
/* harmony export */   "Select": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Select),
/* harmony export */   "Selu": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Selu),
/* harmony export */   "Sigmoid": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Sigmoid),
/* harmony export */   "Sign": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Sign),
/* harmony export */   "Sin": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Sin),
/* harmony export */   "Sinh": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Sinh),
/* harmony export */   "Slice": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Slice),
/* harmony export */   "Softmax": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Softmax),
/* harmony export */   "Softplus": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Softplus),
/* harmony export */   "SpaceToBatchND": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.SpaceToBatchND),
/* harmony export */   "SparseToDense": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.SparseToDense),
/* harmony export */   "SplitV": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.SplitV),
/* harmony export */   "Sqrt": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Sqrt),
/* harmony export */   "Square": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Square),
/* harmony export */   "SquaredDifference": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.SquaredDifference),
/* harmony export */   "Step": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Step),
/* harmony export */   "StridedSlice": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.StridedSlice),
/* harmony export */   "Sub": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Sub),
/* harmony export */   "Sum": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Sum),
/* harmony export */   "Tan": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Tan),
/* harmony export */   "Tanh": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Tanh),
/* harmony export */   "Tile": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Tile),
/* harmony export */   "TopK": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.TopK),
/* harmony export */   "Transpose": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Transpose),
/* harmony export */   "Unique": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Unique),
/* harmony export */   "Unpack": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.Unpack),
/* harmony export */   "UnsortedSegmentSum": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.UnsortedSegmentSum),
/* harmony export */   "ZerosLike": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__.ZerosLike),
/* harmony export */   "_FusedMatMul": () => (/* reexport safe */ _kernel_names__WEBPACK_IMPORTED_MODULE_33__._FusedMatMul)
/* harmony export */ });
/* harmony import */ var _io_io__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./io/io */ "./node_modules/@tensorflow/tfjs-core/dist/io/io.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./math */ "./node_modules/@tensorflow/tfjs-core/dist/math.js");
/* harmony import */ var _ops_browser__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ops/browser */ "./node_modules/@tensorflow/tfjs-core/dist/ops/browser.js");
/* harmony import */ var _ops_gather_nd_util__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./ops/gather_nd_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js");
/* harmony import */ var _ops_scatter_nd_util__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./ops/scatter_nd_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js");
/* harmony import */ var _ops_slice_util__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./ops/slice_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _test_util__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./test_util */ "./node_modules/@tensorflow/tfjs-core/dist/test_util.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./version */ "./node_modules/@tensorflow/tfjs-core/dist/version.js");
/* harmony import */ var _optimizers_adadelta_optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./optimizers/adadelta_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js");
/* harmony import */ var _optimizers_adagrad_optimizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./optimizers/adagrad_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js");
/* harmony import */ var _optimizers_adam_optimizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./optimizers/adam_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js");
/* harmony import */ var _optimizers_adamax_optimizer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./optimizers/adamax_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js");
/* harmony import */ var _optimizers_momentum_optimizer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./optimizers/momentum_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js");
/* harmony import */ var _optimizers_optimizer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./optimizers/optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/* harmony import */ var _optimizers_rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./optimizers/rmsprop_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js");
/* harmony import */ var _optimizers_sgd_optimizer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./optimizers/sgd_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./types */ "./node_modules/@tensorflow/tfjs-core/dist/types.js");
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js");
/* harmony import */ var _ops_loss_ops_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ops/loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _train__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./train */ "./node_modules/@tensorflow/tfjs-core/dist/train.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _kernel_registry__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./kernel_registry */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js");
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _browser_util__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./browser_util */ "./node_modules/@tensorflow/tfjs-core/dist/browser_util.js");
/* harmony import */ var _backends_backend_util__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./backends/backend_util */ "./node_modules/@tensorflow/tfjs-core/dist/backends/backend_util.js");
/* harmony import */ var _device_util__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./device_util */ "./node_modules/@tensorflow/tfjs-core/dist/device_util.js");
/* harmony import */ var _backends_kernel_impls__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./backends/kernel_impls */ "./node_modules/@tensorflow/tfjs-core/dist/backends/kernel_impls.js");
/* harmony import */ var _backends_backend__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./backends/backend */ "./node_modules/@tensorflow/tfjs-core/dist/backends/backend.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// base.ts is tfjs-core without auto registration of things like flags,
// gradients, chained ops or the opHandler. See base_side_effects.ts for parts
// tfjs core that are required side effects.
/**
 * @fileoverview
 * @suppress {partialAlias} Optimization disabled due to passing the module
 * object into a function below:
 *
 *   import * as ops from './ops/ops';
 *   setOpHandler(ops);
 */
// Serialization.











// Optimizers.


















// Top-level method exports.

// Second level exports.





// Backend specific.

// Export all kernel names / info.

//# sourceMappingURL=base.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _flags__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flags */ "./node_modules/@tensorflow/tfjs-core/dist/flags.js");
/* harmony import */ var _platforms_platform_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platforms/platform_browser */ "./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js");
/* harmony import */ var _platforms_platform_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./platforms/platform_node */ "./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js");
/* harmony import */ var _ops_buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ops/buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_clone__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ops/clone */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js");
/* harmony import */ var _ops_print__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ops/print */ "./node_modules/@tensorflow/tfjs-core/dist/ops/print.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Required side effectful code for tfjs-core
// Set up Engine and ENV

(0,_engine__WEBPACK_IMPORTED_MODULE_0__.getOrMakeEngine)();
// Register backend-agnostic flags.

// Register platforms


// Set up OpHandler





const opHandler = {
    buffer: _ops_buffer__WEBPACK_IMPORTED_MODULE_4__.buffer,
    cast: _ops_cast__WEBPACK_IMPORTED_MODULE_5__.cast,
    clone: _ops_clone__WEBPACK_IMPORTED_MODULE_6__.clone,
    print: _ops_print__WEBPACK_IMPORTED_MODULE_7__.print
};
(0,_tensor__WEBPACK_IMPORTED_MODULE_8__.setOpHandler)(opHandler);
//# sourceMappingURL=base_side_effects.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/browser_util.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/browser_util.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nextFrame": () => (/* binding */ nextFrame)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const delayCallback = (() => {
    if (typeof requestAnimationFrame !== 'undefined') {
        return requestAnimationFrame;
    }
    else if (typeof setImmediate !== 'undefined') {
        return setImmediate;
    }
    return (f) => f(); // no delays
})();
/**
 * Returns a promise that resolve when a requestAnimationFrame has completed.
 *
 * On Node.js this uses setImmediate instead of requestAnimationFrame.
 *
 * This is simply a sugar method so that users can do the following:
 * `await tf.nextFrame();`
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */
function nextFrame() {
    return new Promise(resolve => delayCallback(() => resolve()));
}

//# sourceMappingURL=browser_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/device_util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/device_util.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isMobile": () => (/* binding */ isMobile),
/* harmony export */   "isBrowser": () => (/* binding */ isBrowser)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line:no-any
function _isNavigatorDefined() {
    return typeof navigator !== 'undefined' && navigator != null;
}
function isMobile() {
    if (_isNavigatorDefined()) {
        // tslint:disable-next-line:no-any
        const a = navigator.userAgent || navigator.vendor || window.opera;
        // tslint:disable-next-line:max-line-length
        return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i
            .test(a) ||
            // tslint:disable-next-line:max-line-length
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i
                .test(a.substr(0, 4));
    }
    return false;
}
function isBrowser() {
    return (typeof window !== 'undefined' && window.document != null) ||
        //@ts-ignore
        (typeof WorkerGlobalScope !== 'undefined');
}
//# sourceMappingURL=device_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/engine.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/engine.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Engine": () => (/* binding */ Engine),
/* harmony export */   "getOrMakeEngine": () => (/* binding */ getOrMakeEngine),
/* harmony export */   "ENGINE": () => (/* binding */ ENGINE),
/* harmony export */   "add": () => (/* binding */ add)
/* harmony export */ });
/* harmony import */ var _backends_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./backends/backend */ "./node_modules/@tensorflow/tfjs-core/dist/backends/backend.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _global_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./global_util */ "./node_modules/@tensorflow/tfjs-core/dist/global_util.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _kernel_registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./kernel_registry */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js");
/* harmony import */ var _profiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./profiler */ "./node_modules/@tensorflow/tfjs-core/dist/profiler.js");
/* harmony import */ var _tape__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tape */ "./node_modules/@tensorflow/tfjs-core/dist/tape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











class EngineState {
    constructor() {
        // Public since optimizers will use it.
        this.registeredVariables = {};
        this.nextTapeNodeId = 0;
        this.numBytes = 0;
        this.numTensors = 0;
        this.numStringTensors = 0;
        this.numDataBuffers = 0;
        // Number of nested tf.grad() statements when computing higher-order
        // gradients. E.g. `1` for first-order gradients and `2` for second-order
        // gradients. Used to track if the tape should be removed after a backprop.
        this.gradientDepth = 0;
        // Number of nested kernel calls. When kernel depth is greater than 1, we turn
        // off the tape.
        this.kernelDepth = 0;
        this.scopeStack = [];
        /**
         * Keeps track of the number of data moves during a kernel execution. We
         * maintain a stack since kernels can call other kernels, recursively.
         */
        this.numDataMovesStack = [];
        this.nextScopeId = 0;
        this.tensorInfo = new WeakMap();
        this.profiling = false;
        this.activeProfile = {
            newBytes: 0,
            newTensors: 0,
            peakBytes: 0,
            kernels: [],
            result: null,
            get kernelNames() {
                return Array.from(new Set(this.kernels.map(k => k.name)));
            }
        };
    }
    dispose() {
        for (const variableName in this.registeredVariables) {
            this.registeredVariables[variableName].dispose();
        }
    }
}
class Engine {
    constructor(ENV) {
        this.ENV = ENV;
        this.registry = {};
        this.registryFactory = {};
        this.pendingBackendInitId = 0;
        this.state = new EngineState();
    }
    async ready() {
        if (this.pendingBackendInit != null) {
            return this.pendingBackendInit.then(() => { });
        }
        if (this.backendInstance != null) {
            return;
        }
        const sortedBackends = this.getSortedBackends();
        for (let i = 0; i < sortedBackends.length; i++) {
            const backendName = sortedBackends[i];
            const success = await this.initializeBackend(backendName).success;
            if (success) {
                await this.setBackend(backendName);
                return;
            }
        }
        throw new Error(`Could not initialize any backends, all backend initializations ` +
            `failed.`);
    }
    get backend() {
        if (this.pendingBackendInit != null) {
            throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +
                `sure to await tf.ready() or await tf.setBackend() before calling ` +
                `other methods`);
        }
        if (this.backendInstance == null) {
            const { name, asyncInit } = this.initializeBackendsAndReturnBest();
            if (asyncInit) {
                throw new Error(`The highest priority backend '${name}' has not yet been ` +
                    `initialized. Make sure to await tf.ready() or ` +
                    `await tf.setBackend() before calling other methods`);
            }
            this.setBackend(name);
        }
        return this.backendInstance;
    }
    backendNames() {
        return Object.keys(this.registryFactory);
    }
    findBackend(backendName) {
        if (!(backendName in this.registry)) {
            // If the backend hasn't been initialized but we have a registry entry for
            // it, initialize it and return it.
            if (backendName in this.registryFactory) {
                const { asyncInit } = this.initializeBackend(backendName);
                if (asyncInit) {
                    // Backend is not ready yet.
                    return null;
                }
            }
            else {
                return null;
            }
        }
        return this.registry[backendName];
    }
    findBackendFactory(backendName) {
        if (!(backendName in this.registryFactory)) {
            return null;
        }
        return this.registryFactory[backendName].factory;
    }
    registerBackend(backendName, factory, priority = 1) {
        if (backendName in this.registryFactory) {
            console.warn(`${backendName} backend was already registered. ` +
                `Reusing existing backend factory.`);
            return false;
        }
        this.registryFactory[backendName] = { factory, priority };
        return true;
    }
    async setBackend(backendName) {
        if (this.registryFactory[backendName] == null) {
            throw new Error(`Backend name '${backendName}' not found in registry`);
        }
        this.backendName = backendName;
        if (this.registry[backendName] == null) {
            this.backendInstance = null;
            const { success, asyncInit } = this.initializeBackend(backendName);
            const result = asyncInit ? await success : success;
            if (!result) {
                return false;
            }
        }
        this.backendInstance = this.registry[backendName];
        this.setupRegisteredKernels();
        // Reset the profiler.
        this.profiler = new _profiler__WEBPACK_IMPORTED_MODULE_0__.Profiler(this.backendInstance);
        return true;
    }
    setupRegisteredKernels() {
        const kernels = (0,_kernel_registry__WEBPACK_IMPORTED_MODULE_1__.getKernelsForBackend)(this.backendName);
        kernels.forEach(kernel => {
            if (kernel.setupFunc != null) {
                kernel.setupFunc(this.backendInstance);
            }
        });
    }
    disposeRegisteredKernels(backendName) {
        const kernels = (0,_kernel_registry__WEBPACK_IMPORTED_MODULE_1__.getKernelsForBackend)(backendName);
        kernels.forEach(kernel => {
            if (kernel.disposeFunc != null) {
                kernel.disposeFunc(this.registry[backendName]);
            }
        });
    }
    /**
     * Initializes a backend by looking up the backend name in the factory
     * registry and calling the factory method. Returns a boolean representing
     * whether the initialization of the backend suceeded. Throws an error if
     * there is no backend in the factory registry.
     */
    initializeBackend(backendName) {
        const registryFactoryEntry = this.registryFactory[backendName];
        if (registryFactoryEntry == null) {
            throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);
        }
        try {
            const backend = registryFactoryEntry.factory();
            /* Test if the factory returns a promise.
            Done in a more liberal way than
            previous 'Promise.resolve(backend)===backend'
            as we needed to account for custom Promise
            implementations (e.g. Angular) */
            if (backend && !(backend instanceof _backends_backend__WEBPACK_IMPORTED_MODULE_2__.KernelBackend) &&
                typeof backend.then === 'function') {
                const promiseId = ++this.pendingBackendInitId;
                const success = backend
                    .then(backendInstance => {
                    // Outdated promise. Another backend was set in the meantime.
                    if (promiseId < this.pendingBackendInitId) {
                        return false;
                    }
                    this.registry[backendName] = backendInstance;
                    this.pendingBackendInit = null;
                    return true;
                })
                    .catch(err => {
                    // Outdated promise. Another backend was set in the meantime.
                    if (promiseId < this.pendingBackendInitId) {
                        return false;
                    }
                    this.pendingBackendInit = null;
                    console.warn(`Initialization of backend ${backendName} failed`);
                    console.warn(err.stack || err.message);
                    return false;
                });
                this.pendingBackendInit = success;
                return { success, asyncInit: true };
            }
            else {
                this.registry[backendName] = backend;
                return { success: true, asyncInit: false };
            }
        }
        catch (err) {
            console.warn(`Initialization of backend ${backendName} failed`);
            console.warn(err.stack || err.message);
            return { success: false, asyncInit: false };
        }
    }
    removeBackend(backendName) {
        if (!(backendName in this.registryFactory)) {
            throw new Error(`${backendName} backend not found in registry`);
        }
        if (this.backendName === backendName && this.pendingBackendInit != null) {
            // There is a pending promise of the backend we want to remove. Make it
            // obsolete.
            this.pendingBackendInitId++;
        }
        if (backendName in this.registry) {
            this.disposeRegisteredKernels(backendName);
            this.registry[backendName].dispose();
            delete this.registry[backendName];
        }
        delete this.registryFactory[backendName];
        // Unset the backend if it is active.
        if (this.backendName === backendName) {
            this.pendingBackendInit = null;
            this.backendName = null;
            this.backendInstance = null;
        }
    }
    getSortedBackends() {
        if (Object.keys(this.registryFactory).length === 0) {
            throw new Error('No backend found in registry.');
        }
        return Object.keys(this.registryFactory).sort((a, b) => {
            // Highest priority comes first.
            return this.registryFactory[b].priority -
                this.registryFactory[a].priority;
        });
    }
    initializeBackendsAndReturnBest() {
        const sortedBackends = this.getSortedBackends();
        for (let i = 0; i < sortedBackends.length; i++) {
            const backendName = sortedBackends[i];
            const { success, asyncInit } = this.initializeBackend(backendName);
            if (asyncInit || success) {
                return { name: backendName, asyncInit };
            }
        }
        throw new Error(`Could not initialize any backends, all backend initializations ` +
            `failed.`);
    }
    moveData(backend, dataId) {
        const info = this.state.tensorInfo.get(dataId);
        const srcBackend = info.backend;
        const values = this.readSync(dataId);
        // Delete the tensor from the old backend and move it to the new
        // backend.
        srcBackend.disposeData(dataId);
        info.backend = backend;
        backend.move(dataId, values, info.shape, info.dtype);
        if (this.shouldCheckForMemLeaks()) {
            // Track the number of moves during a kernel execution to correctly
            // detect memory leaks.
            this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
        }
    }
    tidy(nameOrFn, fn) {
        let name = null;
        if (fn == null) {
            // Called with only 1 argument.
            if (typeof nameOrFn !== 'function') {
                throw new Error('Please provide a function to tidy()');
            }
            fn = nameOrFn;
        }
        else {
            // Called with 2 arguments.
            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {
                throw new Error('When calling with two arguments, the first argument ' +
                    'to tidy() must be a string');
            }
            if (typeof fn !== 'function') {
                throw new Error('When calling with two arguments, the 2nd argument ' +
                    'to tidy() must be a function');
            }
            name = nameOrFn;
            // TODO(nsthorat,smilkov): Do operation logging and performance
            // profiling.
        }
        let result;
        return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {
            result = fn();
            if (result instanceof Promise) {
                console.error('Cannot return a Promise inside of tidy.');
            }
            return result;
        });
    }
    scopedRun(start, end, f) {
        start();
        try {
            const res = f();
            end();
            return res;
        }
        catch (ex) {
            end();
            throw ex;
        }
    }
    nextTensorId() {
        return Engine.nextTensorId++;
    }
    nextVariableId() {
        return Engine.nextVariableId++;
    }
    /**
     * This method is called instead of the public-facing tensor.clone() when
     * saving a tensor for backwards pass. It makes sure to add the clone
     * operation to the tape regardless of being called inside a kernel
     * execution.
     *
     * This method will go away once all kernels are modularized since we won't
     * need to turn off the tape inside runKernel().
     */
    clone(x) {
        const y = this.makeTensorFromDataId(x.dataId, x.shape, x.dtype);
        const inputs = { x };
        const grad = (dy) => ({
            x: () => {
                const dtype = 'float32';
                const gradInputs = { x: dy };
                const attrs = { dtype };
                return ENGINE.runKernelFunc(backend => backend.cast(dy, dtype), gradInputs, null /* grad */, _kernel_names__WEBPACK_IMPORTED_MODULE_3__.Cast, attrs);
            }
        });
        const saved = [];
        this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});
        return y;
    }
    /**
     * Execute a kernel with the given name and return the output tensor.
     *
     * @param kernelName The name of the kernel to execute.
     * @param inputs A map of input names to tensors.
     * @param attrs A map of attribute names to their values. An attribute is a
     *     primitive (non-tensor) input to the kernel.
     * @param inputsToSave A list of tensors, inputs to save for the backprop
     *     computation.
     * @param outputsToSave A list of booleans, specifying which output to save
     *     for the backprop computation. These are booleans since the output
     * tensors are not visible to the user.
     */
    runKernel(kernelName, inputs, attrs, inputsToSave, outputsToSave) {
        const forwardFunc = null;
        const backwardsFunc = null;
        // Call runKernel as a stop-gap until we modularize all kernels.
        // Once we modularize all kernels, we will remove the existing
        // `runKernelFunc`.
        return this.runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave);
    }
    shouldCheckForMemLeaks() {
        return this.ENV.getBool('IS_TEST');
    }
    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {
        const numDataIdsAfter = this.backend.numDataIds();
        // Count the number of data ids associated with the result of the kernel.
        let numOutputDataIds = 0;
        outInfos.forEach(info => {
            // Complex numbers allocate 3 data ids, one for 'real', one for
            // 'imaginary', and one for the container that holds the former two.
            numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);
        });
        // Account for the number of moves during kernel execution. A "data move"
        // can happen in the middle of a kernel execution, placing a new (key,value)
        // pair in the data storage. Since data moves have net zero effect (we
        // always remove the data from the old backend), we have to cancel them out
        // when detecting memory leaks.
        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];
        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;
        if (dataIdsLeaked > 0) {
            throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +
                `(${dataIdsLeaked} data ids) after running '${kernelName}'`);
        }
    }
    /**
     * @deprecated Use `runKernel` for newly added kernels. Keep using this method
     *     only for kernels that are not yet fully modularized.
     */
    runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave) {
        let outputs;
        let saved = [];
        const isTapeOn = this.isTapeOn();
        if (kernelName == null) {
            kernelName =
                this.state.activeScope != null ? this.state.activeScope.name : '';
        }
        const startingBytecount = this.state.numBytes;
        const startingNumTensors = this.state.numTensors;
        if (this.shouldCheckForMemLeaks()) {
            this.state.numDataMovesStack.push(0);
        }
        let kernelFunc;
        if (this.backendName == null) {
            // backend has not been initialized yet (backend initialization is lazy
            // can be deferred until an op/ kernel is run).
            // The below getter has side effects that will try to initialize the
            // backend and set properties like this.backendName
            // tslint:disable-next-line: no-unused-expression
            this.backend;
        }
        const kernel = (0,_kernel_registry__WEBPACK_IMPORTED_MODULE_1__.getKernel)(kernelName, this.backendName);
        let out;
        if (kernel != null) {
            kernelFunc = () => {
                const numDataIdsBefore = this.backend.numDataIds();
                out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });
                const outInfos = Array.isArray(out) ? out : [out];
                if (this.shouldCheckForMemLeaks()) {
                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);
                }
                const outTensors = outInfos.map((outInfo) => {
                    // todo (yassogba) remove this option (Tensor) when node backend
                    // methods have been modularized and they all return tensorInfo.
                    // TensorInfos do not have a rank attribute.
                    if (outInfo.rank != null) {
                        return outInfo;
                    }
                    const { dataId, shape, dtype } = outInfo;
                    return this.makeTensorFromDataId(dataId, shape, dtype);
                });
                // Save the inputs and outputs.
                // Do not save unless we are recording to the tape. Otherwise it would
                // cause a mem leak since we would never run backprop, which disposes
                // the kept tensors.
                if (isTapeOn) {
                    let tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);
                    if (tensorsToSave == null) {
                        // Fallback for ops that call runKernelFunc and pass in
                        // inputsToSave and outputsToSave. Currently this is the set of ops
                        // with kernel support in the WASM backend. Once those ops and
                        // respective gradients are modularised we can remove this path.
                        if (outputsToSave == null) {
                            outputsToSave = [];
                        }
                        const outsToSave = outTensors.filter((_, i) => outputsToSave[i]);
                        tensorsToSave = (inputsToSave || []).slice().concat(outsToSave);
                    }
                    saved = this.saveTensorsForBackwardMode(tensorsToSave);
                }
                return outTensors;
            };
        }
        else {
            if (forwardFunc == null) {
                throw new Error(`Error running ${kernelName}: Neither modular kernel nor forward func passed`);
            }
            const saveFunc = (tensors) => {
                // Do not save unless we are recording to the tape. Otherwise it would
                // cause a mem leak since we would never run backprop, which disposes
                // the kept tensors.
                if (!isTapeOn) {
                    return;
                }
                saved = tensors.map(tensor => this.keep(this.clone(tensor)));
            };
            kernelFunc = () => {
                const numDataIdsBefore = this.backend.numDataIds();
                out = this.tidy(() => forwardFunc(this.backend, saveFunc));
                const outs = (Array.isArray(out) ? out : [out]);
                if (this.shouldCheckForMemLeaks()) {
                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outs);
                }
                return outs;
            };
        }
        // Stop recording to a tape when running a kernel.
        let kernelProfile;
        this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
            if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {
                outputs = kernelFunc();
            }
            else {
                kernelProfile = this.profiler.profileKernel(kernelName, inputs, () => kernelFunc());
                if (this.ENV.getBool('DEBUG')) {
                    this.profiler.logKernelProfile(kernelProfile);
                }
                outputs = kernelProfile.outputs;
            }
        });
        if (isTapeOn) {
            this.addTapeNode(kernelName, inputs, outputs, backwardsFunc, saved, attrs);
        }
        if (this.state.profiling) {
            this.state.activeProfile.kernels.push({
                name: kernelName,
                bytesAdded: this.state.numBytes - startingBytecount,
                totalBytesSnapshot: this.state.numBytes,
                tensorsAdded: this.state.numTensors - startingNumTensors,
                totalTensorsSnapshot: this.state.numTensors,
                inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),
                outputShapes: outputs.map(item => item.shape),
                kernelTimeMs: kernelProfile.timeMs,
                extraInfo: kernelProfile.extraInfo
            });
        }
        return (Array.isArray(out) ? outputs : outputs[0]);
    }
    /**
     * Saves tensors used in forward mode for use in backward mode.
     *
     * @param tensors the list of tensors to save.
     */
    saveTensorsForBackwardMode(tensors) {
        const saved = tensors.map(tensor => this.keep(this.clone(tensor)));
        return saved;
    }
    /**
     * Returns a list of tensors to save for a given gradient calculation.
     *
     * Returns undefined if their is no registered gradient for this kernel in the
     * gradient registry.
     *
     * @param kernelName name of kernel to look up gradient for.
     * @param inputs a map of input tensors.
     * @param outputs an array of output tensors from forward mode of kernel.
     */
    getTensorsForGradient(kernelName, inputs, outputs) {
        const gradConfig = (0,_kernel_registry__WEBPACK_IMPORTED_MODULE_1__.getGradient)(kernelName);
        if (gradConfig != null) {
            const inputsToSave = gradConfig.inputsToSave || [];
            const outputsToSave = gradConfig.outputsToSave || [];
            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs
            // specified in inputsToSave will be saved.
            let inputTensorsToSave;
            if (gradConfig.saveAllInputs) {
                _util__WEBPACK_IMPORTED_MODULE_4__.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');
                inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);
            }
            else {
                inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);
            }
            const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);
            return inputTensorsToSave.concat(outputTensorsToSave);
        }
        // TODO(yassogba) throw exception here once all runkernelFunc calls with
        // inputsToSave/outputsToSave are removed
        return null;
    }
    /**
     * Internal method used by public APIs for tensor creation. Makes a new
     * tensor with the provided shape, dtype and values. It always
     * creates a new data id and writes the values to the underlying backend.
     */
    makeTensor(values, shape, dtype, backend) {
        if (values == null) {
            throw new Error('Values passed to engine.makeTensor() are null');
        }
        dtype = dtype || 'float32';
        backend = backend || this.backend;
        let backendVals = values;
        if (dtype === 'string' && _util__WEBPACK_IMPORTED_MODULE_4__.isString(values[0])) {
            backendVals = values.map(d => _util__WEBPACK_IMPORTED_MODULE_5__.encodeString(d));
        }
        const dataId = backend.write(backendVals, shape, dtype);
        const t = new _tensor__WEBPACK_IMPORTED_MODULE_6__.Tensor(shape, dtype, dataId, this.nextTensorId());
        this.incRef(t, backend);
        // Count bytes for string tensors.
        if (dtype === 'string') {
            const info = this.state.tensorInfo.get(dataId);
            const newBytes = (0,_util__WEBPACK_IMPORTED_MODULE_4__.bytesFromStringArray)(backendVals);
            this.state.numBytes += newBytes - info.bytes;
            info.bytes = newBytes;
        }
        return t;
    }
    /**
     * Internal method used by backends. Makes a new tensor
     * that is a wrapper around an existing data id. It doesn't create
     * a new data id, only increments the ref count used in memory tracking.
     */
    makeTensorFromDataId(dataId, shape, dtype, backend) {
        dtype = dtype || 'float32';
        const t = new _tensor__WEBPACK_IMPORTED_MODULE_6__.Tensor(shape, dtype, dataId, this.nextTensorId());
        this.incRef(t, backend);
        return t;
    }
    makeVariable(initialValue, trainable = true, name, dtype) {
        name = name || this.nextVariableId().toString();
        if (dtype != null && dtype !== initialValue.dtype) {
            initialValue = initialValue.cast(dtype);
        }
        const v = new _tensor__WEBPACK_IMPORTED_MODULE_6__.Variable(initialValue, trainable, name, this.nextTensorId());
        if (this.state.registeredVariables[v.name] != null) {
            throw new Error(`Variable with name ${v.name} was already registered`);
        }
        this.state.registeredVariables[v.name] = v;
        this.incRef(v, this.backend);
        return v;
    }
    incRef(a, backend) {
        const refCount = this.state.tensorInfo.has(a.dataId) ?
            this.state.tensorInfo.get(a.dataId).refCount :
            0;
        this.state.numTensors++;
        if (a.dtype === 'string') {
            this.state.numStringTensors++;
        }
        if (refCount === 0) {
            this.state.numDataBuffers++;
            // Bytes for complex numbers are counted by their components. Bytes for
            // string tensors are counted when writing values.
            let bytes = 0;
            if (a.dtype !== 'complex64' && a.dtype !== 'string') {
                bytes = a.size * _util__WEBPACK_IMPORTED_MODULE_4__.bytesPerElement(a.dtype);
            }
            this.state.tensorInfo.set(a.dataId, {
                backend: backend || this.backend,
                dtype: a.dtype,
                shape: a.shape,
                bytes,
                refCount: 0
            });
            this.state.numBytes += bytes;
        }
        this.state.tensorInfo.get(a.dataId).refCount++;
        if (!(a instanceof _tensor__WEBPACK_IMPORTED_MODULE_6__.Variable)) {
            this.track(a);
        }
    }
    disposeTensor(a) {
        if (!this.state.tensorInfo.has(a.dataId)) {
            return;
        }
        this.state.numTensors--;
        if (a.dtype === 'string') {
            this.state.numStringTensors--;
        }
        const info = this.state.tensorInfo.get(a.dataId);
        const refCount = info.refCount;
        if (refCount <= 1) {
            // Don't count bytes for complex numbers as they are counted by their
            // components.
            if (a.dtype !== 'complex64') {
                this.state.numBytes -= info.bytes;
            }
            this.state.numDataBuffers--;
            info.backend.disposeData(a.dataId);
            this.state.tensorInfo.delete(a.dataId);
        }
        else {
            // Notify the backend to descrease the ref count for complex tensor
            // components. This method is only implemented in WebGL right now. When
            // there are multiple references, complex tensor cannot dispose the
            // components if ref count is not in sync with engine.
            info.backend.decComplexRef(a.dataId);
            this.state.tensorInfo.get(a.dataId).refCount--;
        }
        // TODO(nsthorat): Construct an error and save the stack trace for
        // debugging when in debug mode. Creating a stack trace is too expensive
        // to do unconditionally.
    }
    disposeVariables() {
        for (const varName in this.state.registeredVariables) {
            const v = this.state.registeredVariables[varName];
            this.disposeVariable(v);
        }
    }
    disposeVariable(v) {
        this.disposeTensor(v);
        if (this.state.registeredVariables[v.name] != null) {
            delete this.state.registeredVariables[v.name];
        }
    }
    memory() {
        const info = this.backend.memory();
        info.numTensors = this.state.numTensors;
        info.numDataBuffers = this.state.numDataBuffers;
        info.numBytes = this.state.numBytes;
        if (this.state.numStringTensors > 0) {
            info.unreliable = true;
            if (info.reasons == null) {
                info.reasons = [];
            }
            info.reasons.push('Memory usage by string tensors is approximate ' +
                '(2 bytes per character)');
        }
        return info;
    }
    async profile(query) {
        this.state.profiling = true;
        const startBytes = this.state.numBytes;
        const startNumTensors = this.state.numTensors;
        this.state.activeProfile.kernels = [];
        this.state.activeProfile.result = await query();
        this.state.profiling = false;
        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));
        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;
        this.state.activeProfile.newTensors =
            this.state.numTensors - startNumTensors;
        for (const kernel of this.state.activeProfile.kernels) {
            kernel.kernelTimeMs = await kernel.kernelTimeMs;
            kernel.extraInfo = await kernel.extraInfo;
        }
        return this.state.activeProfile;
    }
    isTapeOn() {
        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
    }
    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {
        const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };
        const gradConfig = (0,_kernel_registry__WEBPACK_IMPORTED_MODULE_1__.getGradient)(kernelName);
        if (gradConfig != null) {
            gradientsFunc = gradConfig.gradFunc;
        }
        if (gradientsFunc != null) {
            tapeNode.gradient = (dys) => {
                // TODO(smilkov): To optimize back-prop, pass dys that are not used in
                // the backprop graph to the user as null instead of zeros
                dys = dys.map((dy, i) => {
                    if (dy == null) {
                        const output = outputs[i];
                        const vals = _util__WEBPACK_IMPORTED_MODULE_4__.makeZerosTypedArray(output.size, output.dtype);
                        return this.makeTensor(vals, output.shape, output.dtype);
                    }
                    return dy;
                });
                // Grad functions of ops with single outputs expect a dy, while ops
                // with multiple outputs expect dys (array of dy).
                return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);
            };
        }
        this.state.activeTape.push(tapeNode);
    }
    keep(result) {
        result.kept = true;
        return result;
    }
    startTape() {
        if (this.state.gradientDepth === 0) {
            this.state.activeTape = [];
        }
        this.state.gradientDepth++;
    }
    endTape() {
        this.state.gradientDepth--;
    }
    /**
     * Start a scope. Use this with endScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */
    startScope(name) {
        const scopeInfo = {
            track: [],
            name: 'unnamed scope',
            id: this.state.nextScopeId++
        };
        if (name) {
            scopeInfo.name = name;
        }
        this.state.scopeStack.push(scopeInfo);
        this.state.activeScope = scopeInfo;
    }
    /**
     * End a scope. Use this with startScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */
    endScope(result) {
        const tensorsToTrackInParent = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_7__.getTensorsInContainer)(result);
        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));
        // Dispose the arrays tracked in this scope.
        for (let i = 0; i < this.state.activeScope.track.length; i++) {
            const tensor = this.state.activeScope.track[i];
            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {
                tensor.dispose();
            }
        }
        const oldScope = this.state.scopeStack.pop();
        this.state.activeScope = this.state.scopeStack.length === 0 ?
            null :
            this.state.scopeStack[this.state.scopeStack.length - 1];
        // Track the current result in the parent scope.
        tensorsToTrackInParent.forEach(tensor => {
            // Only track the tensor if was allocated in the inner scope and is not
            // globally kept.
            if (!tensor.kept && tensor.scopeId === oldScope.id) {
                this.track(tensor);
            }
        });
    }
    /**
     * Returns gradients of `f` with respect to each of the `xs`. The gradients
     * returned are of the same length as `xs`, but some might be null if `f`
     * was not a function of that `x`. It also takes optional dy to multiply the
     * gradient, which defaults to `1`.
     */
    gradients(f, xs, dy, allowNoGradients = false) {
        _util__WEBPACK_IMPORTED_MODULE_4__.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');
        if (dy != null && dy.dtype !== 'float32') {
            throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);
        }
        const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));
        _util__WEBPACK_IMPORTED_MODULE_4__.assert(y instanceof _tensor__WEBPACK_IMPORTED_MODULE_6__.Tensor, () => 'The result y returned by f() must be a tensor.');
        // Filter out the nodes that don't connect x => y.
        const filteredTape = (0,_tape__WEBPACK_IMPORTED_MODULE_8__.getFilteredNodesXToY)(this.state.activeTape, xs, y);
        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {
            throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +
                'that the f you passed encloses all operations that lead from x ' +
                'to y.');
        }
        return this.tidy('backward', () => {
            const accumulatedGradientMap = {};
            accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;
            // Backprop gradients through the filtered nodes.
            (0,_tape__WEBPACK_IMPORTED_MODULE_8__.backpropagateGradients)(accumulatedGradientMap, filteredTape, 
            // Pass the tidy function to avoid circular dep with `tape.ts`.
            f => this.tidy(f), 
            // Pass an add function to avoide a circular dep with `tape.ts`.
            add);
            const grads = xs.map(x => accumulatedGradientMap[x.id]);
            if (this.state.gradientDepth === 0) {
                // This means that we are not computing higher-order gradients
                // and can clean up the tape.
                this.state.activeTape.forEach(node => {
                    for (const tensor of node.saved) {
                        tensor.dispose();
                    }
                });
                this.state.activeTape = null;
            }
            return { value: y, grads };
        });
    }
    customGrad(f) {
        _util__WEBPACK_IMPORTED_MODULE_4__.assert(_util__WEBPACK_IMPORTED_MODULE_4__.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');
        return (...inputs) => {
            _util__WEBPACK_IMPORTED_MODULE_4__.assert(inputs.every(t => t instanceof _tensor__WEBPACK_IMPORTED_MODULE_6__.Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +
                'tensors');
            let res;
            const inputMap = {};
            inputs.forEach((input, i) => {
                inputMap[i] = input;
            });
            return this.runKernelFunc((_, save) => {
                res = f(...[...inputs, save]);
                _util__WEBPACK_IMPORTED_MODULE_4__.assert(res.value instanceof _tensor__WEBPACK_IMPORTED_MODULE_6__.Tensor, () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.value` is a tensor');
                _util__WEBPACK_IMPORTED_MODULE_4__.assert(_util__WEBPACK_IMPORTED_MODULE_4__.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.gradFunc` is a function.');
                return res.value;
            }, inputMap, (dy, saved) => {
                const gradRes = res.gradFunc(dy, saved);
                const grads = Array.isArray(gradRes) ? gradRes : [gradRes];
                _util__WEBPACK_IMPORTED_MODULE_4__.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.gradFunc` is a function that returns ' +
                    'the same number of tensors as inputs passed to f(...).');
                _util__WEBPACK_IMPORTED_MODULE_4__.assert(grads.every(t => t instanceof _tensor__WEBPACK_IMPORTED_MODULE_6__.Tensor), () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.gradFunc` is a function that returns ' +
                    'a list of only tensors.');
                const gradMap = {};
                grads.forEach((grad, i) => {
                    gradMap[i] = () => grad;
                });
                return gradMap;
            });
        };
    }
    readSync(dataId) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.readSync(dataId);
    }
    read(dataId) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.read(dataId);
    }
    async time(query) {
        const start = (0,_util__WEBPACK_IMPORTED_MODULE_5__.now)();
        const timingInfo = await this.backend.time(query);
        timingInfo.wallMs = (0,_util__WEBPACK_IMPORTED_MODULE_5__.now)() - start;
        return timingInfo;
    }
    /**
     * Tracks a Tensor in the current scope to be automatically cleaned up
     * when the current scope ends, and returns the value.
     *
     * @param result The Tensor to track in the current scope.
     */
    track(result) {
        if (this.state.activeScope != null) {
            result.scopeId = this.state.activeScope.id;
            this.state.activeScope.track.push(result);
        }
        return result;
    }
    get registeredVariables() {
        return this.state.registeredVariables;
    }
    /**
     * Resets the engine state. Removes all backends but does not remove
     * registered backend factories.
     */
    reset() {
        // Make any pending promise obsolete.
        this.pendingBackendInitId++;
        this.state.dispose();
        this.ENV.reset();
        this.state = new EngineState();
        for (const backendName in this.registry) {
            this.disposeRegisteredKernels(backendName);
            this.registry[backendName].dispose();
            delete this.registry[backendName];
        }
        this.backendName = null;
        this.backendInstance = null;
        this.pendingBackendInit = null;
    }
}
Engine.nextTensorId = 0;
Engine.nextVariableId = 0;
function ones(shape) {
    const values = (0,_util__WEBPACK_IMPORTED_MODULE_4__.makeOnesTypedArray)((0,_util__WEBPACK_IMPORTED_MODULE_4__.sizeFromShape)(shape), 'float32');
    return ENGINE.makeTensor(values, shape, 'float32');
}
function getOrMakeEngine() {
    const ns = (0,_global_util__WEBPACK_IMPORTED_MODULE_9__.getGlobalNamespace)();
    if (ns._tfengine == null) {
        const environment = new _environment__WEBPACK_IMPORTED_MODULE_10__.Environment(ns);
        ns._tfengine = new Engine(environment);
    }
    (0,_environment__WEBPACK_IMPORTED_MODULE_10__.setEnvironmentGlobal)(ns._tfengine.ENV);
    // Tell the current tensor interface that the global engine is responsible
    // for tracking.
    (0,_tensor__WEBPACK_IMPORTED_MODULE_6__.setTensorTracker)(() => ns._tfengine);
    return ns._tfengine;
}
const ENGINE = getOrMakeEngine();
/**
 * A implementation of the add op for use within engine and tape.
 *
 * This allows us to avoid a circular dependency between add.ts and engine.
 * It is exported to be available in tape tests.
 */
function add(a, b) {
    // We duplicate Add here to avoid a circular dependency with add.ts.
    const inputs = { a, b };
    return ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Add, inputs);
}
//# sourceMappingURL=engine.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/environment.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/environment.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Environment": () => (/* binding */ Environment),
/* harmony export */   "getQueryParams": () => (/* binding */ getQueryParams),
/* harmony export */   "env": () => (/* binding */ env),
/* harmony export */   "ENV": () => (/* binding */ ENV),
/* harmony export */   "setEnvironmentGlobal": () => (/* binding */ setEnvironmentGlobal)
/* harmony export */ });
/* harmony import */ var _util_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util_base */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.
const TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';
/**
 * The environment contains evaluated flags as well as the registered platform.
 * This is always used as a global singleton and can be retrieved with
 * `tf.env()`.
 *
 * @doc {heading: 'Environment'}
 */
class Environment {
    // tslint:disable-next-line: no-any
    constructor(global) {
        this.global = global;
        this.flags = {};
        this.flagRegistry = {};
        this.urlFlags = {};
        this.populateURLFlags();
    }
    setPlatform(platformName, platform) {
        if (this.platform != null) {
            console.warn(`Platform ${this.platformName} has already been set. ` +
                `Overwriting the platform with ${platform}.`);
        }
        this.platformName = platformName;
        this.platform = platform;
    }
    registerFlag(flagName, evaluationFn, setHook) {
        this.flagRegistry[flagName] = { evaluationFn, setHook };
        // Override the flag value from the URL. This has to happen here because the
        // environment is initialized before flags get registered.
        if (this.urlFlags[flagName] != null) {
            const flagValue = this.urlFlags[flagName];
            console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);
            this.set(flagName, flagValue);
        }
    }
    async getAsync(flagName) {
        if (flagName in this.flags) {
            return this.flags[flagName];
        }
        this.flags[flagName] = await this.evaluateFlag(flagName);
        return this.flags[flagName];
    }
    get(flagName) {
        if (flagName in this.flags) {
            return this.flags[flagName];
        }
        const flagValue = this.evaluateFlag(flagName);
        if ((0,_util_base__WEBPACK_IMPORTED_MODULE_0__.isPromise)(flagValue)) {
            throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` +
                `Please use getAsync() instead.`);
        }
        this.flags[flagName] = flagValue;
        return this.flags[flagName];
    }
    getNumber(flagName) {
        return this.get(flagName);
    }
    getBool(flagName) {
        return this.get(flagName);
    }
    getFlags() {
        return this.flags;
    }
    // For backwards compatibility.
    get features() {
        return this.flags;
    }
    set(flagName, value) {
        if (this.flagRegistry[flagName] == null) {
            throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);
        }
        this.flags[flagName] = value;
        if (this.flagRegistry[flagName].setHook != null) {
            this.flagRegistry[flagName].setHook(value);
        }
    }
    evaluateFlag(flagName) {
        if (this.flagRegistry[flagName] == null) {
            throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);
        }
        return this.flagRegistry[flagName].evaluationFn();
    }
    setFlags(flags) {
        this.flags = Object.assign({}, flags);
    }
    reset() {
        this.flags = {};
        this.urlFlags = {};
        this.populateURLFlags();
    }
    populateURLFlags() {
        if (typeof this.global === 'undefined' ||
            typeof this.global.location === 'undefined' ||
            typeof this.global.location.search === 'undefined') {
            return;
        }
        const urlParams = getQueryParams(this.global.location.search);
        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {
            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');
            keyValues.forEach(keyValue => {
                const [key, value] = keyValue.split(':');
                this.urlFlags[key] = parseValue(key, value);
            });
        }
    }
}
function getQueryParams(queryString) {
    const params = {};
    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {
        decodeParam(params, t[0], t[1]);
        return t.join('=');
    });
    return params;
}
function decodeParam(params, name, value) {
    params[decodeURIComponent(name)] = decodeURIComponent(value || '');
}
function parseValue(flagName, value) {
    value = value.toLowerCase();
    if (value === 'true' || value === 'false') {
        return value === 'true';
    }
    else if (`${+value}` === value) {
        return +value;
    }
    throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);
}
/**
 * Returns the current environment (a global singleton).
 *
 * The environment object contains the evaluated feature values as well as the
 * active platform.
 *
 * @doc {heading: 'Environment'}
 */
function env() {
    return ENV;
}
let ENV = null;
function setEnvironmentGlobal(environment) {
    ENV = environment;
}
//# sourceMappingURL=environment.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/flags.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/flags.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _device_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./device_util */ "./node_modules/@tensorflow/tfjs-core/dist/device_util.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const ENV = (0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)();
/**
 * This file contains environment-related flag registrations.
 */
/** Whether to enable debug mode. */
ENV.registerFlag('DEBUG', () => false, debugValue => {
    if (debugValue) {
        console.warn('Debugging mode is ON. The output of every math call will ' +
            'be downloaded to CPU and checked for NaNs. ' +
            'This significantly impacts performance.');
    }
});
/** Whether we are in a browser (as versus, say, node.js) environment. */
ENV.registerFlag('IS_BROWSER', () => _device_util__WEBPACK_IMPORTED_MODULE_2__.isBrowser());
/** Whether we are in a browser (as versus, say, node.js) environment. */
ENV.registerFlag('IS_NODE', () => (typeof process !== 'undefined') &&
    (typeof process.versions !== 'undefined') &&
    (typeof process.versions.node !== 'undefined'));
/** Whether this browser is Chrome. */
ENV.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null &&
    navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&
    /Google Inc/.test(navigator.vendor));
/**
 * True when the environment is "production" where we disable safety checks
 * to gain performance.
 */
ENV.registerFlag('PROD', () => false);
/**
 * Whether to do sanity checks when inferring a shape from user-provided
 * values, used when creating a new tensor.
 */
ENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));
/** Whether deprecation warnings are enabled. */
ENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);
/** True if running unit tests. */
ENV.registerFlag('IS_TEST', () => false);
/** Whether to check computation result for errors. */
ENV.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => true);
//# sourceMappingURL=flags.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/global_util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/global_util.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getGlobalNamespace": () => (/* binding */ getGlobalNamespace),
/* harmony export */   "getGlobal": () => (/* binding */ getGlobal)
/* harmony export */ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Note that the identifier globalNameSpace is scoped to this module, but will
// always resolve to the same global object regardless of how the module is
// resolved.
// tslint:disable-next-line:no-any
let globalNameSpace;
// tslint:disable-next-line:no-any
function getGlobalNamespace() {
    if (globalNameSpace == null) {
        // tslint:disable-next-line:no-any
        let ns;
        if (typeof (window) !== 'undefined') {
            ns = window;
        }
        else if (typeof (__webpack_require__.g) !== 'undefined') {
            ns = __webpack_require__.g;
        }
        else if (typeof (process) !== 'undefined') {
            ns = process;
        }
        else if (typeof (self) !== 'undefined') {
            ns = self;
        }
        else {
            throw new Error('Could not find a global object');
        }
        globalNameSpace = ns;
    }
    return globalNameSpace;
}
// tslint:disable-next-line:no-any
function getGlobalMap() {
    const ns = getGlobalNamespace();
    if (ns._tfGlobals == null) {
        ns._tfGlobals = new Map();
    }
    return ns._tfGlobals;
}
/**
 * Returns a globally accessible 'singleton' object.
 *
 * @param key the name of the object
 * @param init a function to initialize to initialize this object
 *             the first time it is fetched.
 */
function getGlobal(key, init) {
    const globalMap = getGlobalMap();
    if (globalMap.has(key)) {
        return globalMap.get(key);
    }
    else {
        const singleton = init();
        globalMap.set(key, singleton);
        return globalMap.get(key);
    }
}
//# sourceMappingURL=global_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/globals.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/globals.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "enableProdMode": () => (/* binding */ enableProdMode),
/* harmony export */   "enableDebugMode": () => (/* binding */ enableDebugMode),
/* harmony export */   "disableDeprecationWarnings": () => (/* binding */ disableDeprecationWarnings),
/* harmony export */   "deprecationWarn": () => (/* binding */ deprecationWarn),
/* harmony export */   "disposeVariables": () => (/* binding */ disposeVariables),
/* harmony export */   "engine": () => (/* binding */ engine),
/* harmony export */   "memory": () => (/* binding */ memory),
/* harmony export */   "profile": () => (/* binding */ profile),
/* harmony export */   "tidy": () => (/* binding */ tidy),
/* harmony export */   "dispose": () => (/* binding */ dispose),
/* harmony export */   "keep": () => (/* binding */ keep),
/* harmony export */   "time": () => (/* binding */ time),
/* harmony export */   "setBackend": () => (/* binding */ setBackend),
/* harmony export */   "ready": () => (/* binding */ ready),
/* harmony export */   "getBackend": () => (/* binding */ getBackend),
/* harmony export */   "removeBackend": () => (/* binding */ removeBackend),
/* harmony export */   "findBackend": () => (/* binding */ findBackend),
/* harmony export */   "findBackendFactory": () => (/* binding */ findBackendFactory),
/* harmony export */   "registerBackend": () => (/* binding */ registerBackend),
/* harmony export */   "backend": () => (/* binding */ backend),
/* harmony export */   "setPlatform": () => (/* binding */ setPlatform)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Enables production mode which disables correctness checks in favor of
 * performance.
 *
 * @doc {heading: 'Environment'}
 */
function enableProdMode() {
    (0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)().set('PROD', true);
}
/**
 * Enables debug mode which will log information about all executed kernels:
 * the elapsed time of the kernel execution, as well as the rank, shape, and
 * size of the output tensor.
 *
 * Debug mode will significantly slow down your application as it will
 * download the result of every operation to the CPU. This should not be used in
 * production. Debug mode does not affect the timing information of the kernel
 * execution as we do not measure download time in the kernel execution time.
 *
 * See also: `tf.profile`, `tf.memory`.
 *
 * @doc {heading: 'Environment'}
 */
function enableDebugMode() {
    (0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)().set('DEBUG', true);
}
/** Globally disables deprecation warnings */
function disableDeprecationWarnings() {
    (0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)().set('DEPRECATION_WARNINGS_ENABLED', false);
    console.warn(`TensorFlow.js deprecation warnings have been disabled.`);
}
/** Warn users about deprecated functionality. */
function deprecationWarn(msg) {
    if ((0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('DEPRECATION_WARNINGS_ENABLED')) {
        console.warn(msg + ' You can disable deprecation warnings with ' +
            'tf.disableDeprecationWarnings().');
    }
}
(0,_tensor__WEBPACK_IMPORTED_MODULE_2__.setDeprecationWarningFn)(deprecationWarn);
/**
 * Dispose all variables kept in backend engine.
 *
 * @doc {heading: 'Environment'}
 */
function disposeVariables() {
    _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.disposeVariables();
}
/**
 * It returns the global engine that keeps track of all tensors and backends.
 *
 * @doc {heading: 'Environment'}
 */
function engine() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE;
}
/**
 * Returns memory info at the current time in the program. The result is an
 * object with the following properties:
 *
 * - `numBytes`: Number of bytes allocated (undisposed) at this time.
 * - `numTensors`: Number of unique tensors allocated.
 * - `numDataBuffers`: Number of unique data buffers allocated
 *   (undisposed) at this time, which is ≤ the number of tensors
 *   (e.g. `a.reshape(newShape)` makes a new Tensor that shares the same
 *   data buffer with `a`).
 * - `unreliable`: True if the memory usage is unreliable. See `reasons` when
 *    `unreliable` is true.
 * - `reasons`: `string[]`, reasons why the memory is unreliable, present if
 *    `unreliable` is true.
 *
 * WebGL Properties:
 * - `numBytesInGPU`: Number of bytes allocated (undisposed) in the GPU only at
 *     this time.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */
function memory() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.memory();
}
/**
 * Executes the provided function `f()` and returns a promise that resolves
 * with information about the function's memory use:
 * - `newBytes`: the number of new bytes allocated
 * - `newTensors`: the number of new tensors created
 * - `peakBytes`: the peak number of bytes allocated
 * - `kernels`: an array of objects for each kernel involved that reports
 * their input and output shapes, number of bytes used, and number of new
 * tensors created.
 * - `kernelNames`: an array of unique strings with just the names of the
 * kernels in the `kernels` array.
 *
 * ```js
 * const profile = await tf.profile(() => {
 *   const x = tf.tensor1d([1, 2, 3]);
 *   let x2 = x.square();
 *   x2.dispose();
 *   x2 = x.square();
 *   x2.dispose();
 *   return x;
 * });
 *
 * console.log(`newBytes: ${profile.newBytes}`);
 * console.log(`newTensors: ${profile.newTensors}`);
 * console.log(`byte usage over all kernels: ${profile.kernels.map(k =>
 * k.totalBytesSnapshot)}`);
 * ```
 *
 *
 * @doc {heading: 'Performance', subheading: 'Profile'}
 */
function profile(f) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.profile(f);
}
/**
 * Executes the provided function `fn` and after it is executed, cleans up all
 * intermediate tensors allocated by `fn` except those returned by `fn`.
 * `fn` must not return a Promise (async functions not allowed). The returned
 * result can be a complex object.
 *
 * Using this method helps avoid memory leaks. In general, wrap calls to
 * operations in `tf.tidy` for automatic memory cleanup.
 *
 * NOTE: Variables do *not* get cleaned up when inside a tidy(). If you want to
 * dispose variables, please use `tf.disposeVariables` or call dispose()
 * directly on variables.
 *
 * ```js
 * // y = 2 ^ 2 + 1
 * const y = tf.tidy(() => {
 *   // a, b, and one will be cleaned up when the tidy ends.
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *   const b = a.square();
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * y.print();
 * ```
 *
 * @param nameOrFn The name of the closure, or the function to execute.
 *     If a name is provided, the 2nd argument should be the function.
 *     If debug mode is on, the timing and the memory usage of the function
 *     will be tracked and displayed on the console using the provided name.
 * @param fn The function to execute.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */
function tidy(nameOrFn, fn) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.tidy(nameOrFn, fn);
}
/**
 * Disposes any `tf.Tensor`s found within the provided object.
 *
 * @param container an object that may be a `tf.Tensor` or may directly
 *     contain `tf.Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. If
 *     the object is not a `tf.Tensor` or does not contain `Tensors`, nothing
 *     happens. In general it is safe to pass any object here, except that
 *     `Promise`s are not supported.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */
function dispose(container) {
    const tensors = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_3__.getTensorsInContainer)(container);
    tensors.forEach(tensor => tensor.dispose());
}
/**
 * Keeps a `tf.Tensor` generated inside a `tf.tidy` from being disposed
 * automatically.
 *
 * ```js
 * let b;
 * const y = tf.tidy(() => {
 *   const one = tf.scalar(1);
 *   const a = tf.scalar(2);
 *
 *   // b will not be cleaned up by the tidy. a and one will be cleaned up
 *   // when the tidy ends.
 *   b = tf.keep(a.square());
 *
 *   console.log('numTensors (in tidy): ' + tf.memory().numTensors);
 *
 *   // The value returned inside the tidy function will return
 *   // through the tidy, in this case to the variable y.
 *   return b.add(one);
 * });
 *
 * console.log('numTensors (outside tidy): ' + tf.memory().numTensors);
 * console.log('y:');
 * y.print();
 * console.log('b:');
 * b.print();
 * ```
 *
 * @param result The tensor to keep from being disposed.
 *
 * @doc {heading: 'Performance', subheading: 'Memory'}
 */
function keep(result) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.keep(result);
}
/**
 * Executes `f()` and returns a promise that resolves with timing
 * information.
 *
 * The result is an object with the following properties:
 *
 * - `wallMs`: Wall execution time.
 * - `kernelMs`: Kernel execution time, ignoring data transfer. If using the
 * WebGL backend and the query timer extension is not available, this will
 * return an error object.
 * - On `WebGL` The following additional properties exist:
 *   - `uploadWaitMs`: CPU blocking time on texture uploads.
 *   - `downloadWaitMs`: CPU blocking time on texture downloads (readPixels).
 *
 * ```js
 * const x = tf.randomNormal([20, 20]);
 * const time = await tf.time(() => x.matMul(x));
 *
 * console.log(`kernelMs: ${time.kernelMs}, wallTimeMs: ${time.wallMs}`);
 * ```
 *
 * @param f The function to execute and time.
 *
 * @doc {heading: 'Performance', subheading: 'Timing'}
 */
function time(f) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.time(f);
}
/**
 * Sets the backend (cpu, webgl, wasm, etc) responsible for creating tensors and
 * executing operations on those tensors. Returns a promise that resolves
 * to a boolean if the backend initialization was successful.
 *
 * Note this disposes the current backend, if any, as well as any tensors
 * associated with it. A new backend is initialized, even if it is of the
 * same type as the previous one.
 *
 * @param backendName The name of the backend. Currently supports
 *     `'webgl'|'cpu'` in the browser, `'tensorflow'` under node.js
 *     (requires tfjs-node), and `'wasm'` (requires tfjs-backend-wasm).
 *
 * @doc {heading: 'Backends'}
 */
function setBackend(backendName) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.setBackend(backendName);
}
/**
 * Returns a promise that resolves when the currently selected backend (or the
 * highest priority one) has initialized. Await this promise when you are using
 * a backend that has async initialization.
 *
 * @doc {heading: 'Backends'}
 */
function ready() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.ready();
}
/**
 * Returns the current backend name (cpu, webgl, etc). The backend is
 * responsible for creating tensors and executing operations on those tensors.
 *
 * @doc {heading: 'Backends'}
 */
function getBackend() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.backendName;
}
/**
 * Removes a backend and the registered factory.
 *
 * @doc {heading: 'Backends'}
 */
function removeBackend(name) {
    _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.removeBackend(name);
}
/**
 * Finds the backend registered under the provided name. Returns null if the
 * name is not in the registry, or the registration hasn't finished yet.
 */
function findBackend(name) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.findBackend(name);
}
/**
 * Finds the backend factory registered under the provided name. Returns a
 * function that produces a new backend when called. Returns null if the name
 * is not in the registry.
 */
function findBackendFactory(name) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.findBackendFactory(name);
}
/**
 * Registers a global backend. The registration should happen when importing
 * a module file (e.g. when importing `backend_webgl.ts`), and is used for
 * modular builds (e.g. custom tfjs bundle with only webgl support).
 *
 * @param factory The backend factory function. When called, it should
 * return a backend instance, or a promise of an instance.
 * @param priority The priority of the backend (higher = more important).
 *     In case multiple backends are registered, the priority is used to find
 *     the best backend. Defaults to 1.
 * @return False if there is already a registered backend under this name, true
 *     if not.
 *
 * @doc {heading: 'Backends'}
 */
function registerBackend(name, factory, priority = 1) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.registerBackend(name, factory, priority);
}
/**
 * Gets the current backend. If no backends have been initialized, this will
 * attempt to initialize the best backend. Will throw an error if the highest
 * priority backend has async initialization, in which case, you should call
 * 'await tf.ready()' before running other code.
 *
 * @doc {heading: 'Backends'}
 */
function backend() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.backend;
}
/**
 * Sets the global platform.
 *
 * @param platformName The name of this platform.
 * @param platform A platform implementation.
 */
function setPlatform(platformName, platform) {
    (0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)().setPlatform(platformName, platform);
}
//# sourceMappingURL=globals.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "customGrad": () => (/* binding */ customGrad),
/* harmony export */   "variableGrads": () => (/* binding */ variableGrads),
/* harmony export */   "valueAndGrad": () => (/* binding */ valueAndGrad),
/* harmony export */   "valueAndGrads": () => (/* binding */ valueAndGrads),
/* harmony export */   "grad": () => (/* binding */ grad),
/* harmony export */   "grads": () => (/* binding */ grads)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the
 * gradient of `f(x)` with respect to `x`.
 *
 * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to
 * `x` is computed instead. `f(x)` must take a single tensor `x` and return a
 * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.grad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * g(x).print();
 * ```
 *
 * ```js
 * // f(x) = x ^ 3
 * const f = x => x.pow(tf.scalar(3, 'int32'));
 * // f'(x) = 3x ^ 2
 * const g = tf.grad(f);
 * // f''(x) = 6x
 * const gg = tf.grad(g);
 *
 * const x = tf.tensor1d([2, 3]);
 * gg(x).print();
 * ```
 *
 * @param f The function f(x), to compute gradient for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function grad(f) {
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(_util__WEBPACK_IMPORTED_MODULE_1__.isFunction(f), () => 'The f passed in grad(f) must be a function');
    return (x, dy) => {
        // x can be of any dtype, thus null as the last argument.
        const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__.convertToTensor)(x, 'x', 'tf.grad', 'string_or_numeric');
        const $dy = (dy != null) ? (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__.convertToTensor)(dy, 'dy', 'tf.grad') : null;
        return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.tidy(() => {
            const { value, grads } = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.gradients(() => f($x), [$x], $dy);
            if ($dy != null) {
                _util__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' +
                    'returned by f(x)');
            }
            checkGrads(grads);
            return grads[0];
        });
    };
}
/**
 * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,
 * which gives an array of gradients of `f()` with respect to each input
 * [`x1`,`x2`,...].
 *
 * If `dy` is passed when calling `g()`, the gradient of
 * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.
 * The provided `f` must take one or more tensors and return a single tensor
 * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df / da = b, df / db = a
 * const g = tf.grads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const [da, db] = g([a, b]);
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @param f The function `f(x1, x2,...)` to compute gradients for.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function grads(f) {
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(_util__WEBPACK_IMPORTED_MODULE_1__.isFunction(f), () => 'The f passed in grads(f) must be a function');
    return (args, dy) => {
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' +
            'of `Tensor`s or `TensorLike`s');
        // args can be of any dtype, thus null as the last argument.
        const $args = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__.convertToTensorArray)(args, 'args', 'tf.grads', 'string_or_numeric');
        const $dy = (dy != null) ? (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__.convertToTensor)(dy, 'dy', 'tf.grads') : null;
        return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.tidy(() => {
            const { value, grads } = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.gradients(() => f(...$args), $args, $dy);
            if ($dy != null) {
                _util__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' +
                    'match the shape returned by f([x1,...])');
            }
            checkGrads(grads);
            return grads;
        });
    };
}
/**
 * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(x) = x ^ 2
 * const f = x => x.square();
 * // f'(x) = 2x
 * const g = tf.valueAndGrad(f);
 *
 * const x = tf.tensor1d([2, 3]);
 * const {value, grad} = g(x);
 *
 * console.log('value');
 * value.print();
 * console.log('grad');
 * grad.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function valueAndGrad(f) {
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(_util__WEBPACK_IMPORTED_MODULE_1__.isFunction(f), () => 'The f passed in valueAndGrad(f) must be a function');
    return (x, dy) => {
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(x instanceof _tensor__WEBPACK_IMPORTED_MODULE_3__.Tensor, () => 'The x passed in valueAndGrad(f)(x) must be a tensor');
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(dy == null || dy instanceof _tensor__WEBPACK_IMPORTED_MODULE_3__.Tensor, () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');
        const { grads, value } = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.gradients(() => f(x), [x], dy);
        checkGrads(grads);
        return { grad: grads[0], value };
    };
}
/**
 * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`
 * returns a metric you want to show.
 *
 * The result is a rich object with the following properties:
 * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).
 * - value: The value returned by `f(x)`.
 *
 * ```js
 * // f(a, b) = a * b
 * const f = (a, b) => a.mul(b);
 * // df/da = b, df/db = a
 * const g = tf.valueAndGrads(f);
 *
 * const a = tf.tensor1d([2, 3]);
 * const b = tf.tensor1d([-2, -3]);
 * const {value, grads} = g([a, b]);
 *
 * const [da, db] = grads;
 *
 * console.log('value');
 * value.print();
 *
 * console.log('da');
 * da.print();
 * console.log('db');
 * db.print();
 * ```
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function valueAndGrads(f) {
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(_util__WEBPACK_IMPORTED_MODULE_1__.isFunction(f), () => 'The f passed in valueAndGrads(f) must be a function');
    return (args, dy) => {
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(Array.isArray(args) && args.every(arg => arg instanceof _tensor__WEBPACK_IMPORTED_MODULE_3__.Tensor), () => 'The args passed in valueAndGrads(f)(args) must be array of ' +
            'tensors');
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(dy == null || dy instanceof _tensor__WEBPACK_IMPORTED_MODULE_3__.Tensor, () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');
        const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.gradients(() => f(...args), args, dy);
        if (dy != null) {
            _util__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +
                'match the shape returned by f([x1,...])');
        }
        checkGrads(res.grads);
        return res;
    };
}
/**
 * Computes and returns the gradient of f(x) with respect to the list of
 * trainable variables provided by `varList`. If no list is provided, it
 * defaults to all trainable variables.
 *
 * ```js
 * const a = tf.variable(tf.tensor1d([3, 4]));
 * const b = tf.variable(tf.tensor1d([5, 6]));
 * const x = tf.tensor1d([1, 2]);
 *
 * // f(a, b) = a * x ^ 2 + b * x
 * const f = () => a.mul(x.square()).add(b.mul(x)).sum();
 * // df/da = x ^ 2, df/db = x
 * const {value, grads} = tf.variableGrads(f);
 *
 * Object.keys(grads).forEach(varName => grads[varName].print());
 * ```
 *
 * @param f The function to execute. f() should return a scalar.
 * @param varList The list of variables to compute the gradients with respect
 *     to. Defaults to all trainable variables.
 * @returns An object with the following keys and values:
 *   - `value`: The value of the function `f`.
 *   - `grads`: A map from the names of the variables to the gradients.
 *     If the `varList` argument is provided explicitly and contains a subset of
 *     non-trainable variables, this map in the return value will contain keys
 *     that map the names of the non-trainable variables to `null`.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function variableGrads(f, varList) {
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(_util__WEBPACK_IMPORTED_MODULE_1__.isFunction(f), () => 'The f passed in variableGrads(f) must be a function');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(varList == null ||
        Array.isArray(varList) && varList.every(v => v instanceof _tensor__WEBPACK_IMPORTED_MODULE_3__.Variable), () => 'The varList passed in variableGrads(f, varList) must be an array ' +
        'of variables');
    const specifiedVarList = varList != null;
    if (!specifiedVarList) {
        // Get all of the trainable variables.
        varList = [];
        for (const varName in _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.registeredVariables) {
            varList.push(_engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.registeredVariables[varName]);
        }
    }
    const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null;
    // Prune non-trainable variables.
    const originalVarCount = varList.length;
    varList = varList.filter(variable => variable.trainable);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` +
        `be trainable, but none of the ${originalVarCount} variables is ` +
        `trainable.`);
    const allowNoGradients = true;
    const { value, grads } = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.gradients(f, varList, null, allowNoGradients);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' +
        'the loss function y=f(x). Please make sure the operations that ' +
        'use variables are inside the function f passed to minimize().');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` +
        `returned a rank-${value.rank} tensor`);
    const namedGrads = {};
    varList.forEach((v, i) => {
        if (grads[i] != null) {
            namedGrads[v.name] = grads[i];
        }
    });
    if (specifiedNonTrainable != null) {
        // If varList is explicitly provided and contains non-trainable values,
        // add them to the returned gradients with `null` values.
        specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);
    }
    return { value, grads: namedGrads };
}
/**
 * Overrides the gradient computation of a function `f`.
 *
 * Takes a function
 * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`
 * and returns another function `g(...inputs)` which takes the same inputs as
 * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients
 * with respect to each input of `f` are computed using `f().gradFunc`.
 *
 * The `save` function passsed to `f` should be used for saving tensors needed
 * in the gradient. And the `saved` passed to the `gradFunc` is a
 * `NamedTensorMap`, which contains those saved tensor.
 *
 * ```js
 * const customOp = tf.customGrad((x, save) => {
 *   // Save x to make sure it's available later for the gradient.
 *   save([x]);
 *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);
 *   return {
 *     value: x.square(),
 *     // Note `saved.x` which points to the `x` we saved earlier.
 *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]
 *   };
 * });
 *
 * const x = tf.tensor1d([-1, -2, 3]);
 * const dx = tf.grad(x => customOp(x));
 *
 * console.log(`f(x):`);
 * customOp(x).print();
 * console.log(`f'(x):`);
 * dx(x).print();
 * ```
 *
 * @param f The function to evaluate in forward mode, which should return
 *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`
 *     returns the custom gradients of `f` with respect to its inputs.
 *
 * @doc {heading: 'Training', subheading: 'Gradients'}
 */
function customGrad(f) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.customGrad(f);
}
function checkGrads(grads) {
    const numNullGradients = grads.filter(g => g == null).length;
    if (numNullGradients > 0) {
        throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
    }
}

//# sourceMappingURL=gradients.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "absGradConfig": () => (/* binding */ absGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_step__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/step */ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const absGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Abs,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_step__WEBPACK_IMPORTED_MODULE_2__.step)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(x, 'float32'), -1)) };
    }
};
//# sourceMappingURL=Abs_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Acos_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Acos_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acosGradConfig": () => (/* binding */ acosGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const acosGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Acos,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return {
            x: () => {
                const a = (0,_ops_square__WEBPACK_IMPORTED_MODULE_1__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)(x, 'float32'));
                const b = (0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_3__.sqrt)((0,_ops_sub__WEBPACK_IMPORTED_MODULE_4__.sub)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_5__.scalar)(1), a));
                return (0,_ops_neg__WEBPACK_IMPORTED_MODULE_6__.neg)((0,_ops_div__WEBPACK_IMPORTED_MODULE_7__.div)(dy, b));
            }
        };
    }
};
//# sourceMappingURL=Acos_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Acosh_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Acosh_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acoshGradConfig": () => (/* binding */ acoshGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const acoshGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Acosh,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return {
            x: () => {
                const a = (0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_1__.sqrt)((0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)((0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_4__.cast)(x, 'float32')), 1));
                return (0,_ops_div__WEBPACK_IMPORTED_MODULE_5__.div)(dy, a);
            }
        };
    }
};
//# sourceMappingURL=Acosh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addNGradConfig": () => (/* binding */ addNGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const addNGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.AddN,
    saveAllInputs: true,
    gradFunc: (dy, saved) => {
        const ders = {};
        saved.forEach((_, i) => {
            ders[i] = () => dy.clone();
        });
        return ders;
    }
};
//# sourceMappingURL=AddN_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addGradConfig": () => (/* binding */ addGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const addGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Add,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape(a.shape, b.shape);
        const derA = () => {
            let res = dy;
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(a.shape, outShape);
            if (reduceAxes.length > 0) {
                res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_2__.sum)(res, reduceAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, a.shape);
        };
        const derB = () => {
            let res = dy;
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(b.shape, outShape);
            if (reduceAxes.length > 0) {
                res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_2__.sum)(res, reduceAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, b.shape);
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Add_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMax_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMax_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argMaxGradConfig": () => (/* binding */ argMaxGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const argMaxGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ArgMax,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(x) };
    }
};
//# sourceMappingURL=ArgMax_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMin_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMin_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argMinGradConfig": () => (/* binding */ argMinGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const argMinGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ArgMin,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(x) };
    }
};
//# sourceMappingURL=ArgMin_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Asin_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Asin_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asinGradConfig": () => (/* binding */ asinGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







const asinGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Asin,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_2__.sqrt)((0,_ops_sub__WEBPACK_IMPORTED_MODULE_3__.sub)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_4__.scalar)(1), (0,_ops_square__WEBPACK_IMPORTED_MODULE_5__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_6__.cast)(x, 'float32'))))) };
    }
};
//# sourceMappingURL=Asin_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Asinh_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Asinh_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asinhGradConfig": () => (/* binding */ asinhGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







const asinhGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Asinh,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return {
            x: () => {
                const a = (0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_1__.sqrt)((0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1), (0,_ops_square__WEBPACK_IMPORTED_MODULE_4__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_5__.cast)(x, 'float32'))));
                return (0,_ops_div__WEBPACK_IMPORTED_MODULE_6__.div)(dy, a);
            }
        };
    }
};
//# sourceMappingURL=Asinh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atan2GradConfig": () => (/* binding */ atan2GradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









const atan2GradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Atan2,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape)(a.shape, b.shape);
        const derA = () => {
            const d = (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)((0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)(a), (0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)(b));
            let res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, (0,_ops_div__WEBPACK_IMPORTED_MODULE_5__.div)(b, d));
            const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(a.shape, outShape);
            if (reduceAxes.length > 0) {
                res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_6__.sum)(res, reduceAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(res, a.shape);
        };
        const derB = () => {
            const d = (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)((0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)(a), (0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)(b));
            let res = (0,_ops_neg__WEBPACK_IMPORTED_MODULE_8__.neg)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, (0,_ops_div__WEBPACK_IMPORTED_MODULE_5__.div)(a, d)));
            const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(b.shape, outShape);
            if (reduceAxes.length > 0) {
                res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_6__.sum)(res, reduceAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(res, b.shape);
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Atan2_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atanGradConfig": () => (/* binding */ atanGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const atanGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Atan,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)((0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_4__.cast)(x, 'float32')), 1)) };
    }
};
//# sourceMappingURL=Atan_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atanh_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Atanh_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atanhGradConfig": () => (/* binding */ atanhGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const atanhGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Atanh,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1), (0,_ops_square__WEBPACK_IMPORTED_MODULE_4__.square)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_5__.cast)(x, 'float32')))) };
    }
};
//# sourceMappingURL=Atanh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool3DGradConfig": () => (/* binding */ avgPool3DGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_avg_pool_3d_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/avg_pool_3d_grad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_grad.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const avgPool3DGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.AvgPool3D,
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { filterSize, strides, dilations, pad, dimRoundingMode } = attrs;
        const $dilations = dilations == null ? [1, 1, 1] : dilations;
        return {
            x: () => (0,_ops_avg_pool_3d_grad__WEBPACK_IMPORTED_MODULE_1__.avgPool3dGrad)(dy, x, filterSize, strides, $dilations, pad, dimRoundingMode)
        };
    }
};
//# sourceMappingURL=AvgPool3D_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPoolGradConfig": () => (/* binding */ avgPoolGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_avg_pool_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/avg_pool_grad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_grad.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const avgPoolGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.AvgPool,
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { filterSize, strides, pad } = attrs;
        return { x: () => (0,_ops_avg_pool_grad__WEBPACK_IMPORTED_MODULE_1__.avgPoolGrad)(dy, x, filterSize, strides, pad) };
    }
};
//# sourceMappingURL=AvgPool_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchMatMulGradConfig": () => (/* binding */ batchMatMulGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const batchMatMulGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.BatchMatMul,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved, attrs) => {
        const [a, b] = saved;
        const { transposeA, transposeB } = attrs;
        if (!transposeA && !transposeB) {
            return {
                a: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(dy, b, false, true),
                b: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(a, dy, true, false)
            };
        }
        else if (!transposeA && transposeB) {
            return {
                a: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(dy, b, false, false),
                b: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(dy, a, true, false)
            };
        }
        else if (transposeA && !transposeB) {
            return {
                a: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(b, dy, false, true),
                b: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(a, dy, false, false)
            };
        }
        else {
            return {
                a: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(b, dy, true, true),
                b: () => (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(dy, a, true, true)
            };
        }
    }
};
//# sourceMappingURL=BatchMatMul_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchToSpaceNDGradConfig": () => (/* binding */ batchToSpaceNDGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/space_to_batch_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const batchToSpaceNDGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.BatchToSpaceND,
    gradFunc: (dy, saved, attrs) => {
        const { blockShape, crops } = attrs;
        return { x: () => (0,_ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_1__.spaceToBatchND)(dy, blockShape, crops) };
    }
};
//# sourceMappingURL=BatchToSpaceND_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "broadcastToGradConfig": () => (/* binding */ broadcastToGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const broadcastToGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.BroadcastTo,
    gradFunc: (dy, saved, attrs) => {
        const broadCastToAttrs = attrs;
        const inputShape = broadCastToAttrs.inputShape;
        const outputShape = broadCastToAttrs.shape;
        const reps = Array.from(outputShape);
        for (let i = inputShape.length - 1; i >= 0; i--) {
            if (inputShape[i] === outputShape[i]) {
                reps[i] = 1;
            }
            else if (inputShape[i] !== 1) {
                throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);
            }
        }
        const axes = [];
        for (let i = 0; i < reps.length; i++) {
            if (reps[i] > 1) {
                axes.push(i);
            }
        }
        return { x: () => (0,_ops_sum__WEBPACK_IMPORTED_MODULE_1__.sum)(dy, axes, true /* keepDims */) };
    }
};
//# sourceMappingURL=BroadcastTo_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cast_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cast_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "castGradConfig": () => (/* binding */ castGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

const castGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Cast,
    gradFunc: (dy) => {
        return { x: () => dy.clone() };
    }
};
//# sourceMappingURL=Cast_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Ceil_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Ceil_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ceilGradConfig": () => (/* binding */ ceilGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const ceilGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Ceil,
    gradFunc: (dy) => {
        // TODO(manrajgrover): Return null for gradients when backprop supports it.
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy) };
    }
};
//# sourceMappingURL=Ceil_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ClipByValue_grad.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ClipByValue_grad.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clipByValueGradConfig": () => (/* binding */ clipByValueGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _ops_logical_and__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const clipByValueGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ClipByValue,
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { clipValueMin, clipValueMax } = attrs;
        return {
            x: () => (0,_ops_where__WEBPACK_IMPORTED_MODULE_1__.where)((0,_ops_logical_and__WEBPACK_IMPORTED_MODULE_2__.logicalAnd)((0,_ops_greater_equal__WEBPACK_IMPORTED_MODULE_3__.greaterEqual)(x, clipValueMin), (0,_ops_less_equal__WEBPACK_IMPORTED_MODULE_4__.lessEqual)(x, clipValueMax)), dy, (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_5__.zerosLike)(dy)),
        };
    }
};
//# sourceMappingURL=ClipByValue_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ComplexAbs_grad.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ComplexAbs_grad.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "complexAbsGradConfig": () => (/* binding */ complexAbsGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _Abs_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Abs_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const complexAbsGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ComplexAbs,
    inputsToSave: ['x'],
    gradFunc: _Abs_grad__WEBPACK_IMPORTED_MODULE_1__.absGradConfig.gradFunc,
};
//# sourceMappingURL=ComplexAbs_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concatGradConfig": () => (/* binding */ concatGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/split */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const concatGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Concat,
    saveAllInputs: true,
    gradFunc: (dy, saved, attrs) => {
        const shapes = saved.map(t => t.shape);
        const { axis } = attrs;
        const $axis = (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam)(axis, saved[0].shape)[0];
        const sizeSplits = shapes.map(s => s[$axis]);
        const derTensors = (0,_ops_split__WEBPACK_IMPORTED_MODULE_2__.split)(dy, sizeSplits, $axis);
        return derTensors.map(t => () => t);
    }
};
//# sourceMappingURL=Concat_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2DBackpropInputGradConfig": () => (/* binding */ conv2DBackpropInputGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/conv2d_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const conv2DBackpropInputGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Conv2DBackpropInput,
    inputsToSave: ['dy', 'filter'],
    gradFunc: (ddx, saved, attrs) => {
        const [dy, filter] = saved;
        const { strides, pad, dataFormat, dimRoundingMode } = attrs;
        return {
            dy: () => (0,_ops_conv2d__WEBPACK_IMPORTED_MODULE_1__.conv2d)(ddx, filter, strides, pad, dataFormat, 1 /* dilations */, dimRoundingMode),
            filter: () => (0,_ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_2__.conv2DBackpropFilter)(ddx, dy, filter.shape, strides, pad, dataFormat, dimRoundingMode)
        };
    }
};
//# sourceMappingURL=Conv2DBackpropInput_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2DGradConfig": () => (/* binding */ conv2DGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/conv2d_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js");
/* harmony import */ var _ops_conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/conv2d_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js");
/* harmony import */ var _ops_conv_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const conv2DGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Conv2D,
    inputsToSave: ['x', 'filter'],
    gradFunc: (dy, saved, attrs) => {
        const [x4D, $filter] = saved;
        const { dilations, strides, pad, dataFormat } = attrs;
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(_ops_conv_util__WEBPACK_IMPORTED_MODULE_2__.tupleValuesAreOne(dilations), () => 'Error in gradient of conv2D: dilation rates greater than 1 ' +
            `are not yet supported in gradients. Got dilations '${dilations}'`);
        return {
            x: () => (0,_ops_conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_3__.conv2DBackpropInput)(x4D.shape, dy, $filter, strides, pad, dataFormat),
            filter: () => (0,_ops_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_4__.conv2DBackpropFilter)(x4D, dy, $filter.shape, strides, pad, dataFormat)
        };
    }
};
//# sourceMappingURL=Conv2D_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3DGradConfig": () => (/* binding */ conv3DGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_conv3d_backprop_filter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/conv3d_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js");
/* harmony import */ var _ops_conv3d_backprop_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/conv3d_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js");
/* harmony import */ var _ops_conv_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const conv3DGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Conv3D,
    inputsToSave: ['x', 'filter'],
    gradFunc: (dy, saved, attrs) => {
        const { dilations, strides, pad } = attrs;
        _util__WEBPACK_IMPORTED_MODULE_1__.assert((0,_ops_conv_util__WEBPACK_IMPORTED_MODULE_2__.tupleValuesAreOne)(dilations), () => 'Error in gradient of conv3D: dilation rates greater than 1 are ' +
            `not yet supported in gradients. Got dilations '${dilations}'`);
        const [x5D, $filter] = saved;
        return {
            x: () => (0,_ops_conv3d_backprop_input__WEBPACK_IMPORTED_MODULE_3__.conv3DBackpropInput)(x5D.shape, dy, $filter, strides, pad),
            filter: () => (0,_ops_conv3d_backprop_filter__WEBPACK_IMPORTED_MODULE_4__.conv3DBackpropFilter)(x5D, dy, $filter.shape, strides, pad)
        };
    }
};
//# sourceMappingURL=Conv3D_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cos_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cos_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cosGradConfig": () => (/* binding */ cosGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_sin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sin */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sin.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const cosGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Cos,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_neg__WEBPACK_IMPORTED_MODULE_2__.neg)((0,_ops_sin__WEBPACK_IMPORTED_MODULE_3__.sin)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_4__.cast)(x, 'float32'))), dy) };
    }
};
//# sourceMappingURL=Cos_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cosh_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cosh_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "coshGradConfig": () => (/* binding */ coshGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sinh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sinh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const coshGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Cosh,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_sinh__WEBPACK_IMPORTED_MODULE_2__.sinh)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(x, 'float32')), dy) };
    }
};
//# sourceMappingURL=Cosh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cumsumGradConfig": () => (/* binding */ cumsumGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _ops_cumsum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cumsum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js");
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const cumsumGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Cumsum,
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { axis, exclusive, reverse } = attrs;
        return {
            x: () => {
                const permutation = (0,_ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.getAxesPermutation)([axis], x.rank);
                let out = (0,_ops_cumsum__WEBPACK_IMPORTED_MODULE_2__.cumsum)(dy, axis, exclusive, !reverse);
                if (permutation != null) {
                    out = (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)(out, permutation);
                }
                return out;
            }
        };
    }
};
//# sourceMappingURL=Cumsum_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2dNativeGradConfig": () => (/* binding */ depthwiseConv2dNativeGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_conv_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _ops_depthwise_conv2d_native_backprop_filter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/depthwise_conv2d_native_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js");
/* harmony import */ var _ops_depthwise_conv2d_native_backprop_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/depthwise_conv2d_native_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const depthwiseConv2dNativeGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.DepthwiseConv2dNative,
    inputsToSave: ['x', 'filter'],
    gradFunc: (dy, saved, attrs) => {
        const { dilations, strides, pad, dimRoundingMode } = attrs;
        const $dilations = dilations == null ? [1, 1] : dilations;
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(_ops_conv_util__WEBPACK_IMPORTED_MODULE_2__.tupleValuesAreOne($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' +
            `greater than 1 are not yet supported. Got dilations ` +
            `'${$dilations}'`);
        const [x, filter] = saved;
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` +
            `rank 4, but got rank ${x.rank}.`);
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` +
            `rank 4, but got rank ${filter.rank}.`);
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` +
            `channels (${x.shape[3]}) must match the inChannels dimension ` +
            `in filter ${filter.shape[2]}.`);
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(_ops_conv_util__WEBPACK_IMPORTED_MODULE_2__.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' +
            `dilations must be  1. Got strides ${strides} and dilations ` +
            `'${$dilations}'.`);
        if (dimRoundingMode != null) {
            _util__WEBPACK_IMPORTED_MODULE_1__.assert(_util__WEBPACK_IMPORTED_MODULE_1__.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` +
                `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
        }
        return {
            x: () => (0,_ops_depthwise_conv2d_native_backprop_input__WEBPACK_IMPORTED_MODULE_3__.depthwiseConv2dNativeBackpropInput)(x.shape, dy, filter, strides, pad, dilations, dimRoundingMode),
            filter: () => (0,_ops_depthwise_conv2d_native_backprop_filter__WEBPACK_IMPORTED_MODULE_4__.depthwiseConv2dNativeBackpropFilter)(x, dy, filter.shape, strides, pad, dilations, dimRoundingMode),
        };
    }
};
//# sourceMappingURL=DepthwiseConv2dNative_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Dilation2D_grad.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Dilation2D_grad.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dilation2dGradConfig": () => (/* binding */ dilation2dGradConfig)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const dilation2dGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__.Dilation2D,
    inputsToSave: ['x', 'filter'],
    gradFunc: (dy, saved, attrs) => {
        const [x, filter] = saved;
        const inputInputs = { x, filter, dy };
        const filterInputs = { x, filter, dy };
        return {
            x: () => _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.Dilation2DBackpropInput, inputInputs, attrs),
            filter: () => _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.Dilation2DBackpropFilter, filterInputs, attrs)
        };
    }
};
//# sourceMappingURL=Dilation2D_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eluGradConfig": () => (/* binding */ eluGradConfig)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const eluGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__.Elu,
    outputsToSave: [true],
    gradFunc: (dy, saved) => {
        const [y] = saved;
        const inputs = { dy, y };
        return { x: () => _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.EluGrad, inputs) };
    }
};
//# sourceMappingURL=Elu_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Erf_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Erf_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "erfGradConfig": () => (/* binding */ erfGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const erfGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Erf,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        const a = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_exp__WEBPACK_IMPORTED_MODULE_2__.exp)((0,_ops_neg__WEBPACK_IMPORTED_MODULE_3__.neg)((0,_ops_square__WEBPACK_IMPORTED_MODULE_4__.square)(x))), 2 / Math.sqrt(Math.PI));
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, a) };
    }
};
//# sourceMappingURL=Erf_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Exp_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Exp_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expGradConfig": () => (/* binding */ expGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const expGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Exp,
    outputsToSave: [true],
    gradFunc: (dy, saved) => {
        const [y] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, y) };
    }
};
//# sourceMappingURL=Exp_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ExpandDims_grad.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ExpandDims_grad.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expandDimsGradConfig": () => (/* binding */ expandDimsGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const expandDimsGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ExpandDims,
    inputsToSave: ['input'],
    gradFunc: (dy, saved) => {
        const [input] = saved;
        return { input: () => (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(dy, input.shape) };
    }
};
//# sourceMappingURL=ExpandDims_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Expm1_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Expm1_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expm1GradConfig": () => (/* binding */ expm1GradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const expm1GradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Expm1,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_exp__WEBPACK_IMPORTED_MODULE_2__.exp)(x)) };
    }
};
//# sourceMappingURL=Expm1_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floorDivGradConfig": () => (/* binding */ floorDivGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









const floorDivGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.FloorDiv,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape)(a.shape, b.shape);
        const derA = () => {
            const res = (0,_ops_div__WEBPACK_IMPORTED_MODULE_2__.div)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(b, 'float32'));
            const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(a.shape, outShape);
            if (reduceAxes.length > 0) {
                return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), a.shape);
            }
            return res;
        };
        const derB = () => {
            let res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_6__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(a, 'float32'));
            const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(b.shape, outShape);
            if (reduceAxes.length > 0) {
                res = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), b.shape);
            }
            const tmp = (0,_ops_square__WEBPACK_IMPORTED_MODULE_7__.square)(b);
            return (0,_ops_neg__WEBPACK_IMPORTED_MODULE_8__.neg)((0,_ops_div__WEBPACK_IMPORTED_MODULE_2__.div)(res, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(tmp, 'float32')));
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=FloorDiv_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Floor_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Floor_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floorGradConfig": () => (/* binding */ floorGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const floorGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Floor,
    gradFunc: (dy) => {
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy) };
    }
};
//# sourceMappingURL=Floor_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fusedBatchNormGradConfig": () => (/* binding */ fusedBatchNormGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_rsqrt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/rsqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _ops_tile__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/tile */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










const fusedBatchNormGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.FusedBatchNorm,
    inputsToSave: ['x', 'mean', 'variance', 'scale'],
    gradFunc: (dy, saved, attrs) => {
        const { varianceEpsilon } = attrs;
        const [x, mean, variance, scale] = saved;
        const scaleValue = scale == null ? (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_1__.scalar)(1) : scale;
        const reductionAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_2__.getReductionAxes)(mean.shape, x.shape);
        const tileShape = [];
        if (mean.rank === 1) {
            for (let i = 0; i < x.shape.length - 1; ++i) {
                tileShape.push(x.shape[i]);
            }
            tileShape.push(1);
        }
        const xMinusMean = (0,_ops_sub__WEBPACK_IMPORTED_MODULE_3__.sub)(x, mean);
        const dyTimesScaleValue = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, scaleValue);
        const oneOverSqrtVariance = (0,_ops_rsqrt__WEBPACK_IMPORTED_MODULE_5__.rsqrt)((0,_ops_add__WEBPACK_IMPORTED_MODULE_6__.add)(variance, (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_1__.scalar)(varianceEpsilon)));
        const minusHalfRCube = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_1__.scalar)(-0.5));
        const derX = () => {
            if (mean.rank === 1) {
                return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, (0,_ops_tile__WEBPACK_IMPORTED_MODULE_8__.tile)((0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);
            }
            else {
                return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, oneOverSqrtVariance), scaleValue), x.shape);
            }
        };
        const derMean = () => {
            let meanDer = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(oneOverSqrtVariance, (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_1__.scalar)(-1)), dyTimesScaleValue);
            if (mean.rank === 1) {
                meanDer = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_9__.sum)(meanDer, reductionAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(meanDer, mean.shape);
        };
        const derVariance = () => {
            let varianceDer = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(minusHalfRCube, xMinusMean), dyTimesScaleValue);
            if (mean.rank === 1) {
                varianceDer = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_9__.sum)(varianceDer, reductionAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(varianceDer, mean.shape);
        };
        const derScale = () => {
            const xMinusMean2TimesRsqrt = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(xMinusMean, oneOverSqrtVariance);
            let scaleDer = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, xMinusMean2TimesRsqrt);
            if (mean.rank === 1) {
                scaleDer = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_9__.sum)(scaleDer, reductionAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(scaleDer, mean.shape);
        };
        const derOffset = () => {
            let offsetDer = dy;
            if (mean.rank === 1) {
                offsetDer = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_9__.sum)(offsetDer, reductionAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(offsetDer, mean.shape);
        };
        return {
            x: derX,
            mean: derMean,
            variance: derVariance,
            scale: derScale,
            offset: derOffset
        };
    }
};
//# sourceMappingURL=FusedBatchNorm_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/GatherV2_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/GatherV2_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gatherGradConfig": () => (/* binding */ gatherGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/* harmony import */ var _ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/unsorted_segment_sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const gatherGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.GatherV2,
    inputsToSave: ['x', 'indices'],
    gradFunc: (dy, saved, attrs) => {
        const [x, indices] = saved;
        const { axis } = attrs;
        const parsedAxis = (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam)(axis, x.shape)[0];
        const derX = () => {
            const paramsShape = x.shape;
            const indicesSize = indices.size;
            const outerShape = paramsShape.slice(0, parsedAxis);
            const outerDims = outerShape.length;
            const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);
            const innerDims = innerShape.length;
            const outerAxesIndices = arrayRange(0, outerDims);
            const innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);
            const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);
            const values = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(dy, valuesShape);
            const reshapedIndices = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(indices, [indicesSize]);
            const transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);
            const valuesTranspose = (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)(values, transposeDims);
            let paramsGrad = (0,_ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_4__.unsortedSegmentSum)(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);
            const invertTransposeDims = (0,_ops_axis_util__WEBPACK_IMPORTED_MODULE_5__.getUndoAxesPermutation)(transposeDims);
            paramsGrad = (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_3__.transpose)(paramsGrad, invertTransposeDims);
            return paramsGrad;
        };
        return { x: derX, indices: () => indices };
    }
};
function arrayRange(start, stop) {
    const result = [];
    for (let i = start; i < stop; ++i) {
        result.push(i);
    }
    return result;
}
function arrayConcat(arrays) {
    const result = [];
    for (let i = 0; i < arrays.length; ++i) {
        for (let j = 0; j < arrays[i].length; ++j) {
            result.push(arrays[i][j]);
        }
    }
    return result;
}
//# sourceMappingURL=GatherV2_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "greaterEqualGradConfig": () => (/* binding */ greaterEqualGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const greaterEqualGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.GreaterEqual,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        return { a: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(a), b: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(b) };
    }
};
//# sourceMappingURL=GreaterEqual_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "identityGradConfig": () => (/* binding */ identityGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const identityGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Identity,
    gradFunc: (dy) => {
        return { x: () => (0,_ops_cast__WEBPACK_IMPORTED_MODULE_1__.cast)(dy, 'float32') };
    }
};
//# sourceMappingURL=Identity_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsFinite_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/IsFinite_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFiniteGradConfig": () => (/* binding */ isFiniteGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isFiniteGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.IsFinite,
    gradFunc: (dy) => {
        // TODO(nsthorat): Let gradients be null for cases where we want to stop
        // backpropgation.
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy) };
    }
};
//# sourceMappingURL=IsFinite_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsInf_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/IsInf_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isInfGradConfig": () => (/* binding */ isInfGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isInfGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.IsInf,
    gradFunc: (dy) => {
        // TODO(nsthorat): Let gradients be null for cases where we want to stop
        // backpropgation.
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy) };
    }
};
//# sourceMappingURL=IsInf_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsNan_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/IsNan_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNanGradConfig": () => (/* binding */ isNanGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const isNanGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.IsNan,
    gradFunc: (dy) => {
        // TODO(nsthorat): Let gradients be null for cases where we want to stop
        // backpropgation.
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy) };
    }
};
//# sourceMappingURL=IsNan_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lrnGradConfig": () => (/* binding */ lrnGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_local_response_normalization_backprop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/local_response_normalization_backprop */ "./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const lrnGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.LRN,
    inputsToSave: ['x'],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const [x, y] = saved;
        const { depthRadius, bias, alpha, beta } = attrs;
        return {
            x: () => (0,_ops_local_response_normalization_backprop__WEBPACK_IMPORTED_MODULE_1__.localResponseNormalizationBackprop)(x, y, dy, depthRadius, bias, alpha, beta)
        };
    }
};
//# sourceMappingURL=LRN_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/LeakyRelu_grad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/LeakyRelu_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "leakyReluGradConfig": () => (/* binding */ leakyReluGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const leakyReluGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.LeakyRelu,
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { alpha } = attrs;
        const mask = (0,_ops_greater__WEBPACK_IMPORTED_MODULE_1__.greater)(x, 0);
        // Returns `gradients * (features > 0) + alpha * gradients * (features <=
        // 0)`.
        return { x: () => (0,_ops_where__WEBPACK_IMPORTED_MODULE_2__.where)(mask, dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, alpha)) };
    }
};
//# sourceMappingURL=LeakyRelu_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Log1p_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Log1p_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log1pGradConfig": () => (/* binding */ log1pGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const log1pGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Log1p,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)(x, 1)) };
    }
};
//# sourceMappingURL=Log1p_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/LogSoftmax_grad.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/LogSoftmax_grad.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logSoftmaxGradConfig": () => (/* binding */ logSoftmaxGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const logSoftmaxGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.LogSoftmax,
    inputsToSave: [],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const [value] = saved;
        const { axis } = attrs;
        return {
            logits: () => {
                const keepDims = true;
                const softmax = (0,_ops_exp__WEBPACK_IMPORTED_MODULE_1__.exp)(value);
                return (0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_4__.sum)(dy, axis, keepDims), softmax));
            }
        };
    }
};
//# sourceMappingURL=LogSoftmax_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Log_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Log_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logGradConfig": () => (/* binding */ logGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const logGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Log,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)(x, 'float32')) };
    }
};
//# sourceMappingURL=Log_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool3DGradConfig": () => (/* binding */ maxPool3DGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_max_pool_3d_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/max_pool_3d_grad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_grad.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const maxPool3DGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.MaxPool3D,
    inputsToSave: ['x'],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const [x, y] = saved;
        const { filterSize, strides, dilations, pad, dimRoundingMode } = attrs;
        const $dilations = dilations == null ? [1, 1, 1] : dilations;
        return {
            x: () => (0,_ops_max_pool_3d_grad__WEBPACK_IMPORTED_MODULE_1__.maxPool3dGrad)(dy, x, y, filterSize, strides, $dilations, pad, dimRoundingMode)
        };
    }
};
//# sourceMappingURL=MaxPool3D_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPoolGradConfig": () => (/* binding */ maxPoolGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_max_pool_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/max_pool_grad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_grad.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const maxPoolGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.MaxPool,
    inputsToSave: ['x'],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const [x, y] = saved;
        const { filterSize, strides, pad } = attrs;
        return {
            x: () => (0,_ops_max_pool_grad__WEBPACK_IMPORTED_MODULE_1__.maxPoolGrad)(dy, x, y, filterSize, strides, pad)
        };
    }
};
//# sourceMappingURL=MaxPool_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxGradConfig": () => (/* binding */ maxGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./min_max_grad_util */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const maxGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Max,
    inputsToSave: ['x'],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const maxAttrs = attrs;
        const { reductionIndices } = maxAttrs;
        const x = saved[0];
        const y = saved[1];
        const origAxes = _util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam(reductionIndices, x.shape);
        const maxGrad = (0,_min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__.gradForMinAndMax)(dy, y, x, origAxes);
        return {
            x: () => {
                return maxGrad['x']();
            }
        };
    }
};
//# sourceMappingURL=Max_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maximumGradConfig": () => (/* binding */ maximumGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _ops_less__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/less */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const maximumGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Maximum,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const derA = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)((0,_ops_greater_equal__WEBPACK_IMPORTED_MODULE_3__.greaterEqual)(a, b), 'float32'));
        const derB = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)((0,_ops_less__WEBPACK_IMPORTED_MODULE_4__.less)(a, b), 'float32'));
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Maximum_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Mean_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Mean_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "meanGradConfig": () => (/* binding */ meanGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_ones__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/ones */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







const meanGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Mean,
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { axis } = attrs;
        const axes = _util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam(axis, x.shape);
        const shapes = (0,_ops_axis_util__WEBPACK_IMPORTED_MODULE_2__.computeOutAndReduceShapes)(x.shape, axes);
        const reduceShape = shapes[1];
        const reduceSize = _util__WEBPACK_IMPORTED_MODULE_1__.sizeFromShape(reduceShape);
        const derX = () => {
            const expandedDyShape = x.shape.slice();
            axes.forEach(axis => {
                expandedDyShape[axis] = 1;
            });
            const expandedDy = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(dy, expandedDyShape);
            const res = (0,_ops_div__WEBPACK_IMPORTED_MODULE_4__.div)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(expandedDy, (0,_ops_ones__WEBPACK_IMPORTED_MODULE_6__.ones)(x.shape, 'float32')), reduceSize);
            return res;
        };
        return { x: derX };
    }
};
//# sourceMappingURL=Mean_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Min_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Min_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minGradConfig": () => (/* binding */ minGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./min_max_grad_util */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const minGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Min,
    inputsToSave: ['x'],
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const minAttrs = attrs;
        const { axis } = minAttrs;
        const [x, y] = saved;
        const origAxes = _util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam(axis, x.shape);
        const minGrad = (0,_min_max_grad_util__WEBPACK_IMPORTED_MODULE_2__.gradForMinAndMax)(dy, y, x, origAxes);
        return {
            x: () => {
                return minGrad['x']();
            }
        };
    }
};
//# sourceMappingURL=Min_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minimumGradConfig": () => (/* binding */ minimumGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const minimumGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Minimum,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const derA = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)((0,_ops_less_equal__WEBPACK_IMPORTED_MODULE_3__.lessEqual)(a, b), 'float32'));
        const derB = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)((0,_ops_greater__WEBPACK_IMPORTED_MODULE_4__.greater)(a, b), 'float32'));
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Minimum_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MirrorPad_grad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/MirrorPad_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mirrorPadGradConfig": () => (/* binding */ mirrorPadGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const mirrorPadGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.MirrorPad,
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        // Pad introduces values around the original tensor, so the gradient
        // slices the original shape out of the gradient.
        const x = saved[0];
        const { paddings } = attrs;
        const begin = paddings.map(p => p[0]);
        return { x: () => (0,_ops_slice__WEBPACK_IMPORTED_MODULE_1__.slice)(dy, begin, x.shape) };
    }
};
//# sourceMappingURL=MirrorPad_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "modGradConfig": () => (/* binding */ modGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_floor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/floor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const modGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Mod,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape)(a.shape, b.shape);
        const derA = () => {
            const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(a.shape, outShape);
            if (reduceAxes.length > 0) {
                return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_3__.sum)(dy, reduceAxes), a.shape);
            }
            return dy;
        };
        const derB = () => {
            const res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, (0,_ops_neg__WEBPACK_IMPORTED_MODULE_5__.neg)((0,_ops_floor__WEBPACK_IMPORTED_MODULE_6__.floor)((0,_ops_div__WEBPACK_IMPORTED_MODULE_7__.div)(a, b))));
            const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(b.shape, outShape);
            if (reduceAxes.length > 0) {
                return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_3__.sum)(res, reduceAxes), b.shape);
            }
            return res;
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Mod_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multiplyGradConfig": () => (/* binding */ multiplyGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






const multiplyGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Multiply,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape)(a.shape, b.shape);
        const derA = () => {
            const res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(b, 'float32'));
            const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(a.shape, outShape);
            if (reduceAxes.length > 0) {
                return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), a.shape);
            }
            return res;
        };
        const derB = () => {
            const res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(a, 'float32'));
            const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes)(b.shape, outShape);
            if (reduceAxes.length > 0) {
                return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), b.shape);
            }
            return res;
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Multiply_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Neg_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Neg_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "negGradConfig": () => (/* binding */ negGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const negGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Neg,
    gradFunc: (dy) => {
        return { x: () => (0,_ops_neg__WEBPACK_IMPORTED_MODULE_1__.neg)(dy) };
    }
};
//# sourceMappingURL=Neg_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "oneHotGradConfig": () => (/* binding */ oneHotGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const oneHotGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.OneHot,
    inputsToSave: ['indices'],
    gradFunc: (dy, saved) => {
        const indices = saved[0];
        return { indices: () => (0,_ops_zeros__WEBPACK_IMPORTED_MODULE_1__.zeros)(indices.shape, 'float32') };
    }
};
//# sourceMappingURL=OneHot_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/OnesLike_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/OnesLike_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "onesLikeGradConfig": () => (/* binding */ onesLikeGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const onesLikeGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.OnesLike,
    gradFunc: (dy) => {
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy) };
    }
};
//# sourceMappingURL=OnesLike_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Pack_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Pack_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "packGradConfig": () => (/* binding */ packGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_unstack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/unstack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const packGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Pack,
    saveAllInputs: true,
    gradFunc: (dy, saved, attrs) => {
        const { axis } = attrs;
        const derTensors = (0,_ops_unstack__WEBPACK_IMPORTED_MODULE_1__.unstack)(dy, axis);
        return derTensors.map(t => () => t);
    }
};
//# sourceMappingURL=Pack_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "padV2GradConfig": () => (/* binding */ padV2GradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const padV2GradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.PadV2,
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        // Pad introduces values around the original tensor, so the gradient
        // slices the original shape out of the gradient.
        const x = saved[0];
        const { paddings } = attrs;
        const begin = paddings.map(p => p[0]);
        return { x: () => (0,_ops_slice__WEBPACK_IMPORTED_MODULE_1__.slice)(dy, begin, x.shape) };
    }
};
//# sourceMappingURL=PadV2_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "powGradConfig": () => (/* binding */ powGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _ops_log__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ops/log */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_pow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */













const powGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Pow,
    inputsToSave: ['a', 'b'],
    outputsToSave: [true],
    gradFunc: (dy, saved) => {
        const [a, b, y] = saved;
        const base = a;
        const exp = b;
        const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape(base.shape, exp.shape);
        const derBase = () => {
            const expFloat = (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)(exp, 'float32');
            let res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(expFloat, (0,_ops_pow__WEBPACK_IMPORTED_MODULE_4__.pow)(base, (0,_ops_sub__WEBPACK_IMPORTED_MODULE_5__.sub)(expFloat, (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_6__.scalar)(1)))));
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(base.shape, outShape);
            if (reduceAxes.length > 0) {
                res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_7__.sum)(res, reduceAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_8__.reshape)(res, base.shape);
        };
        const derExp = () => {
            const condition = (0,_ops_greater__WEBPACK_IMPORTED_MODULE_9__.greater)(base, 0);
            const logBase = (0,_ops_where__WEBPACK_IMPORTED_MODULE_10__.where)(condition, (0,_ops_log__WEBPACK_IMPORTED_MODULE_11__.log)(base), (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_12__.zerosLike)(base));
            let res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(y, logBase));
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(exp.shape, outShape);
            if (reduceAxes.length > 0) {
                res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_7__.sum)(res, reduceAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_8__.reshape)(res, exp.shape);
        };
        return { a: derBase, b: derExp };
    }
};
//# sourceMappingURL=Pow_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "preluGradConfig": () => (/* binding */ preluGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const preluGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Prelu,
    inputsToSave: ['x', 'alpha'],
    gradFunc: (dy, saved) => {
        const [x, alpha] = saved;
        const mask = (0,_ops_greater__WEBPACK_IMPORTED_MODULE_1__.greater)(x, 0);
        return {
            x: () => (0,_ops_where__WEBPACK_IMPORTED_MODULE_2__.where)(mask, dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, alpha)),
            alpha: () => {
                let res = (0,_ops_where__WEBPACK_IMPORTED_MODULE_2__.where)(mask, (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_4__.zerosLike)(dy), (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, x));
                const reduceAxes = (0,_ops_broadcast_util__WEBPACK_IMPORTED_MODULE_5__.getReductionAxes)(alpha.shape, dy.shape);
                if (reduceAxes.length > 0) {
                    res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_6__.sum)(res, reduceAxes);
                }
                return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(res, alpha.shape);
            }
        };
    }
};
//# sourceMappingURL=Prelu_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/RealDiv_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/RealDiv_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "divGradConfig": () => (/* binding */ divGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









const divGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.RealDiv,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape(a.shape, b.shape);
        const derA = () => {
            const res = (0,_ops_div__WEBPACK_IMPORTED_MODULE_2__.div)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(b, 'float32'));
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(a.shape, outShape);
            if (reduceAxes.length > 0) {
                return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), a.shape);
            }
            return res;
        };
        const derB = () => {
            let res = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_6__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(a, 'float32'));
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(b.shape, outShape);
            if (reduceAxes.length > 0) {
                res = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(res, reduceAxes), b.shape);
            }
            const tmp = (0,_ops_square__WEBPACK_IMPORTED_MODULE_7__.square)(b);
            return (0,_ops_neg__WEBPACK_IMPORTED_MODULE_8__.neg)((0,_ops_div__WEBPACK_IMPORTED_MODULE_2__.div)(res, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(tmp, 'float32')));
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=RealDiv_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reciprocal_grad.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Reciprocal_grad.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reciprocalGradConfig": () => (/* binding */ reciprocalGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const reciprocalGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Reciprocal,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_neg__WEBPACK_IMPORTED_MODULE_2__.neg)((0,_ops_square__WEBPACK_IMPORTED_MODULE_3__.square)(x))) };
    }
};
//# sourceMappingURL=Reciprocal_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "relu6GradConfig": () => (/* binding */ relu6GradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_step__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/step */ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const relu6GradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Relu6,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        const mask = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_less_equal__WEBPACK_IMPORTED_MODULE_2__.lessEqual)(x, 6), (0,_ops_step__WEBPACK_IMPORTED_MODULE_3__.step)(x));
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_4__.cast)(mask, 'float32')) };
    }
};
//# sourceMappingURL=Relu6_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reluGradConfig": () => (/* binding */ reluGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_step__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/step */ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const reluGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Relu,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)((0,_ops_step__WEBPACK_IMPORTED_MODULE_3__.step)(x), 'float32')) };
    }
};
//# sourceMappingURL=Relu_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reshape_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Reshape_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reshapeGradConfig": () => (/* binding */ reshapeGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const reshapeGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Reshape,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(dy, x.shape) };
    }
};
//# sourceMappingURL=Reshape_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeBilinear_grad.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeBilinear_grad.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeBilinearGradConfig": () => (/* binding */ resizeBilinearGradConfig)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const resizeBilinearGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__.ResizeBilinear,
    inputsToSave: ['images'],
    gradFunc: (dy, saved, attrs) => {
        const [images] = saved;
        const inputs = { dy, images };
        const imagesDer = () => 
        // tslint:disable-next-line: no-unnecessary-type-assertion
        _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.ResizeBilinearGrad, inputs, attrs);
        return { images: imagesDer };
    }
};
//# sourceMappingURL=ResizeBilinear_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeNearestNeighbor_grad.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeNearestNeighbor_grad.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeNearestNeighborGradConfig": () => (/* binding */ resizeNearestNeighborGradConfig)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const resizeNearestNeighborGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_1__.ResizeNearestNeighbor,
    inputsToSave: ['images'],
    gradFunc: (dy, saved, attrs) => {
        const [images] = saved;
        const inputs = { dy, images };
        const imagesDer = () => 
        // tslint:disable-next-line: no-unnecessary-type-assertion
        _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.ResizeNearestNeighborGrad, inputs, attrs);
        return { images: imagesDer };
    }
};
//# sourceMappingURL=ResizeNearestNeighbor_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reverse_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Reverse_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reverseGradConfig": () => (/* binding */ reverseGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_reverse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const reverseGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Reverse,
    gradFunc: (dy, saved, attrs) => {
        const { dims } = attrs;
        const axes = (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam)(dims, dy.shape);
        return { x: () => (0,_ops_reverse__WEBPACK_IMPORTED_MODULE_2__.reverse)(dy, axes) };
    }
};
//# sourceMappingURL=Reverse_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Round_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Round_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "roundGradConfig": () => (/* binding */ roundGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const roundGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Round,
    gradFunc: (dy) => {
        // TODO(nsthorat): Let gradients be null for cases where we want to stop
        // backpropgation.
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy) };
    }
};
//# sourceMappingURL=Round_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Rsqrt_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Rsqrt_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rsqrtGradConfig": () => (/* binding */ rsqrtGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_pow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const rsqrtGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Rsqrt,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_neg__WEBPACK_IMPORTED_MODULE_1__.neg)((0,_ops_div__WEBPACK_IMPORTED_MODULE_2__.div)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)((0,_ops_pow__WEBPACK_IMPORTED_MODULE_4__.pow)(x, 1.5), 2))) };
    }
};
//# sourceMappingURL=Rsqrt_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Select_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Select_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selectGradConfig": () => (/* binding */ selectGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_logical_not__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/logical_not */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const selectGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Select,
    inputsToSave: ['condition'],
    gradFunc: (dy, saved) => {
        const [condition] = saved;
        return {
            // TODO(julianoks): Return null for condition gradient
            // when backprop supports it.
            condition: () => (0,_ops_cast__WEBPACK_IMPORTED_MODULE_1__.cast)((0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_2__.zerosLike)(condition), 'float32'),
            t: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_1__.cast)(condition, dy.dtype)),
            e: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_1__.cast)((0,_ops_logical_not__WEBPACK_IMPORTED_MODULE_4__.logicalNot)(condition), dy.dtype))
        };
    }
};
//# sourceMappingURL=Select_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "seluGradConfig": () => (/* binding */ seluGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_exp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_selu_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/selu_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js");
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








const seluGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Selu,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return {
            x: () => {
                const mask = (0,_ops_greater__WEBPACK_IMPORTED_MODULE_1__.greater)(x, (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_2__.scalar)(0));
                const scaleAlpha = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_2__.scalar)(_ops_selu_util__WEBPACK_IMPORTED_MODULE_3__.SELU_SCALEALPHA);
                const scale = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_2__.scalar)(_ops_selu_util__WEBPACK_IMPORTED_MODULE_3__.SELU_SCALE);
                const greaterThanZeroDer = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, scale);
                const lessEqualZeroDer = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, scaleAlpha), (0,_ops_exp__WEBPACK_IMPORTED_MODULE_5__.exp)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_6__.cast)(x, 'float32')));
                return (0,_ops_where__WEBPACK_IMPORTED_MODULE_7__.where)(mask, greaterThanZeroDer, lessEqualZeroDer);
            }
        };
    }
};
//# sourceMappingURL=Selu_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sigmoid_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sigmoid_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sigmoidGradConfig": () => (/* binding */ sigmoidGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const sigmoidGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sigmoid,
    outputsToSave: [true],
    gradFunc: (dy, saved) => {
        const [y] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(y, (0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1), y))) };
    }
};
//# sourceMappingURL=Sigmoid_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sign_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sign_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "signGradConfig": () => (/* binding */ signGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const signGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sign,
    gradFunc: (dy) => {
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy) };
    }
};
//# sourceMappingURL=Sign_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sin_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sin_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sinGradConfig": () => (/* binding */ sinGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_cos__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cos */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const sinGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sin,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_cos__WEBPACK_IMPORTED_MODULE_2__.cos)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(x, 'float32')), dy) };
    }
};
//# sourceMappingURL=Sin_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sinh_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sinh_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sinhGradConfig": () => (/* binding */ sinhGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_cosh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cosh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const sinhGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sinh,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_cosh__WEBPACK_IMPORTED_MODULE_2__.cosh)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(x, 'float32')), dy) };
    }
};
//# sourceMappingURL=Sinh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Slice_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Slice_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sliceGradConfig": () => (/* binding */ sliceGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_pad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");
/* harmony import */ var _ops_slice_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/slice_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const sliceGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Slice,
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { begin, size } = attrs;
        const inputShape = x.shape;
        const [begin_, size_] = (0,_ops_slice_util__WEBPACK_IMPORTED_MODULE_1__.parseSliceParams)(x, begin, size);
        // Create an Nx2 padding where the first column represents how many
        // zeros are prepended (at start) for each dimension, and the second
        // column indicates how many zeros are appended (at end).
        // The number of zeros to append is the shape of the input
        // elementwise-subtracted by both the begin vector and sizes vector.
        const paddings = [];
        for (let i = 0; i < dy.rank; i++) {
            paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);
        }
        return { x: () => (0,_ops_pad__WEBPACK_IMPORTED_MODULE_2__.pad)(dy, paddings) };
    }
};
//# sourceMappingURL=Slice_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Softmax_grad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Softmax_grad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softmaxGradConfig": () => (/* binding */ softmaxGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const softmaxGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Softmax,
    outputsToSave: [true],
    gradFunc: (dy, saved, attrs) => {
        const [y] = saved;
        const { dim } = attrs;
        const keepDims = true;
        const dyTimesY = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, y);
        return {
            logits: () => (0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)(dyTimesY, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_sum__WEBPACK_IMPORTED_MODULE_3__.sum)(dyTimesY, [dim], keepDims), y))
        };
    }
};
//# sourceMappingURL=Softmax_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Softplus_grad.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Softplus_grad.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softplusGradConfig": () => (/* binding */ softplusGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sigmoid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const softplusGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Softplus,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_sigmoid__WEBPACK_IMPORTED_MODULE_2__.sigmoid)(x)) };
    }
};
//# sourceMappingURL=Softplus_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "spaceToBatchNDGradConfig": () => (/* binding */ spaceToBatchNDGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/batch_to_space_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const spaceToBatchNDGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.SpaceToBatchND,
    gradFunc: (dy, saved, attrs) => {
        const { blockShape, paddings } = attrs;
        return { x: () => (0,_ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_1__.batchToSpaceND)(dy, blockShape, paddings) };
    }
};
//# sourceMappingURL=SpaceToBatchND_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "splitVGradConfig": () => (/* binding */ splitVGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const splitVGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.SplitV,
    gradFunc: (dy, saved, attrs) => {
        const { axis } = attrs;
        return { x: () => (0,_ops_concat__WEBPACK_IMPORTED_MODULE_1__.concat)(dy, axis) };
    }
};
//# sourceMappingURL=SplitV_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sqrt_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sqrt_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sqrtGradConfig": () => (/* binding */ sqrtGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const sqrtGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sqrt,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)((0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_3__.sqrt)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_4__.cast)(x, 'float32')), 2)) };
    }
};
//# sourceMappingURL=Sqrt_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squareGradConfig": () => (/* binding */ squareGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const squareGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Square,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_cast__WEBPACK_IMPORTED_MODULE_2__.cast)(x, 'float32'), 2)) };
    }
};
//# sourceMappingURL=Square_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squaredDifferenceGradConfig": () => (/* binding */ squaredDifferenceGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const squaredDifferenceGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.SquaredDifference,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const two = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_1__.scalar)(2);
        const derA = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(two, (0,_ops_sub__WEBPACK_IMPORTED_MODULE_3__.sub)(a, b)));
        const derB = () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(dy, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(two, (0,_ops_sub__WEBPACK_IMPORTED_MODULE_3__.sub)(b, a)));
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=SquaredDifference_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Step_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Step_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stepGradConfig": () => (/* binding */ stepGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const stepGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Step,
    gradFunc: (dy) => {
        // TODO(manrajgrover): Return null for gradients when backprop supports
        // it.
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy) };
    }
};
//# sourceMappingURL=Step_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subGradConfig": () => (/* binding */ subGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _ops_neg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const subGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sub,
    inputsToSave: ['a', 'b'],
    gradFunc: (dy, saved) => {
        const [a, b] = saved;
        const outShape = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape(a.shape, b.shape);
        const derA = () => {
            let res = dy;
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(a.shape, outShape);
            if (reduceAxes.length > 0) {
                res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_2__.sum)(res, reduceAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, a.shape);
        };
        const derB = () => {
            let res = dy;
            const reduceAxes = _ops_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.getReductionAxes(b.shape, outShape);
            if (reduceAxes.length > 0) {
                res = (0,_ops_sum__WEBPACK_IMPORTED_MODULE_2__.sum)(res, reduceAxes);
            }
            return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)((0,_ops_neg__WEBPACK_IMPORTED_MODULE_4__.neg)(res), b.shape);
        };
        return { a: derA, b: derB };
    }
};
//# sourceMappingURL=Sub_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sum_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Sum_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sumGradConfig": () => (/* binding */ sumGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_ones__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/ones */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const sumGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Sum,
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const expandedDyShape = x.shape.slice();
        const { axis } = attrs;
        const axes = (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam)(axis, x.shape);
        axes.forEach(axis => {
            expandedDyShape[axis] = 1;
        });
        const expandedDy = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(dy, expandedDyShape);
        const derX = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(expandedDy, (0,_ops_ones__WEBPACK_IMPORTED_MODULE_4__.ones)(x.shape, 'float32'));
        return { x: () => derX };
    }
};
//# sourceMappingURL=Sum_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tan_grad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Tan_grad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tanGradConfig": () => (/* binding */ tanGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_cos__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cos */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const tanGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Tan,
    inputsToSave: ['x'],
    gradFunc: (dy, saved) => {
        const [x] = saved;
        return { x: () => (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(dy, (0,_ops_square__WEBPACK_IMPORTED_MODULE_2__.square)((0,_ops_cos__WEBPACK_IMPORTED_MODULE_3__.cos)(x))) };
    }
};
//# sourceMappingURL=Tan_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tanh_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Tanh_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tanhGradConfig": () => (/* binding */ tanhGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const tanhGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Tanh,
    outputsToSave: [true],
    gradFunc: (dy, saved) => {
        const [y] = saved;
        return { x: () => (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)((0,_ops_sub__WEBPACK_IMPORTED_MODULE_2__.sub)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1), (0,_ops_square__WEBPACK_IMPORTED_MODULE_4__.square)(y)), dy) };
    }
};
//# sourceMappingURL=Tanh_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tileGradConfig": () => (/* binding */ tileGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_slice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const tileGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Tile,
    inputsToSave: ['x'],
    gradFunc: (dy, saved, attrs) => {
        const [x] = saved;
        const { reps } = attrs;
        const derX = () => {
            let xGrad = (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(x);
            // TODO(cais): Maybe reduce memory footprint by avoiding repeated
            // slicing.
            if (x.rank === 1) {
                for (let i = 0; i < reps[0]; ++i) {
                    xGrad = (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)(xGrad, (0,_ops_slice__WEBPACK_IMPORTED_MODULE_3__.slice)(dy, [i * x.shape[0]], [x.shape[0]]));
                }
            }
            else if (x.rank === 2) {
                for (let i = 0; i < reps[0]; ++i) {
                    for (let j = 0; j < reps[1]; ++j) {
                        xGrad = (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)(xGrad, (0,_ops_slice__WEBPACK_IMPORTED_MODULE_3__.slice)(dy, [i * x.shape[0], j * x.shape[1]], [
                            x.shape[0], x.shape[1]
                        ]));
                    }
                }
            }
            else if (x.rank === 3) {
                for (let i = 0; i < reps[0]; ++i) {
                    for (let j = 0; j < reps[1]; ++j) {
                        for (let k = 0; k < reps[2]; ++k) {
                            xGrad =
                                (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)(xGrad, (0,_ops_slice__WEBPACK_IMPORTED_MODULE_3__.slice)(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));
                        }
                    }
                }
            }
            else if (x.rank === 4) {
                for (let i = 0; i < reps[0]; ++i) {
                    for (let j = 0; j < reps[1]; ++j) {
                        for (let k = 0; k < reps[2]; ++k) {
                            for (let l = 0; l < reps[3]; ++l) {
                                xGrad =
                                    (0,_ops_add__WEBPACK_IMPORTED_MODULE_2__.add)(xGrad, (0,_ops_slice__WEBPACK_IMPORTED_MODULE_3__.slice)(dy, [
                                        i * x.shape[0], j * x.shape[1], k * x.shape[2],
                                        l * x.shape[3]
                                    ], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));
                            }
                        }
                    }
                }
            }
            else {
                throw new Error(`Gradient for tile operation is not implemented for rank-` +
                    `${x.rank} tensors yet.`);
            }
            return xGrad;
        };
        return { x: derX };
    },
};
//# sourceMappingURL=Tile_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transposeGradConfig": () => (/* binding */ transposeGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const transposeGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Transpose,
    gradFunc: (dy, saved, attrs) => {
        const transposeAttrs = attrs;
        const { perm } = transposeAttrs;
        const undoPerm = _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.getUndoAxesPermutation(perm);
        return { x: () => (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_2__.transpose)(dy, undoPerm) };
    }
};
//# sourceMappingURL=Transpose_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Unpack_grad.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/Unpack_grad.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unpackGradConfig": () => (/* binding */ unpackGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_stack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const unpackGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.Unpack,
    gradFunc: (dy, saved, attrs) => {
        const unpackAttrs = attrs;
        const { axis } = unpackAttrs;
        return { value: () => (0,_ops_stack__WEBPACK_IMPORTED_MODULE_1__.stack)(dy, axis) };
    }
};
//# sourceMappingURL=Unpack_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unsortedSegmentSumGradConfig": () => (/* binding */ unsortedSegmentSumGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_expand_dims__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/expand_dims */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js");
/* harmony import */ var _ops_gather__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/gather */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js");
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _ops_logical_and__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _ops_maximum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/maximum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony import */ var _ops_ones__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/ones */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










const unsortedSegmentSumGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.UnsortedSegmentSum,
    inputsToSave: ['segmentIds'],
    gradFunc: (dy, saved) => {
        const [segmentIds] = saved;
        const derX = () => {
            return gatherDropNegatives(dy, segmentIds);
        };
        return { x: derX };
    }
};
function gatherDropNegatives(x, indices) {
    // Helper function for unsorted segment ops. Gathers params for
    // positive segment ids and gathers 0 for inputs with negative segment id.
    // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py
    const zeroClippedIndices = (0,_ops_maximum__WEBPACK_IMPORTED_MODULE_1__.maximum)(indices, (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_2__.zerosLike)(indices));
    const gathered = (0,_ops_gather__WEBPACK_IMPORTED_MODULE_3__.gather)(x, zeroClippedIndices);
    let isPositive = (0,_ops_greater_equal__WEBPACK_IMPORTED_MODULE_4__.greaterEqual)(indices, (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_5__.scalar)(0, 'int32'));
    const numIters = gathered.rank - isPositive.rank;
    for (let i = 0; i < numIters; ++i) {
        isPositive = (0,_ops_expand_dims__WEBPACK_IMPORTED_MODULE_6__.expandDims)(isPositive, i + 1);
    }
    isPositive = (0,_ops_logical_and__WEBPACK_IMPORTED_MODULE_7__.logicalAnd)(isPositive, (0,_ops_ones__WEBPACK_IMPORTED_MODULE_8__.ones)(gathered.shape, 'bool'));
    const zeroSlice = (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_2__.zerosLike)(gathered);
    return (0,_ops_where__WEBPACK_IMPORTED_MODULE_9__.where)(isPositive, gathered, zeroSlice);
}
//# sourceMappingURL=UnsortedSegmentSum_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ZerosLike_grad.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/ZerosLike_grad.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zerosLikeGradConfig": () => (/* binding */ zerosLikeGradConfig)
/* harmony export */ });
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const zerosLikeGradConfig = {
    kernelName: _kernel_names__WEBPACK_IMPORTED_MODULE_0__.ZerosLike,
    gradFunc: (dy) => {
        return { x: () => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(dy) };
    }
};
//# sourceMappingURL=ZerosLike_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/gradients/min_max_grad_util.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gradForMinAndMax": () => (/* binding */ gradForMinAndMax)
/* harmony export */ });
/* harmony import */ var _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ops/axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _ops_cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ops_equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Gradient helper function for the min and max operations.
 */
function gradForMinAndMax(dy, y, xOrig, origAxes) {
    if (y.rank < xOrig.rank) {
        y = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)(y, _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.expandShapeToKeepDim(y.shape, origAxes));
    }
    if (dy.rank < xOrig.rank) {
        dy = (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)(dy, _ops_axis_util__WEBPACK_IMPORTED_MODULE_1__.expandShapeToKeepDim(dy.shape, origAxes));
    }
    return {
        x: () => {
            const dx = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_2__.mul)(dy, (0,_ops_cast__WEBPACK_IMPORTED_MODULE_3__.cast)((0,_ops_equal__WEBPACK_IMPORTED_MODULE_4__.equal)(xOrig, y), dy.dtype));
            return dx;
        }
    };
}
//# sourceMappingURL=min_max_grad_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Abs": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Abs),
/* harmony export */   "Acos": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Acos),
/* harmony export */   "Acosh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Acosh),
/* harmony export */   "AdadeltaOptimizer": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.AdadeltaOptimizer),
/* harmony export */   "AdagradOptimizer": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.AdagradOptimizer),
/* harmony export */   "AdamOptimizer": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.AdamOptimizer),
/* harmony export */   "AdamaxOptimizer": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.AdamaxOptimizer),
/* harmony export */   "Add": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Add),
/* harmony export */   "AddN": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.AddN),
/* harmony export */   "All": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.All),
/* harmony export */   "Any": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Any),
/* harmony export */   "ArgMax": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ArgMax),
/* harmony export */   "ArgMin": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ArgMin),
/* harmony export */   "Asin": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Asin),
/* harmony export */   "Asinh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Asinh),
/* harmony export */   "Atan": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Atan),
/* harmony export */   "Atan2": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Atan2),
/* harmony export */   "Atanh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Atanh),
/* harmony export */   "AvgPool": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.AvgPool),
/* harmony export */   "AvgPool3D": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.AvgPool3D),
/* harmony export */   "AvgPool3DGrad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.AvgPool3DGrad),
/* harmony export */   "AvgPoolGrad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.AvgPoolGrad),
/* harmony export */   "BatchMatMul": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.BatchMatMul),
/* harmony export */   "BatchToSpaceND": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.BatchToSpaceND),
/* harmony export */   "Bincount": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Bincount),
/* harmony export */   "BroadcastTo": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.BroadcastTo),
/* harmony export */   "Cast": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Cast),
/* harmony export */   "Ceil": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Ceil),
/* harmony export */   "ClipByValue": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ClipByValue),
/* harmony export */   "Complex": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Complex),
/* harmony export */   "ComplexAbs": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ComplexAbs),
/* harmony export */   "Concat": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Concat),
/* harmony export */   "Conv2D": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Conv2D),
/* harmony export */   "Conv2DBackpropFilter": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Conv2DBackpropFilter),
/* harmony export */   "Conv2DBackpropInput": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Conv2DBackpropInput),
/* harmony export */   "Conv3D": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Conv3D),
/* harmony export */   "Conv3DBackpropFilterV2": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Conv3DBackpropFilterV2),
/* harmony export */   "Conv3DBackpropInputV2": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Conv3DBackpropInputV2),
/* harmony export */   "Cos": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Cos),
/* harmony export */   "Cosh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Cosh),
/* harmony export */   "CropAndResize": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.CropAndResize),
/* harmony export */   "Cumsum": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Cumsum),
/* harmony export */   "DataStorage": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.DataStorage),
/* harmony export */   "DenseBincount": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.DenseBincount),
/* harmony export */   "DepthToSpace": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.DepthToSpace),
/* harmony export */   "DepthwiseConv2dNative": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.DepthwiseConv2dNative),
/* harmony export */   "DepthwiseConv2dNativeBackpropFilter": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.DepthwiseConv2dNativeBackpropFilter),
/* harmony export */   "DepthwiseConv2dNativeBackpropInput": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.DepthwiseConv2dNativeBackpropInput),
/* harmony export */   "Diag": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Diag),
/* harmony export */   "Dilation2D": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Dilation2D),
/* harmony export */   "Dilation2DBackpropFilter": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Dilation2DBackpropFilter),
/* harmony export */   "Dilation2DBackpropInput": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Dilation2DBackpropInput),
/* harmony export */   "ENV": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ENV),
/* harmony export */   "Elu": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Elu),
/* harmony export */   "EluGrad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.EluGrad),
/* harmony export */   "Environment": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Environment),
/* harmony export */   "Equal": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Equal),
/* harmony export */   "Erf": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Erf),
/* harmony export */   "Exp": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Exp),
/* harmony export */   "ExpandDims": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ExpandDims),
/* harmony export */   "Expm1": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Expm1),
/* harmony export */   "FFT": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.FFT),
/* harmony export */   "Fill": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Fill),
/* harmony export */   "FlipLeftRight": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.FlipLeftRight),
/* harmony export */   "Floor": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Floor),
/* harmony export */   "FloorDiv": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.FloorDiv),
/* harmony export */   "FromPixels": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.FromPixels),
/* harmony export */   "FusedBatchNorm": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.FusedBatchNorm),
/* harmony export */   "FusedConv2D": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.FusedConv2D),
/* harmony export */   "FusedDepthwiseConv2D": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.FusedDepthwiseConv2D),
/* harmony export */   "GatherNd": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.GatherNd),
/* harmony export */   "GatherV2": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.GatherV2),
/* harmony export */   "Greater": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Greater),
/* harmony export */   "GreaterEqual": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.GreaterEqual),
/* harmony export */   "IFFT": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.IFFT),
/* harmony export */   "Identity": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Identity),
/* harmony export */   "Imag": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Imag),
/* harmony export */   "IsFinite": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.IsFinite),
/* harmony export */   "IsInf": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.IsInf),
/* harmony export */   "IsNan": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.IsNan),
/* harmony export */   "KernelBackend": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.KernelBackend),
/* harmony export */   "LRN": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.LRN),
/* harmony export */   "LRNGrad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.LRNGrad),
/* harmony export */   "LeakyRelu": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.LeakyRelu),
/* harmony export */   "Less": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Less),
/* harmony export */   "LessEqual": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.LessEqual),
/* harmony export */   "LinSpace": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.LinSpace),
/* harmony export */   "Log": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Log),
/* harmony export */   "Log1p": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Log1p),
/* harmony export */   "LogSoftmax": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.LogSoftmax),
/* harmony export */   "LogicalAnd": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.LogicalAnd),
/* harmony export */   "LogicalNot": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.LogicalNot),
/* harmony export */   "LogicalOr": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.LogicalOr),
/* harmony export */   "Max": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Max),
/* harmony export */   "MaxPool": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.MaxPool),
/* harmony export */   "MaxPool3D": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.MaxPool3D),
/* harmony export */   "MaxPool3DGrad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.MaxPool3DGrad),
/* harmony export */   "MaxPoolGrad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.MaxPoolGrad),
/* harmony export */   "MaxPoolWithArgmax": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.MaxPoolWithArgmax),
/* harmony export */   "Maximum": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Maximum),
/* harmony export */   "Mean": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Mean),
/* harmony export */   "Min": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Min),
/* harmony export */   "Minimum": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Minimum),
/* harmony export */   "MirrorPad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.MirrorPad),
/* harmony export */   "Mod": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Mod),
/* harmony export */   "MomentumOptimizer": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.MomentumOptimizer),
/* harmony export */   "Multinomial": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Multinomial),
/* harmony export */   "Multiply": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Multiply),
/* harmony export */   "Neg": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Neg),
/* harmony export */   "NonMaxSuppressionV3": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.NonMaxSuppressionV3),
/* harmony export */   "NonMaxSuppressionV4": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.NonMaxSuppressionV4),
/* harmony export */   "NonMaxSuppressionV5": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.NonMaxSuppressionV5),
/* harmony export */   "NotEqual": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.NotEqual),
/* harmony export */   "OP_SCOPE_SUFFIX": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.OP_SCOPE_SUFFIX),
/* harmony export */   "OneHot": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.OneHot),
/* harmony export */   "OnesLike": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.OnesLike),
/* harmony export */   "Optimizer": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Optimizer),
/* harmony export */   "Pack": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Pack),
/* harmony export */   "PadV2": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.PadV2),
/* harmony export */   "Pool": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Pool),
/* harmony export */   "Pow": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Pow),
/* harmony export */   "Prelu": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Prelu),
/* harmony export */   "Prod": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Prod),
/* harmony export */   "RMSPropOptimizer": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.RMSPropOptimizer),
/* harmony export */   "Range": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Range),
/* harmony export */   "Rank": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Rank),
/* harmony export */   "Real": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Real),
/* harmony export */   "RealDiv": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.RealDiv),
/* harmony export */   "Reciprocal": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Reciprocal),
/* harmony export */   "Reduction": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Reduction),
/* harmony export */   "Relu": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Relu),
/* harmony export */   "Relu6": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Relu6),
/* harmony export */   "Reshape": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Reshape),
/* harmony export */   "ResizeBilinear": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ResizeBilinear),
/* harmony export */   "ResizeBilinearGrad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ResizeBilinearGrad),
/* harmony export */   "ResizeNearestNeighbor": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ResizeNearestNeighbor),
/* harmony export */   "ResizeNearestNeighborGrad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ResizeNearestNeighborGrad),
/* harmony export */   "Reverse": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Reverse),
/* harmony export */   "RotateWithOffset": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.RotateWithOffset),
/* harmony export */   "Round": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Round),
/* harmony export */   "Rsqrt": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Rsqrt),
/* harmony export */   "SGDOptimizer": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.SGDOptimizer),
/* harmony export */   "ScatterNd": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ScatterNd),
/* harmony export */   "Select": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Select),
/* harmony export */   "Selu": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Selu),
/* harmony export */   "Sigmoid": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Sigmoid),
/* harmony export */   "Sign": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Sign),
/* harmony export */   "Sin": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Sin),
/* harmony export */   "Sinh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Sinh),
/* harmony export */   "Slice": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Slice),
/* harmony export */   "Softmax": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Softmax),
/* harmony export */   "Softplus": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Softplus),
/* harmony export */   "SpaceToBatchND": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.SpaceToBatchND),
/* harmony export */   "SparseToDense": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.SparseToDense),
/* harmony export */   "SplitV": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.SplitV),
/* harmony export */   "Sqrt": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Sqrt),
/* harmony export */   "Square": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Square),
/* harmony export */   "SquaredDifference": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.SquaredDifference),
/* harmony export */   "Step": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Step),
/* harmony export */   "StridedSlice": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.StridedSlice),
/* harmony export */   "Sub": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Sub),
/* harmony export */   "Sum": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Sum),
/* harmony export */   "Tan": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Tan),
/* harmony export */   "Tanh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Tanh),
/* harmony export */   "Tensor": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Tensor),
/* harmony export */   "TensorBuffer": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.TensorBuffer),
/* harmony export */   "Tile": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Tile),
/* harmony export */   "TopK": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.TopK),
/* harmony export */   "Transpose": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Transpose),
/* harmony export */   "Unique": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Unique),
/* harmony export */   "Unpack": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Unpack),
/* harmony export */   "UnsortedSegmentSum": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.UnsortedSegmentSum),
/* harmony export */   "Variable": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.Variable),
/* harmony export */   "ZerosLike": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ZerosLike),
/* harmony export */   "_FusedMatMul": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__._FusedMatMul),
/* harmony export */   "abs": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.abs),
/* harmony export */   "acos": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.acos),
/* harmony export */   "acosh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.acosh),
/* harmony export */   "add": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.add),
/* harmony export */   "addN": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.addN),
/* harmony export */   "addStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.addStrict),
/* harmony export */   "all": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.all),
/* harmony export */   "any": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.any),
/* harmony export */   "argMax": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.argMax),
/* harmony export */   "argMin": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.argMin),
/* harmony export */   "asin": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.asin),
/* harmony export */   "asinh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.asinh),
/* harmony export */   "atan": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.atan),
/* harmony export */   "atan2": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.atan2),
/* harmony export */   "atanh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.atanh),
/* harmony export */   "avgPool": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.avgPool),
/* harmony export */   "avgPool3d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.avgPool3d),
/* harmony export */   "backend": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.backend),
/* harmony export */   "backend_util": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.backend_util),
/* harmony export */   "basicLSTMCell": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.basicLSTMCell),
/* harmony export */   "batchNorm": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.batchNorm),
/* harmony export */   "batchNorm2d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.batchNorm2d),
/* harmony export */   "batchNorm3d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.batchNorm3d),
/* harmony export */   "batchNorm4d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.batchNorm4d),
/* harmony export */   "batchToSpaceND": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.batchToSpaceND),
/* harmony export */   "bincount": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.bincount),
/* harmony export */   "booleanMaskAsync": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.booleanMaskAsync),
/* harmony export */   "broadcastTo": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.broadcastTo),
/* harmony export */   "browser": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.browser),
/* harmony export */   "buffer": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.buffer),
/* harmony export */   "cast": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.cast),
/* harmony export */   "ceil": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ceil),
/* harmony export */   "clipByValue": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.clipByValue),
/* harmony export */   "clone": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.clone),
/* harmony export */   "complex": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.complex),
/* harmony export */   "concat": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.concat),
/* harmony export */   "concat1d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.concat1d),
/* harmony export */   "concat2d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.concat2d),
/* harmony export */   "concat3d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.concat3d),
/* harmony export */   "concat4d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.concat4d),
/* harmony export */   "conv1d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.conv1d),
/* harmony export */   "conv2d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.conv2d),
/* harmony export */   "conv2dTranspose": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.conv2dTranspose),
/* harmony export */   "conv3d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.conv3d),
/* harmony export */   "conv3dTranspose": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.conv3dTranspose),
/* harmony export */   "copyRegisteredKernels": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.copyRegisteredKernels),
/* harmony export */   "cos": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.cos),
/* harmony export */   "cosh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.cosh),
/* harmony export */   "cosineWindow": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.cosineWindow),
/* harmony export */   "cumsum": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.cumsum),
/* harmony export */   "customGrad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.customGrad),
/* harmony export */   "denseBincount": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.denseBincount),
/* harmony export */   "deprecationWarn": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.deprecationWarn),
/* harmony export */   "depthToSpace": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.depthToSpace),
/* harmony export */   "depthwiseConv2d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.depthwiseConv2d),
/* harmony export */   "device_util": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.device_util),
/* harmony export */   "diag": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.diag),
/* harmony export */   "dilation2d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.dilation2d),
/* harmony export */   "disableDeprecationWarnings": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.disableDeprecationWarnings),
/* harmony export */   "dispose": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.dispose),
/* harmony export */   "disposeVariables": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.disposeVariables),
/* harmony export */   "div": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.div),
/* harmony export */   "divNoNan": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.divNoNan),
/* harmony export */   "divStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.divStrict),
/* harmony export */   "dot": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.dot),
/* harmony export */   "dropout": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.dropout),
/* harmony export */   "elu": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.elu),
/* harmony export */   "enableDebugMode": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.enableDebugMode),
/* harmony export */   "enableProdMode": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.enableProdMode),
/* harmony export */   "enclosingPowerOfTwo": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.enclosingPowerOfTwo),
/* harmony export */   "engine": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.engine),
/* harmony export */   "env": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.env),
/* harmony export */   "equal": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.equal),
/* harmony export */   "equalStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.equalStrict),
/* harmony export */   "erf": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.erf),
/* harmony export */   "exp": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.exp),
/* harmony export */   "expandDims": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.expandDims),
/* harmony export */   "expm1": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.expm1),
/* harmony export */   "eye": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.eye),
/* harmony export */   "fft": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.fft),
/* harmony export */   "fill": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.fill),
/* harmony export */   "findBackend": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.findBackend),
/* harmony export */   "findBackendFactory": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.findBackendFactory),
/* harmony export */   "floor": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.floor),
/* harmony export */   "floorDiv": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.floorDiv),
/* harmony export */   "fused": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.fused),
/* harmony export */   "gather": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.gather),
/* harmony export */   "gatherND": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.gatherND),
/* harmony export */   "gather_util": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.gather_util),
/* harmony export */   "getBackend": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.getBackend),
/* harmony export */   "getGradient": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.getGradient),
/* harmony export */   "getKernel": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.getKernel),
/* harmony export */   "getKernelsForBackend": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.getKernelsForBackend),
/* harmony export */   "grad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.grad),
/* harmony export */   "grads": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.grads),
/* harmony export */   "greater": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.greater),
/* harmony export */   "greaterEqual": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.greaterEqual),
/* harmony export */   "greaterEqualStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.greaterEqualStrict),
/* harmony export */   "greaterStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.greaterStrict),
/* harmony export */   "ifft": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ifft),
/* harmony export */   "imag": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.imag),
/* harmony export */   "image": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.image),
/* harmony export */   "inTopKAsync": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.inTopKAsync),
/* harmony export */   "io": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.io),
/* harmony export */   "irfft": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.irfft),
/* harmony export */   "isFinite": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.isFinite),
/* harmony export */   "isInf": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.isInf),
/* harmony export */   "isNaN": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.isNaN),
/* harmony export */   "keep": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.keep),
/* harmony export */   "kernel_impls": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.kernel_impls),
/* harmony export */   "leakyRelu": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.leakyRelu),
/* harmony export */   "less": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.less),
/* harmony export */   "lessEqual": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.lessEqual),
/* harmony export */   "lessEqualStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.lessEqualStrict),
/* harmony export */   "lessStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.lessStrict),
/* harmony export */   "linalg": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.linalg),
/* harmony export */   "linspace": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.linspace),
/* harmony export */   "localResponseNormalization": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.localResponseNormalization),
/* harmony export */   "log": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.log),
/* harmony export */   "log1p": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.log1p),
/* harmony export */   "logSigmoid": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.logSigmoid),
/* harmony export */   "logSoftmax": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.logSoftmax),
/* harmony export */   "logSumExp": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.logSumExp),
/* harmony export */   "logicalAnd": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.logicalAnd),
/* harmony export */   "logicalNot": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.logicalNot),
/* harmony export */   "logicalOr": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.logicalOr),
/* harmony export */   "logicalXor": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.logicalXor),
/* harmony export */   "losses": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.losses),
/* harmony export */   "matMul": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.matMul),
/* harmony export */   "math": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.math),
/* harmony export */   "max": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.max),
/* harmony export */   "maxPool": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.maxPool),
/* harmony export */   "maxPool3d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.maxPool3d),
/* harmony export */   "maxPoolWithArgmax": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.maxPoolWithArgmax),
/* harmony export */   "maximum": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.maximum),
/* harmony export */   "maximumStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.maximumStrict),
/* harmony export */   "mean": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.mean),
/* harmony export */   "memory": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.memory),
/* harmony export */   "min": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.min),
/* harmony export */   "minimum": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.minimum),
/* harmony export */   "minimumStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.minimumStrict),
/* harmony export */   "mirrorPad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.mirrorPad),
/* harmony export */   "mod": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.mod),
/* harmony export */   "modStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.modStrict),
/* harmony export */   "moments": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.moments),
/* harmony export */   "movingAverage": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.movingAverage),
/* harmony export */   "mul": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.mul),
/* harmony export */   "mulStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.mulStrict),
/* harmony export */   "multiRNNCell": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.multiRNNCell),
/* harmony export */   "multinomial": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.multinomial),
/* harmony export */   "neg": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.neg),
/* harmony export */   "nextFrame": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.nextFrame),
/* harmony export */   "norm": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.norm),
/* harmony export */   "notEqual": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.notEqual),
/* harmony export */   "notEqualStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.notEqualStrict),
/* harmony export */   "oneHot": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.oneHot),
/* harmony export */   "ones": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ones),
/* harmony export */   "onesLike": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.onesLike),
/* harmony export */   "op": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.op),
/* harmony export */   "outerProduct": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.outerProduct),
/* harmony export */   "pad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.pad),
/* harmony export */   "pad1d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.pad1d),
/* harmony export */   "pad2d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.pad2d),
/* harmony export */   "pad3d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.pad3d),
/* harmony export */   "pad4d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.pad4d),
/* harmony export */   "pool": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.pool),
/* harmony export */   "pow": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.pow),
/* harmony export */   "powStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.powStrict),
/* harmony export */   "prelu": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.prelu),
/* harmony export */   "print": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.print),
/* harmony export */   "prod": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.prod),
/* harmony export */   "profile": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.profile),
/* harmony export */   "rand": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.rand),
/* harmony export */   "randomGamma": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.randomGamma),
/* harmony export */   "randomNormal": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.randomNormal),
/* harmony export */   "randomUniform": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.randomUniform),
/* harmony export */   "range": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.range),
/* harmony export */   "ready": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.ready),
/* harmony export */   "real": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.real),
/* harmony export */   "reciprocal": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.reciprocal),
/* harmony export */   "registerBackend": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.registerBackend),
/* harmony export */   "registerGradient": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.registerGradient),
/* harmony export */   "registerKernel": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.registerKernel),
/* harmony export */   "relu": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.relu),
/* harmony export */   "relu6": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.relu6),
/* harmony export */   "removeBackend": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.removeBackend),
/* harmony export */   "reshape": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.reshape),
/* harmony export */   "reverse": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.reverse),
/* harmony export */   "reverse1d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.reverse1d),
/* harmony export */   "reverse2d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.reverse2d),
/* harmony export */   "reverse3d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.reverse3d),
/* harmony export */   "reverse4d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.reverse4d),
/* harmony export */   "rfft": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.rfft),
/* harmony export */   "round": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.round),
/* harmony export */   "rsqrt": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.rsqrt),
/* harmony export */   "scalar": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.scalar),
/* harmony export */   "scatterND": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.scatterND),
/* harmony export */   "scatter_util": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.scatter_util),
/* harmony export */   "selu": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.selu),
/* harmony export */   "separableConv2d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.separableConv2d),
/* harmony export */   "serialization": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.serialization),
/* harmony export */   "setBackend": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.setBackend),
/* harmony export */   "setPlatform": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.setPlatform),
/* harmony export */   "setdiff1dAsync": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.setdiff1dAsync),
/* harmony export */   "sigmoid": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.sigmoid),
/* harmony export */   "sign": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.sign),
/* harmony export */   "signal": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.signal),
/* harmony export */   "sin": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.sin),
/* harmony export */   "sinh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.sinh),
/* harmony export */   "slice": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.slice),
/* harmony export */   "slice1d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.slice1d),
/* harmony export */   "slice2d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.slice2d),
/* harmony export */   "slice3d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.slice3d),
/* harmony export */   "slice4d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.slice4d),
/* harmony export */   "slice_util": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.slice_util),
/* harmony export */   "softmax": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.softmax),
/* harmony export */   "softplus": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.softplus),
/* harmony export */   "spaceToBatchND": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.spaceToBatchND),
/* harmony export */   "sparseToDense": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.sparseToDense),
/* harmony export */   "spectral": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.spectral),
/* harmony export */   "split": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.split),
/* harmony export */   "sqrt": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.sqrt),
/* harmony export */   "square": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.square),
/* harmony export */   "squaredDifference": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.squaredDifference),
/* harmony export */   "squaredDifferenceStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.squaredDifferenceStrict),
/* harmony export */   "squeeze": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.squeeze),
/* harmony export */   "stack": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.stack),
/* harmony export */   "step": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.step),
/* harmony export */   "stridedSlice": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.stridedSlice),
/* harmony export */   "sub": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.sub),
/* harmony export */   "subStrict": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.subStrict),
/* harmony export */   "sum": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.sum),
/* harmony export */   "sumOutType": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.sumOutType),
/* harmony export */   "tan": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tan),
/* harmony export */   "tanh": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tanh),
/* harmony export */   "tensor": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tensor),
/* harmony export */   "tensor1d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tensor1d),
/* harmony export */   "tensor2d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tensor2d),
/* harmony export */   "tensor3d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tensor3d),
/* harmony export */   "tensor4d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tensor4d),
/* harmony export */   "tensor5d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tensor5d),
/* harmony export */   "tensor6d": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tensor6d),
/* harmony export */   "tensor_util": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tensor_util),
/* harmony export */   "test_util": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.test_util),
/* harmony export */   "tidy": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tidy),
/* harmony export */   "tile": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.tile),
/* harmony export */   "time": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.time),
/* harmony export */   "topk": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.topk),
/* harmony export */   "train": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.train),
/* harmony export */   "transpose": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.transpose),
/* harmony export */   "truncatedNormal": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.truncatedNormal),
/* harmony export */   "unique": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.unique),
/* harmony export */   "unregisterGradient": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.unregisterGradient),
/* harmony export */   "unregisterKernel": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.unregisterKernel),
/* harmony export */   "unsortedSegmentSum": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.unsortedSegmentSum),
/* harmony export */   "unstack": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.unstack),
/* harmony export */   "upcastType": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.upcastType),
/* harmony export */   "util": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.util),
/* harmony export */   "valueAndGrad": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.valueAndGrad),
/* harmony export */   "valueAndGrads": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.valueAndGrads),
/* harmony export */   "variable": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.variable),
/* harmony export */   "variableGrads": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.variableGrads),
/* harmony export */   "version_core": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.version_core),
/* harmony export */   "where": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.where),
/* harmony export */   "whereAsync": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.whereAsync),
/* harmony export */   "zeros": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.zeros),
/* harmony export */   "zerosLike": () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_1__.zerosLike)
/* harmony export */ });
/* harmony import */ var _base_side_effects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base_side_effects */ "./node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "./node_modules/@tensorflow/tfjs-core/dist/base.js");
/* harmony import */ var _register_all_gradients__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./register_all_gradients */ "./node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js");
/* harmony import */ var _public_chained_ops_register_all_chained_ops__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./public/chained_ops/register_all_chained_ops */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Required side effectful code.

// All exports from this package should be in base.

// Register all the gradients.

// Import all op chainers and add type info to Tensor.

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserDownloads": () => (/* binding */ BrowserDownloads),
/* harmony export */   "browserDownloadsRouter": () => (/* binding */ browserDownloadsRouter),
/* harmony export */   "browserDownloads": () => (/* binding */ browserDownloads),
/* harmony export */   "browserFiles": () => (/* binding */ browserFiles)
/* harmony export */ });
/* harmony import */ var _flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flags */ "./node_modules/@tensorflow/tfjs-core/dist/flags.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * IOHandlers related to files, such as browser-triggered file downloads,
 * user-selected files in browser.
 */




const DEFAULT_FILE_NAME_PREFIX = 'model';
const DEFAULT_JSON_EXTENSION_NAME = '.json';
const DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';
function defer(f) {
    return new Promise(resolve => setTimeout(resolve)).then(f);
}
class BrowserDownloads {
    constructor(fileNamePrefix) {
        if (!(0,_environment__WEBPACK_IMPORTED_MODULE_3__.env)().getBool('IS_BROWSER')) {
            // TODO(cais): Provide info on what IOHandlers are available under the
            //   current environment.
            throw new Error('browserDownloads() cannot proceed because the current environment ' +
                'is not a browser.');
        }
        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {
            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);
        }
        if (fileNamePrefix == null || fileNamePrefix.length === 0) {
            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;
        }
        this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;
        this.weightDataFileName =
            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
    }
    async save(modelArtifacts) {
        if (typeof (document) === 'undefined') {
            throw new Error('Browser downloads are not supported in ' +
                'this environment since `document` is not present');
        }
        const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
            throw new Error('BrowserDownloads.save() does not support saving model topology ' +
                'in binary formats yet.');
        }
        else {
            const weightsManifest = [{
                    paths: ['./' + this.weightDataFileName],
                    weights: modelArtifacts.weightSpecs
                }];
            const modelTopologyAndWeightManifest = {
                modelTopology: modelArtifacts.modelTopology,
                format: modelArtifacts.format,
                generatedBy: modelArtifacts.generatedBy,
                convertedBy: modelArtifacts.convertedBy,
                weightsManifest
            };
            if (modelArtifacts.signature != null) {
                modelTopologyAndWeightManifest.signature = modelArtifacts.signature;
            }
            if (modelArtifacts.userDefinedMetadata != null) {
                modelTopologyAndWeightManifest.userDefinedMetadata =
                    modelArtifacts.userDefinedMetadata;
            }
            if (modelArtifacts.modelInitializer != null) {
                modelTopologyAndWeightManifest.modelInitializer =
                    modelArtifacts.modelInitializer;
            }
            const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }));
            // If anchor elements are not provided, create them without attaching them
            // to parents, so that the downloaded file names can be controlled.
            const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') :
                this.jsonAnchor;
            jsonAnchor.download = this.modelTopologyFileName;
            jsonAnchor.href = modelTopologyAndWeightManifestURL;
            // Trigger downloads by evoking a click event on the download anchors.
            // When multiple downloads are started synchronously, Firefox will only
            // save the last one.
            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));
            if (modelArtifacts.weightData != null) {
                const weightDataAnchor = this.weightDataAnchor == null ?
                    document.createElement('a') :
                    this.weightDataAnchor;
                weightDataAnchor.download = this.weightDataFileName;
                weightDataAnchor.href = weightsURL;
                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));
            }
            return { modelArtifactsInfo: (0,_io_utils__WEBPACK_IMPORTED_MODULE_1__.getModelArtifactsInfoForJSON)(modelArtifacts) };
        }
    }
}
BrowserDownloads.URL_SCHEME = 'downloads://';
class BrowserFiles {
    constructor(files) {
        if (files == null || files.length < 1) {
            throw new Error(`When calling browserFiles, at least 1 file is required, ` +
                `but received ${files}`);
        }
        this.files = files;
    }
    async load() {
        const jsonFile = this.files[0];
        const weightFiles = this.files.slice(1);
        return new Promise((resolve, reject) => {
            const jsonReader = new FileReader();
            jsonReader.onload = (event) => {
                // tslint:disable-next-line:no-any
                const modelJSON = JSON.parse(event.target.result);
                const modelTopology = modelJSON.modelTopology;
                if (modelTopology == null) {
                    reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));
                    return;
                }
                if (weightFiles.length === 0) {
                    resolve({ modelTopology });
                }
                const weightsManifest = modelJSON.weightsManifest;
                if (weightsManifest == null) {
                    reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));
                    return;
                }
                let pathToFile;
                try {
                    pathToFile =
                        this.checkManifestAndWeightFiles(weightsManifest, weightFiles);
                }
                catch (err) {
                    reject(err);
                    return;
                }
                const weightSpecs = [];
                const paths = [];
                const perFileBuffers = [];
                weightsManifest.forEach(weightsGroup => {
                    weightsGroup.paths.forEach(path => {
                        paths.push(path);
                        perFileBuffers.push(null);
                    });
                    weightSpecs.push(...weightsGroup.weights);
                });
                weightsManifest.forEach(weightsGroup => {
                    weightsGroup.paths.forEach(path => {
                        const weightFileReader = new FileReader();
                        weightFileReader.onload = (event) => {
                            // tslint:disable-next-line:no-any
                            const weightData = event.target.result;
                            const index = paths.indexOf(path);
                            perFileBuffers[index] = weightData;
                            if (perFileBuffers.indexOf(null) === -1) {
                                const result = {
                                    modelTopology,
                                    weightSpecs,
                                    weightData: (0,_io_utils__WEBPACK_IMPORTED_MODULE_1__.concatenateArrayBuffers)(perFileBuffers),
                                    format: modelJSON.format,
                                    generatedBy: modelJSON.generatedBy,
                                    convertedBy: modelJSON.convertedBy
                                };
                                if (modelJSON.signature != null) {
                                    result.signature = modelJSON.signature;
                                }
                                if (modelJSON.userDefinedMetadata != null) {
                                    result.userDefinedMetadata = modelJSON.userDefinedMetadata;
                                }
                                if (modelJSON.modelInitializer != null) {
                                    result.modelInitializer = modelJSON.modelInitializer;
                                }
                                resolve(result);
                            }
                        };
                        weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);
                        weightFileReader.readAsArrayBuffer(pathToFile[path]);
                    });
                });
            };
            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +
                `from file '${jsonFile.name}'. BrowserFiles supports loading ` +
                `Keras-style tf.Model artifacts only.`);
            jsonReader.readAsText(jsonFile);
        });
    }
    /**
     * Check the compatibility between weights manifest and weight files.
     */
    checkManifestAndWeightFiles(manifest, files) {
        const basenames = [];
        const fileNames = files.map(file => (0,_io_utils__WEBPACK_IMPORTED_MODULE_1__.basename)(file.name));
        const pathToFile = {};
        for (const group of manifest) {
            group.paths.forEach(path => {
                const pathBasename = (0,_io_utils__WEBPACK_IMPORTED_MODULE_1__.basename)(path);
                if (basenames.indexOf(pathBasename) !== -1) {
                    throw new Error(`Duplicate file basename found in weights manifest: ` +
                        `'${pathBasename}'`);
                }
                basenames.push(pathBasename);
                if (fileNames.indexOf(pathBasename) === -1) {
                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);
                }
                else {
                    pathToFile[path] = files[fileNames.indexOf(pathBasename)];
                }
            });
        }
        if (basenames.length !== files.length) {
            throw new Error(`Mismatch in the number of files in weights manifest ` +
                `(${basenames.length}) and the number of weight files provided ` +
                `(${files.length}).`);
        }
        return pathToFile;
    }
}
const browserDownloadsRouter = (url) => {
    if (!(0,_environment__WEBPACK_IMPORTED_MODULE_3__.env)().getBool('IS_BROWSER')) {
        return null;
    }
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {
            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));
        }
        else {
            return null;
        }
    }
};
_router_registry__WEBPACK_IMPORTED_MODULE_2__.IORouterRegistry.registerSaveRouter(browserDownloadsRouter);
/**
 * Creates an IOHandler that triggers file downloads from the browser.
 *
 * The returned `IOHandler` instance can be used as model exporting methods such
 * as `tf.Model.save` and supports only saving.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * const saveResult = await model.save('downloads://mymodel');
 * // This will trigger downloading of two files:
 * //   'mymodel.json' and 'mymodel.weights.bin'.
 * console.log(saveResult);
 * ```
 *
 * @param fileNamePrefix Prefix name of the files to be downloaded. For use with
 *   `tf.Model`, `fileNamePrefix` should follow either of the following two
 *   formats:
 *   1. `null` or `undefined`, in which case the default file
 *      names will be used:
 *      - 'model.json' for the JSON file containing the model topology and
 *        weights manifest.
 *      - 'model.weights.bin' for the binary file containing the binary weight
 *        values.
 *   2. A single string or an Array of a single string, as the file name prefix.
 *      For example, if `'foo'` is provided, the downloaded JSON
 *      file and binary weights file will be named 'foo.json' and
 *      'foo.weights.bin', respectively.
 * @param config Additional configuration for triggering downloads.
 * @returns An instance of `BrowserDownloads` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
function browserDownloads(fileNamePrefix = 'model') {
    return new BrowserDownloads(fileNamePrefix);
}
/**
 * Creates an IOHandler that loads model artifacts from user-selected files.
 *
 * This method can be used for loading from files such as user-selected files
 * in the browser.
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * // Note: This code snippet won't run properly without the actual file input
 * //   elements in the HTML DOM.
 *
 * // Suppose there are two HTML file input (`<input type="file" ...>`)
 * // elements.
 * const uploadJSONInput = document.getElementById('upload-json');
 * const uploadWeightsInput = document.getElementById('upload-weights');
 * const model = await tf.loadLayersModel(tf.io.browserFiles(
 *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));
 * ```
 *
 * @param files `File`s to load from. Currently, this function supports only
 *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for
 *   which an `Array` of `File`s is expected (in that order):
 *   - A JSON file containing the model topology and weight manifest.
 *   - Optionally, One or more binary files containing the binary weights.
 *     These files must have names that match the paths in the `weightsManifest`
 *     contained by the aforementioned JSON file, or errors will be thrown
 *     during loading. These weights files have the same format as the ones
 *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`
 *     Python PIP package. If no weights files are provided, only the model
 *     topology will be loaded from the JSON file above.
 * @returns An instance of `Files` `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
function browserFiles(files) {
    return new BrowserFiles(files);
}
//# sourceMappingURL=browser_files.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/http.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/http.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTTPRequest": () => (/* binding */ HTTPRequest),
/* harmony export */   "parseUrl": () => (/* binding */ parseUrl),
/* harmony export */   "isHTTPScheme": () => (/* binding */ isHTTPScheme),
/* harmony export */   "httpRouter": () => (/* binding */ httpRouter),
/* harmony export */   "http": () => (/* binding */ http),
/* harmony export */   "browserHTTPRequest": () => (/* binding */ browserHTTPRequest)
/* harmony export */ });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/* harmony import */ var _weights_loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./weights_loader */ "./node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * IOHandler implementations based on HTTP requests in the web browser.
 *
 * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 */





const OCTET_STREAM_MIME_TYPE = 'application/octet-stream';
const JSON_TYPE = 'application/json';
class HTTPRequest {
    constructor(path, loadOptions) {
        this.DEFAULT_METHOD = 'POST';
        if (loadOptions == null) {
            loadOptions = {};
        }
        this.weightPathPrefix = loadOptions.weightPathPrefix;
        this.onProgress = loadOptions.onProgress;
        this.weightUrlConverter = loadOptions.weightUrlConverter;
        if (loadOptions.fetchFunc != null) {
            (0,_util__WEBPACK_IMPORTED_MODULE_3__.assert)(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' +
                '`fetch` (see ' +
                'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');
            this.fetch = loadOptions.fetchFunc;
        }
        else {
            this.fetch = (0,_environment__WEBPACK_IMPORTED_MODULE_4__.env)().platform.fetch;
        }
        (0,_util__WEBPACK_IMPORTED_MODULE_3__.assert)(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' +
            'empty.');
        if (Array.isArray(path)) {
            (0,_util__WEBPACK_IMPORTED_MODULE_3__.assert)(path.length === 2, () => 'URL paths for http must have a length of 2, ' +
                `(actual length is ${path.length}).`);
        }
        this.path = path;
        if (loadOptions.requestInit != null &&
            loadOptions.requestInit.body != null) {
            throw new Error('requestInit is expected to have no pre-existing body, but has one.');
        }
        this.requestInit = loadOptions.requestInit || {};
    }
    async save(modelArtifacts) {
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
            throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' +
                'in binary formats yet.');
        }
        const init = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
        init.body = new FormData();
        const weightsManifest = [{
                paths: ['./model.weights.bin'],
                weights: modelArtifacts.weightSpecs,
            }];
        const modelTopologyAndWeightManifest = {
            modelTopology: modelArtifacts.modelTopology,
            format: modelArtifacts.format,
            generatedBy: modelArtifacts.generatedBy,
            convertedBy: modelArtifacts.convertedBy,
            weightsManifest
        };
        if (modelArtifacts.signature != null) {
            modelTopologyAndWeightManifest.signature = modelArtifacts.signature;
        }
        if (modelArtifacts.userDefinedMetadata != null) {
            modelTopologyAndWeightManifest.userDefinedMetadata =
                modelArtifacts.userDefinedMetadata;
        }
        if (modelArtifacts.modelInitializer != null) {
            modelTopologyAndWeightManifest.modelInitializer =
                modelArtifacts.modelInitializer;
        }
        init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: JSON_TYPE }), 'model.json');
        if (modelArtifacts.weightData != null) {
            init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], { type: OCTET_STREAM_MIME_TYPE }), 'model.weights.bin');
        }
        const response = await this.fetch(this.path, init);
        if (response.ok) {
            return {
                modelArtifactsInfo: (0,_io_utils__WEBPACK_IMPORTED_MODULE_0__.getModelArtifactsInfoForJSON)(modelArtifacts),
                responses: [response],
            };
        }
        else {
            throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` +
                `${response.status}.`);
        }
    }
    /**
     * Load model artifacts via HTTP request(s).
     *
     * See the documentation to `tf.io.http` for details on the saved
     * artifacts.
     *
     * @returns The loaded model artifacts (if loading succeeds).
     */
    async load() {
        const modelConfigRequest = await this.fetch(this.path, this.requestInit);
        if (!modelConfigRequest.ok) {
            throw new Error(`Request to ${this.path} failed with status code ` +
                `${modelConfigRequest.status}. Please verify this URL points to ` +
                `the model JSON of the model to load.`);
        }
        let modelConfig;
        try {
            modelConfig = await modelConfigRequest.json();
        }
        catch (e) {
            let message = `Failed to parse model JSON of response from ${this.path}.`;
            // TODO(nsthorat): Remove this after some time when we're comfortable that
            // .pb files are mostly gone.
            if (this.path.endsWith('.pb')) {
                message += ' Your path contains a .pb file extension. ' +
                    'Support for .pb models have been removed in TensorFlow.js 1.0 ' +
                    'in favor of .json models. You can re-convert your Python ' +
                    'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +
                    'or you can convert your.pb models with the \'pb2json\'' +
                    'NPM script in the tensorflow/tfjs-converter repository.';
            }
            else {
                message += ' Please make sure the server is serving valid ' +
                    'JSON for this request.';
            }
            throw new Error(message);
        }
        const modelTopology = modelConfig.modelTopology;
        const weightsManifest = modelConfig.weightsManifest;
        const generatedBy = modelConfig.generatedBy;
        const convertedBy = modelConfig.convertedBy;
        const format = modelConfig.format;
        const signature = modelConfig.signature;
        const userDefinedMetadata = modelConfig.userDefinedMetadata;
        // We do not allow both modelTopology and weightsManifest to be missing.
        if (modelTopology == null && weightsManifest == null) {
            throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` +
                `topology or manifest for weights.`);
        }
        let weightSpecs;
        let weightData;
        if (weightsManifest != null) {
            const results = await this.loadWeights(weightsManifest);
            [weightSpecs, weightData] = results;
        }
        const artifacts = {
            modelTopology,
            weightSpecs,
            weightData,
            generatedBy,
            convertedBy,
            format
        };
        if (signature != null) {
            artifacts.signature = signature;
        }
        if (userDefinedMetadata != null) {
            artifacts.userDefinedMetadata = userDefinedMetadata;
        }
        const initializer = modelConfig.modelInitializer;
        if (initializer) {
            artifacts.modelInitializer = initializer;
        }
        return artifacts;
    }
    async loadWeights(weightsManifest) {
        const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;
        const [prefix, suffix] = parseUrl(weightPath);
        const pathPrefix = this.weightPathPrefix || prefix;
        const weightSpecs = [];
        for (const entry of weightsManifest) {
            weightSpecs.push(...entry.weights);
        }
        const fetchURLs = [];
        const urlPromises = [];
        for (const weightsGroup of weightsManifest) {
            for (const path of weightsGroup.paths) {
                if (this.weightUrlConverter != null) {
                    urlPromises.push(this.weightUrlConverter(path));
                }
                else {
                    fetchURLs.push(pathPrefix + path + suffix);
                }
            }
        }
        if (this.weightUrlConverter) {
            fetchURLs.push(...await Promise.all(urlPromises));
        }
        const buffers = await (0,_weights_loader__WEBPACK_IMPORTED_MODULE_2__.loadWeightsAsArrayBuffer)(fetchURLs, {
            requestInit: this.requestInit,
            fetchFunc: this.fetch,
            onProgress: this.onProgress
        });
        return [weightSpecs, (0,_io_utils__WEBPACK_IMPORTED_MODULE_0__.concatenateArrayBuffers)(buffers)];
    }
}
HTTPRequest.URL_SCHEME_REGEX = /^https?:\/\//;
/**
 * Extract the prefix and suffix of the url, where the prefix is the path before
 * the last file, and suffix is the search params after the last file.
 * ```
 * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'
 * [prefix, suffix] = parseUrl(url)
 * // prefix = 'http://tfhub.dev/model/1/'
 * // suffix = '?tfjs-format=file'
 * ```
 * @param url the model url to be parsed.
 */
function parseUrl(url) {
    const lastSlash = url.lastIndexOf('/');
    const lastSearchParam = url.lastIndexOf('?');
    const prefix = url.substring(0, lastSlash);
    const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';
    return [prefix + '/', suffix];
}
function isHTTPScheme(url) {
    return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;
}
const httpRouter = (url, loadOptions) => {
    if (typeof fetch === 'undefined' &&
        (loadOptions == null || loadOptions.fetchFunc == null)) {
        // `http` uses `fetch` or `node-fetch`, if one wants to use it in
        // an environment that is not the browser or node they have to setup a
        // global fetch polyfill.
        return null;
    }
    else {
        let isHTTP = true;
        if (Array.isArray(url)) {
            isHTTP = url.every(urlItem => isHTTPScheme(urlItem));
        }
        else {
            isHTTP = isHTTPScheme(url);
        }
        if (isHTTP) {
            return http(url, loadOptions);
        }
    }
    return null;
};
_router_registry__WEBPACK_IMPORTED_MODULE_1__.IORouterRegistry.registerSaveRouter(httpRouter);
_router_registry__WEBPACK_IMPORTED_MODULE_1__.IORouterRegistry.registerLoadRouter(httpRouter);
/**
 * Creates an IOHandler subtype that sends model artifacts to HTTP server.
 *
 * An HTTP request of the `multipart/form-data` mime type will be sent to the
 * `path` URL. The form data includes artifacts that represent the topology
 * and/or weights of the model. In the case of Keras-style `tf.Model`, two
 * blobs (files) exist in form-data:
 *   - A JSON file consisting of `modelTopology` and `weightsManifest`.
 *   - A binary weights file consisting of the concatenated weight values.
 * These files are in the same format as the one generated by
 * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).
 *
 * The following code snippet exemplifies the client-side code that uses this
 * function:
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save(tf.io.http(
 *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));
 * console.log(saveResult);
 * ```
 *
 * If the default `POST` method is to be used, without any custom parameters
 * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:
 *
 * ```js
 * const saveResult = await model.save('http://model-server:5000/upload');
 * ```
 *
 * The following GitHub Gist
 * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864
 * implements a server based on [flask](https://github.com/pallets/flask) that
 * can receive the request. Upon receiving the model artifacts via the requst,
 * this particular server reconsistutes instances of [Keras
 * Models](https://keras.io/models/model/) in memory.
 *
 *
 * @param path A URL path to the model.
 *   Can be an absolute HTTP path (e.g.,
 *   'http://localhost:8000/model-upload)') or a relative path (e.g.,
 *   './model-upload').
 * @param requestInit Request configurations to be used when sending
 *    HTTP request to server using `fetch`. It can contain fields such as
 *    `method`, `credentials`, `headers`, `mode`, etc. See
 *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request
 *    for more information. `requestInit` must not have a body, because the
 * body will be set by TensorFlow.js. File blobs representing the model
 * topology (filename: 'model.json') and the weights of the model (filename:
 * 'model.weights.bin') will be appended to the body. If `requestInit` has a
 * `body`, an Error will be thrown.
 * @param loadOptions Optional configuration for the loading. It includes the
 *   following fields:
 *   - weightPathPrefix Optional, this specifies the path prefix for weight
 *     files, by default this is calculated from the path param.
 *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,
 *     the `fetch` from node-fetch can be used here.
 *   - onProgress Optional, progress callback function, fired periodically
 *     before the load is completed.
 * @returns An instance of `IOHandler`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Loading',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
function http(path, loadOptions) {
    return new HTTPRequest(path, loadOptions);
}
/**
 * Deprecated. Use `tf.io.http`.
 * @param path
 * @param loadOptions
 */
function browserHTTPRequest(path, loadOptions) {
    return http(path, loadOptions);
}
//# sourceMappingURL=http.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deleteDatabase": () => (/* binding */ deleteDatabase),
/* harmony export */   "BrowserIndexedDB": () => (/* binding */ BrowserIndexedDB),
/* harmony export */   "indexedDBRouter": () => (/* binding */ indexedDBRouter),
/* harmony export */   "browserIndexedDB": () => (/* binding */ browserIndexedDB),
/* harmony export */   "BrowserIndexedDBManager": () => (/* binding */ BrowserIndexedDBManager)
/* harmony export */ });
/* harmony import */ var _flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flags */ "./node_modules/@tensorflow/tfjs-core/dist/flags.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




const DATABASE_NAME = 'tensorflowjs';
const DATABASE_VERSION = 1;
// Model data and ModelArtifactsInfo (metadata) are stored in two separate
// stores for efficient access of the list of stored models and their metadata.
// 1. The object store for model data: topology, weights and weight manifests.
const MODEL_STORE_NAME = 'models_store';
// 2. The object store for ModelArtifactsInfo, including meta-information such
//    as the type of topology (JSON vs binary), byte size of the topology, byte
//    size of the weights, etc.
const INFO_STORE_NAME = 'model_info_store';
/**
 * Delete the entire database for tensorflow.js, including the models store.
 */
async function deleteDatabase() {
    const idbFactory = getIndexedDBFactory();
    return new Promise((resolve, reject) => {
        const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);
        deleteRequest.onsuccess = () => resolve();
        deleteRequest.onerror = error => reject(error);
    });
}
function getIndexedDBFactory() {
    if (!(0,_environment__WEBPACK_IMPORTED_MODULE_3__.env)().getBool('IS_BROWSER')) {
        // TODO(cais): Add more info about what IOHandler subtypes are available.
        //   Maybe point to a doc page on the web and/or automatically determine
        //   the available IOHandlers and print them in the error message.
        throw new Error('Failed to obtain IndexedDB factory because the current environment' +
            'is not a web browser.');
    }
    // tslint:disable-next-line:no-any
    const theWindow = typeof window === 'undefined' ? self : window;
    const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||
        theWindow.webkitIndexedDB || theWindow.msIndexedDB ||
        theWindow.shimIndexedDB;
    if (factory == null) {
        throw new Error('The current browser does not appear to support IndexedDB.');
    }
    return factory;
}
function setUpDatabase(openRequest) {
    const db = openRequest.result;
    db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });
    db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });
}
/**
 * IOHandler subclass: Browser IndexedDB.
 *
 * See the doc string of `browserIndexedDB` for more details.
 */
class BrowserIndexedDB {
    constructor(modelPath) {
        this.indexedDB = getIndexedDBFactory();
        if (modelPath == null || !modelPath) {
            throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');
        }
        this.modelPath = modelPath;
    }
    async save(modelArtifacts) {
        // TODO(cais): Support saving GraphDef models.
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +
                'in binary formats yet.');
        }
        return this.databaseAction(this.modelPath, modelArtifacts);
    }
    async load() {
        return this.databaseAction(this.modelPath);
    }
    /**
     * Perform database action to put model artifacts into or read model artifacts
     * from IndexedDB object store.
     *
     * Whether the action is put or get depends on whether `modelArtifacts` is
     * specified. If it is specified, the action will be put; otherwise the action
     * will be get.
     *
     * @param modelPath A unique string path for the model.
     * @param modelArtifacts If specified, it will be the model artifacts to be
     *   stored in IndexedDB.
     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
     *   of `ModelArtifacts`, if the action is get.
     */
    databaseAction(modelPath, modelArtifacts) {
        return new Promise((resolve, reject) => {
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);
            openRequest.onsuccess = () => {
                const db = openRequest.result;
                if (modelArtifacts == null) {
                    // Read model out from object store.
                    const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');
                    const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                    const getRequest = modelStore.get(this.modelPath);
                    getRequest.onsuccess = () => {
                        if (getRequest.result == null) {
                            db.close();
                            return reject(new Error(`Cannot find model with path '${this.modelPath}' ` +
                                `in IndexedDB.`));
                        }
                        else {
                            resolve(getRequest.result.modelArtifacts);
                        }
                    };
                    getRequest.onerror = error => {
                        db.close();
                        return reject(getRequest.error);
                    };
                    modelTx.oncomplete = () => db.close();
                }
                else {
                    // Put model into object store.
                    const modelArtifactsInfo = (0,_io_utils__WEBPACK_IMPORTED_MODULE_1__.getModelArtifactsInfoForJSON)(modelArtifacts);
                    // First, put ModelArtifactsInfo into info store.
                    const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
                    let infoStore = infoTx.objectStore(INFO_STORE_NAME);
                    const putInfoRequest = infoStore.put({ modelPath: this.modelPath, modelArtifactsInfo });
                    let modelTx;
                    putInfoRequest.onsuccess = () => {
                        // Second, put model data into model store.
                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
                        const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                        const putModelRequest = modelStore.put({
                            modelPath: this.modelPath,
                            modelArtifacts,
                            modelArtifactsInfo
                        });
                        putModelRequest.onsuccess = () => resolve({ modelArtifactsInfo });
                        putModelRequest.onerror = error => {
                            // If the put-model request fails, roll back the info entry as
                            // well.
                            infoStore = infoTx.objectStore(INFO_STORE_NAME);
                            const deleteInfoRequest = infoStore.delete(this.modelPath);
                            deleteInfoRequest.onsuccess = () => {
                                db.close();
                                return reject(putModelRequest.error);
                            };
                            deleteInfoRequest.onerror = error => {
                                db.close();
                                return reject(putModelRequest.error);
                            };
                        };
                    };
                    putInfoRequest.onerror = error => {
                        db.close();
                        return reject(putInfoRequest.error);
                    };
                    infoTx.oncomplete = () => {
                        if (modelTx == null) {
                            db.close();
                        }
                        else {
                            modelTx.oncomplete = () => db.close();
                        }
                    };
                }
            };
            openRequest.onerror = error => reject(openRequest.error);
        });
    }
}
BrowserIndexedDB.URL_SCHEME = 'indexeddb://';
const indexedDBRouter = (url) => {
    if (!(0,_environment__WEBPACK_IMPORTED_MODULE_3__.env)().getBool('IS_BROWSER')) {
        return null;
    }
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {
            return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));
        }
        else {
            return null;
        }
    }
};
_router_registry__WEBPACK_IMPORTED_MODULE_2__.IORouterRegistry.registerSaveRouter(indexedDBRouter);
_router_registry__WEBPACK_IMPORTED_MODULE_2__.IORouterRegistry.registerLoadRouter(indexedDBRouter);
/**
 * Creates a browser IndexedDB IOHandler for saving and loading models.
 *
 * ```js
 * const model = tf.sequential();
 * model.add(
 *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));
 *
 * const saveResult = await model.save('indexeddb://MyModel'));
 * console.log(saveResult);
 * ```
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),
 *   which can be used with, e.g., `tf.Model.save`.
 */
function browserIndexedDB(modelPath) {
    return new BrowserIndexedDB(modelPath);
}
function maybeStripScheme(key) {
    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?
        key.slice(BrowserIndexedDB.URL_SCHEME.length) :
        key;
}
class BrowserIndexedDBManager {
    constructor() {
        this.indexedDB = getIndexedDBFactory();
    }
    async listModels() {
        return new Promise((resolve, reject) => {
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);
            openRequest.onsuccess = () => {
                const db = openRequest.result;
                const tx = db.transaction(INFO_STORE_NAME, 'readonly');
                const store = tx.objectStore(INFO_STORE_NAME);
                // tslint:disable:max-line-length
                // Need to cast `store` as `any` here because TypeScript's DOM
                // library does not have the `getAll()` method even though the
                // method is supported in the latest version of most mainstream
                // browsers:
                // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll
                // tslint:enable:max-line-length
                // tslint:disable-next-line:no-any
                const getAllInfoRequest = store.getAll();
                getAllInfoRequest.onsuccess = () => {
                    const out = {};
                    for (const item of getAllInfoRequest.result) {
                        out[item.modelPath] = item.modelArtifactsInfo;
                    }
                    resolve(out);
                };
                getAllInfoRequest.onerror = error => {
                    db.close();
                    return reject(getAllInfoRequest.error);
                };
                tx.oncomplete = () => db.close();
            };
            openRequest.onerror = error => reject(openRequest.error);
        });
    }
    async removeModel(path) {
        path = maybeStripScheme(path);
        return new Promise((resolve, reject) => {
            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);
            openRequest.onsuccess = () => {
                const db = openRequest.result;
                const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');
                const infoStore = infoTx.objectStore(INFO_STORE_NAME);
                const getInfoRequest = infoStore.get(path);
                let modelTx;
                getInfoRequest.onsuccess = () => {
                    if (getInfoRequest.result == null) {
                        db.close();
                        return reject(new Error(`Cannot find model with path '${path}' ` +
                            `in IndexedDB.`));
                    }
                    else {
                        // First, delete the entry in the info store.
                        const deleteInfoRequest = infoStore.delete(path);
                        const deleteModelData = () => {
                            // Second, delete the entry in the model store.
                            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');
                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);
                            const deleteModelRequest = modelStore.delete(path);
                            deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);
                            deleteModelRequest.onerror = error => reject(getInfoRequest.error);
                        };
                        // Proceed with deleting model data regardless of whether deletion
                        // of info data succeeds or not.
                        deleteInfoRequest.onsuccess = deleteModelData;
                        deleteInfoRequest.onerror = error => {
                            deleteModelData();
                            db.close();
                            return reject(getInfoRequest.error);
                        };
                    }
                };
                getInfoRequest.onerror = error => {
                    db.close();
                    return reject(getInfoRequest.error);
                };
                infoTx.oncomplete = () => {
                    if (modelTx == null) {
                        db.close();
                    }
                    else {
                        modelTx.oncomplete = () => db.close();
                    }
                };
            };
            openRequest.onerror = error => reject(openRequest.error);
        });
    }
}
//# sourceMappingURL=indexed_db.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/io.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/io.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "copyModel": () => (/* reexport safe */ _model_management__WEBPACK_IMPORTED_MODULE_8__.copyModel),
/* harmony export */   "listModels": () => (/* reexport safe */ _model_management__WEBPACK_IMPORTED_MODULE_8__.listModels),
/* harmony export */   "moveModel": () => (/* reexport safe */ _model_management__WEBPACK_IMPORTED_MODULE_8__.moveModel),
/* harmony export */   "removeModel": () => (/* reexport safe */ _model_management__WEBPACK_IMPORTED_MODULE_8__.removeModel),
/* harmony export */   "browserFiles": () => (/* reexport safe */ _browser_files__WEBPACK_IMPORTED_MODULE_2__.browserFiles),
/* harmony export */   "browserHTTPRequest": () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_3__.browserHTTPRequest),
/* harmony export */   "concatenateArrayBuffers": () => (/* reexport safe */ _io_utils__WEBPACK_IMPORTED_MODULE_4__.concatenateArrayBuffers),
/* harmony export */   "decodeWeights": () => (/* reexport safe */ _io_utils__WEBPACK_IMPORTED_MODULE_4__.decodeWeights),
/* harmony export */   "encodeWeights": () => (/* reexport safe */ _io_utils__WEBPACK_IMPORTED_MODULE_4__.encodeWeights),
/* harmony export */   "fromMemory": () => (/* reexport safe */ _passthrough__WEBPACK_IMPORTED_MODULE_5__.fromMemory),
/* harmony export */   "getLoadHandlers": () => (/* reexport safe */ _router_registry__WEBPACK_IMPORTED_MODULE_6__.getLoadHandlers),
/* harmony export */   "getModelArtifactsInfoForJSON": () => (/* reexport safe */ _io_utils__WEBPACK_IMPORTED_MODULE_4__.getModelArtifactsInfoForJSON),
/* harmony export */   "getSaveHandlers": () => (/* reexport safe */ _router_registry__WEBPACK_IMPORTED_MODULE_6__.getSaveHandlers),
/* harmony export */   "http": () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_3__.http),
/* harmony export */   "isHTTPScheme": () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_3__.isHTTPScheme),
/* harmony export */   "loadWeights": () => (/* reexport safe */ _weights_loader__WEBPACK_IMPORTED_MODULE_7__.loadWeights),
/* harmony export */   "registerLoadRouter": () => (/* reexport safe */ _router_registry__WEBPACK_IMPORTED_MODULE_6__.registerLoadRouter),
/* harmony export */   "registerSaveRouter": () => (/* reexport safe */ _router_registry__WEBPACK_IMPORTED_MODULE_6__.registerSaveRouter),
/* harmony export */   "weightsLoaderFactory": () => (/* reexport safe */ _weights_loader__WEBPACK_IMPORTED_MODULE_7__.weightsLoaderFactory),
/* harmony export */   "withSaveHandler": () => (/* reexport safe */ _passthrough__WEBPACK_IMPORTED_MODULE_5__.withSaveHandler)
/* harmony export */ });
/* harmony import */ var _indexed_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./indexed_db */ "./node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js");
/* harmony import */ var _local_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./local_storage */ "./node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js");
/* harmony import */ var _browser_files__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./browser_files */ "./node_modules/@tensorflow/tfjs-core/dist/io/browser_files.js");
/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./http */ "./node_modules/@tensorflow/tfjs-core/dist/io/http.js");
/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony import */ var _passthrough__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./passthrough */ "./node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js");
/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/* harmony import */ var _weights_loader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./weights_loader */ "./node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js");
/* harmony import */ var _model_management__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./model_management */ "./node_modules/@tensorflow/tfjs-core/dist/io/model_management.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Importing local_storage and indexed_db is necessary for the routers to be
// registered.










//# sourceMappingURL=io.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "encodeWeights": () => (/* binding */ encodeWeights),
/* harmony export */   "decodeWeights": () => (/* binding */ decodeWeights),
/* harmony export */   "concatenateTypedArrays": () => (/* binding */ concatenateTypedArrays),
/* harmony export */   "stringByteLength": () => (/* binding */ stringByteLength),
/* harmony export */   "arrayBufferToBase64String": () => (/* binding */ arrayBufferToBase64String),
/* harmony export */   "base64StringToArrayBuffer": () => (/* binding */ base64StringToArrayBuffer),
/* harmony export */   "concatenateArrayBuffers": () => (/* binding */ concatenateArrayBuffers),
/* harmony export */   "basename": () => (/* binding */ basename),
/* harmony export */   "getModelArtifactsInfoForJSON": () => (/* binding */ getModelArtifactsInfoForJSON),
/* harmony export */   "getFloat16Decoder": () => (/* binding */ getFloat16Decoder)
/* harmony export */ });
/* harmony import */ var _ops_complex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony import */ var _ops_tensor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/tensor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ "./node_modules/@tensorflow/tfjs-core/dist/io/types.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/** Number of bytes reserved for the length of the string. (32bit integer). */
const NUM_BYTES_STRING_LENGTH = 4;
/**
 * Encode a map from names to weight values as an ArrayBuffer, along with an
 * `Array` of `WeightsManifestEntry` as specification of the encoded weights.
 *
 * This function does not perform sharding.
 *
 * This function is the reverse of `decodeWeights`.
 *
 * @param tensors A map ("dict") from names to tensors.
 * @param group Group to which the weights belong (optional).
 * @returns A `Promise` of
 *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s
 *     concatenated.
 *   - An `Array` of `WeightManifestEntry`s, carrying information including
 *     tensor names, `dtype`s and shapes.
 * @throws Error: on unsupported tensor `dtype`.
 */
async function encodeWeights(tensors, group) {
    // TODO(adarob, cais): Support quantization.
    const specs = [];
    const dataPromises = [];
    const names = Array.isArray(tensors) ?
        tensors.map(tensor => tensor.name) :
        Object.keys(tensors);
    for (let i = 0; i < names.length; ++i) {
        const name = names[i];
        const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];
        if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&
            t.dtype !== 'string' && t.dtype !== 'complex64') {
            throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);
        }
        const spec = { name, shape: t.shape, dtype: t.dtype };
        if (t.dtype === 'string') {
            const utf8bytes = new Promise(async (resolve) => {
                const vals = await t.bytes();
                const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +
                    NUM_BYTES_STRING_LENGTH * vals.length;
                const bytes = new Uint8Array(totalNumBytes);
                let offset = 0;
                for (let i = 0; i < vals.length; i++) {
                    const val = vals[i];
                    const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);
                    bytes.set(bytesOfLength, offset);
                    offset += NUM_BYTES_STRING_LENGTH;
                    bytes.set(val, offset);
                    offset += val.length;
                }
                resolve(bytes);
            });
            dataPromises.push(utf8bytes);
        }
        else {
            dataPromises.push(t.data());
        }
        if (group != null) {
            spec.group = group;
        }
        specs.push(spec);
    }
    const tensorValues = await Promise.all(dataPromises);
    return { data: concatenateTypedArrays(tensorValues), specs };
}
/**
 * Decode flat ArrayBuffer as weights.
 *
 * This function does not handle sharding.
 *
 * This function is the reverse of `encodeWeights`.
 *
 * @param buffer A flat ArrayBuffer carrying the binary values of the tensors
 *   concatenated in the order specified in `specs`.
 * @param specs Specifications of the names, dtypes and shapes of the tensors
 *   whose value are encoded by `buffer`.
 * @return A map from tensor name to tensor value, with the names corresponding
 *   to names in `specs`.
 * @throws Error, if any of the tensors has unsupported dtype.
 */
function decodeWeights(buffer, specs) {
    // TODO(adarob, cais): Support quantization.
    const out = {};
    let float16Decode;
    let offset = 0;
    for (const spec of specs) {
        const name = spec.name;
        const dtype = spec.dtype;
        const shape = spec.shape;
        const size = (0,_util__WEBPACK_IMPORTED_MODULE_1__.sizeFromShape)(shape);
        let values;
        if ('quantization' in spec) {
            const quantization = spec.quantization;
            if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
                if (!('min' in quantization && 'scale' in quantization)) {
                    throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` +
                        `doesn't have corresponding metadata min and scale.`);
                }
            }
            else if (quantization.dtype === 'float16') {
                if (dtype !== 'float32') {
                    throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` +
                        `which only supports weights of type float32 not ${dtype}.`);
                }
            }
            else {
                throw new Error(`Weight ${spec.name} has unknown ` +
                    `quantization dtype ${quantization.dtype}. ` +
                    `Supported quantization dtypes are: ` +
                    `'uint8', 'uint16', and 'float16'.`);
            }
            const quantizationSizeFactor = _types__WEBPACK_IMPORTED_MODULE_0__.DTYPE_VALUE_SIZE_MAP[quantization.dtype];
            const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);
            const quantizedArray = (quantization.dtype === 'uint8') ?
                new Uint8Array(byteBuffer) :
                new Uint16Array(byteBuffer);
            if (dtype === 'float32') {
                if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {
                    values = new Float32Array(quantizedArray.length);
                    for (let i = 0; i < quantizedArray.length; i++) {
                        const v = quantizedArray[i];
                        values[i] = v * quantization.scale + quantization.min;
                    }
                }
                else if (quantization.dtype === 'float16') {
                    if (float16Decode === undefined) {
                        float16Decode = getFloat16Decoder();
                    }
                    values = float16Decode(quantizedArray);
                }
                else {
                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +
                        `for weight type float32.`);
                }
            }
            else if (dtype === 'int32') {
                if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {
                    throw new Error(`Unsupported quantization type ${quantization.dtype} ` +
                        `for weight type int32.`);
                }
                values = new Int32Array(quantizedArray.length);
                for (let i = 0; i < quantizedArray.length; i++) {
                    const v = quantizedArray[i];
                    values[i] = Math.round(v * quantization.scale + quantization.min);
                }
            }
            else {
                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
            }
            offset += size * quantizationSizeFactor;
        }
        else if (dtype === 'string') {
            const size = (0,_util__WEBPACK_IMPORTED_MODULE_1__.sizeFromShape)(spec.shape);
            values = [];
            for (let i = 0; i < size; i++) {
                const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];
                offset += NUM_BYTES_STRING_LENGTH;
                const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));
                values.push(bytes);
                offset += byteLength;
            }
        }
        else {
            const dtypeFactor = _types__WEBPACK_IMPORTED_MODULE_0__.DTYPE_VALUE_SIZE_MAP[dtype];
            const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);
            if (dtype === 'float32') {
                values = new Float32Array(byteBuffer);
            }
            else if (dtype === 'int32') {
                values = new Int32Array(byteBuffer);
            }
            else if (dtype === 'bool') {
                values = new Uint8Array(byteBuffer);
            }
            else if (dtype === 'complex64') {
                values = new Float32Array(byteBuffer);
                const real = new Float32Array(values.length / 2);
                const image = new Float32Array(values.length / 2);
                for (let i = 0; i < real.length; i++) {
                    real[i] = values[i * 2];
                    image[i] = values[i * 2 + 1];
                }
                const realTensor = (0,_ops_tensor__WEBPACK_IMPORTED_MODULE_2__.tensor)(real, shape, 'float32');
                const imageTensor = (0,_ops_tensor__WEBPACK_IMPORTED_MODULE_2__.tensor)(image, shape, 'float32');
                out[name] = (0,_ops_complex__WEBPACK_IMPORTED_MODULE_3__.complex)(realTensor, imageTensor);
                realTensor.dispose();
                imageTensor.dispose();
            }
            else {
                throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);
            }
            offset += size * dtypeFactor;
        }
        if (dtype !== 'complex64') {
            out[name] = (0,_ops_tensor__WEBPACK_IMPORTED_MODULE_2__.tensor)(values, shape, dtype);
        }
    }
    return out;
}
/**
 * Concatenate TypedArrays into an ArrayBuffer.
 */
function concatenateTypedArrays(xs) {
    // TODO(adarob, cais): Support quantization.
    if (xs === null) {
        throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);
    }
    let totalByteLength = 0;
    // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'
    // can have a different byte length from that of the `TypedArray` itself,
    // for example, when the `TypedArray` is created from an offset in an
    // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match
    // the `TypedArray` in byte length. If an element of `xs` does not show
    // this property, a new `TypedArray` that satisfy this property will be
    // constructed and pushed into `normalizedXs`.
    const normalizedXs = [];
    xs.forEach((x) => {
        totalByteLength += x.byteLength;
        // tslint:disable:no-any
        normalizedXs.push(x.byteLength === x.buffer.byteLength ? x :
            new x.constructor(x));
        if (!(x instanceof Float32Array || x instanceof Int32Array ||
            x instanceof Uint8Array)) {
            throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);
        }
        // tslint:enable:no-any
    });
    const y = new Uint8Array(totalByteLength);
    let offset = 0;
    normalizedXs.forEach((x) => {
        y.set(new Uint8Array(x.buffer), offset);
        offset += x.byteLength;
    });
    return y.buffer;
}
// Use Buffer on Node.js instead of Blob/atob/btoa
const useNodeBuffer = typeof Buffer !== 'undefined' &&
    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||
        typeof btoa === 'undefined');
/**
 * Calculate the byte length of a JavaScript string.
 *
 * Note that a JavaScript string can contain wide characters, therefore the
 * length of the string is not necessarily equal to the byte length.
 *
 * @param str Input string.
 * @returns Byte length.
 */
function stringByteLength(str) {
    if (useNodeBuffer) {
        return Buffer.byteLength(str);
    }
    return new Blob([str]).size;
}
/**
 * Encode an ArrayBuffer as a base64 encoded string.
 *
 * @param buffer `ArrayBuffer` to be converted.
 * @returns A string that base64-encodes `buffer`.
 */
function arrayBufferToBase64String(buffer) {
    if (useNodeBuffer) {
        return Buffer.from(buffer).toString('base64');
    }
    const buf = new Uint8Array(buffer);
    let s = '';
    for (let i = 0, l = buf.length; i < l; i++) {
        s += String.fromCharCode(buf[i]);
    }
    return btoa(s);
}
/**
 * Decode a base64 string as an ArrayBuffer.
 *
 * @param str Base64 string.
 * @returns Decoded `ArrayBuffer`.
 */
function base64StringToArrayBuffer(str) {
    if (useNodeBuffer) {
        const buf = Buffer.from(str, 'base64');
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    }
    const s = atob(str);
    const buffer = new Uint8Array(s.length);
    for (let i = 0; i < s.length; ++i) {
        buffer.set([s.charCodeAt(i)], i);
    }
    return buffer.buffer;
}
/**
 * Concatenate a number of ArrayBuffers into one.
 *
 * @param buffers A number of array buffers to concatenate.
 * @returns Result of concatenating `buffers` in order.
 */
function concatenateArrayBuffers(buffers) {
    if (buffers.length === 1) {
        return buffers[0];
    }
    let totalByteLength = 0;
    buffers.forEach((buffer) => {
        totalByteLength += buffer.byteLength;
    });
    const temp = new Uint8Array(totalByteLength);
    let offset = 0;
    buffers.forEach((buffer) => {
        temp.set(new Uint8Array(buffer), offset);
        offset += buffer.byteLength;
    });
    return temp.buffer;
}
/**
 * Get the basename of a path.
 *
 * Behaves in a way analogous to Linux's basename command.
 *
 * @param path
 */
function basename(path) {
    const SEPARATOR = '/';
    path = path.trim();
    while (path.endsWith(SEPARATOR)) {
        path = path.slice(0, path.length - 1);
    }
    const items = path.split(SEPARATOR);
    return items[items.length - 1];
}
/**
 * Populate ModelArtifactsInfo fields for a model with JSON topology.
 * @param modelArtifacts
 * @returns A ModelArtifactsInfo object.
 */
function getModelArtifactsInfoForJSON(modelArtifacts) {
    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
        throw new Error('Expected JSON model topology, received ArrayBuffer.');
    }
    return {
        dateSaved: new Date(),
        modelTopologyType: 'JSON',
        modelTopologyBytes: modelArtifacts.modelTopology == null ?
            0 :
            stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),
        weightSpecsBytes: modelArtifacts.weightSpecs == null ?
            0 :
            stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),
        weightDataBytes: modelArtifacts.weightData == null ?
            0 :
            modelArtifacts.weightData.byteLength,
    };
}
/**
 * Computes mantisa table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 2048 mantissa lookup values.
 */
function computeFloat16MantisaTable() {
    const convertMantissa = (i) => {
        let m = i << 13;
        let e = 0;
        while ((m & 0x00800000) === 0) {
            e -= 0x00800000;
            m <<= 1;
        }
        m &= ~0x00800000;
        e += 0x38800000;
        return m | e;
    };
    const mantisaTable = new Uint32Array(2048);
    mantisaTable[0] = 0;
    for (let i = 1; i < 1024; i++) {
        mantisaTable[i] = convertMantissa(i);
    }
    for (let i = 1024; i < 2048; i++) {
        mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);
    }
    return mantisaTable;
}
/**
 * Computes exponent table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 64 exponent lookup values.
 */
function computeFloat16ExponentTable() {
    const exponentTable = new Uint32Array(64);
    exponentTable[0] = 0;
    exponentTable[31] = 0x47800000;
    exponentTable[32] = 0x80000000;
    exponentTable[63] = 0xc7800000;
    for (let i = 1; i < 31; i++) {
        exponentTable[i] = i << 23;
    }
    for (let i = 33; i < 63; i++) {
        exponentTable[i] = 0x80000000 + ((i - 32) << 23);
    }
    return exponentTable;
}
/**
 * Computes offset table for casting Float16 to Float32
 * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
 *
 * @returns Uint32Array, 6d offset values.
 */
function computeFloat16OffsetTable() {
    const offsetTable = new Uint32Array(64);
    for (let i = 0; i < 64; i++) {
        offsetTable[i] = 1024;
    }
    offsetTable[0] = offsetTable[32] = 0;
    return offsetTable;
}
/**
 * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values
 * to a Float32Array.
 *
 * @returns Function (buffer: Uint16Array) => Float32Array which decodes
 *          the Uint16Array of Float16 bytes to a Float32Array.
 */
function getFloat16Decoder() {
    // Algorithm is based off of
    // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
    // Cache lookup tables
    const mantisaTable = computeFloat16MantisaTable();
    const exponentTable = computeFloat16ExponentTable();
    const offsetTable = computeFloat16OffsetTable();
    return (quantizedArray) => {
        const buffer = new ArrayBuffer(4 * quantizedArray.length);
        const bufferUint32View = new Uint32Array(buffer);
        for (let index = 0; index < quantizedArray.length; index++) {
            const float16Bits = quantizedArray[index];
            const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +
                exponentTable[float16Bits >> 10];
            bufferUint32View[index] = float32Bits;
        }
        return new Float32Array(buffer);
    };
}
//# sourceMappingURL=io_utils.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "purgeLocalStorageArtifacts": () => (/* binding */ purgeLocalStorageArtifacts),
/* harmony export */   "BrowserLocalStorage": () => (/* binding */ BrowserLocalStorage),
/* harmony export */   "localStorageRouter": () => (/* binding */ localStorageRouter),
/* harmony export */   "browserLocalStorage": () => (/* binding */ browserLocalStorage),
/* harmony export */   "BrowserLocalStorageManager": () => (/* binding */ BrowserLocalStorageManager)
/* harmony export */ });
/* harmony import */ var _flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flags */ "./node_modules/@tensorflow/tfjs-core/dist/flags.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





const PATH_SEPARATOR = '/';
const PATH_PREFIX = 'tensorflowjs_models';
const INFO_SUFFIX = 'info';
const MODEL_TOPOLOGY_SUFFIX = 'model_topology';
const WEIGHT_SPECS_SUFFIX = 'weight_specs';
const WEIGHT_DATA_SUFFIX = 'weight_data';
const MODEL_METADATA_SUFFIX = 'model_metadata';
/**
 * Purge all tensorflow.js-saved model artifacts from local storage.
 *
 * @returns Paths of the models purged.
 */
function purgeLocalStorageArtifacts() {
    if (!(0,_environment__WEBPACK_IMPORTED_MODULE_3__.env)().getBool('IS_BROWSER') || typeof window === 'undefined' ||
        typeof window.localStorage === 'undefined') {
        throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' +
            'unavailable in the current environment.');
    }
    const LS = window.localStorage;
    const purgedModelPaths = [];
    for (let i = 0; i < LS.length; ++i) {
        const key = LS.key(i);
        const prefix = PATH_PREFIX + PATH_SEPARATOR;
        if (key.startsWith(prefix) && key.length > prefix.length) {
            LS.removeItem(key);
            const modelName = getModelPathFromKey(key);
            if (purgedModelPaths.indexOf(modelName) === -1) {
                purgedModelPaths.push(modelName);
            }
        }
    }
    return purgedModelPaths;
}
function getModelKeys(path) {
    return {
        info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),
        topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),
        weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),
        weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),
        modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)
    };
}
/**
 * Get model path from a local-storage key.
 *
 * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'
 *
 * @param key
 */
function getModelPathFromKey(key) {
    const items = key.split(PATH_SEPARATOR);
    if (items.length < 3) {
        throw new Error(`Invalid key format: ${key}`);
    }
    return items.slice(1, items.length - 1).join(PATH_SEPARATOR);
}
function maybeStripScheme(key) {
    return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?
        key.slice(BrowserLocalStorage.URL_SCHEME.length) :
        key;
}
/**
 * IOHandler subclass: Browser Local Storage.
 *
 * See the doc string to `browserLocalStorage` for more details.
 */
class BrowserLocalStorage {
    constructor(modelPath) {
        if (!(0,_environment__WEBPACK_IMPORTED_MODULE_3__.env)().getBool('IS_BROWSER') || typeof window === 'undefined' ||
            typeof window.localStorage === 'undefined') {
            // TODO(cais): Add more info about what IOHandler subtypes are
            // available.
            //   Maybe point to a doc page on the web and/or automatically determine
            //   the available IOHandlers and print them in the error message.
            throw new Error('The current environment does not support local storage.');
        }
        this.LS = window.localStorage;
        if (modelPath == null || !modelPath) {
            throw new Error('For local storage, modelPath must not be null, undefined or empty.');
        }
        this.modelPath = modelPath;
        this.keys = getModelKeys(this.modelPath);
    }
    /**
     * Save model artifacts to browser local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @param modelArtifacts The model artifacts to be stored.
     * @returns An instance of SaveResult.
     */
    async save(modelArtifacts) {
        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {
            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +
                'in binary formats yet.');
        }
        else {
            const topology = JSON.stringify(modelArtifacts.modelTopology);
            const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);
            const modelArtifactsInfo = (0,_io_utils__WEBPACK_IMPORTED_MODULE_1__.getModelArtifactsInfoForJSON)(modelArtifacts);
            try {
                this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));
                this.LS.setItem(this.keys.topology, topology);
                this.LS.setItem(this.keys.weightSpecs, weightSpecs);
                this.LS.setItem(this.keys.weightData, (0,_io_utils__WEBPACK_IMPORTED_MODULE_1__.arrayBufferToBase64String)(modelArtifacts.weightData));
                const result = {
                    format: modelArtifacts.format,
                    generatedBy: modelArtifacts.generatedBy,
                    convertedBy: modelArtifacts.convertedBy
                };
                if (modelArtifacts.signature != null) {
                    result.signature = modelArtifacts.signature;
                }
                if (modelArtifacts.userDefinedMetadata != null) {
                    result.userDefinedMetadata = modelArtifacts.userDefinedMetadata;
                }
                if (modelArtifacts.modelInitializer != null) {
                    result.modelInitializer = modelArtifacts.modelInitializer;
                }
                this.LS.setItem(this.keys.modelMetadata, JSON.stringify(result));
                return { modelArtifactsInfo };
            }
            catch (err) {
                // If saving failed, clean up all items saved so far.
                this.LS.removeItem(this.keys.info);
                this.LS.removeItem(this.keys.topology);
                this.LS.removeItem(this.keys.weightSpecs);
                this.LS.removeItem(this.keys.weightData);
                this.LS.removeItem(this.keys.modelMetadata);
                throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` +
                    `size quota being exceeded is a possible cause of this failure: ` +
                    `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +
                    `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +
                    `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);
            }
        }
    }
    /**
     * Load a model from local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @returns The loaded model (if loading succeeds).
     */
    async load() {
        const info = JSON.parse(this.LS.getItem(this.keys.info));
        if (info == null) {
            throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
        }
        if (info.modelTopologyType !== 'JSON') {
            throw new Error('BrowserLocalStorage does not support loading non-JSON model ' +
                'topology yet.');
        }
        const out = {};
        // Load topology.
        const topology = JSON.parse(this.LS.getItem(this.keys.topology));
        if (topology == null) {
            throw new Error(`In local storage, the topology of model '${this.modelPath}' ` +
                `is missing.`);
        }
        out.modelTopology = topology;
        // Load weight specs.
        const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
        if (weightSpecs == null) {
            throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` +
                `are missing.`);
        }
        out.weightSpecs = weightSpecs;
        // Load meta-data fields.
        const metadataString = this.LS.getItem(this.keys.modelMetadata);
        if (metadataString != null) {
            const metadata = JSON.parse(metadataString);
            out.format = metadata['format'];
            out.generatedBy = metadata['generatedBy'];
            out.convertedBy = metadata['convertedBy'];
            if (metadata['signature'] != null) {
                out.signature = metadata['signature'];
            }
            if (metadata['userDefinedMetadata'] != null) {
                out.userDefinedMetadata = metadata['userDefinedMetadata'];
            }
            if (metadata['modelInitializer'] != null) {
                out.modelInitializer = metadata['modelInitializer'];
            }
        }
        // Load weight data.
        const weightDataBase64 = this.LS.getItem(this.keys.weightData);
        if (weightDataBase64 == null) {
            throw new Error(`In local storage, the binary weight values of model ` +
                `'${this.modelPath}' are missing.`);
        }
        out.weightData = (0,_io_utils__WEBPACK_IMPORTED_MODULE_1__.base64StringToArrayBuffer)(weightDataBase64);
        return out;
    }
}
BrowserLocalStorage.URL_SCHEME = 'localstorage://';
const localStorageRouter = (url) => {
    if (!(0,_environment__WEBPACK_IMPORTED_MODULE_3__.env)().getBool('IS_BROWSER')) {
        return null;
    }
    else {
        if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {
            return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));
        }
        else {
            return null;
        }
    }
};
_router_registry__WEBPACK_IMPORTED_MODULE_2__.IORouterRegistry.registerSaveRouter(localStorageRouter);
_router_registry__WEBPACK_IMPORTED_MODULE_2__.IORouterRegistry.registerLoadRouter(localStorageRouter);
/**
 * Factory function for local storage IOHandler.
 *
 * This `IOHandler` supports both `save` and `load`.
 *
 * For each model's saved artifacts, four items are saved to local storage.
 *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the
 *     model, such as date saved, type of the topology, size in bytes, etc.
 *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-
 *     style models, this is a stringized JSON.
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the
 *     model, can be used to decode the saved binary weight values (see
 *     item below).
 *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary
 *     weight values, stored as a base64-encoded string.
 *
 * Saving may throw an `Error` if the total size of the artifacts exceed the
 * browser-specific quota.
 *
 * @param modelPath A unique identifier for the model to be saved. Must be a
 *   non-empty string.
 * @returns An instance of `IOHandler`, which can be used with, e.g.,
 *   `tf.Model.save`.
 */
function browserLocalStorage(modelPath) {
    return new BrowserLocalStorage(modelPath);
}
class BrowserLocalStorageManager {
    constructor() {
        (0,_util__WEBPACK_IMPORTED_MODULE_4__.assert)((0,_environment__WEBPACK_IMPORTED_MODULE_3__.env)().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');
        (0,_util__WEBPACK_IMPORTED_MODULE_4__.assert)(typeof window === 'undefined' ||
            typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');
        this.LS = window.localStorage;
    }
    async listModels() {
        const out = {};
        const prefix = PATH_PREFIX + PATH_SEPARATOR;
        const suffix = PATH_SEPARATOR + INFO_SUFFIX;
        for (let i = 0; i < this.LS.length; ++i) {
            const key = this.LS.key(i);
            if (key.startsWith(prefix) && key.endsWith(suffix)) {
                const modelPath = getModelPathFromKey(key);
                out[modelPath] = JSON.parse(this.LS.getItem(key));
            }
        }
        return out;
    }
    async removeModel(path) {
        path = maybeStripScheme(path);
        const keys = getModelKeys(path);
        if (this.LS.getItem(keys.info) == null) {
            throw new Error(`Cannot find model at path '${path}'`);
        }
        const info = JSON.parse(this.LS.getItem(keys.info));
        this.LS.removeItem(keys.info);
        this.LS.removeItem(keys.topology);
        this.LS.removeItem(keys.weightSpecs);
        this.LS.removeItem(keys.weightData);
        return info;
    }
}
//# sourceMappingURL=local_storage.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/model_management.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/model_management.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModelStoreManagerRegistry": () => (/* binding */ ModelStoreManagerRegistry),
/* harmony export */   "moveModel": () => (/* binding */ moveModel),
/* harmony export */   "copyModel": () => (/* binding */ copyModel),
/* harmony export */   "removeModel": () => (/* binding */ removeModel),
/* harmony export */   "listModels": () => (/* binding */ listModels)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _router_registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./router_registry */ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Classes and functions for model management across multiple storage mediums.
 *
 * Supported client actions:
 * - Listing models on all registered storage mediums.
 * - Remove model by URL from any registered storage mediums, by using URL
 *   string.
 * - Moving or copying model from one path to another in the same medium or from
 *   one medium to another, by using URL strings.
 */


const URL_SCHEME_SUFFIX = '://';
class ModelStoreManagerRegistry {
    constructor() {
        this.managers = {};
    }
    static getInstance() {
        if (ModelStoreManagerRegistry.instance == null) {
            ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();
        }
        return ModelStoreManagerRegistry.instance;
    }
    /**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */
    static registerManager(scheme, manager) {
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(scheme != null, () => 'scheme must not be undefined or null.');
        if (scheme.endsWith(URL_SCHEME_SUFFIX)) {
            scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));
        }
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(scheme.length > 0, () => 'scheme must not be an empty string.');
        const registry = ModelStoreManagerRegistry.getInstance();
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);
        registry.managers[scheme] = manager;
    }
    static getManager(scheme) {
        const manager = this.getInstance().managers[scheme];
        if (manager == null) {
            throw new Error(`Cannot find model manager for scheme '${scheme}'`);
        }
        return manager;
    }
    static getSchemes() {
        return Object.keys(this.getInstance().managers);
    }
}
/**
 * Helper method for parsing a URL string into a scheme and a path.
 *
 * @param url E.g., 'localstorage://my-model'
 * @returns A dictionary with two fields: scheme and path.
 *   Scheme: e.g., 'localstorage' in the example above.
 *   Path: e.g., 'my-model' in the example above.
 */
function parseURL(url) {
    if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {
        throw new Error(`The url string provided does not contain a scheme. ` +
            `Supported schemes are: ` +
            `${ModelStoreManagerRegistry.getSchemes().join(',')}`);
    }
    return {
        scheme: url.split(URL_SCHEME_SUFFIX)[0],
        path: url.split(URL_SCHEME_SUFFIX)[1],
    };
}
async function cloneModelInternal(sourceURL, destURL, deleteSource = false) {
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);
    const loadHandlers = _router_registry__WEBPACK_IMPORTED_MODULE_0__.IORouterRegistry.getLoadHandlers(sourceURL);
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +
        `load handlers for source URL ${sourceURL}.`);
    const loadHandler = loadHandlers[0];
    const saveHandlers = _router_registry__WEBPACK_IMPORTED_MODULE_0__.IORouterRegistry.getSaveHandlers(destURL);
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` +
        `URL ${destURL}.`);
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` +
        `save handlers for destination URL ${destURL}.`);
    const saveHandler = saveHandlers[0];
    const sourceScheme = parseURL(sourceURL).scheme;
    const sourcePath = parseURL(sourceURL).path;
    const sameMedium = sourceScheme === parseURL(sourceURL).scheme;
    const modelArtifacts = await loadHandler.load();
    // If moving within the same storage medium, remove the old model as soon as
    // the loading is done. Without doing this, it is possible that the combined
    // size of the two models will cause the cloning to fail.
    if (deleteSource && sameMedium) {
        await ModelStoreManagerRegistry.getManager(sourceScheme)
            .removeModel(sourcePath);
    }
    const saveResult = await saveHandler.save(modelArtifacts);
    // If moving between mediums, the deletion is done after the save succeeds.
    // This guards against the case in which saving to the destination medium
    // fails.
    if (deleteSource && !sameMedium) {
        await ModelStoreManagerRegistry.getManager(sourceScheme)
            .removeModel(sourcePath);
    }
    return saveResult.modelArtifactsInfo;
}
/**
 * List all models stored in registered storage mediums.
 *
 * For a web browser environment, the registered mediums are Local Storage and
 * IndexedDB.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @returns A `Promise` of a dictionary mapping URLs of existing models to
 * their model artifacts info. URLs include medium-specific schemes, e.g.,
 *   'indexeddb://my/model/1'. Model artifacts info include type of the
 * model's topology, byte sizes of the topology, weights, etc.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
async function listModels() {
    const schemes = ModelStoreManagerRegistry.getSchemes();
    const out = {};
    for (const scheme of schemes) {
        const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();
        for (const path in schemeOut) {
            const url = scheme + URL_SCHEME_SUFFIX + path;
            out[url] = schemeOut[path];
        }
    }
    return out;
}
/**
 * Remove a model specified by URL from a reigstered storage medium.
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Delete the model.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 * ```
 *
 * @param url A URL to a stored model, with a scheme prefix, e.g.,
 *   'localstorage://my-model-1', 'indexeddb://my/model/2'.
 * @returns ModelArtifactsInfo of the deleted model (if and only if deletion
 *   is successful).
 * @throws Error if deletion fails, e.g., if no model exists at `path`.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
async function removeModel(url) {
    const schemeAndPath = parseURL(url);
    const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);
    return manager.removeModel(schemeAndPath.path);
}
/**
 * Copy a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Copying within a storage medium, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Copying between two storage mediums, e.g.,
 *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Copy the model, from Local Storage to IndexedDB.
 * await tf.io.copyModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove both models.
 * await tf.io.removeModel('localstorage://demo/management/model1');
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of copying.
 * @param destURL Destination URL of copying.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
async function copyModel(sourceURL, destURL) {
    const deleteSource = false;
    return cloneModelInternal(sourceURL, destURL, deleteSource);
}
/**
 * Move a model from one URL to another.
 *
 * This function supports:
 *
 * 1. Moving within a storage medium, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`
 * 2. Moving between two storage mediums, e.g.,
 *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`
 *
 * ```js
 * // First create and save a model.
 * const model = tf.sequential();
 * model.add(tf.layers.dense(
 *     {units: 1, inputShape: [10], activation: 'sigmoid'}));
 * await model.save('localstorage://demo/management/model1');
 *
 * // Then list existing models.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Move the model, from Local Storage to IndexedDB.
 * await tf.io.moveModel(
 *     'localstorage://demo/management/model1',
 *     'indexeddb://demo/management/model1');
 *
 * // List models again.
 * console.log(JSON.stringify(await tf.io.listModels()));
 *
 * // Remove the moved model.
 * await tf.io.removeModel('indexeddb://demo/management/model1');
 * ```
 *
 * @param sourceURL Source URL of moving.
 * @param destURL Destination URL of moving.
 * @returns ModelArtifactsInfo of the copied model (if and only if copying
 *   is successful).
 * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or
 *   if `oldPath` and `newPath` are identical.
 *
 * @doc {
 *   heading: 'Models',
 *   subheading: 'Management',
 *   namespace: 'io',
 *   ignoreCI: true
 * }
 */
async function moveModel(sourceURL, destURL) {
    const deleteSource = true;
    return cloneModelInternal(sourceURL, destURL, deleteSource);
}

//# sourceMappingURL=model_management.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/passthrough.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromMemory": () => (/* binding */ fromMemory),
/* harmony export */   "withSaveHandler": () => (/* binding */ withSaveHandler)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PassthroughLoader {
    constructor(modelArtifacts) {
        this.modelArtifacts = modelArtifacts;
    }
    async load() {
        return this.modelArtifacts;
    }
}
class PassthroughSaver {
    constructor(saveHandler) {
        this.saveHandler = saveHandler;
    }
    async save(modelArtifacts) {
        return this.saveHandler(modelArtifacts);
    }
}
/**
 * Creates an IOHandler that loads model artifacts from memory.
 *
 * When used in conjunction with `tf.loadLayersModel`, an instance of
 * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.
 *
 * ```js
 * const model = await tf.loadLayersModel(tf.io.fromMemory(
 *     modelTopology, weightSpecs, weightData));
 * ```
 *
 * @param modelArtifacts a object containing model topology (i.e., parsed from
 *   the JSON format).
 * @param weightSpecs An array of `WeightsManifestEntry` objects describing the
 *   names, shapes, types, and quantization of the weight data.
 * @param weightData A single `ArrayBuffer` containing the weight data,
 *   concatenated in the order described by the weightSpecs.
 * @param trainingConfig Model training configuration. Optional.
 *
 * @returns A passthrough `IOHandler` that simply loads the provided data.
 */
function fromMemory(modelArtifacts, weightSpecs, weightData, trainingConfig) {
    if (arguments.length === 1) {
        const isModelArtifacts = modelArtifacts.modelTopology != null ||
            modelArtifacts.weightSpecs != null;
        if (isModelArtifacts) {
            return new PassthroughLoader(modelArtifacts);
        }
        else {
            // Legacy support: with only modelTopology.
            // TODO(cais): Remove this deprecated API.
            console.warn('Please call tf.io.fromMemory() with only one argument. ' +
                'The argument should be of type ModelArtifacts. ' +
                'The multi-argument signature of tf.io.fromMemory() has been ' +
                'deprecated and will be removed in a future release.');
            return new PassthroughLoader({ modelTopology: modelArtifacts });
        }
    }
    else {
        // Legacy support.
        // TODO(cais): Remove this deprecated API.
        console.warn('Please call tf.io.fromMemory() with only one argument. ' +
            'The argument should be of type ModelArtifacts. ' +
            'The multi-argument signature of tf.io.fromMemory() has been ' +
            'deprecated and will be removed in a future release.');
        return new PassthroughLoader({
            modelTopology: modelArtifacts,
            weightSpecs,
            weightData,
            trainingConfig
        });
    }
}
/**
 * Creates an IOHandler that passes saved model artifacts to a callback.
 *
 * ```js
 * function handleSave(artifacts) {
 *   // ... do something with the artifacts ...
 *   return {modelArtifactsInfo: {...}, ...};
 * }
 *
 * const saveResult = model.save(tf.io.withSaveHandler(handleSave));
 * ```
 *
 * @param saveHandler A function that accepts a `ModelArtifacts` and returns a
 *     `SaveResult`.
 */
function withSaveHandler(saveHandler) {
    return new PassthroughSaver(saveHandler);
}
//# sourceMappingURL=passthrough.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/progress.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/progress.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "monitorPromisesProgress": () => (/* binding */ monitorPromisesProgress)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Monitor Promise.all progress, fire onProgress callback function.
 *
 * @param promises Promise list going to be monitored
 * @param onProgress Callback function. Fired when a promise resolved.
 * @param startFraction Optional fraction start. Default to 0.
 * @param endFraction Optional fraction end. Default to 1.
 */
function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {
    checkPromises(promises);
    startFraction = startFraction == null ? 0 : startFraction;
    endFraction = endFraction == null ? 1 : endFraction;
    checkFraction(startFraction, endFraction);
    let resolvedPromise = 0;
    const registerMonitor = (promise) => {
        promise.then(value => {
            const fraction = startFraction +
                ++resolvedPromise / promises.length * (endFraction - startFraction);
            // pass fraction as parameter to callback function.
            onProgress(fraction);
            return value;
        });
        return promise;
    };
    function checkPromises(promises) {
        (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');
    }
    function checkFraction(startFraction, endFraction) {
        (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +
            `got startFraction ${startFraction}`);
        (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` +
            `got endFraction ${endFraction}`);
        (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` +
            `got startFraction ${startFraction} and endFraction ` +
            `${endFraction}`);
    }
    return Promise.all(promises.map(registerMonitor));
}
//# sourceMappingURL=progress.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/router_registry.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IORouterRegistry": () => (/* binding */ IORouterRegistry),
/* harmony export */   "registerSaveRouter": () => (/* binding */ registerSaveRouter),
/* harmony export */   "registerLoadRouter": () => (/* binding */ registerLoadRouter),
/* harmony export */   "getSaveHandlers": () => (/* binding */ getSaveHandlers),
/* harmony export */   "getLoadHandlers": () => (/* binding */ getLoadHandlers)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class IORouterRegistry {
    constructor() {
        this.saveRouters = [];
        this.loadRouters = [];
    }
    static getInstance() {
        if (IORouterRegistry.instance == null) {
            IORouterRegistry.instance = new IORouterRegistry();
        }
        return IORouterRegistry.instance;
    }
    /**
     * Register a save-handler router.
     *
     * @param saveRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `save` method defined or `null`.
     */
    static registerSaveRouter(saveRouter) {
        IORouterRegistry.getInstance().saveRouters.push(saveRouter);
    }
    /**
     * Register a load-handler router.
     *
     * @param loadRouter A function that maps a URL-like string onto an instance
     * of `IOHandler` with the `load` method defined or `null`.
     */
    static registerLoadRouter(loadRouter) {
        IORouterRegistry.getInstance().loadRouters.push(loadRouter);
    }
    /**
     * Look up IOHandler for saving, given a URL-like string.
     *
     * @param url
     * @returns If only one match is found, an instance of IOHandler with the
     * `save` method defined. If no match is found, `null`.
     * @throws Error, if more than one match is found.
     */
    static getSaveHandlers(url) {
        return IORouterRegistry.getHandlers(url, 'save');
    }
    /**
     * Look up IOHandler for loading, given a URL-like string.
     *
     * @param url
     * @param loadOptions Optional, custom load options.
     * @returns All valid handlers for `url`, given the currently registered
     *   handler routers.
     */
    static getLoadHandlers(url, loadOptions) {
        return IORouterRegistry.getHandlers(url, 'load', loadOptions);
    }
    static getHandlers(url, handlerType, loadOptions) {
        const validHandlers = [];
        const routers = handlerType === 'load' ?
            IORouterRegistry.getInstance().loadRouters :
            IORouterRegistry.getInstance().saveRouters;
        routers.forEach(router => {
            const handler = router(url, loadOptions);
            if (handler !== null) {
                validHandlers.push(handler);
            }
        });
        return validHandlers;
    }
}
const registerSaveRouter = (loudRouter) => IORouterRegistry.registerSaveRouter(loudRouter);
const registerLoadRouter = (loudRouter) => IORouterRegistry.registerLoadRouter(loudRouter);
const getSaveHandlers = (url) => IORouterRegistry.getSaveHandlers(url);
const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);
//# sourceMappingURL=router_registry.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/types.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/types.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DTYPE_VALUE_SIZE_MAP": () => (/* binding */ DTYPE_VALUE_SIZE_MAP)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/* Type definitions for exporting and importing of models. */
/**
 * A map from Tensor dtype to number of bytes per element of the Tensor.
 */
const DTYPE_VALUE_SIZE_MAP = {
    'float32': 4,
    'float16': 2,
    'int32': 4,
    'uint16': 2,
    'uint8': 1,
    'bool': 1,
    'complex64': 8
};
//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/io/weights_loader.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "loadWeightsAsArrayBuffer": () => (/* binding */ loadWeightsAsArrayBuffer),
/* harmony export */   "loadWeights": () => (/* binding */ loadWeights),
/* harmony export */   "weightsLoaderFactory": () => (/* binding */ weightsLoaderFactory)
/* harmony export */ });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _io_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./io_utils */ "./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js");
/* harmony import */ var _progress__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./progress */ "./node_modules/@tensorflow/tfjs-core/dist/io/progress.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ "./node_modules/@tensorflow/tfjs-core/dist/io/types.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Reads binary weights data from a number of URLs.
 *
 * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.
 * @param requestOptions RequestInit (options) for the HTTP requests.
 * @param fetchFunc Optional overriding value for the `window.fetch` function.
 * @param onProgress Optional, progress callback function, fired periodically
 *   before the load is completed.
 * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same
 *   length as `fetchURLs`.
 */
async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {
    if (loadOptions == null) {
        loadOptions = {};
    }
    const fetchFunc = loadOptions.fetchFunc == null ? (0,_environment__WEBPACK_IMPORTED_MODULE_3__.env)().platform.fetch :
        loadOptions.fetchFunc;
    // Create the requests for all of the weights in parallel.
    const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, { isBinary: true }));
    const fetchStartFraction = 0;
    const fetchEndFraction = 0.5;
    const responses = loadOptions.onProgress == null ?
        await Promise.all(requests) :
        await (0,_progress__WEBPACK_IMPORTED_MODULE_1__.monitorPromisesProgress)(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);
    const bufferPromises = responses.map(response => response.arrayBuffer());
    const bufferStartFraction = 0.5;
    const bufferEndFraction = 1;
    const buffers = loadOptions.onProgress == null ?
        await Promise.all(bufferPromises) :
        await (0,_progress__WEBPACK_IMPORTED_MODULE_1__.monitorPromisesProgress)(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);
    return buffers;
}
/**
 * Reads a weights manifest JSON configuration, fetches the weights and
 * returns them as `Tensor`s.
 *
 * @param manifest The weights manifest JSON.
 * @param filePathPrefix The path prefix for filenames given in the manifest.
 *     Defaults to the empty string.
 * @param weightNames The names of the weights to be fetched.
 */
async function loadWeights(manifest, filePathPrefix = '', weightNames, requestInit) {
    // TODO(nsthorat): Groups are currently fetched atomically. If you need a
    // single weight from a group, the whole group will be fetched. At a future
    // date, we should support fetching only the individual shards within a
    // group that are needed to reconstruct the requested weight.
    // TODO(cais): Use `decodeWeights` for implementation.
    const fetchWeights = (fetchUrls) => loadWeightsAsArrayBuffer(fetchUrls, { requestInit });
    const loadWeights = weightsLoaderFactory(fetchWeights);
    return loadWeights(manifest, filePathPrefix, weightNames);
}
/**
 * Creates a function, which reads a weights manifest JSON configuration,
 * fetches the weight files using the specified function and returns them as
 * `Tensor`s.
 *
 * ```js
 * // example for creating a nodejs weight loader, which reads the weight files
 * // from disk using fs.readFileSync
 *
 * import * as fs from 'fs'
 *
 * const fetchWeightsFromDisk = (filePaths: string[]) =>
 *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)
 *
 * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)
 *
 * const manifest = JSON.parse(
 *   fs.readFileSync('./my_model-weights_manifest').toString()
 * )
 * const weightMap = await loadWeights(manifest, './')
 * ```
 * @param fetchWeightsFunction The function used for fetching the weight files.
 * @returns Weight loading function.
 */
function weightsLoaderFactory(fetchWeightsFunction) {
    return async (manifest, filePathPrefix = '', weightNames) => {
        // Collect all the groups, weights, and their relative offsets to be
        // fetched.
        const groupIndicesToFetchMap = manifest.map(() => false);
        const groupWeightsToFetch = {};
        const weightsFound = weightNames != null ? weightNames.map(() => false) : [];
        const allManifestWeightNames = [];
        manifest.forEach((manifestGroupConfig, groupIndex) => {
            let groupOffset = 0;
            manifestGroupConfig.weights.forEach(weightsEntry => {
                const rawDtype = ('quantization' in weightsEntry) ?
                    weightsEntry.quantization.dtype :
                    weightsEntry.dtype;
                const weightsBytes = _types__WEBPACK_IMPORTED_MODULE_2__.DTYPE_VALUE_SIZE_MAP[rawDtype] *
                    _util__WEBPACK_IMPORTED_MODULE_4__.sizeFromShape(weightsEntry.shape);
                const enqueueWeightsForFetchingFn = () => {
                    groupIndicesToFetchMap[groupIndex] = true;
                    if (groupWeightsToFetch[groupIndex] == null) {
                        groupWeightsToFetch[groupIndex] = [];
                    }
                    groupWeightsToFetch[groupIndex].push({
                        manifestEntry: weightsEntry,
                        groupOffset,
                        sizeBytes: weightsBytes
                    });
                };
                if (weightNames != null) {
                    weightNames.forEach((weightName, weightIndex) => {
                        if (weightName === weightsEntry.name) {
                            enqueueWeightsForFetchingFn();
                            weightsFound[weightIndex] = true;
                        }
                    });
                }
                else {
                    enqueueWeightsForFetchingFn();
                }
                allManifestWeightNames.push(weightsEntry.name);
                groupOffset += weightsBytes;
            });
        });
        if (!weightsFound.every(found => found)) {
            const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);
            throw new Error(`Could not find weights in manifest with names: ` +
                `${weightsNotFound.join(', ')}. \n` +
                `Manifest JSON has weights with names: ` +
                `${allManifestWeightNames.join(', ')}.`);
        }
        // Convert the one-hot boolean groupId => shouldFetch map to a list of group
        // IDs.
        const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {
            if (shouldFetch) {
                accumulator.push(i);
            }
            return accumulator;
        }, []);
        const fetchUrls = [];
        groupIndicesToFetch.forEach(i => {
            manifest[i].paths.forEach(filepath => {
                const fetchUrl = filePathPrefix +
                    (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;
                fetchUrls.push(fetchUrl);
            });
        });
        const buffers = await fetchWeightsFunction(fetchUrls);
        const weightsTensorMap = {};
        let bufferIndexOffset = 0;
        groupIndicesToFetch.forEach(i => {
            const numBuffers = manifest[i].paths.length;
            let groupBytes = 0;
            for (let i = 0; i < numBuffers; i++) {
                groupBytes += buffers[bufferIndexOffset + i].byteLength;
            }
            // Create a buffer for the whole group.
            const groupBuffer = new ArrayBuffer(groupBytes);
            const groupByteBuffer = new Uint8Array(groupBuffer);
            let groupBufferOffset = 0;
            for (let i = 0; i < numBuffers; i++) {
                const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);
                groupByteBuffer.set(buffer, groupBufferOffset);
                groupBufferOffset += buffer.byteLength;
            }
            const weightsEntries = groupWeightsToFetch[i];
            weightsEntries.forEach(weightsEntry => {
                const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);
                const nameToTensorMap = (0,_io_utils__WEBPACK_IMPORTED_MODULE_0__.decodeWeights)(byteBuffer, [weightsEntry.manifestEntry]);
                for (const name in nameToTensorMap) {
                    weightsTensorMap[name] = nameToTensorMap[name];
                }
            });
            bufferIndexOffset += numBuffers;
        });
        return weightsTensorMap;
    };
}
//# sourceMappingURL=weights_loader.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Abs": () => (/* binding */ Abs),
/* harmony export */   "Acos": () => (/* binding */ Acos),
/* harmony export */   "Acosh": () => (/* binding */ Acosh),
/* harmony export */   "Add": () => (/* binding */ Add),
/* harmony export */   "AddN": () => (/* binding */ AddN),
/* harmony export */   "All": () => (/* binding */ All),
/* harmony export */   "Any": () => (/* binding */ Any),
/* harmony export */   "ArgMax": () => (/* binding */ ArgMax),
/* harmony export */   "ArgMin": () => (/* binding */ ArgMin),
/* harmony export */   "Asin": () => (/* binding */ Asin),
/* harmony export */   "Asinh": () => (/* binding */ Asinh),
/* harmony export */   "Atan": () => (/* binding */ Atan),
/* harmony export */   "Atanh": () => (/* binding */ Atanh),
/* harmony export */   "Atan2": () => (/* binding */ Atan2),
/* harmony export */   "AvgPool": () => (/* binding */ AvgPool),
/* harmony export */   "AvgPoolGrad": () => (/* binding */ AvgPoolGrad),
/* harmony export */   "AvgPool3D": () => (/* binding */ AvgPool3D),
/* harmony export */   "AvgPool3DGrad": () => (/* binding */ AvgPool3DGrad),
/* harmony export */   "BatchMatMul": () => (/* binding */ BatchMatMul),
/* harmony export */   "BatchToSpaceND": () => (/* binding */ BatchToSpaceND),
/* harmony export */   "Bincount": () => (/* binding */ Bincount),
/* harmony export */   "BroadcastTo": () => (/* binding */ BroadcastTo),
/* harmony export */   "Cast": () => (/* binding */ Cast),
/* harmony export */   "Ceil": () => (/* binding */ Ceil),
/* harmony export */   "ClipByValue": () => (/* binding */ ClipByValue),
/* harmony export */   "Complex": () => (/* binding */ Complex),
/* harmony export */   "ComplexAbs": () => (/* binding */ ComplexAbs),
/* harmony export */   "Concat": () => (/* binding */ Concat),
/* harmony export */   "Conv2D": () => (/* binding */ Conv2D),
/* harmony export */   "Conv2DBackpropFilter": () => (/* binding */ Conv2DBackpropFilter),
/* harmony export */   "Conv2DBackpropInput": () => (/* binding */ Conv2DBackpropInput),
/* harmony export */   "Conv3D": () => (/* binding */ Conv3D),
/* harmony export */   "Conv3DBackpropFilterV2": () => (/* binding */ Conv3DBackpropFilterV2),
/* harmony export */   "Conv3DBackpropInputV2": () => (/* binding */ Conv3DBackpropInputV2),
/* harmony export */   "Cos": () => (/* binding */ Cos),
/* harmony export */   "Cosh": () => (/* binding */ Cosh),
/* harmony export */   "Cumsum": () => (/* binding */ Cumsum),
/* harmony export */   "CropAndResize": () => (/* binding */ CropAndResize),
/* harmony export */   "DenseBincount": () => (/* binding */ DenseBincount),
/* harmony export */   "DepthToSpace": () => (/* binding */ DepthToSpace),
/* harmony export */   "DepthwiseConv2dNative": () => (/* binding */ DepthwiseConv2dNative),
/* harmony export */   "DepthwiseConv2dNativeBackpropFilter": () => (/* binding */ DepthwiseConv2dNativeBackpropFilter),
/* harmony export */   "DepthwiseConv2dNativeBackpropInput": () => (/* binding */ DepthwiseConv2dNativeBackpropInput),
/* harmony export */   "Diag": () => (/* binding */ Diag),
/* harmony export */   "Dilation2D": () => (/* binding */ Dilation2D),
/* harmony export */   "Dilation2DBackpropInput": () => (/* binding */ Dilation2DBackpropInput),
/* harmony export */   "Dilation2DBackpropFilter": () => (/* binding */ Dilation2DBackpropFilter),
/* harmony export */   "RealDiv": () => (/* binding */ RealDiv),
/* harmony export */   "Elu": () => (/* binding */ Elu),
/* harmony export */   "EluGrad": () => (/* binding */ EluGrad),
/* harmony export */   "Erf": () => (/* binding */ Erf),
/* harmony export */   "Equal": () => (/* binding */ Equal),
/* harmony export */   "Exp": () => (/* binding */ Exp),
/* harmony export */   "ExpandDims": () => (/* binding */ ExpandDims),
/* harmony export */   "Expm1": () => (/* binding */ Expm1),
/* harmony export */   "FFT": () => (/* binding */ FFT),
/* harmony export */   "Fill": () => (/* binding */ Fill),
/* harmony export */   "FlipLeftRight": () => (/* binding */ FlipLeftRight),
/* harmony export */   "Floor": () => (/* binding */ Floor),
/* harmony export */   "FloorDiv": () => (/* binding */ FloorDiv),
/* harmony export */   "FusedBatchNorm": () => (/* binding */ FusedBatchNorm),
/* harmony export */   "GatherV2": () => (/* binding */ GatherV2),
/* harmony export */   "GatherNd": () => (/* binding */ GatherNd),
/* harmony export */   "Greater": () => (/* binding */ Greater),
/* harmony export */   "GreaterEqual": () => (/* binding */ GreaterEqual),
/* harmony export */   "Identity": () => (/* binding */ Identity),
/* harmony export */   "IFFT": () => (/* binding */ IFFT),
/* harmony export */   "Imag": () => (/* binding */ Imag),
/* harmony export */   "IsFinite": () => (/* binding */ IsFinite),
/* harmony export */   "IsInf": () => (/* binding */ IsInf),
/* harmony export */   "IsNan": () => (/* binding */ IsNan),
/* harmony export */   "LeakyRelu": () => (/* binding */ LeakyRelu),
/* harmony export */   "Less": () => (/* binding */ Less),
/* harmony export */   "LessEqual": () => (/* binding */ LessEqual),
/* harmony export */   "LinSpace": () => (/* binding */ LinSpace),
/* harmony export */   "Log": () => (/* binding */ Log),
/* harmony export */   "Log1p": () => (/* binding */ Log1p),
/* harmony export */   "LogicalAnd": () => (/* binding */ LogicalAnd),
/* harmony export */   "LogicalNot": () => (/* binding */ LogicalNot),
/* harmony export */   "LogicalOr": () => (/* binding */ LogicalOr),
/* harmony export */   "LogSoftmax": () => (/* binding */ LogSoftmax),
/* harmony export */   "LRN": () => (/* binding */ LRN),
/* harmony export */   "LRNGrad": () => (/* binding */ LRNGrad),
/* harmony export */   "Max": () => (/* binding */ Max),
/* harmony export */   "Maximum": () => (/* binding */ Maximum),
/* harmony export */   "MaxPool": () => (/* binding */ MaxPool),
/* harmony export */   "MaxPoolGrad": () => (/* binding */ MaxPoolGrad),
/* harmony export */   "MaxPool3D": () => (/* binding */ MaxPool3D),
/* harmony export */   "MaxPool3DGrad": () => (/* binding */ MaxPool3DGrad),
/* harmony export */   "MaxPoolWithArgmax": () => (/* binding */ MaxPoolWithArgmax),
/* harmony export */   "Mean": () => (/* binding */ Mean),
/* harmony export */   "Min": () => (/* binding */ Min),
/* harmony export */   "Minimum": () => (/* binding */ Minimum),
/* harmony export */   "MirrorPad": () => (/* binding */ MirrorPad),
/* harmony export */   "Mod": () => (/* binding */ Mod),
/* harmony export */   "Multinomial": () => (/* binding */ Multinomial),
/* harmony export */   "Multiply": () => (/* binding */ Multiply),
/* harmony export */   "Neg": () => (/* binding */ Neg),
/* harmony export */   "NotEqual": () => (/* binding */ NotEqual),
/* harmony export */   "NonMaxSuppressionV3": () => (/* binding */ NonMaxSuppressionV3),
/* harmony export */   "NonMaxSuppressionV4": () => (/* binding */ NonMaxSuppressionV4),
/* harmony export */   "NonMaxSuppressionV5": () => (/* binding */ NonMaxSuppressionV5),
/* harmony export */   "OnesLike": () => (/* binding */ OnesLike),
/* harmony export */   "OneHot": () => (/* binding */ OneHot),
/* harmony export */   "Pack": () => (/* binding */ Pack),
/* harmony export */   "PadV2": () => (/* binding */ PadV2),
/* harmony export */   "Pool": () => (/* binding */ Pool),
/* harmony export */   "Pow": () => (/* binding */ Pow),
/* harmony export */   "Prelu": () => (/* binding */ Prelu),
/* harmony export */   "Prod": () => (/* binding */ Prod),
/* harmony export */   "Range": () => (/* binding */ Range),
/* harmony export */   "Real": () => (/* binding */ Real),
/* harmony export */   "Reciprocal": () => (/* binding */ Reciprocal),
/* harmony export */   "Relu": () => (/* binding */ Relu),
/* harmony export */   "Reshape": () => (/* binding */ Reshape),
/* harmony export */   "ResizeNearestNeighbor": () => (/* binding */ ResizeNearestNeighbor),
/* harmony export */   "ResizeNearestNeighborGrad": () => (/* binding */ ResizeNearestNeighborGrad),
/* harmony export */   "ResizeBilinear": () => (/* binding */ ResizeBilinear),
/* harmony export */   "ResizeBilinearGrad": () => (/* binding */ ResizeBilinearGrad),
/* harmony export */   "Relu6": () => (/* binding */ Relu6),
/* harmony export */   "Reverse": () => (/* binding */ Reverse),
/* harmony export */   "Round": () => (/* binding */ Round),
/* harmony export */   "Rsqrt": () => (/* binding */ Rsqrt),
/* harmony export */   "ScatterNd": () => (/* binding */ ScatterNd),
/* harmony export */   "Select": () => (/* binding */ Select),
/* harmony export */   "Selu": () => (/* binding */ Selu),
/* harmony export */   "Slice": () => (/* binding */ Slice),
/* harmony export */   "Sin": () => (/* binding */ Sin),
/* harmony export */   "Sinh": () => (/* binding */ Sinh),
/* harmony export */   "Sign": () => (/* binding */ Sign),
/* harmony export */   "Sigmoid": () => (/* binding */ Sigmoid),
/* harmony export */   "Softplus": () => (/* binding */ Softplus),
/* harmony export */   "Sqrt": () => (/* binding */ Sqrt),
/* harmony export */   "Sum": () => (/* binding */ Sum),
/* harmony export */   "SpaceToBatchND": () => (/* binding */ SpaceToBatchND),
/* harmony export */   "SplitV": () => (/* binding */ SplitV),
/* harmony export */   "Softmax": () => (/* binding */ Softmax),
/* harmony export */   "SquaredDifference": () => (/* binding */ SquaredDifference),
/* harmony export */   "Square": () => (/* binding */ Square),
/* harmony export */   "Sub": () => (/* binding */ Sub),
/* harmony export */   "SparseToDense": () => (/* binding */ SparseToDense),
/* harmony export */   "StridedSlice": () => (/* binding */ StridedSlice),
/* harmony export */   "Tan": () => (/* binding */ Tan),
/* harmony export */   "Tanh": () => (/* binding */ Tanh),
/* harmony export */   "Tile": () => (/* binding */ Tile),
/* harmony export */   "TopK": () => (/* binding */ TopK),
/* harmony export */   "Transpose": () => (/* binding */ Transpose),
/* harmony export */   "Unique": () => (/* binding */ Unique),
/* harmony export */   "Unpack": () => (/* binding */ Unpack),
/* harmony export */   "UnsortedSegmentSum": () => (/* binding */ UnsortedSegmentSum),
/* harmony export */   "ZerosLike": () => (/* binding */ ZerosLike),
/* harmony export */   "Step": () => (/* binding */ Step),
/* harmony export */   "FromPixels": () => (/* binding */ FromPixels),
/* harmony export */   "RotateWithOffset": () => (/* binding */ RotateWithOffset),
/* harmony export */   "_FusedMatMul": () => (/* binding */ _FusedMatMul),
/* harmony export */   "FusedConv2D": () => (/* binding */ FusedConv2D),
/* harmony export */   "FusedDepthwiseConv2D": () => (/* binding */ FusedDepthwiseConv2D)
/* harmony export */ });
const Abs = 'Abs';
const Acos = 'Acos';
const Acosh = 'Acosh';
const Add = 'Add';
const AddN = 'AddN';
const All = 'All';
const Any = 'Any';
const ArgMax = 'ArgMax';
const ArgMin = 'ArgMin';
const Asin = 'Asin';
const Asinh = 'Asinh';
const Atan = 'Atan';
const Atanh = 'Atanh';
const Atan2 = 'Atan2';
const AvgPool = 'AvgPool';
const AvgPoolGrad = 'AvgPoolGrad';
const AvgPool3D = 'AvgPool3D';
const AvgPool3DGrad = 'AvgPool3DGrad';
const BatchMatMul = 'BatchMatMul';
const BatchToSpaceND = 'BatchToSpaceND';
const Bincount = 'Bincount';
const BroadcastTo = 'BroadcastTo';
const Cast = 'Cast';
const Ceil = 'Ceil';
const ClipByValue = 'ClipByValue';
const Complex = 'Complex';
const ComplexAbs = 'ComplexAbs';
const Concat = 'Concat';
const Conv2D = 'Conv2D';
const Conv2DBackpropFilter = 'Conv2DBackpropFilter';
const Conv2DBackpropInput = 'Conv2DBackpropInput';
const Conv3D = 'Conv3D';
const Conv3DBackpropFilterV2 = 'Conv3DBackpropFilterV2';
const Conv3DBackpropInputV2 = 'Conv3DBackpropInputV2';
const Cos = 'Cos';
const Cosh = 'Cosh';
const Cumsum = 'Cumsum';
const CropAndResize = 'CropAndResize';
const DenseBincount = 'DenseBincount';
const DepthToSpace = 'DepthToSpace';
const DepthwiseConv2dNative = 'DepthwiseConv2dNative';
const DepthwiseConv2dNativeBackpropFilter = 'DepthwiseConv2dNativeBackpropFilter';
const DepthwiseConv2dNativeBackpropInput = 'DepthwiseConv2dNativeBackpropInput';
const Diag = 'Diag';
const Dilation2D = 'Dilation2D';
const Dilation2DBackpropInput = 'Dilation2DBackpropInput';
const Dilation2DBackpropFilter = 'Dilation2DBackpropFilter';
const RealDiv = 'RealDiv';
const Elu = 'Elu';
const EluGrad = 'EluGrad';
const Erf = 'Erf';
const Equal = 'Equal';
const Exp = 'Exp';
const ExpandDims = 'ExpandDims';
const Expm1 = 'Expm1';
const FFT = 'FFT';
const Fill = 'Fill';
const FlipLeftRight = 'FlipLeftRight';
const Floor = 'Floor';
const FloorDiv = 'FloorDiv';
const FusedBatchNorm = 'FusedBatchNorm';
const GatherV2 = 'GatherV2';
const GatherNd = 'GatherNd';
const Greater = 'Greater';
const GreaterEqual = 'GreaterEqual';
const Identity = 'Identity';
const IFFT = 'IFFT';
const Imag = 'Imag';
const IsFinite = 'IsFinite';
const IsInf = 'IsInf';
const IsNan = 'IsNan';
const LeakyRelu = 'LeakyRelu';
const Less = 'Less';
const LessEqual = 'LessEqual';
const LinSpace = 'LinSpace';
const Log = 'Log';
const Log1p = 'Log1p';
const LogicalAnd = 'LogicalAnd';
const LogicalNot = 'LogicalNot';
const LogicalOr = 'LogicalOr';
const LogSoftmax = 'LogSoftmax';
const LRN = 'LRN';
const LRNGrad = 'LRNGrad';
const Max = 'Max';
const Maximum = 'Maximum';
const MaxPool = 'MaxPool';
const MaxPoolGrad = 'MaxPoolGrad';
const MaxPool3D = 'MaxPool3D';
const MaxPool3DGrad = 'MaxPool3DGrad';
const MaxPoolWithArgmax = 'MaxPoolWithArgmax';
const Mean = 'Mean';
const Min = 'Min';
const Minimum = 'Minimum';
const MirrorPad = 'MirrorPad';
const Mod = 'Mod';
const Multinomial = 'Multinomial';
const Multiply = 'Multiply';
const Neg = 'Neg';
const NotEqual = 'NotEqual';
const NonMaxSuppressionV3 = 'NonMaxSuppressionV3';
const NonMaxSuppressionV4 = 'NonMaxSuppressionV4';
const NonMaxSuppressionV5 = 'NonMaxSuppressionV5';
const OnesLike = 'OnesLike';
const OneHot = 'OneHot';
const Pack = 'Pack';
const PadV2 = 'PadV2';
const Pool = 'Pool';
const Pow = 'Pow';
const Prelu = 'Prelu';
const Prod = 'Prod';
const Range = 'Range';
const Real = 'Real';
const Reciprocal = 'Reciprocal';
const Relu = 'Relu';
const Reshape = 'Reshape';
const ResizeNearestNeighbor = 'ResizeNearestNeighbor';
const ResizeNearestNeighborGrad = 'ResizeNearestNeighborGrad';
const ResizeBilinear = 'ResizeBilinear';
const ResizeBilinearGrad = 'ResizeBilinearGrad';
const Relu6 = 'Relu6';
const Reverse = 'Reverse';
const Round = 'Round';
const Rsqrt = 'Rsqrt';
const ScatterNd = 'ScatterNd';
const Select = 'Select';
const Selu = 'Selu';
const Slice = 'Slice';
const Sin = 'Sin';
const Sinh = 'Sinh';
const Sign = 'Sign';
const Sigmoid = 'Sigmoid';
const Softplus = 'Softplus';
const Sqrt = 'Sqrt';
const Sum = 'Sum';
const SpaceToBatchND = 'SpaceToBatchND';
const SplitV = 'SplitV';
const Softmax = 'Softmax';
const SquaredDifference = 'SquaredDifference';
const Square = 'Square';
const Sub = 'Sub';
const SparseToDense = 'SparseToDense';
const StridedSlice = 'StridedSlice';
const Tan = 'Tan';
const Tanh = 'Tanh';
const Tile = 'Tile';
const TopK = 'TopK';
const Transpose = 'Transpose';
const Unique = 'Unique';
const Unpack = 'Unpack';
const UnsortedSegmentSum = 'UnsortedSegmentSum';
const ZerosLike = 'ZerosLike';
/**
 * TensorFlow.js-only kernels
 */
const Step = 'Step';
const FromPixels = 'FromPixels';
const RotateWithOffset = 'RotateWithOffset';
const _FusedMatMul = '_FusedMatMul';
const FusedConv2D = 'FusedConv2D';
const FusedDepthwiseConv2D = 'FusedDepthwiseConv2D';
//# sourceMappingURL=kernel_names.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getKernel": () => (/* binding */ getKernel),
/* harmony export */   "getGradient": () => (/* binding */ getGradient),
/* harmony export */   "getKernelsForBackend": () => (/* binding */ getKernelsForBackend),
/* harmony export */   "registerKernel": () => (/* binding */ registerKernel),
/* harmony export */   "registerGradient": () => (/* binding */ registerGradient),
/* harmony export */   "unregisterKernel": () => (/* binding */ unregisterKernel),
/* harmony export */   "unregisterGradient": () => (/* binding */ unregisterGradient),
/* harmony export */   "copyRegisteredKernels": () => (/* binding */ copyRegisteredKernels)
/* harmony export */ });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _global_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./global_util */ "./node_modules/@tensorflow/tfjs-core/dist/global_util.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const kernelRegistry = (0,_global_util__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('kernelRegistry', () => new Map());
const gradRegistry = (0,_global_util__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('gradRegistry', () => new Map());
/**
 * Returns the kernel function (code) associated with the provided names.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 */
function getKernel(kernelName, backendName) {
    const key = makeKey(kernelName, backendName);
    return kernelRegistry.get(key);
}
/**
 * Returns the registered gradient info associated with the provided kernel.
 * @param kernelName The official TF kernel name.
 */
function getGradient(kernelName) {
    return gradRegistry.get(kernelName);
}
function getKernelsForBackend(backendName) {
    const it = kernelRegistry.entries();
    const result = [];
    while (true) {
        const { done, value } = it.next();
        if (done) {
            break;
        }
        const [key, config] = value;
        const [backend,] = key.split('_');
        if (backend === backendName) {
            result.push(config);
        }
    }
    return result;
}
/**
 * Registers the function (forward pass) for the kernel in a global registry.
 *
 * @param config A config object with the following properties:
 * - `kernelName` The official name of the kernel.
 * - `backendName` The official name of the backend.
 * - `kernelFunc` The function to run during the forward pass of the kernel.
 * - `setupFunc` Optional. Gets called once, after the backend initializes.
 * - `disposeFunc` Optional. Gets called once, right before the backend is
 * disposed.
 */
function registerKernel(config) {
    const { kernelName, backendName } = config;
    const key = makeKey(kernelName, backendName);
    if (kernelRegistry.has(key)) {
        console.warn(`The kernel '${kernelName}' for backend ` +
            `'${backendName}' is already registered`);
    }
    kernelRegistry.set(key, config);
}
/**
 * Registers a gradient function for a given kernel in the global registry,
 * to be used during the back-propagation of that kernel.
 *
 * @param config An object with the following properties:
 * - `kernelName` The name of the kernel that the gradient function is for.
 * - `gradFunc` The function to run during back-propagation.
 */
function registerGradient(config) {
    const { kernelName } = config;
    if (gradRegistry.has(kernelName)) {
        // TODO (yassogba) after 3.0 assess whether we need to keep this gated
        // to debug mode.
        if ((0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('DEBUG')) {
            console.warn(`Overriding the gradient for '${kernelName}'`);
        }
    }
    gradRegistry.set(kernelName, config);
}
/**
 * Removes the kernel function from the registry.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 *
 */
function unregisterKernel(kernelName, backendName) {
    const key = makeKey(kernelName, backendName);
    if (!kernelRegistry.has(key)) {
        throw new Error(`The kernel '${kernelName}' for backend ` +
            `'${backendName}' is not registered`);
    }
    kernelRegistry.delete(key);
}
/** Removes the registered gradient from the global registry. */
function unregisterGradient(kernelName) {
    if (!gradRegistry.has(kernelName)) {
        throw new Error(`The gradient '${kernelName}' for backend is not registered`);
    }
    gradRegistry.delete(kernelName);
}
/**
 * Finds kernels that have already been registered to a backend and re-registers
 * them for a new backend. Useful for registering custom backends.
 * @param registeredBackendName Already registered backend.
 * @param newBackendName New backend.
 */
function copyRegisteredKernels(registeredBackendName, newBackendName) {
    const kernels = getKernelsForBackend(registeredBackendName);
    kernels.forEach(kernelConfig => {
        const newKernelConfig = Object.assign({}, kernelConfig, { backendName: newBackendName });
        registerKernel(newKernelConfig);
    });
}
function makeKey(kernelName, backendName) {
    return `${backendName}_${kernelName}`;
}
//# sourceMappingURL=kernel_registry.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/log.js":
/*!********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/log.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "warn": () => (/* binding */ warn),
/* harmony export */   "log": () => (/* binding */ log)
/* harmony export */ });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function warn(...msg) {
    if (!(0,_environment__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('IS_TEST')) {
        console.warn(...msg);
    }
}
function log(...msg) {
    if (!(0,_environment__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('IS_TEST')) {
        console.log(...msg);
    }
}
//# sourceMappingURL=log.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/math.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/math.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "confusionMatrix": () => (/* reexport safe */ _ops_confusion_matrix__WEBPACK_IMPORTED_MODULE_0__.confusionMatrix)
/* harmony export */ });
/* harmony import */ var _ops_confusion_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ops/confusion_matrix */ "./node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Exports under the tf.math.* namespace.
 */


//# sourceMappingURL=math.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "abs": () => (/* binding */ abs)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes absolute value element-wise: `abs(x)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.abs().print();  // or tf.abs(x)
 * ```
 * @param x The input `tf.Tensor`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function abs_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'abs');
    if ($x.dtype === 'complex64') {
        const inputs = { x: $x };
        return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.ComplexAbs, inputs);
    }
    else {
        const inputs = { x: $x };
        return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Abs, inputs);
    }
}
const abs = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ abs_ });
//# sourceMappingURL=abs.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/acos.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/acos.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acos": () => (/* binding */ acos)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes acos of the input `tf.Tensor` element-wise: `acos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.acos().print();  // or tf.acos(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function acos_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'acos');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Acos, inputs);
}
const acos = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ acos_ });
//# sourceMappingURL=acos.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acosh": () => (/* binding */ acosh)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the inverse hyperbolic cos of the input `tf.Tensor` element-wise:
 * `acosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([10, 1, 3, 5.7]);
 *
 * x.acosh().print();  // or tf.acosh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function acosh_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'acosh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Acosh, inputs);
}
const acosh = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ acosh_ });
//# sourceMappingURL=acosh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/add.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "add": () => (/* binding */ add)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Adds two `tf.Tensor`s element-wise, A + B. Supports broadcasting.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 *
 * ```js
 * // Broadcast add a with b.
 * const a = tf.scalar(5);
 * const b = tf.tensor1d([10, 20, 30, 40]);
 *
 * a.add(b).print();  // or tf.add(a, b)
 * ```
 * @param a The first `tf.Tensor` to add.
 * @param b The second `tf.Tensor` to add. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function add_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'add');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'add');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Add, inputs);
}
const add = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ add_ });
//# sourceMappingURL=add.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addN": () => (/* binding */ addN)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 *
 * tf.addN([a, b, c]).print();
 * ```
 * @param tensors A list of tensors with the same shape and dtype.
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function addN_(tensors) {
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` +
        `${tensors.length}`);
    const $tensors = tensors.map((t, i) => (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__.convertToTensor)(t, `tensors${i}`, 'addN'));
    const firstTensor = $tensors[0];
    $tensors.forEach(t => {
        if (t.dtype !== firstTensor.dtype) {
            throw new Error('All tensors passed to tf.addN() must have the same dtype');
        }
    });
    $tensors.forEach(t => {
        if (!_util__WEBPACK_IMPORTED_MODULE_1__.arraysEqual(t.shape, firstTensor.shape)) {
            throw new Error('All tensors passed to tf.addN() must have the same shape');
        }
    });
    const inputs = $tensors;
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.AddN, inputs);
}
const addN = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ addN_ });
//# sourceMappingURL=add_n.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/all.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/all.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "all": () => (/* binding */ all)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the logical and of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.all().print();  // or tf.all(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.all(axis).print();  // or tf.all(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function all_(x, axis = null, keepDims = false) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'all', 'bool');
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.All, inputs, attrs);
}
const all = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ all_ });
//# sourceMappingURL=all.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/any.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/any.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "any": () => (/* binding */ any)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the logical or of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 1, 1], 'bool');
 *
 * x.any().print();  // or tf.any(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');
 *
 * const axis = 1;
 * x.any(axis).print();  // or tf.any(x, axis)
 * ```
 *
 * @param x The input tensor. Must be of dtype bool.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function any_(x, axis = null, keepDims = false) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'any', 'bool');
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Any, inputs, attrs);
}
// tslint:disable-next-line:variable-name
const any = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ any_ });
//# sourceMappingURL=any.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argMax": () => (/* binding */ argMax)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns the indices of the maximum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMax().print();  // or tf.argMax(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMax(axis).print();  // or tf.argMax(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function argMax_(x, axis = 0) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'argMax');
    const inputs = { x: $x };
    const attrs = { axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.ArgMax, inputs, attrs);
}
const argMax = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ argMax_ });
//# sourceMappingURL=arg_max.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "argMin": () => (/* binding */ argMin)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns the indices of the minimum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMin().print();  // or tf.argMin(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMin(axis).print();  // or tf.argMin(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function argMin_(x, axis = 0) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'argMin');
    const inputs = { x: $x };
    const attrs = { axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.ArgMin, inputs, attrs);
}
const argMin = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ argMin_ });
//# sourceMappingURL=arg_min.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/array_ops_util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getReshaped": () => (/* binding */ getReshaped),
/* harmony export */   "getPermuted": () => (/* binding */ getPermuted),
/* harmony export */   "getReshapedPermuted": () => (/* binding */ getReshapedPermuted),
/* harmony export */   "getSliceBeginCoords": () => (/* binding */ getSliceBeginCoords),
/* harmony export */   "getSliceSize": () => (/* binding */ getSliceSize)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Gets the new shape of the input Tensor after it's been reshaped
 * to:
 * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),
 * inputShape[1], ..., inputShape[N-1]]
 *
 * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */
function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {
    let reshaped = [];
    if (batchToSpace) {
        reshaped = reshaped.concat(blockShape.slice(0));
        reshaped.push(inputShape[0] / prod);
        reshaped = reshaped.concat(inputShape.slice(1));
    }
    else {
        reshaped = reshaped.concat(inputShape[0]);
        const spatialLength = blockShape.length;
        for (let i = 0; i < spatialLength; ++i) {
            reshaped =
                reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);
        }
        reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));
    }
    return reshaped;
}
/**
 * Gets the permutation that will transpose the dimensions of the
 * reshaped tensor to shape:
 *
 * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,
 * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */
function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {
    const permuted = [];
    if (batchToSpace) {
        permuted.push(blockShapeRank);
        for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {
            if (i <= 2 * blockShapeRank) {
                permuted.push(i);
                permuted.push(i - (blockShapeRank + 1));
            }
            else {
                permuted.push(i);
            }
        }
    }
    else {
        const permutedBeforeBatch = [];
        const permutedAfterBatch = [];
        for (let i = 1; i < reshapedRank; ++i) {
            if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {
                permutedAfterBatch.push(i);
            }
            else {
                permutedBeforeBatch.push(i);
            }
        }
        permuted.push(...permutedBeforeBatch);
        permuted.push(0);
        permuted.push(...permutedAfterBatch);
    }
    return permuted;
}
/**
 * Gets the shape of the reshaped and permuted input Tensor before any cropping
 * is applied.  The new shape will be:
 *
 * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,
 * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */
function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {
    const reshapedPermuted = [];
    if (batchToSpace) {
        reshapedPermuted.push(inputShape[0] / prod);
    }
    else {
        reshapedPermuted.push(inputShape[0] * prod);
    }
    for (let i = 1; i < inputShape.length; ++i) {
        if (i <= blockShape.length) {
            if (batchToSpace) {
                reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);
            }
            else {
                reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);
            }
        }
        else {
            reshapedPermuted.push(inputShape[i]);
        }
    }
    return reshapedPermuted;
}
/**
 * Converts the crops argument into the beginning coordinates of a slice
 * operation.
 */
function getSliceBeginCoords(crops, blockShape) {
    const sliceBeginCoords = [0];
    for (let i = 0; i < blockShape; ++i) {
        sliceBeginCoords.push(crops[i][0]);
    }
    return sliceBeginCoords;
}
/**
 * Converts the crops argument into the size of a slice operation.  When
 * combined with getSliceBeginCoords this function allows the reshaped and
 * permuted Tensor to be cropped to its final output shape of:
 *
 * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,
 * inputShape[M] * blockShape[M-1] -crops[M-1,0] -
 * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]
 *
 * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd
 */
function getSliceSize(uncroppedShape, crops, blockShape) {
    const sliceSize = uncroppedShape.slice(0, 1);
    for (let i = 0; i < blockShape; ++i) {
        sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);
    }
    return sliceSize;
}
//# sourceMappingURL=array_ops_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/asin.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/asin.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asin": () => (/* binding */ asin)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes asin of the input `tf.Tensor` element-wise: `asin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asin().print();  // or tf.asin(x)
 * ```
 * @param x The input tensor.
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function asin_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'asin');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Asin, inputs);
}
const asin = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ asin_ });
//# sourceMappingURL=asin.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asinh": () => (/* binding */ asinh)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes inverse hyperbolic sin of the input `tf.Tensor` element-wise:
 * `asinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.asinh().print();  // or tf.asinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function asinh_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'asinh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Asinh, inputs);
}
const asinh = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ asinh_ });
//# sourceMappingURL=asinh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/atan.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atan": () => (/* binding */ atan)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes atan of the input `tf.Tensor` element-wise: `atan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.atan().print();  // or tf.atan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atan_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'atan');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Atan, inputs);
}
const atan = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ atan_ });
//# sourceMappingURL=atan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atan2": () => (/* binding */ atan2)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes arctangent of `tf.Tensor`s a / b element-wise: `atan2(a, b)`.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1.0, 1.0, -1.0, .7]);
 * const b = tf.tensor1d([2.0, 13.0, 3.5, .21]);
 *
 * tf.atan2(a, b).print()
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atan2_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'atan2');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'atan2');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Atan2, inputs);
}
const atan2 = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ atan2_ });
//# sourceMappingURL=atan2.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atanh": () => (/* binding */ atanh)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes inverse hyperbolic tan of the input `tf.Tensor` element-wise:
 * `atanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.atanh().print();  // or tf.atanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function atanh_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'atanh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Atanh, inputs);
}
const atanh = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ atanh_ });
//# sourceMappingURL=atanh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool": () => (/* binding */ avgPool)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/**
 * Computes the 2D average pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function avgPool_(x, filterSize, strides, pad, dimRoundingMode) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'avgPool', 'float32');
    const dilations = 1;
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_3__.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(x4D.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${x4D.rank}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_2__.assert(_util__WEBPACK_IMPORTED_MODULE_2__.isInt(pad), () => `Error in avgPool: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inputs = { x: x4D };
    const attrs = { filterSize, strides, pad, dimRoundingMode };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    let res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_5__.AvgPool, inputs, attrs);
    res = (0,_cast__WEBPACK_IMPORTED_MODULE_6__.cast)(res, $x.dtype);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const avgPool = (0,_operation__WEBPACK_IMPORTED_MODULE_7__.op)({ avgPool_ });
//# sourceMappingURL=avg_pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool3d": () => (/* binding */ avgPool3d)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









/**
 * Computes the 3D average pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.avgPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations Deprecated, this field will be gone in v3.0.0.
 *     The dilation rates:
 *     `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {
    if (dilations == null) {
        dilations = [1, 1, 1];
    }
    else {
        (0,_globals__WEBPACK_IMPORTED_MODULE_1__.deprecationWarn)('dilations is deprecated, this field will be gone in ' +
            'v3.0.0.');
    }
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__.convertToTensor)(x, 'x', 'avgPool3d', 'float32');
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_4__.assert(x5D.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_4__.assert(dataFormat === 'NDHWC', () => `Error in avgPool3d: Only NDHWC is currently supported, ` +
        `but got dataFormat of ${dataFormat}`);
    _util__WEBPACK_IMPORTED_MODULE_4__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_5__.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool3d: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_4__.assert(_util__WEBPACK_IMPORTED_MODULE_4__.isInt(pad), () => `Error in avgPool3d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inputs = { x: x5D };
    const attrs = { filterSize, strides, pad, dimRoundingMode, dataFormat, dilations };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    let res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_6__.AvgPool3D, inputs, attrs);
    res = (0,_cast__WEBPACK_IMPORTED_MODULE_7__.cast)(res, x5D.dtype);
    if (reshapedTo5D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const avgPool3d = (0,_operation__WEBPACK_IMPORTED_MODULE_8__.op)({ avgPool3d_ });
//# sourceMappingURL=avg_pool_3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPool3dGrad": () => (/* binding */ avgPool3dGrad)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the backprop of a 3d avg pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations Deprecated, this field will be gone in v3.0.0. The dilation
 *     rates: `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function avgPool3dGrad_(dy, input, filterSize, strides, dilations = [1, 1, 1], pad, dimRoundingMode) {
    const $dy = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(dy, 'dy', 'avgPool3dGrad');
    const $input = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(input, 'input', 'avgPool3dGrad');
    let dy5D = $dy;
    let input5D = $input;
    let reshapedTo5D = false;
    if ($input.rank === 4) {
        reshapedTo5D = true;
        dy5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);
        input5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($input, [
            1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]
        ]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(dy5D.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ` +
        `${dy5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(input5D.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ` +
        `${input5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_4__.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool3dGrad: Either strides or dilations ' +
        `must be 1. Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__.assert(_util__WEBPACK_IMPORTED_MODULE_3__.isInt(pad), () => `Error in avgPool3dGrad: pad must be an integer when ` +
            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inputs = { dy: dy5D, input: input5D };
    const attrs = { filterSize, strides, dilations, pad, dimRoundingMode };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_5__.AvgPool3DGrad, inputs, attrs);
    if (reshapedTo5D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const avgPool3dGrad = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ avgPool3dGrad_ });
//# sourceMappingURL=avg_pool_3d_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_grad.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_grad.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "avgPoolGrad": () => (/* binding */ avgPoolGrad)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the backprop of an 2D avg pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The input image, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 */
function avgPoolGrad_(dy, input, filterSize, strides, pad) {
    const $dy = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(dy, 'dy', 'avgPoolGrad');
    const $input = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(input, 'input', 'avgPoolGrad');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);
    let input4D = $input;
    let dy4D = $dy;
    let reshapedTo4D = false;
    if ($input.rank === 3) {
        reshapedTo4D = true;
        input4D =
            (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);
        dy4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(dy4D.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ` +
        `${dy4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(input4D.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ` +
        `${input4D.rank}.`);
    const inputs = { dy: dy4D, input: input4D };
    const attrs = { filterSize, strides, pad };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.AvgPoolGrad, inputs, attrs);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const avgPoolGrad = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ avgPoolGrad_ });
//# sourceMappingURL=avg_pool_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "axesAreInnerMostDims": () => (/* binding */ axesAreInnerMostDims),
/* harmony export */   "combineLocations": () => (/* binding */ combineLocations),
/* harmony export */   "computeOutAndReduceShapes": () => (/* binding */ computeOutAndReduceShapes),
/* harmony export */   "expandShapeToKeepDim": () => (/* binding */ expandShapeToKeepDim),
/* harmony export */   "assertAxesAreInnerMostDims": () => (/* binding */ assertAxesAreInnerMostDims),
/* harmony export */   "getAxesPermutation": () => (/* binding */ getAxesPermutation),
/* harmony export */   "getUndoAxesPermutation": () => (/* binding */ getUndoAxesPermutation),
/* harmony export */   "getInnerMostAxes": () => (/* binding */ getInnerMostAxes)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Returns true if the axis specifies the inner most dimensions of the
 * array.
 */
function axesAreInnerMostDims(axes, rank) {
    for (let i = 0; i < axes.length; ++i) {
        if (axes[axes.length - i - 1] !== rank - 1 - i) {
            return false;
        }
    }
    return true;
}
function combineLocations(outputLoc, reduceLoc, axes) {
    const rank = outputLoc.length + reduceLoc.length;
    const loc = [];
    let outIdx = 0;
    let reduceIdx = 0;
    for (let dim = 0; dim < rank; dim++) {
        if (axes.indexOf(dim) === -1) {
            loc.push(outputLoc[outIdx++]);
        }
        else {
            loc.push(reduceLoc[reduceIdx++]);
        }
    }
    return loc;
}
function computeOutAndReduceShapes(aShape, axes) {
    const outShape = [];
    const rank = aShape.length;
    for (let dim = 0; dim < rank; dim++) {
        if (axes.indexOf(dim) === -1) {
            outShape.push(aShape[dim]);
        }
    }
    const reduceShape = axes.map(dim => aShape[dim]);
    return [outShape, reduceShape];
}
function expandShapeToKeepDim(shape, axes) {
    const reduceSubShape = axes.map(x => 1);
    return combineLocations(shape, reduceSubShape, axes);
}
function assertAxesAreInnerMostDims(msg, axes, rank) {
    _util__WEBPACK_IMPORTED_MODULE_0__.assert(axesAreInnerMostDims(axes, rank), () => `${msg} supports only inner-most axes for now. ` +
        `Got axes ${axes} and rank-${rank} input.`);
}
/**
 * Returns the axes permutation to be used with `tf.transpose`, if such
 * permutation is necessary. Otherwise it returns null. This method is used by
 * operations that operate only on inner-most axes.
 */
function getAxesPermutation(axes, rank) {
    if (axesAreInnerMostDims(axes, rank)) {
        return null;
    }
    const result = [];
    for (let i = 0; i < rank; ++i) {
        if (axes.indexOf(i) === -1) {
            result.push(i);
        }
    }
    axes.forEach(axis => result.push(axis));
    return result;
}
/** Returns the axes permutation that undoes the original permutation. */
function getUndoAxesPermutation(axes) {
    return axes.map((axis, i) => [i, axis])
        .sort((a, b) => a[1] - b[1])
        .map(x => x[0]);
}
function getInnerMostAxes(numAxes, rank) {
    const res = [];
    for (let i = rank - numAxes; i < rank; ++i) {
        res.push(i);
    }
    return res;
}
//# sourceMappingURL=axis_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "basicLSTMCell": () => (/* binding */ basicLSTMCell)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _sigmoid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _tanh__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tanh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









/**
 * Computes the next state and output of a BasicLSTMCell.
 *
 * Returns `[newC, newH]`.
 *
 * Derived from tf.contrib.rnn.BasicLSTMCell.
 *
 * @param forgetBias Forget bias for the cell.
 * @param lstmKernel The weights for the cell.
 * @param lstmBias The bias for the cell.
 * @param data The input to the cell.
 * @param c Previous cell state.
 * @param h Previous cell output.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */
function basicLSTMCell_(forgetBias, lstmKernel, lstmBias, data, c, h) {
    const $forgetBias = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(forgetBias, 'forgetBias', 'basicLSTMCell');
    const $lstmKernel = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(lstmKernel, 'lstmKernel', 'basicLSTMCell');
    const $lstmBias = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(lstmBias, 'lstmBias', 'basicLSTMCell');
    const $data = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(data, 'data', 'basicLSTMCell');
    const $c = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(c, 'c', 'basicLSTMCell');
    const $h = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(h, 'h', 'basicLSTMCell');
    const combined = (0,_concat__WEBPACK_IMPORTED_MODULE_1__.concat)([$data, $h], 1);
    const weighted = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_2__.matMul)(combined, $lstmKernel);
    const res = (0,_add__WEBPACK_IMPORTED_MODULE_3__.add)(weighted, $lstmBias);
    // i = input_gate, j = new_input, f = forget_gate, o = output_gate
    const batchSize = res.shape[0];
    const sliceCols = res.shape[1] / 4;
    const sliceSize = [batchSize, sliceCols];
    const i = (0,_slice__WEBPACK_IMPORTED_MODULE_4__.slice)(res, [0, 0], sliceSize);
    const j = (0,_slice__WEBPACK_IMPORTED_MODULE_4__.slice)(res, [0, sliceCols], sliceSize);
    const f = (0,_slice__WEBPACK_IMPORTED_MODULE_4__.slice)(res, [0, sliceCols * 2], sliceSize);
    const o = (0,_slice__WEBPACK_IMPORTED_MODULE_4__.slice)(res, [0, sliceCols * 3], sliceSize);
    const newC = (0,_add__WEBPACK_IMPORTED_MODULE_3__.add)((0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_sigmoid__WEBPACK_IMPORTED_MODULE_6__.sigmoid)(i), (0,_tanh__WEBPACK_IMPORTED_MODULE_7__.tanh)(j)), (0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)($c, (0,_sigmoid__WEBPACK_IMPORTED_MODULE_6__.sigmoid)((0,_add__WEBPACK_IMPORTED_MODULE_3__.add)($forgetBias, f))));
    const newH = (0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_tanh__WEBPACK_IMPORTED_MODULE_7__.tanh)(newC), (0,_sigmoid__WEBPACK_IMPORTED_MODULE_6__.sigmoid)(o));
    return [newC, newH];
}
const basicLSTMCell = (0,_operation__WEBPACK_IMPORTED_MODULE_8__.op)({ basicLSTMCell_ });
//# sourceMappingURL=basic_lstm_cell.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchToSpaceND": () => (/* binding */ batchToSpaceND)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of
 * shape `blockShape + [batch]`, interleaves these blocks back into the grid
 * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with
 * the same rank as the input. The spatial dimensions of this intermediate
 * result are then optionally cropped according to `crops` to produce the
 * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise
 * description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);
 * const blockShape = [2, 2];
 * const crops = [[0, 0], [0, 0]];
 *
 * x.batchToSpaceND(blockShape, crops).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.
 * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input
 * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required
 * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,
 * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,
 * x.shape[N-1]]`
 *
 * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /
 * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *
 * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`
 * according to `crops` to produce the output of shape: `[batch /
 * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],
 * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -
 * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function batchToSpaceND_(x, blockShape, crops) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'batchToSpaceND');
    const prod = blockShape.reduce((a, b) => a * b);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.rank >= 1 + blockShape.length, () => `input rank is ${$x.rank} but should be > than blockShape.length ${blockShape.length}`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(crops.length === blockShape.length, () => `crops.length is ${crops.length} but should be equal to blockShape.length  ${blockShape.length}`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.shape[0] % prod === 0, () => `input tensor batch is ${$x.shape[0]} but is not divisible by the product of ` +
        `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);
    const inputs = { x: $x };
    const attrs = { blockShape, crops };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.BatchToSpaceND, inputs, attrs);
}
const batchToSpaceND = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ batchToSpaceND_ });
//# sourceMappingURL=batch_to_space_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchNorm": () => (/* binding */ batchNorm)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _batchnorm_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./batchnorm_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Batch normalization.
 *
 * As described in
 * [http://arxiv.org/abs/1502.03167](http://arxiv.org/abs/1502.03167).
 *
 * Mean, variance, scale, and offset can be of two shapes:
 *   - The same shape as the input.
 *   - In the common case, the depth dimension is the last dimension of x, so
 *     the values would be an `tf.Tensor1D` of shape [depth].
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that parameters passed are of given rank
 *   - `tf.batchNorm2d`
 *   - `tf.batchNorm3d`
 *   - `tf.batchNorm4d`
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function batchNorm_(x, mean, variance, offset, scale, varianceEpsilon) {
    if (varianceEpsilon == null) {
        varianceEpsilon = 0.001;
    }
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'batchNorm');
    const $mean = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(mean, 'mean', 'batchNorm');
    const $variance = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(variance, 'variance', 'batchNorm');
    let $scale;
    if (scale != null) {
        $scale = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(scale, 'scale', 'batchNorm');
    }
    let $offset;
    if (offset != null) {
        $offset = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(offset, 'offset', 'batchNorm');
    }
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($mean.rank === $variance.rank, () => 'Batch normalization gradient requires mean and variance to have ' +
        'equal ranks.');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($offset == null || $mean.rank === $offset.rank, () => 'Batch normalization gradient requires mean and offset to have ' +
        'equal ranks.');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($scale == null || $mean.rank === $scale.rank, () => 'Batch normalization gradient requires mean and scale to have ' +
        'equal ranks.');
    const x4D = (0,_batchnorm_util__WEBPACK_IMPORTED_MODULE_3__.xAs4D)($x);
    const inputs = {
        x: x4D,
        scale: $scale,
        offset: $offset,
        mean: $mean,
        variance: $variance
    };
    const attrs = { varianceEpsilon };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.FusedBatchNorm, inputs, attrs);
    return (0,_reshape__WEBPACK_IMPORTED_MODULE_5__.reshape)(res, $x.shape);
}
const batchNorm = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ batchNorm_ });
//# sourceMappingURL=batchnorm.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchNorm2d": () => (/* binding */ batchNorm2d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _batchnorm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");




/**
 * Batch normalization, strictly for 2D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'batchNorm');
    const $mean = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(mean, 'mean', 'batchNorm');
    const $variance = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(variance, 'variance', 'batchNorm');
    let $scale;
    if (scale != null) {
        $scale = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(scale, 'scale', 'batchNorm');
    }
    let $offset;
    if (offset != null) {
        $offset = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(offset, 'offset', 'batchNorm');
    }
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ` +
        `${$x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($mean.rank === 2 || $mean.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` +
        `got rank ${$mean.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($variance.rank === 2 || $variance.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` +
        `but got rank ${$variance.rank}.`);
    if ($scale != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__.assert($scale.rank === 2 || $scale.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` +
            `but got rank ${$scale.rank}.`);
    }
    if ($offset != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__.assert($offset.rank === 2 || $offset.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` +
            `but got rank ${$offset.rank}.`);
    }
    return (0,_batchnorm__WEBPACK_IMPORTED_MODULE_2__.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm2d = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ batchNorm2d_ });
//# sourceMappingURL=batchnorm2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm3d.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm3d.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchNorm3d": () => (/* binding */ batchNorm3d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _batchnorm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");




/**
 * Batch normalization, strictly for 3D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm3d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'batchNorm');
    const $mean = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(mean, 'mean', 'batchNorm');
    const $variance = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(variance, 'variance', 'batchNorm');
    let $scale;
    if (scale != null) {
        $scale = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(scale, 'scale', 'batchNorm');
    }
    let $offset;
    if (offset != null) {
        $offset = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(offset, 'offset', 'batchNorm');
    }
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ` +
        `${$x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($mean.rank === 3 || $mean.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but ` +
        `got rank ${$mean.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($variance.rank === 3 || $variance.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 ` +
        `but got rank ${$variance.rank}.`);
    if ($scale != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__.assert($scale.rank === 3 || $scale.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 ` +
            `but got rank ${$scale.rank}.`);
    }
    if ($offset != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__.assert($offset.rank === 3 || $offset.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 ` +
            `but got rank ${$offset.rank}.`);
    }
    return (0,_batchnorm__WEBPACK_IMPORTED_MODULE_2__.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm3d = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ batchNorm3d_ });
//# sourceMappingURL=batchnorm3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "batchNorm4d": () => (/* binding */ batchNorm4d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _batchnorm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");




/**
 * Batch normalization, strictly for 4D. For the more relaxed version, see
 * `tf.batchNorm`.
 *
 * @param x The input Tensor.
 * @param mean A mean Tensor.
 * @param variance A variance Tensor.
 * @param offset An offset Tensor.
 * @param scale A scale Tensor.
 * @param varianceEpsilon A small float number to avoid dividing by 0.
 */
function batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'batchNorm');
    const $mean = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(mean, 'mean', 'batchNorm');
    const $variance = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(variance, 'variance', 'batchNorm');
    let $scale;
    if (scale != null) {
        $scale = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(scale, 'scale', 'batchNorm');
    }
    let $offset;
    if (offset != null) {
        $offset = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(offset, 'offset', 'batchNorm');
    }
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ` +
        `${$x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($mean.rank === 4 || $mean.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` +
        `got rank ${$mean.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($variance.rank === 4 || $variance.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` +
        `but got rank ${$variance.rank}.`);
    if ($scale != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__.assert($scale.rank === 4 || $scale.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` +
            `but got rank ${$scale.rank}.`);
    }
    if ($offset != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__.assert($offset.rank === 4 || $offset.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` +
            `but got rank ${$offset.rank}.`);
    }
    return (0,_batchnorm__WEBPACK_IMPORTED_MODULE_2__.batchNorm)($x, $mean, $variance, $offset, $scale, varianceEpsilon);
}
const batchNorm4d = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ batchNorm4d_ });
//# sourceMappingURL=batchnorm4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm_util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm_util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xAs4D": () => (/* binding */ xAs4D)
/* harmony export */ });
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");

function xAs4D(x) {
    let x4D;
    if (x.rank === 0 || x.rank === 1) {
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)(x, [1, 1, 1, x.size]);
    }
    else if (x.rank === 2) {
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)(x, [1, 1, x.shape[0], x.shape[1]]);
    }
    else if (x.rank === 3) {
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
    }
    else {
        x4D = x;
    }
    return x4D;
}
//# sourceMappingURL=batchnorm_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addStrict": () => (/* binding */ addStrict),
/* harmony export */   "divStrict": () => (/* binding */ divStrict),
/* harmony export */   "maximumStrict": () => (/* binding */ maximumStrict),
/* harmony export */   "minimumStrict": () => (/* binding */ minimumStrict),
/* harmony export */   "modStrict": () => (/* binding */ modStrict),
/* harmony export */   "mulStrict": () => (/* binding */ mulStrict),
/* harmony export */   "powStrict": () => (/* binding */ powStrict),
/* harmony export */   "squaredDifferenceStrict": () => (/* binding */ squaredDifferenceStrict),
/* harmony export */   "subStrict": () => (/* binding */ subStrict)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _maximum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./maximum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony import */ var _minimum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./minimum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js");
/* harmony import */ var _mod__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./mod */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _squared_difference__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./squared_difference */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */













/**
 * @deprecated
 * Adds two `tf.Tensor`s element-wise, A + B.
 *
 * Inputs must be the same shape. For broadcasting support, use add() instead.
 *
 * @param a The first Tensor to add element-wise.
 * @param b The second Tensor to add element-wise.
 */
function addStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'addStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'addStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch($a.shape, $b.shape, 'Error in addStrict: ');
    return (0,_add__WEBPACK_IMPORTED_MODULE_3__.add)($a, $b);
}
/**
 * @deprecated
 * Subtracts two `tf.Tensor`s element-wise, A - B. Inputs must
 * be the same shape.
 *
 * For broadcasting support, use `tf.sub` instead.
 *
 * @param a The first Tensor to subtract element-wise.
 * @param b The second Tensor to subtract element-wise.
 */
function subStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'subStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'subStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch($a.shape, $b.shape, 'Error in subStrict: ');
    return (0,_sub__WEBPACK_IMPORTED_MODULE_4__.sub)($a, $b);
}
/**
 * @deprecated
 * Computes the power of one `tf.Tensor` to another. Inputs must
 * be the same shape.
 *
 * For broadcasting support, use `tf.pow` instead.
 *
 * @param base The base tensor to pow element-wise.
 * @param exp The exponent tensor to pow element-wise.
 */
function powStrict_(base, exp) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    _util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch(base.shape, exp.shape, 'Error in powStrict: ');
    return (0,_pow__WEBPACK_IMPORTED_MODULE_5__.pow)(base, exp);
}
/**
 * @deprecated
 * Multiplies two `tf.Tensor`s element-wise, A * B.
 *
 * Inputs must be the same shape. For broadcasting support, use `tf.mul`.
 *
 * @param a The first tensor to multiply.
 * @param b The first tensor to multiply. Must have the same
 *    dtype as `a`.
 */
function mulStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'mul');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'mul');
    _util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch($a.shape, $b.shape, 'Error in multiplyStrict: ');
    return (0,_mul__WEBPACK_IMPORTED_MODULE_6__.mul)($a, $b);
}
/**
 * @deprecated
 * Divides two `tf.Tensor`s element-wise, A / B. Inputs must
 * be the same shape.
 *
 * @param a The first tensor as the numerator for element-wise division.
 * @param b The second tensor as the denominator for element-wise division.
 */
function divStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'div');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'div');
    _util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch($a.shape, $b.shape, 'Error in divideStrict: ');
    return (0,_div__WEBPACK_IMPORTED_MODULE_7__.div)($a, $b);
}
/**
 * @deprecated
 * Returns the mod of a and b (`a < b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use mod().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */
function modStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'modStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'modStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch($a.shape, $b.shape, 'Error in modStrict: ');
    return (0,_mod__WEBPACK_IMPORTED_MODULE_8__.mod)($a, $b);
}
/**
 * @deprecated
 * Returns the min of a and b (`a < b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use minimum().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */
function minimumStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'minimumStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'minimumStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch($a.shape, $b.shape, 'Error in minimumStrict: ');
    return (0,_minimum__WEBPACK_IMPORTED_MODULE_9__.minimum)($a, $b);
}
/**
 * @deprecated
 * Returns the max of a and b (`a > b ? a : b`) element-wise. Inputs must
 * be the same shape. For broadcasting support, use maximum().
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same dtype as `a`.
 */
function maximumStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'maximumStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'maximumStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch($a.shape, $b.shape, 'Error in maximumStrict: ');
    return (0,_maximum__WEBPACK_IMPORTED_MODULE_10__.maximum)($a, $b);
}
/**
 * @deprecated
 * Returns (a - b) * (a - b) element-wise.
 *
 * Inputs must be the same shape. For broadcasting support, use
 * `tf.squaredDifference` instead.
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 */
function squaredDifferenceStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'squaredDifferenceStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'squaredDifferenceStrict');
    _util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch($a.shape, $b.shape, 'Error in squaredDifferenceStrict: ');
    return (0,_squared_difference__WEBPACK_IMPORTED_MODULE_11__.squaredDifference)($a, $b);
}
const addStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_12__.op)({ addStrict_ });
const divStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_12__.op)({ divStrict_ });
const maximumStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_12__.op)({ maximumStrict_ });
const minimumStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_12__.op)({ minimumStrict_ });
const modStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_12__.op)({ modStrict_ });
const mulStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_12__.op)({ mulStrict_ });
const powStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_12__.op)({ powStrict_ });
const squaredDifferenceStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_12__.op)({ squaredDifferenceStrict_ });
const subStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_12__.op)({ subStrict_ });
//# sourceMappingURL=binary_ops.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/bincount.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/bincount.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bincount": () => (/* binding */ bincount)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Outputs a vector with length `size` and the same dtype as `weights`.
 *
 * If `weights` are empty, then index `i` stores the number of times the value
 * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the
 * sum of the value in `weights` at each index where the corresponding value in
 * `x` is `i`.
 *
 * Values in `x` outside of the range [0, size) are ignored.
 *
 * @param x The input int tensor, rank 1.
 * @param weights The weights tensor, must have the same shape as x, or a
 *     length-0 Tensor, in which case it acts as all weights equal to 1.
 * @param size Non-negative integer.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function bincount_(x, weights, size) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'bincount');
    const $weights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(weights, 'weights', 'bincount');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.dtype === 'int32', () => `Error in bincount: input ` +
        `dtype must be int32, but got ${$x.dtype}`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($weights.size === $x.size || $weights.size === 0, () => `Error in bincount: weights must have the same size as input or` +
        `0-length, but got input shape: ${$x.shape}, weights shape: ` +
        `${$weights.shape}.`);
    const inputs = { x: $x, weights: $weights };
    const attrs = { size };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Bincount, inputs, attrs);
}
const bincount = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ bincount_ });
//# sourceMappingURL=bincount.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "booleanMaskAsync": () => (/* binding */ booleanMaskAsync)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _gather__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./gather */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _squeeze__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./squeeze */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js");
/* harmony import */ var _where_async__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./where_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Apply boolean mask to tensor.
 *
 * ```js
 * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);
 * const mask = tf.tensor1d([1, 0, 1], 'bool');
 * const result = await tf.booleanMaskAsync(tensor, mask);
 * result.print();
 * ```
 *
 * @param tensor N-D tensor.
 * @param mask K-D boolean tensor, K <= N and K must be known statically.
 * @param axis A 0-D int Tensor representing the axis in tensor to mask from.
 *     By default, axis is 0 which will mask from the first dimension.
 *     Otherwise K + axis <= N.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
async function booleanMaskAsync_(tensor, mask, axis) {
    const $tensor = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(tensor, 'tensor', 'boolMask');
    const $mask = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(mask, 'mask', 'boolMask', 'bool');
    const axisFrom = axis == null ? 0 : axis;
    const maskDim = $mask.rank;
    const tensorShape = $tensor.shape;
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(maskDim > 0, () => 'mask cannot be scalar');
    _util__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);
    let leadingSize = 1;
    for (let i = axisFrom; i < axisFrom + maskDim; i++) {
        leadingSize *= tensorShape[i];
    }
    const targetTensorShape = tensorShape.slice(0, axisFrom)
        .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));
    const reshapedTensor = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($tensor, targetTensorShape);
    const reshapedMask = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($mask, [-1]);
    const positivePositions = await (0,_where_async__WEBPACK_IMPORTED_MODULE_3__.whereAsync)(reshapedMask);
    const indices = (0,_squeeze__WEBPACK_IMPORTED_MODULE_4__.squeeze)(positivePositions, [1]);
    const res = (0,_gather__WEBPACK_IMPORTED_MODULE_5__.gather)(reshapedTensor, indices, axisFrom);
    // Ensure no memory leak.
    if (tensor !== $tensor) {
        $tensor.dispose();
    }
    if (mask !== $mask) {
        $mask.dispose();
    }
    indices.dispose();
    reshapedTensor.dispose();
    reshapedMask.dispose();
    positivePositions.dispose();
    return res;
}
const booleanMaskAsync = booleanMaskAsync_;
//# sourceMappingURL=boolean_mask.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "broadcastTo": () => (/* binding */ broadcastTo)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _clone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clone */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Broadcast an array to a compatible shape NumPy-style.
 *
 * The tensor's shape is compared to the broadcast shape from end to beginning.
 * Ones are prepended to the tensor's shape until is has the same length as
 * the broadcast shape. If input.shape[i]==shape[i], the (i+1)-th axis is
 * already broadcast-compatible. If input.shape[i]==1 and shape[i]==N, then
 * the input tensor is tiled N times along that axis (using tf.tile).
 *
 * @param input The tensor that is to be broadcasted.
 * @param shape The input is to be broadcast to this shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function broadcastTo_(x, shape) {
    let input = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'broadcastTo', 'x');
    const xShape = input.shape;
    if (shape.some(d => !(d > 0) || d % 1 !== 0)) {
        throw new Error(`broadcastTo(): Invalid broadcast shape [${shape}].`);
    }
    if (shape.length < input.rank) {
        throw new Error(`broadcastTo(): shape.length=${shape.length} < input.rank=${input.rank}.`);
    }
    if (shape.length > input.rank) {
        const newShape = input.shape.slice();
        while (newShape.length < shape.length) {
            newShape.unshift(1);
        }
        input = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(input, newShape);
    }
    const inputShape = input.shape;
    const reps = Array.from(shape);
    for (let i = shape.length - 1; i >= 0; i--) {
        if (inputShape[i] === shape[i]) {
            reps[i] = 1;
        }
        else if (input.shape[i] !== 1) {
            throw new Error(`broadcastTo(): [${xShape}] cannot be broadcast to [${shape}].`);
        }
    }
    const axes = reps.map((n, i) => n > 1 ? i : -1).filter(i => i >= 0);
    if (axes.length === 0) {
        return (0,_clone__WEBPACK_IMPORTED_MODULE_3__.clone)(input);
    }
    // TODO call broadcastTo kernel directly once backends implement broadcstTo
    const inputs = { x: input };
    const attrs = { reps };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.Tile, inputs, attrs);
}
const broadcastTo = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ broadcastTo_ });
//# sourceMappingURL=broadcast_to.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getBroadcastDims": () => (/* binding */ getBroadcastDims),
/* harmony export */   "getReductionAxes": () => (/* binding */ getReductionAxes),
/* harmony export */   "assertAndGetBroadcastShape": () => (/* binding */ assertAndGetBroadcastShape)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Returns the dimensions in the input shape that are broadcasted to
 * produce the provided output shape.
 *
 * The returned dimensions are 0-indexed and sorted. An example:
 * inShape = [4, 1, 3]
 * outShape = [5, 4, 3, 3]
 * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.
 */
function getBroadcastDims(inShape, outShape) {
    const inRank = inShape.length;
    const dims = [];
    for (let i = 0; i < inRank; i++) {
        const dim = inRank - 1 - i;
        const a = inShape[dim] || 1;
        const b = outShape[outShape.length - 1 - i] || 1;
        if (b > 1 && a === 1) {
            dims.unshift(dim);
        }
    }
    return dims;
}
/**
 * Returns the axes in the output space that should be reduced to produce
 * the input space.
 */
function getReductionAxes(inShape, outShape) {
    const result = [];
    for (let i = 0; i < outShape.length; i++) {
        const inDim = inShape[inShape.length - i - 1];
        const outAxis = outShape.length - i - 1;
        const outDim = outShape[outAxis];
        if (inDim == null || (inDim === 1 && outDim > 1)) {
            result.unshift(outAxis);
        }
    }
    return result;
}
function assertAndGetBroadcastShape(shapeA, shapeB) {
    const result = [];
    const l = Math.max(shapeA.length, shapeB.length);
    for (let i = 0; i < l; i++) {
        let a = shapeA[shapeA.length - i - 1];
        if (a == null) {
            a = 1;
        }
        let b = shapeB[shapeB.length - i - 1];
        if (b == null) {
            b = 1;
        }
        if (a === 1) {
            result.unshift(b);
        }
        else if (b === 1) {
            result.unshift(a);
        }
        else if (a !== b) {
            const errMsg = `Operands could not be broadcast together with shapes ` +
                `${shapeA} and ${shapeB}.`;
            throw Error(errMsg);
        }
        else {
            result.unshift(a);
        }
    }
    return result;
}
//# sourceMappingURL=broadcast_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/browser.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/browser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toPixels": () => (/* binding */ toPixels),
/* harmony export */   "fromPixels": () => (/* binding */ fromPixels)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _kernel_registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_registry */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _tensor3d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tensor3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








let fromPixels2DContext;
/**
 * Creates a `tf.Tensor` from an image.
 *
 * ```js
 * const image = new ImageData(1, 1);
 * image.data[0] = 100;
 * image.data[1] = 150;
 * image.data[2] = 200;
 * image.data[3] = 255;
 *
 * tf.browser.fromPixels(image).print();
 * ```
 *
 * @param pixels The input image to construct the tensor from. The
 * supported image types are all 4-channel. You can also pass in an image
 * object with following attributes:
 * `{data: Uint8Array; width: number; height: number}`
 * @param numChannels The number of channels of the output tensor. A
 * numChannels value less than 4 allows you to ignore channels. Defaults to
 * 3 (ignores alpha channel of input image).
 *
 * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}
 */
function fromPixels_(pixels, numChannels = 3) {
    // Sanity checks.
    if (numChannels > 4) {
        throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');
    }
    if (pixels == null) {
        throw new Error('pixels passed to tf.browser.fromPixels() can not be null');
    }
    let isPixelData = false;
    let isImageData = false;
    let isVideo = false;
    let isImage = false;
    let isCanvasLike = false;
    let isImageBitmap = false;
    if (pixels.data instanceof Uint8Array) {
        isPixelData = true;
    }
    else if (typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {
        isImageData = true;
    }
    else if (typeof (HTMLVideoElement) !== 'undefined' &&
        pixels instanceof HTMLVideoElement) {
        isVideo = true;
    }
    else if (typeof (HTMLImageElement) !== 'undefined' &&
        pixels instanceof HTMLImageElement) {
        isImage = true;
        // tslint:disable-next-line: no-any
    }
    else if (pixels.getContext != null) {
        isCanvasLike = true;
    }
    else if (typeof (ImageBitmap) !== 'undefined' &&
        pixels instanceof ImageBitmap) {
        isImageBitmap = true;
    }
    else {
        throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' +
            `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +
            `in browser, or OffscreenCanvas, ImageData in webworker` +
            ` or {data: Uint32Array, width: number, height: number}, ` +
            `but was ${pixels.constructor.name}`);
    }
    if (isVideo) {
        const HAVE_CURRENT_DATA_READY_STATE = 2;
        if (isVideo &&
            pixels.readyState <
                HAVE_CURRENT_DATA_READY_STATE) {
            throw new Error('The video element has not loaded data yet. Please wait for ' +
                '`loadeddata` event on the <video> element.');
        }
    }
    // If the current backend has 'FromPixels' registered, it has a more
    // efficient way of handling pixel uploads, so we call that.
    const kernel = (0,_kernel_registry__WEBPACK_IMPORTED_MODULE_1__.getKernel)(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.FromPixels, _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.backendName);
    if (kernel != null) {
        const inputs = { pixels };
        const attrs = { numChannels };
        return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.FromPixels, inputs, attrs);
    }
    const [width, height] = isVideo ?
        [
            pixels.videoWidth,
            pixels.videoHeight
        ] :
        [pixels.width, pixels.height];
    let vals;
    if (isCanvasLike) {
        vals =
            // tslint:disable-next-line:no-any
            pixels.getContext('2d').getImageData(0, 0, width, height).data;
    }
    else if (isImageData || isPixelData) {
        vals = pixels.data;
    }
    else if (isImage || isVideo || isImageBitmap) {
        if (fromPixels2DContext == null) {
            fromPixels2DContext = document.createElement('canvas').getContext('2d');
        }
        fromPixels2DContext.canvas.width = width;
        fromPixels2DContext.canvas.height = height;
        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);
        vals = fromPixels2DContext.getImageData(0, 0, width, height).data;
    }
    let values;
    if (numChannels === 4) {
        values = new Int32Array(vals);
    }
    else {
        const numPixels = width * height;
        values = new Int32Array(numPixels * numChannels);
        for (let i = 0; i < numPixels; i++) {
            for (let channel = 0; channel < numChannels; ++channel) {
                values[i * numChannels + channel] = vals[i * 4 + channel];
            }
        }
    }
    const outShape = [height, width, numChannels];
    return (0,_tensor3d__WEBPACK_IMPORTED_MODULE_3__.tensor3d)(values, outShape, 'int32');
}
/**
 * Draws a `tf.Tensor` of pixel values to a byte array or optionally a
 * canvas.
 *
 * When the dtype of the input is 'float32', we assume values in the range
 * [0-1]. Otherwise, when input is 'int32', we assume values in the range
 * [0-255].
 *
 * Returns a promise that resolves when the canvas has been drawn to.
 *
 * @param img A rank-2 or rank-3 tensor. If rank-2, draws grayscale. If
 *     rank-3, must have depth of 1, 3 or 4. When depth of 1, draws
 * grayscale. When depth of 3, we draw with the first three components of
 * the depth dimension corresponding to r, g, b and alpha = 1. When depth of
 * 4, all four components of the depth dimension correspond to r, g, b, a.
 * @param canvas The canvas to draw to.
 *
 * @doc {heading: 'Browser', namespace: 'browser'}
 */
async function toPixels(img, canvas) {
    let $img = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(img, 'img', 'toPixels');
    if (!(img instanceof _tensor__WEBPACK_IMPORTED_MODULE_5__.Tensor)) {
        // Assume int32 if user passed a native array.
        const originalImgTensor = $img;
        $img = (0,_cast__WEBPACK_IMPORTED_MODULE_6__.cast)(originalImgTensor, 'int32');
        originalImgTensor.dispose();
    }
    if ($img.rank !== 2 && $img.rank !== 3) {
        throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);
    }
    const [height, width] = $img.shape.slice(0, 2);
    const depth = $img.rank === 2 ? 1 : $img.shape[2];
    if (depth > 4 || depth === 2) {
        throw new Error(`toPixels only supports depth of size ` +
            `1, 3 or 4 but got ${depth}`);
    }
    if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {
        throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` +
            ` Please use float32 or int32 tensors.`);
    }
    const data = await $img.data();
    const multiplier = $img.dtype === 'float32' ? 255 : 1;
    const bytes = new Uint8ClampedArray(width * height * 4);
    for (let i = 0; i < height * width; ++i) {
        const rgba = [0, 0, 0, 255];
        for (let d = 0; d < depth; d++) {
            const value = data[i * depth + d];
            if ($img.dtype === 'float32') {
                if (value < 0 || value > 1) {
                    throw new Error(`Tensor values for a float32 Tensor must be in the ` +
                        `range [0 - 1] but encountered ${value}.`);
                }
            }
            else if ($img.dtype === 'int32') {
                if (value < 0 || value > 255) {
                    throw new Error(`Tensor values for a int32 Tensor must be in the ` +
                        `range [0 - 255] but encountered ${value}.`);
                }
            }
            if (depth === 1) {
                rgba[0] = value * multiplier;
                rgba[1] = value * multiplier;
                rgba[2] = value * multiplier;
            }
            else {
                rgba[d] = value * multiplier;
            }
        }
        const j = i * 4;
        bytes[j + 0] = Math.round(rgba[0]);
        bytes[j + 1] = Math.round(rgba[1]);
        bytes[j + 2] = Math.round(rgba[2]);
        bytes[j + 3] = Math.round(rgba[3]);
    }
    if (canvas != null) {
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext('2d');
        const imageData = new ImageData(bytes, width, height);
        ctx.putImageData(imageData, 0, 0);
    }
    if ($img !== img) {
        $img.dispose();
    }
    return bytes;
}
const fromPixels = (0,_operation__WEBPACK_IMPORTED_MODULE_7__.op)({ fromPixels_ });
//# sourceMappingURL=browser.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "buffer": () => (/* binding */ buffer)
/* harmony export */ });
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.
 *
 * The values are stored in CPU as `TypedArray`. Fill the buffer using
 * `buffer.set()`, or by modifying directly `buffer.values`.
 *
 * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with
 * those values.
 *
 * ```js
 * // Create a buffer and set values at particular indices.
 * const buffer = tf.buffer([2, 2]);
 * buffer.set(3, 0, 0);
 * buffer.set(5, 1, 0);
 *
 * // Convert the buffer back to a tensor.
 * buffer.toTensor().print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The dtype of the buffer. Defaults to 'float32'.
 * @param values The values of the buffer as `TypedArray`. Defaults to
 * zeros.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function buffer(shape, dtype = 'float32', values) {
    dtype = dtype || 'float32';
    _util__WEBPACK_IMPORTED_MODULE_0__.assertNonNegativeIntegerDimensions(shape);
    return new _tensor__WEBPACK_IMPORTED_MODULE_1__.TensorBuffer(shape, dtype, values);
}
//# sourceMappingURL=buffer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cast": () => (/* binding */ cast)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Casts a `tf.Tensor` to a new dtype.
 *
 * ```js
 * const x = tf.tensor1d([1.5, 2.5, 3]);
 * tf.cast(x, 'int32').print();
 * ```
 * @param x The input tensor to be casted.
 * @param dtype The dtype to cast the input tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function cast_(x, dtype) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'cast');
    // Sanity checks.
    if (!_util__WEBPACK_IMPORTED_MODULE_2__.isValidDtype(dtype)) {
        throw new Error(`Failed to cast to unknown dtype ${dtype}`);
    }
    if (dtype === 'string' && $x.dtype !== 'string' ||
        dtype !== 'string' && $x.dtype === 'string') {
        throw new Error('Only strings can be casted to strings');
    }
    const inputs = { x: $x };
    const attrs = { dtype };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Cast, inputs, attrs);
}
const cast = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ cast_ });
//# sourceMappingURL=cast.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ceil": () => (/* binding */ ceil)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes ceiling of input `tf.Tensor` element-wise: `ceil(x)`
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.ceil().print();  // or tf.ceil(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function ceil_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'ceil');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Ceil, inputs);
}
const ceil = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ ceil_ });
//# sourceMappingURL=ceil.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clipByValue": () => (/* binding */ clipByValue)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Clips values element-wise. `max(min(x, clipValueMax), clipValueMin)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.clipByValue(-2, 3).print();  // or tf.clipByValue(x, -2, 3)
 * ```
 * @param x The input tensor.
 * @param clipValueMin Lower-bound of range to be clipped to.
 * @param clipValueMax Upper-bound of range to be clipped to.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function clipByValue_(x, clipValueMin, clipValueMax) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'clipByValue');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert((clipValueMin <= clipValueMax), () => `Error in clip: min (${clipValueMin}) must be ` +
        `less than or equal to max (${clipValueMax}).`);
    const inputs = { x: $x };
    const attrs = { clipValueMin, clipValueMax };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.ClipByValue, inputs, attrs);
}
const clipByValue = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ clipByValue_ });
//# sourceMappingURL=clip_by_value.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clone": () => (/* binding */ clone)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Creates a new tensor with the same values and shape as the specified
 * tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 *
 * x.clone().print();
 * ```
 *
 * @param x The tensor to clone.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function clone_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'clone', 'string_or_numeric');
    const inputs = { x: $x };
    // Note this op is called tf.identity in python. Hence the kernel name used
    // here.
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Identity, inputs);
}
const clone = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ clone_ });
//# sourceMappingURL=clone.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equalStrict": () => (/* binding */ equalStrict),
/* harmony export */   "greaterEqualStrict": () => (/* binding */ greaterEqualStrict),
/* harmony export */   "greaterStrict": () => (/* binding */ greaterStrict),
/* harmony export */   "lessEqualStrict": () => (/* binding */ lessEqualStrict),
/* harmony export */   "lessStrict": () => (/* binding */ lessStrict),
/* harmony export */   "notEqualStrict": () => (/* binding */ notEqualStrict)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _equal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js");
/* harmony import */ var _greater__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _greater_equal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _less__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./less */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less.js");
/* harmony import */ var _less_equal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _not_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./not_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/**
 * @deprecated
 * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same
 * shape.
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same shape and dtype as
 *     `a`.
 */
function notEqualStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'notEqualStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'notEqualStrict');
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($a.shape, $b.shape, 'Error in notEqualStrict: ');
    return (0,_not_equal__WEBPACK_IMPORTED_MODULE_3__.notEqual)($a, $b);
}
/**
 * @deprecated
 * Strict version of `tf.less` that forces `a` and `b` to be of the same
 * shape.
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same shape and dtype as
 *     `a`.
 */
function lessStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'lessStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'lessStrict');
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($a.shape, $b.shape, 'Error in lessStrict: ');
    return (0,_less__WEBPACK_IMPORTED_MODULE_4__.less)($a, $b);
}
function equalStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'equalStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'equalStrict');
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($a.shape, $b.shape, 'Error in equalStrict: ');
    return (0,_equal__WEBPACK_IMPORTED_MODULE_5__.equal)($a, $b);
}
function lessEqualStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'lessEqualStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'lessEqualStrict');
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($a.shape, $b.shape, 'Error in lessEqualStrict: ');
    return (0,_less_equal__WEBPACK_IMPORTED_MODULE_6__.lessEqual)($a, $b);
}
function greaterStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'greaterStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'greaterStrict');
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($a.shape, $b.shape, 'Error in greaterStrict: ');
    return (0,_greater__WEBPACK_IMPORTED_MODULE_7__.greater)($a, $b);
}
function greaterEqualStrict_(a, b) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_0__.deprecationWarn)('strict variants of ops have been deprecated ' +
        'and will be removed in future');
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'greaterEqualStrict');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'greaterEqualStrict');
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($a.shape, $b.shape, 'Error in greaterEqualStrict: ');
    return (0,_greater_equal__WEBPACK_IMPORTED_MODULE_8__.greaterEqual)($a, $b);
}
const equalStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_9__.op)({ equalStrict_ });
const greaterEqualStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_9__.op)({ greaterEqualStrict_ });
const greaterStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_9__.op)({ greaterStrict_ });
const lessEqualStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_9__.op)({ lessEqualStrict_ });
const lessStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_9__.op)({ lessStrict_ });
const notEqualStrict = (0,_operation__WEBPACK_IMPORTED_MODULE_9__.op)({ notEqualStrict_ });
//# sourceMappingURL=compare.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "complex": () => (/* binding */ complex)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Converts two real numbers to a complex number.
 *
 * Given a tensor `real` representing the real part of a complex number, and a
 * tensor `imag` representing the imaginary part of a complex number, this
 * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],
 * where r represents the real part and i represents the imag part.
 *
 * The input tensors real and imag must have the same shape.
 *
 * ```js
 * const real = tf.tensor1d([2.25, 3.25]);
 * const imag = tf.tensor1d([4.75, 5.75]);
 * const complex = tf.complex(real, imag);
 *
 * complex.print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function complex_(real, imag) {
    const $real = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(real, 'real', 'complex');
    const $imag = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(imag, 'imag', 'complex');
    _util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` +
        `must match in call to tf.complex().`);
    const inputs = { real: $real, imag: $imag };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Complex, inputs);
}
const complex = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ complex_ });
//# sourceMappingURL=complex.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concat": () => (/* binding */ concat)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _clone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clone */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Concatenates a list of `tf.Tensor`s along a given axis.
 *
 * The tensors ranks and types must match, and their sizes must match in all
 * dimensions except `axis`.
 *
 * Also available are stricter rank-specific methods that assert that
 * `tensors` are of the given rank:
 *   - `tf.concat1d`
 *   - `tf.concat2d`
 *   - `tf.concat3d`
 *   - `tf.concat4d`
 *
 * Except `tf.concat1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * a.concat(b).print();  // or a.concat(b)
 * ```
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.concat([a, b, c]).print();
 * ```
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [10, 20]]);
 * const b = tf.tensor2d([[3, 4], [30, 40]]);
 * const axis = 1;
 * tf.concat([a, b], axis).print();
 * ```
 * @param tensors A list of tensors to concatenate.
 * @param axis The axis to concate along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function concat_(tensors, axis = 0) {
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(tensors.length >= 1, () => 'Pass at least one tensor to concat');
    const $tensors = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__.convertToTensorArray)(tensors, 'tensors', 'concat', 'string_or_numeric');
    if ($tensors[0].dtype === 'complex64') {
        $tensors.forEach(tensor => {
            if (tensor.dtype !== 'complex64') {
                throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${tensor.dtype}. `);
            }
        });
    }
    if ($tensors.length === 1) {
        return (0,_clone__WEBPACK_IMPORTED_MODULE_3__.clone)($tensors[0]);
    }
    const inputs = $tensors;
    const attr = { axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.Concat, inputs, attr);
}
const concat = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ concat_ });
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concat1d": () => (/* binding */ concat1d)
/* harmony export */ });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");


/**
 * Concatenates a list of`tf.Tensor1D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(3) = |r1, g1, b1|
 * B: shape(2) = |r2, g2|
 * C = tf.concat1d([A, B]) == |r1, g1, b1, r2, g2|
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @return The concatenated array.
 */
function concat1d_(tensors) {
    return (0,_concat__WEBPACK_IMPORTED_MODULE_0__.concat)(tensors, 0 /* axis */);
}
const concat1d = (0,_operation__WEBPACK_IMPORTED_MODULE_1__.op)({ concat1d_ });
//# sourceMappingURL=concat_1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_2d.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_2d.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concat2d": () => (/* binding */ concat2d)
/* harmony export */ });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");


/**
 * Concatenates a list of`tf.Tensor2D`s along an axis. See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *
 * B: shape(2, 3) = | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * C = tf.concat2d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 3) = | r1, g1, b1 |
 *                  | r2, g2, b2 |
 *                  | r3, g3, b3 |
 *                  | r4, g4, b4 |
 *
 * if axis = 1:
 * C = shape(2, 6) = | r1, g1, b1, r3, g3, b3 |
 *                   | r2, g2, b2, r4, g4, b4 |
 *
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concatenate along.
 * @return The concatenated array.
 */
function concat2d_(tensors, axis) {
    return (0,_concat__WEBPACK_IMPORTED_MODULE_0__.concat)(tensors, axis);
}
const concat2d = (0,_operation__WEBPACK_IMPORTED_MODULE_1__.op)({ concat2d_ });
//# sourceMappingURL=concat_2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_3d.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_3d.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concat3d": () => (/* binding */ concat3d)
/* harmony export */ });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");


/**
 * Concatenates a list of `tf.Tensor3D`s along an axis.
 * See `concat` for details.
 *
 * For example, if:
 * A: shape(2, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *
 * B: shape(2, 1, 3) = | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * C = tf.concat3d([A, B], axis)
 *
 * if axis = 0:
 * C: shape(4, 1, 3) = | r1, g1, b1 |
 *                     | r2, g2, b2 |
 *                     | r3, g3, b3 |
 *                     | r4, g4, b4 |
 *
 * if axis = 1:
 * C: shape(2, 2, 3) = | r1, g1, b1, r3, g3, b3 |
 *                     | r2, g2, b2, r4, g4, b4 |
 *
 * if axis = 2:
 * C = shape(2, 1, 6) = | r1, g1, b1, r3, g3, b3 |
 *                      | r2, g2, b2, r4, g4, b4 |
 *
 * @param tensors A list of`tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */
function concat3d_(tensors, axis) {
    return (0,_concat__WEBPACK_IMPORTED_MODULE_0__.concat)(tensors, axis);
}
const concat3d = (0,_operation__WEBPACK_IMPORTED_MODULE_1__.op)({ concat3d_ });
//# sourceMappingURL=concat_3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_4d.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_4d.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concat4d": () => (/* binding */ concat4d)
/* harmony export */ });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");


/**
 * Concatenates a list of `tf.Tensor4D`s along an axis.
 * See `concat` for details.
 *
 * @param tensors A list of `tf.Tensor`s to concatenate.
 * @param axis The axis to concate along.
 * @return The concatenated array.
 */
function concat4d_(tensors, axis) {
    return (0,_concat__WEBPACK_IMPORTED_MODULE_0__.concat)(tensors, axis);
}
const concat4d = (0,_operation__WEBPACK_IMPORTED_MODULE_1__.op)({ concat4d_ });
//# sourceMappingURL=concat_4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/concat_util.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertParamsConsistent": () => (/* binding */ assertParamsConsistent),
/* harmony export */   "computeOutShape": () => (/* binding */ computeOutShape)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function assertParamsConsistent(shapes, axis) {
    const rank = shapes[0].length;
    shapes.forEach((shape, i) => {
        _util__WEBPACK_IMPORTED_MODULE_0__.assert(shape.length === rank, () => `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +
            `as the rank of the rest (${rank})`);
    });
    _util__WEBPACK_IMPORTED_MODULE_0__.assert(axis >= 0 && axis < rank, () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);
    const firstShape = shapes[0];
    shapes.forEach((shape, i) => {
        for (let r = 0; r < rank; r++) {
            _util__WEBPACK_IMPORTED_MODULE_0__.assert((r === axis) || (shape[r] === firstShape[r]), () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +
                `does not match the shape of the rest (${firstShape}) ` +
                `along the non-concatenated axis ${i}.`);
        }
    });
}
function computeOutShape(shapes, axis) {
    const outputShape = shapes[0].slice();
    for (let i = 1; i < shapes.length; i++) {
        outputShape[axis] += shapes[i][axis];
    }
    return outputShape;
}
//# sourceMappingURL=concat_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/confusion_matrix.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "confusionMatrix_": () => (/* binding */ confusionMatrix_),
/* harmony export */   "confusionMatrix": () => (/* binding */ confusionMatrix)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _one_hot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./one_hot */ "./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the confusion matrix from true labels and predicted labels.
 *
 * ```js
 * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');
 * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');
 * const numClasses = 3;
 * const out = tf.math.confusionMatrix(labels, predictions, numClasses);
 * out.print();
 * // Expected output matrix:
 * // [[2, 0, 0],
 * //  [0, 1, 1],
 * //  [0, 0, 1]]
 * ```
 *
 * @param labels The target labels, assumed to be 0-based integers
 *   for the classes. The shape is `[numExamples]`, where
 *   `numExamples` is the number of examples included.
 * @param predictions The predicted classes, assumed to be
 *   0-based integers for the classes. Must have the same shape as `labels`.
 * @param numClasses Number of all classes, as an integer.
 *   Its value must be larger than the largest element in `labels` and
 *   `predictions`.
 * @returns The confusion matrix as a int32-type 2D tensor. The value at
 *   row `r` and column `c` is the number of times examples of actual class
 *   `r` were predicted as class `c`.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
function confusionMatrix_(labels, predictions, numClasses) {
    const $labels = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(labels, 'labels', 'confusionMatrix');
    const $predictions = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(predictions, 'predictions', 'confusionMatrix');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), () => `If provided, numClasses must be a positive integer, ` +
        `but got ${numClasses}`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($labels.rank === 1, () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($predictions.rank === 1, () => `Expected the rank of predictions to be 1, ` +
        `but got ${$predictions.rank}`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($labels.shape[0] === $predictions.shape[0], () => `Mismatch in the number of examples: ` +
        `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` +
        `Labels and predictions should have the same number of elements.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(numClasses > 0 && Number.isInteger(numClasses), () => `numClasses is required to be a positive integer, but got ` +
        `${numClasses}`);
    // TODO(cais): In the future, if oneHot supports tensors inputs for
    //   `numClasses`, `confusionMatrix` can make `numClasses` optional.
    const oneHotLabels = (0,_one_hot__WEBPACK_IMPORTED_MODULE_2__.oneHot)((0,_cast__WEBPACK_IMPORTED_MODULE_3__.cast)($labels, 'int32'), numClasses);
    const oneHotPredictions = (0,_one_hot__WEBPACK_IMPORTED_MODULE_2__.oneHot)((0,_cast__WEBPACK_IMPORTED_MODULE_3__.cast)($predictions, 'int32'), numClasses);
    const oneHotLabelsT = (0,_transpose__WEBPACK_IMPORTED_MODULE_4__.transpose)(oneHotLabels);
    const product = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_5__.matMul)(oneHotLabelsT, oneHotPredictions);
    return (0,_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(product, 'int32');
}
const confusionMatrix = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ confusionMatrix_ });
//# sourceMappingURL=confusion_matrix.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv1d": () => (/* binding */ conv1d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _conv2d__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");






/**
 * Computes a 1D convolution over the input x.
 *
 * @param x The input tensor, of rank 3 or rank 2, of shape
 *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.
 * @param filter The filter, rank 3, of shape
 *     `[filterWidth, inDepth, outDepth]`.
 * @param stride The number of entries by which the filter is moved right at
 *     each step.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat An optional string from "NWC", "NCW". Defaults to "NWC",
 *     the data is stored in the order of [batch, in_width, in_channels]. Only
 *     "NWC" is currently supported.
 * @param dilation The dilation rate in which we sample input values in
 *     atrous convolution. Defaults to `1`. If it is greater than 1, then
 *     stride must be `1`.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv1d_(x, filter, stride, pad, dataFormat = 'NWC', dilation = 1, dimRoundingMode) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'conv1d');
    const $filter = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(filter, 'filter', 'conv1d');
    let x3D = $x;
    let reshapedTo3D = false;
    if ($x.rank === 2) {
        reshapedTo3D = true;
        x3D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)($x, [1, $x.shape[0], $x.shape[1]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(x3D.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($filter.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ` +
        `${$filter.rank}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_2__.assert(_util__WEBPACK_IMPORTED_MODULE_2__.isInt(pad), () => `Error in conv1d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(x3D.shape[2] === $filter.shape[1], () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` +
        `input depth for filter ${$filter.shape[1]}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_3__.eitherStridesOrDilationsAreOne(stride, dilation), () => 'Error in conv1D: Either stride or dilation must be 1. ' +
        `Got stride ${stride} and dilation '${dilation}'`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(dataFormat === 'NWC', () => `Error in conv1d: got dataFormat of ${dataFormat} but only NWC is currently supported.`);
    const filter4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);
    const input4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);
    const strides = [1, stride];
    const dilations = [1, dilation];
    const conv2dDataFormat = 'NHWC';
    const res = (0,_conv2d__WEBPACK_IMPORTED_MODULE_4__.conv2d)(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);
    if (reshapedTo3D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(res, [res.shape[2], res.shape[3]]);
    }
    return (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(res, [res.shape[0], res.shape[2], res.shape[3]]);
}
const conv1d = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ conv1d_ });
//# sourceMappingURL=conv1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2d": () => (/* binding */ conv2d)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes a 2D convolution over the input x.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'conv2d');
    const $filter = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(filter, 'filter', 'conv2d');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(x4D.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert($filter.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ` +
        `${$filter.rank}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__.assert(_util__WEBPACK_IMPORTED_MODULE_3__.isInt(pad), () => `Error in conv2d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(inDepth === $filter.shape[2], () => `Error in conv2d: depth of input (${inDepth}) must match ` +
        `input depth for filter ${$filter.shape[2]}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_4__.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    const inputs = { x: x4D, filter: $filter };
    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_5__.Conv2D, inputs, attrs);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const conv2d = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ conv2d_ });
//# sourceMappingURL=conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2DBackpropFilter": () => (/* binding */ conv2DBackpropFilter)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the derivative of the filter of a 2D convolution.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.
 * @param dy The dy image, of rank 4 or rank 3, of shape
 *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.
 * @param filterShape The shape of the filter, length 4,
 *     [filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function conv2DBackpropFilter_(x, dy, filterShape, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {
    let x4D = x;
    if (x.rank === 3) {
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
    }
    let dy4D = dy;
    if (dy4D.rank === 3) {
        dy4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(x4D.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` +
        `${x4D.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(dy4D.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` +
        `${dy4D.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(filterShape.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` +
        `${filterShape}.`);
    const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];
    const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(inDepth === filterShape[2], () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` +
        `match input depth in filter (${filterShape[2]}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(outDepth === filterShape[3], () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` +
        `match output depth for filter (${filterShape[3]}).`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_2__.assert(_util__WEBPACK_IMPORTED_MODULE_2__.isInt(pad), () => `Error in conv2dDerFilter: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inputs = { x: x4D, dy: dy4D };
    const attrs = { strides, pad, dataFormat, dimRoundingMode, filterShape };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Conv2DBackpropFilter, inputs, attrs);
}
const conv2DBackpropFilter = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ conv2DBackpropFilter_ });
//# sourceMappingURL=conv2d_backprop_filter.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2DBackpropInput": () => (/* binding */ conv2DBackpropInput)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the derivative of the input of a 2D convolution.
 *
 * @param xShape The shape of the input: [batch, height, width, inDepth].
 * If length of 3, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 4 or rank 3 of shape
 *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels].
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function conv2DBackpropInput_(xShape, dy, filter, strides, pad, dataFormat = 'NHWC', dimRoundingMode) {
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(xShape.length === dy.rank, () => `Length of inShape ` +
        `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
    let xShape4D = xShape;
    let dy4D = dy;
    let reshapedTo4D = false;
    if (dy.rank === 3) {
        reshapedTo4D = true;
        dy4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
        xShape4D = [1, xShape[0], xShape[1], xShape[2]];
    }
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ` +
        `${xShape4D.length}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got ` +
        `rank ${dy4D.rank}`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got ` +
        `rank ${filter.rank}`);
    const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];
    const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +
        `match input depth for filter ${filter.shape[2]}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +
        `match output depth for filter ${filter.shape[3]}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(_util__WEBPACK_IMPORTED_MODULE_1__.isInt(pad), () => `Error in conv2dDerInput: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inputs = { dy: dy4D, filter };
    const attrs = { strides, pad, dataFormat, dimRoundingMode, inputShape: xShape4D };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Conv2DBackpropInput, inputs, attrs);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const conv2DBackpropInput = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ conv2DBackpropInput_ });
//# sourceMappingURL=conv2d_backprop_input.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2dTranspose": () => (/* binding */ conv2dTranspose)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conv2d_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");



/**
 * Computes the transposed 2D convolution of an image, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 4 or rank 3, of shape
 *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 4 or rank 3:
 *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.
 * @param strides The strides of the original convolution:
 *     `[strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'conv2dTranspose');
    const $filter = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(filter, 'filter', 'conv2dTranspose');
    return (0,_conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_1__.conv2DBackpropInput)(outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);
}
const conv2dTranspose = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ conv2dTranspose_ });
//# sourceMappingURL=conv2d_transpose.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3d": () => (/* binding */ conv3d)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes a 3D convolution over the input x.
 *
 * @param x The input tensor, of rank 5 or rank 4, of shape
 *     `[batch, depth, height, width, channels]`. If rank 4,
 * batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.
 *      inChannels must match between input and filter.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat: An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationDepth, dilationHeight,
 *     dilationWidth]` in which we sample input values across the height
 *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.
 *     If `dilations` is a single number, then
 *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater
 *     than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv3d_(x, filter, strides, pad, dataFormat = 'NDHWC', dilations = [1, 1, 1]) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'conv3d');
    const $filter = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(filter, 'filter', 'conv3d');
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(x5D.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert($filter.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ` +
        `${$filter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(x5D.shape[4] === $filter.shape[3], () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` +
        `input depth for filter ${$filter.shape[3]}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert((0,_conv_util__WEBPACK_IMPORTED_MODULE_4__.eitherStridesOrDilationsAreOne)(strides, dilations), () => 'Error in conv3D: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(dataFormat === 'NDHWC', () => `Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);
    const inputs = { x: x5D, filter: $filter };
    const attrs = { strides, pad, dataFormat, dilations };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_5__.Conv3D, inputs, attrs);
    if (reshapedTo5D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const conv3d = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ conv3d_ });
//# sourceMappingURL=conv3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_filter.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3DBackpropFilter": () => (/* binding */ conv3DBackpropFilter)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the derivative of the filter of a 3D convolution.
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     [batch, depth, height, width, inChannels]. If rank 4, batch of 1 is
 *     assumed.
 * @param dy The dy image, of rank 5 or rank 4, of shape
 *     [batch, depth, height, width, outDepth]. If rank 4, batch of 1 is
 *     assumed.
 * @param filterShape The shape of the filter, length 5,
 *     [filterDepth, filterHeight, filterWidth, inDepth, outDepth].
 * @param strides The strides of the convolution: [strideDepth, strideHeight,
 * strideWidth].
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 */
function conv3DBackpropFilter_(x, dy, filterShape, strides, pad) {
    let x5D = x;
    if (x.rank === 4) {
        x5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2], x.shape[3]]);
    }
    let dy5D = dy;
    if (dy5D.rank === 4) {
        dy5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(x5D.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ` +
        `${x5D.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(dy5D.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ` +
        `${dy5D.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(filterShape.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ` +
        `${filterShape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(x5D.shape[4] === filterShape[3], () => `Error in conv3dDerFilter: depth of input ${x5D.shape[4]}) must ` +
        `match input depth in filter (${filterShape[3]}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(dy5D.shape[4] === filterShape[4], () => `Error in conv3dDerFilter: depth of dy (${dy5D.shape[4]}) must ` +
        `match output depth for filter (${filterShape[4]}).`);
    const inputs = { x: x5D, dy: dy5D };
    const attrs = { strides, pad, filterShape };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Conv3DBackpropFilterV2, inputs, attrs);
}
const conv3DBackpropFilter = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ conv3DBackpropFilter_ });
//# sourceMappingURL=conv3d_backprop_filter.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3DBackpropInput": () => (/* binding */ conv3DBackpropInput)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the derivative of the input of a 3D convolution.
 *
 * @param xShape The shape of the input: [batch, depth, height, width,
 * in_channels]. If length of 4, batch of 1 is assumed.
 * @param dy The derivative of the output, of rank 5 or rank 4 of shape
 *   `[batch, outDepth, outHeight, outWidth, in_channels]`.
 * If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 5, of shape
 *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideDepth, strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm used:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 */
function conv3DBackpropInput_(xShape, dy, filter, strides, pad) {
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(xShape.length === dy.rank, () => `Length of inShape ` +
        `(${xShape.length}) and rank of dy (${dy.rank}) must match`);
    let xShape5D = xShape;
    let dy5D = dy;
    let reshapedTo5D = false;
    if (dy.rank === 4) {
        reshapedTo5D = true;
        dy5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);
        xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];
    }
    const inDepth = xShape5D[4];
    const outDepth = dy5D.shape[4];
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(xShape5D.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ` +
        `${xShape5D.length}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(dy5D.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got ` +
        `rank ${dy5D.rank}`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(filter.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got ` +
        `rank ${filter.rank}`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(inDepth === filter.shape[3], () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +
        `match input depth for filter ${filter.shape[3]}.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(outDepth === filter.shape[4], () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +
        `match output depth for filter ${filter.shape[4]}.`);
    const inputs = { dy: dy5D, filter };
    const attrs = { pad, strides, inputShape: xShape5D };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Conv3DBackpropInputV2, inputs, attrs);
    if (reshapedTo5D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const conv3DBackpropInput = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ conv3DBackpropInput_ });
//# sourceMappingURL=conv3d_backprop_input.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_transpose.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_transpose.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv3dTranspose": () => (/* binding */ conv3dTranspose)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _conv3d_backprop_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conv3d_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_backprop_input.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");



/**
 * Computes the transposed 3D convolution of a volume, also known as a
 * deconvolution.
 *
 * @param x The input image, of rank 5 or rank 4, of shape
 *   `[batch, depth, height, width, inDepth]`. If rank 4, batch of 1 is assumed.
 * @param filter The filter, rank 4, of shape
 *     `[depth, filterHeight, filterWidth, outDepth, inDepth]`.
 *     `inDepth` must match `inDepth` in `x`.
 * @param outputShape Output shape, of rank 5 or rank 4:
 *     `[batch, depth, height, width, outDepth]`. If rank 3, batch of 1 is
 *    assumed.
 * @param strides The strides of the original convolution:
 *     `[strideDepth, strideHeight, strideWidth]`.
 * @param pad  The type of padding algorithm used in the non-transpose version
 *    of the op.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function conv3dTranspose_(x, filter, outputShape, strides, pad) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'conv3dTranspose');
    const $filter = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(filter, 'filter', 'conv3dTranspose');
    return (0,_conv3d_backprop_input__WEBPACK_IMPORTED_MODULE_1__.conv3DBackpropInput)(outputShape, $x, $filter, strides, pad);
}
const conv3dTranspose = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ conv3dTranspose_ });
//# sourceMappingURL=conv3d_transpose.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "computeDilation2DInfo": () => (/* binding */ computeDilation2DInfo),
/* harmony export */   "computePool2DInfo": () => (/* binding */ computePool2DInfo),
/* harmony export */   "computePool3DInfo": () => (/* binding */ computePool3DInfo),
/* harmony export */   "computeConv2DInfo": () => (/* binding */ computeConv2DInfo),
/* harmony export */   "computeConv3DInfo": () => (/* binding */ computeConv3DInfo),
/* harmony export */   "computeDefaultPad": () => (/* binding */ computeDefaultPad),
/* harmony export */   "tupleValuesAreOne": () => (/* binding */ tupleValuesAreOne),
/* harmony export */   "eitherStridesOrDilationsAreOne": () => (/* binding */ eitherStridesOrDilationsAreOne),
/* harmony export */   "convertConv2DDataFormat": () => (/* binding */ convertConv2DDataFormat)
/* harmony export */ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 *
 * @param inputShape Input tensor shape is of the following dimensions:
 *     `[batch, height, width, inChannels]`.
 * @param filterShape The filter shape is of the following dimensions:
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat The data format of the input and output data.
 *     Defaults to 'NHWC'.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.
 *     Defaults to `[1, 1]`. If `dilations` is a single number, then
 *     `dilationHeight == dilationWidth`.
 */
function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = 'NHWC', dilations) {
    // `computerConv2DInfo` require filterShape to be in the dimension of:
    // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have
    // outDepth, it should have the same depth as the input.
    // Input shape: [batch, height, width, inChannels]
    const inputChannels = inputShape[3];
    const $filterShape = [...filterShape, inputChannels];
    const $dataFormat = convertConv2DDataFormat(dataFormat);
    return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null /* roundingMode */, null /* depthWise */, $dataFormat);
}
function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'channelsLast') {
    const [filterHeight, filterWidth] = parseTupleParam(filterSize);
    let filterShape;
    if (dataFormat === 'channelsLast') {
        filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];
    }
    else if (dataFormat === 'channelsFirst') {
        filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];
    }
    else {
        throw new Error(`Unknown dataFormat ${dataFormat}`);
    }
    return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);
}
/**
 * Computes the information for a forward pass of a pooling3D operation.
 */
function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'NDHWC') {
    const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);
    let filterShape;
    let $dataFormat;
    if (dataFormat === 'NDHWC') {
        $dataFormat = 'channelsLast';
        filterShape =
            [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];
    }
    else if (dataFormat === 'NCDHW') {
        $dataFormat = 'channelsFirst';
        filterShape =
            [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];
    }
    else {
        throw new Error(`Unknown dataFormat ${dataFormat}`);
    }
    return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);
}
/**
 * Computes the information for a forward pass of a convolution/pooling
 * operation.
 */
function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = 'channelsLast') {
    let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];
    if (dataFormat === 'channelsLast') {
        [batchSize, inHeight, inWidth, inChannels] = inShape;
    }
    else if (dataFormat === 'channelsFirst') {
        [batchSize, inChannels, inHeight, inWidth] = inShape;
    }
    else {
        throw new Error(`Unknown dataFormat ${dataFormat}`);
    }
    const [filterHeight, filterWidth, , filterChannels] = filterShape;
    const [strideHeight, strideWidth] = parseTupleParam(strides);
    const [dilationHeight, dilationWidth] = parseTupleParam(dilations);
    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
    const { padInfo, outHeight, outWidth } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);
    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
    let outShape;
    if (dataFormat === 'channelsFirst') {
        outShape = [batchSize, outChannels, outHeight, outWidth];
    }
    else if (dataFormat === 'channelsLast') {
        outShape = [batchSize, outHeight, outWidth, outChannels];
    }
    return {
        batchSize,
        dataFormat,
        inHeight,
        inWidth,
        inChannels,
        outHeight,
        outWidth,
        outChannels,
        padInfo,
        strideHeight,
        strideWidth,
        filterHeight,
        filterWidth,
        effectiveFilterHeight,
        effectiveFilterWidth,
        dilationHeight,
        dilationWidth,
        inShape,
        outShape,
        filterShape
    };
}
/**
 * Computes the information for a forward pass of a 3D convolution/pooling
 * operation.
 */
function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = 'channelsLast', roundingMode) {
    let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];
    if (dataFormat === 'channelsLast') {
        [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;
    }
    else if (dataFormat === 'channelsFirst') {
        [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;
    }
    else {
        throw new Error(`Unknown dataFormat ${dataFormat}`);
    }
    const [filterDepth, filterHeight, filterWidth, , filterChannels] = filterShape;
    const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);
    const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);
    const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);
    const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);
    const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);
    const { padInfo, outDepth, outHeight, outWidth } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);
    const outChannels = depthwise ? filterChannels * inChannels : filterChannels;
    let outShape;
    if (dataFormat === 'channelsFirst') {
        outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];
    }
    else if (dataFormat === 'channelsLast') {
        outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];
    }
    return {
        batchSize,
        dataFormat,
        inDepth,
        inHeight,
        inWidth,
        inChannels,
        outDepth,
        outHeight,
        outWidth,
        outChannels,
        padInfo,
        strideDepth,
        strideHeight,
        strideWidth,
        filterDepth,
        filterHeight,
        filterWidth,
        effectiveFilterDepth,
        effectiveFilterHeight,
        effectiveFilterWidth,
        dilationDepth,
        dilationHeight,
        dilationWidth,
        inShape,
        outShape,
        filterShape
    };
}
function computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {
    if (zeroPad == null) {
        zeroPad = computeDefaultPad(inShape, fieldSize, stride);
    }
    const inputRows = inShape[0];
    const inputCols = inShape[1];
    const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    return [outputRows, outputCols];
}
function computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {
    if (zeroPad == null) {
        zeroPad = computeDefaultPad(inShape, fieldSize, stride);
    }
    const inputDepth = inShape[0];
    const inputRows = inShape[1];
    const inputCols = inShape[2];
    const outputDepths = round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);
    return [outputDepths, outputRows, outputCols, outChannels];
}
function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {
    const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);
    return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);
}
function parseTupleParam(param) {
    if (typeof param === 'number') {
        return [param, param, param];
    }
    if (param.length === 2) {
        return [param[0], param[1], 1];
    }
    return param;
}
function parse3TupleParam(param) {
    return typeof param === 'number' ? [param, param, param] : param;
}
/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d
 * Atrous convolution is equivalent to standard convolution with upsampled
 * filters with effective_filter_height =
 * filter_height + (filter_height - 1) * (dilation - 1)
 * and effective_filter_width =
 * filter_width + (filter_width - 1) * (dilation - 1),
 * produced by inserting dilation - 1 zeros along consecutive elements across
 * the filters' spatial dimensions.
 * When there is a dilation, this converts a filter dimension to the
 * effective filter dimension, so it can be used in a standard convolution.
 */
function getEffectiveFilterSize(filterSize, dilation) {
    if (dilation <= 1) {
        return filterSize;
    }
    return filterSize + (filterSize - 1) * (dilation - 1);
}
function getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {
    let padInfo;
    let outHeight;
    let outWidth;
    if (typeof pad === 'number') {
        const padType = (pad === 0) ? 'VALID' : 'NUMBER';
        padInfo = { top: pad, bottom: pad, left: pad, right: pad, type: padType };
        const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);
        outHeight = outShape[0];
        outWidth = outShape[1];
    }
    else if (pad === 'same') {
        outHeight = Math.ceil(inHeight / strideHeight);
        outWidth = Math.ceil(inWidth / strideWidth);
        const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);
        const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);
        const top = Math.floor(padAlongHeight / 2);
        const bottom = padAlongHeight - top;
        const left = Math.floor(padAlongWidth / 2);
        const right = padAlongWidth - left;
        padInfo = { top, bottom, left, right, type: 'SAME' };
    }
    else if (pad === 'valid') {
        padInfo = { top: 0, bottom: 0, left: 0, right: 0, type: 'VALID' };
        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
    }
    else if (typeof pad === 'object') {
        const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];
        const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];
        const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];
        const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];
        const padType = (top === 0 && bottom === 0 && left === 0 && right === 0) ?
            'VALID' :
            'EXPLICIT';
        padInfo = { top, bottom, left, right, type: padType };
        outHeight = round((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);
        outWidth = round((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);
    }
    else {
        throw Error(`Unknown padding parameter: ${pad}`);
    }
    return { padInfo, outHeight, outWidth };
}
function get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {
    let padInfo;
    let outDepth;
    let outHeight;
    let outWidth;
    if (typeof pad === 'number') {
        const padType = (pad === 0) ? 'VALID' : 'NUMBER';
        padInfo = {
            top: pad,
            bottom: pad,
            left: pad,
            right: pad,
            front: pad,
            back: pad,
            type: padType
        };
        const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);
        outDepth = outShape[0];
        outHeight = outShape[1];
        outWidth = outShape[2];
    }
    else if (pad === 'same') {
        outDepth = Math.ceil(inDepth / strideDepth);
        outHeight = Math.ceil(inHeight / strideHeight);
        outWidth = Math.ceil(inWidth / strideWidth);
        const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;
        const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;
        const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;
        const front = Math.floor(padAlongDepth / 2);
        const back = padAlongDepth - front;
        const top = Math.floor(padAlongHeight / 2);
        const bottom = padAlongHeight - top;
        const left = Math.floor(padAlongWidth / 2);
        const right = padAlongWidth - left;
        padInfo = { top, bottom, left, right, front, back, type: 'SAME' };
    }
    else if (pad === 'valid') {
        padInfo = {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            front: 0,
            back: 0,
            type: 'VALID'
        };
        outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);
        outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);
        outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);
    }
    else {
        throw Error(`Unknown padding parameter: ${pad}`);
    }
    return { padInfo, outDepth, outHeight, outWidth };
}
/**
 * Rounds a value depending on the rounding mode
 * @param value
 * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function round(value, roundingMode) {
    if (!roundingMode) {
        return Math.trunc(value);
    }
    switch (roundingMode) {
        case 'round':
            // used for Caffe Conv
            return Math.round(value);
        case 'ceil':
            // used for Caffe Pool
            return Math.ceil(value);
        case 'floor':
            return Math.floor(value);
        default:
            throw new Error(`Unknown roundingMode ${roundingMode}`);
    }
}
function tupleValuesAreOne(param) {
    const [dimA, dimB, dimC] = parseTupleParam(param);
    return dimA === 1 && dimB === 1 && dimC === 1;
}
function eitherStridesOrDilationsAreOne(strides, dilations) {
    return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);
}
/**
 * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to
 *    'channelsLast'|'channelsFirst'
 * @param dataFormat in 'NHWC'|'NCHW' mode
 * @return dataFormat in 'channelsLast'|'channelsFirst' mode
 * @throws unknown dataFormat
 */
function convertConv2DDataFormat(dataFormat) {
    if (dataFormat === 'NHWC') {
        return 'channelsLast';
    }
    else if (dataFormat === 'NCHW') {
        return 'channelsFirst';
    }
    else {
        throw new Error(`Unknown dataFormat ${dataFormat}`);
    }
}
//# sourceMappingURL=conv_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cos": () => (/* binding */ cos)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes cos of the input `tf.Tensor` element-wise: `cos(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.cos().print();  // or tf.cos(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function cos_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'cos');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Cos, inputs);
}
const cos = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ cos_ });
//# sourceMappingURL=cos.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cosh": () => (/* binding */ cosh)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes hyperbolic cos of the input `tf.Tensor` element-wise: `cosh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.cosh().print();  // or tf.cosh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function cosh_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'cosh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Cosh, inputs);
}
const cosh = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ cosh_ });
//# sourceMappingURL=cosh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cumsum": () => (/* binding */ cumsum)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the cumulative sum of a `tf.Tensor` along `axis`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4]);
 * x.cumsum().print();
 * ```
 * ```js
 * const x = tf.tensor([[1, 2], [3, 4]]);
 * x.cumsum().print();
 * ```
 *
 * @param x The input tensor to be summed.
 * @param axis The axis along which to sum. Optional. Defaults to 0.
 * @param exclusive Whether to perform exclusive cumulative sum. Optional.
 *     Defaults to false. If set to true then the sum of each tensor entry
 *     does not include its own value, but only the values previous to it
 *     along the specified axis.
 * @param reverse Whether to sum in the opposite direction. Optional.
 *     Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Scan'}
 */
function cumsum_(x, axis = 0, exclusive = false, reverse = false) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'cumsum');
    const inputs = { x: $x };
    const attrs = { axis, exclusive, reverse };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Cumsum, inputs, attrs);
}
const cumsum = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ cumsum_ });
//# sourceMappingURL=cumsum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/dense_bincount.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/dense_bincount.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "denseBincount": () => (/* binding */ denseBincount)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Outputs a vector with length `size` and the same dtype as `weights`.
 *
 * If `weights` are empty, then index `i` stores the number of times the value
 * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the
 * sum of the value in `weights` at each index where the corresponding value in
 * `x` is `i`.
 *
 * Values in `x` outside of the range [0, size) are ignored.
 *
 * @param x The input int tensor, rank 1 or rank 2.
 * @param weights The weights tensor, must have the same shape as x, or a
 *     length-0 Tensor, in which case it acts as all weights equal to 1.
 * @param size Non-negative integer.
 * @param binaryOutput Optional. Whether the kernel should count the appearance
 *     or number of occurrences. Defaults to False.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function denseBincount_(x, weights, size, binaryOutput = false) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'denseBincount');
    const $weights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(weights, 'weights', 'denseBincount');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.dtype === 'int32', () => `Error in denseBincount: input ` +
        `dtype must be int32, but got ${$x.dtype}`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got ` +
        `rank ${$x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($weights.size === $x.size || $weights.size === 0, () => `Error in denseBincount: weights must have the same shape as x or ` +
        `0-length, but got x shape: ${$x.shape}, weights shape: ` +
        `${$weights.shape}.`);
    const inputs = { x: $x, weights: $weights };
    const attrs = { size, binaryOutput };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.DenseBincount, inputs, attrs);
}
const denseBincount = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ denseBincount_ });
//# sourceMappingURL=dense_bincount.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthToSpace": () => (/* binding */ depthToSpace)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Rearranges data from depth into blocks of spatial data. More specifically,
 * this op outputs a copy of the input tensor where values from the `depth`
 * dimension are moved in spatial blocks to the `height` and `width` dimensions.
 * The attr `blockSize` indicates the input block size and how the data is
 * moved.
 *
 *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged
 * into non-overlapping blocks of size `blockSize x blockSize`
 *
 *  - The width the output tensor is `inputWidth * blockSize`, whereas the
 * height is `inputHeight * blockSize`
 *
 *  - The Y, X coordinates within each block of the output image are determined
 * by the high order component of the input channel index
 *
 *  - The depth of the input tensor must be divisible by `blockSize *
 * blockSize`
 *
 * The `dataFormat` attr specifies the layout of the input and output tensors
 * with the following options: "NHWC": [ `batch, height, width, channels` ]
 * "NCHW": [ `batch, channels, height, width` ]
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);
 * const blockSize = 2;
 * const dataFormat = "NHWC";
 *
 * tf.depthToSpace(x, blockSize, dataFormat).print();
 * ```
 *
 * @param x The input tensor of rank 4
 * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to "NHWC"
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function depthToSpace_(x, blockSize, dataFormat = 'NHWC') {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'depthToSpace');
    const inputHeight = (dataFormat === 'NHWC') ? $x.shape[1] : $x.shape[2];
    const inputWidth = (dataFormat === 'NHWC') ? $x.shape[2] : $x.shape[3];
    const inputDepth = (dataFormat === 'NHWC') ? $x.shape[3] : $x.shape[1];
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(inputHeight * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${inputHeight} and ${blockSize}  for depthToSpace with input shape
    ${$x.shape}`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(inputWidth * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${inputWidth} and ${blockSize} for depthToSpace with input shape
        ${$x.shape}`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert((inputDepth % (blockSize * blockSize) === 0), () => `Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);
    const inputs = { x: $x };
    const attrs = { blockSize, dataFormat };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.DepthToSpace, inputs, attrs);
}
const depthToSpace = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ depthToSpace_ });
//# sourceMappingURL=depth_to_space.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2d": () => (/* binding */ depthwiseConv2d)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Depthwise 2D convolution.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function depthwiseConv2d_(x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'depthwiseConv2d');
    const $filter = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(filter, 'filter', 'depthwiseConv2d');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(x4D.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got ` +
        `rank ${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert($filter.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` +
        `${$filter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(x4D.shape[3] === $filter.shape[2], () => `Error in depthwiseConv2d: number of input channels ` +
        `(${x4D.shape[3]}) must match the inChannels dimension in ` +
        `filter ${$filter.shape[2]}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__.assert(_util__WEBPACK_IMPORTED_MODULE_3__.isInt(pad), () => `Error in depthwiseConv2d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inputs = { x: x4D, filter: $filter };
    const attrs = { strides, pad, dataFormat, dilations, dimRoundingMode };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.DepthwiseConv2dNative, inputs, attrs);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const depthwiseConv2d = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ depthwiseConv2d_ });
//# sourceMappingURL=depthwise_conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2dNativeBackpropFilter": () => (/* binding */ depthwiseConv2dNativeBackpropFilter)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, strides, pad, dilations = [1, 1], dimRoundingMode) {
    let x4D = x;
    if (x.rank === 3) {
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(x, [1, x.shape[0], x.shape[1], x.shape[2]]);
    }
    let dy4D = dy;
    if (dy4D.rank === 3) {
        dy4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
    }
    const inputs = { x: x4D, dy: dy4D };
    const attrs = { strides, pad, dimRoundingMode, dilations, filterShape };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.DepthwiseConv2dNativeBackpropFilter, inputs, attrs);
}
const depthwiseConv2dNativeBackpropFilter = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ depthwiseConv2dNativeBackpropFilter_ });
//# sourceMappingURL=depthwise_conv2d_native_backprop_filter.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2dNativeBackpropInput": () => (/* binding */ depthwiseConv2dNativeBackpropInput)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function depthwiseConv2dNativeBackpropInput_(xShape, dy, filter, strides, pad, dilations = [1, 1], dimRoundingMode) {
    let dy4D = dy;
    let reshapedTo4D = false;
    if (dy.rank === 3) {
        reshapedTo4D = true;
        dy4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);
    }
    const inputs = { dy: dy4D, filter };
    const attrs = { strides, pad, dimRoundingMode, dilations, inputShape: xShape };
    const res = 
    // tslint:disable-next-line: no-unnecessary-type-assertion
    _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.DepthwiseConv2dNativeBackpropInput, inputs, attrs);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const depthwiseConv2dNativeBackpropInput = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ depthwiseConv2dNativeBackpropInput_ });
//# sourceMappingURL=depthwise_conv2d_native_backprop_input.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/diag.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/diag.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "diag": () => (/* binding */ diag)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns a diagonal tensor with a given diagonal values.
 *
 * Given a diagonal, this operation returns a tensor with the diagonal and
 * everything else padded with zeros.
 *
 * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor
 * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * tf.diag(x).print()
 * ```
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])
 *
 * tf.diag(x).print()
 * ```
 * @param x The input tensor.
 */
function diag_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'diag');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Diag, inputs);
}
const diag = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ diag_ });
//# sourceMappingURL=diag.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dilation2d": () => (/* binding */ dilation2d)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the grayscale dilation over the input `x`.
 *
 * @param x The input tensor, rank 3 or rank 4 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filter The filter tensor, rank 3, of shape
 *     `[filterHeight, filterWidth, depth]`.
 * @param strides The strides of the sliding window for each dimension of the
 *     input tensor: `[strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat Specify the data format of the input and output data.
 *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the
 *      default format "NHWC", the data is stored in the order of: [batch,
 *      height, width, channels].
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`
 *     is a single number, then `dilationHeight == dilationWidth`. If it is
 *     greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function dilation2d_(x, filter, strides, pad, dilations = [1, 1], dataFormat = 'NHWC') {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'dilation2d');
    const $filter = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(filter, 'filter', 'dilation2d');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.rank === 3 || $x.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ` +
        `${$x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($filter.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ` +
        `${$filter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(dataFormat === 'NHWC', () => `Error in dilation2d: Only NHWC is currently supported, ` +
        `but got dataFormat of ${dataFormat}`);
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
        reshapedTo4D = true;
    }
    const inputs = { x: x4D, filter: $filter };
    const attrs = { strides, pad, dilations };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.Dilation2D, inputs, attrs);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const dilation2d = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ dilation2d_ });
//# sourceMappingURL=dilation2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/div.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "div": () => (/* binding */ div)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _floorDiv__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./floorDiv */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.div(b).print();  // or tf.div(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function div_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'div');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'div');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    if ($a.dtype === 'int32' && $b.dtype === 'int32') {
        return (0,_floorDiv__WEBPACK_IMPORTED_MODULE_3__.floorDiv)($a, $b);
    }
    const inputs = { a: $a, b: $b };
    const attrs = {};
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.RealDiv, inputs, attrs);
}
const div = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ div_ });
//# sourceMappingURL=div.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "divNoNan": () => (/* binding */ divNoNan)
/* harmony export */ });
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _equal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _where__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _zeros_like__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0
 * if denominator is 0.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 * const c = tf.tensor1d([0, 0, 0, 0]);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 * const c = tf.scalar(0);
 *
 * a.divNoNan(b).print();  // or tf.divNoNan(a, b)
 * a.divNoNan(c).print();  // or tf.divNoNan(a, c)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function divNoNan_(a, b) {
    // TODO: Make this into its own kernel.
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(a, 'a', 'div');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(b, 'b', 'div');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_1__.makeTypesMatch)($a, $b);
    const divResult = (0,_div__WEBPACK_IMPORTED_MODULE_2__.div)($a, $b);
    const zeros = (0,_zeros_like__WEBPACK_IMPORTED_MODULE_3__.zerosLike)(divResult);
    const bEqualsZero = (0,_equal__WEBPACK_IMPORTED_MODULE_4__.equal)($b, zeros);
    return (0,_where__WEBPACK_IMPORTED_MODULE_5__.where)(bEqualsZero, zeros, divResult);
}
const divNoNan = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ divNoNan_ });
//# sourceMappingURL=div_no_nan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/dot.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/dot.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dot": () => (/* binding */ dot)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor2d([[1, 2], [3, 4]]);
 * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);
 *
 * a.dot(b).print();  // or tf.dot(a, b)
 * b.dot(a).print();
 * b.dot(c).print();
 * ```
 * @param t1 The first tensor in the dot operation.
 * @param t2 The second tensor in the dot operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function dot_(t1, t2) {
    const $t1 = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(t1, 't1', 'dot');
    const $t2 = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(t2, 't2', 'dot');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` +
        `${$t1.rank} and ${$t2.rank}.`);
    const t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);
    const t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(t1Inner === t2Inner, () => `Error in dot: inner dimensions of inputs must match, but got ` +
        `${t1Inner} and ${t2Inner}.`);
    if ($t1.rank === 1 && $t2.rank === 1) {
        const t12D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($t1, [1, -1]);
        const t22D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($t2, [-1, 1]);
        const t1t2 = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_3__.matMul)(t12D, t22D);
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(t1t2, []);
    }
    else if ($t1.rank === 1 && $t2.rank === 2) {
        const t12D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($t1, [1, -1]);
        const t22D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($t2, [$t2.shape[0], $t2.shape[1]]);
        const t1t2 = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_3__.matMul)(t12D, t22D);
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(t1t2, [t1t2.size]);
    }
    else if ($t1.rank === 2 && $t2.rank === 1) {
        const t22D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($t2, [-1, 1]);
        const t1t2 = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_3__.matMul)($t1, t22D);
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(t1t2, [t1t2.size]);
    }
    else {
        const t22D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($t2, [$t2.shape[0], $t2.shape[1]]);
        const t1t2 = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_3__.matMul)($t1, t22D);
        return t1t2;
    }
}
const dot = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ dot_ });
//# sourceMappingURL=dot.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/dropout.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/dropout.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dropout": () => (/* binding */ dropout)
/* harmony export */ });
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _dropout_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dropout_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dropout_util.js");
/* harmony import */ var _floor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./floor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _random_uniform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./random_uniform */ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/**
 * Computes dropout.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 2, 1]);
 * const rate = 0.75;
 * const output = tf.dropout(x, rate);
 * output.print();
 * ```
 *
 * @param x A floating point Tensor or TensorLike.
 * @param rate A float in the range [0, 1). The probability that each element
 *   of x is discarded.
 * @param noiseShape An array of numbers of type int32, representing the
 * shape for randomly generated keep/drop flags. If the noiseShape has null
 * value, it will be automatically replaced with the x's relative dimension
 * size. Optional.
 * @param seed Used to create random seeds. Optional.
 * @returns A Tensor of the same shape of x.
 *
 * @doc {heading: 'Operations', subheading: 'Dropout'}
 */
function dropout_(x, rate, noiseShape, seed) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'dropout');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.dtype === 'float32', () => `x has to be a floating point tensor since it's going to be ` +
        `scaled, but got a ${$x.dtype} tensor instead.`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(rate >= 0 && rate < 1, () => `rate must be a float in the range [0, 1), but got ${rate}.`);
    if (rate === 0) {
        return x instanceof _tensor__WEBPACK_IMPORTED_MODULE_2__.Tensor ? $x.clone() : $x;
    }
    const $noiseShape = (0,_dropout_util__WEBPACK_IMPORTED_MODULE_3__.getNoiseShape)($x, noiseShape);
    const keepProb = 1 - rate;
    const multiplier = (0,_div__WEBPACK_IMPORTED_MODULE_4__.div)((0,_floor__WEBPACK_IMPORTED_MODULE_5__.floor)((0,_add__WEBPACK_IMPORTED_MODULE_6__.add)((0,_random_uniform__WEBPACK_IMPORTED_MODULE_7__.randomUniform)($noiseShape, 0, 1, 'float32', seed), keepProb)), keepProb);
    return (0,_mul__WEBPACK_IMPORTED_MODULE_8__.mul)($x, multiplier);
}
const dropout = (0,_operation__WEBPACK_IMPORTED_MODULE_9__.op)({ dropout_ });
//# sourceMappingURL=dropout.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/dropout_util.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/dropout_util.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getNoiseShape": () => (/* binding */ getNoiseShape)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Normalize noise shape based on provided tensor and noise shape.
 *
 * @param x Tensor.
 * @param noiseShape The shape for the randomly generated keep/drop flags, as
 *   an array of numbers. Optional.
 * @returns Normalized noise shape.
 */
function getNoiseShape(x, noiseShape) {
    if (noiseShape == null) {
        return x.shape.slice();
    }
    if (_util__WEBPACK_IMPORTED_MODULE_0__.arraysEqual(x.shape, noiseShape)) {
        return noiseShape;
    }
    if (x.shape.length === noiseShape.length) {
        const newDimension = [];
        for (let i = 0; i < x.shape.length; i++) {
            if (noiseShape[i] == null && x.shape[i] != null) {
                newDimension.push(x.shape[i]);
            }
            else {
                newDimension.push(noiseShape[i]);
            }
        }
        return newDimension;
    }
    return noiseShape;
}
//# sourceMappingURL=dropout_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "elu": () => (/* binding */ elu)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes exponential linear element-wise: `x > 0 ? e ^ x - 1 : 0`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 1, -3, 2]);
 *
 * x.elu().print();  // or tf.elu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function elu_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'elu');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Elu, inputs);
}
const elu = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ elu_ });
//# sourceMappingURL=elu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equal": () => (/* binding */ equal)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a == b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.equal(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function equal_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'equal');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'equal');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_3__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.Equal, inputs);
}
const equal = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ equal_ });
//# sourceMappingURL=equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/erf.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/erf.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "erf": () => (/* binding */ erf)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes gause error function of the input `tf.Tensor` element-wise:
 * `erf(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, .1, -.1, .7]);
 *
 * x.erf().print(); // or tf.erf(x);
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function erf_(x) {
    let $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'erf');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.dtype === 'int32' || $x.dtype === 'float32', () => 'Input dtype must be `int32` or `float32`.');
    if ($x.dtype === 'int32') {
        $x = (0,_cast__WEBPACK_IMPORTED_MODULE_3__.cast)($x, 'float32');
    }
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.Erf, inputs);
}
const erf = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ erf_ });
//# sourceMappingURL=erf.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/erf_util.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ERF_P": () => (/* binding */ ERF_P),
/* harmony export */   "ERF_A1": () => (/* binding */ ERF_A1),
/* harmony export */   "ERF_A2": () => (/* binding */ ERF_A2),
/* harmony export */   "ERF_A3": () => (/* binding */ ERF_A3),
/* harmony export */   "ERF_A4": () => (/* binding */ ERF_A4),
/* harmony export */   "ERF_A5": () => (/* binding */ ERF_A5)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ERF_P = 0.3275911;
const ERF_A1 = 0.254829592;
const ERF_A2 = -0.284496736;
const ERF_A3 = 1.421413741;
const ERF_A4 = -1.453152027;
const ERF_A5 = 1.061405429;
//# sourceMappingURL=erf_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "exp": () => (/* binding */ exp)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes exponential of the input `tf.Tensor` element-wise. `e ^ x`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.exp().print();  // or tf.exp(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function exp_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'exp');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Exp, inputs);
}
const exp = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ exp_ });
//# sourceMappingURL=exp.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expandDims": () => (/* binding */ expandDims)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension
 * into the tensor's shape.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const axis = 1;
 * x.expandDims(axis).print();
 * ```
 *
 * @param x The input tensor whose dimensions to be expanded.
 * @param axis The dimension index at which to insert shape of `1`. Defaults
 *     to 0 (the first dimension).
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function expandDims_(x, axis = 0) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'expandDims', 'string_or_numeric');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');
    const inputs = { input: $x };
    const attrs = { dim: axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.ExpandDims, inputs, attrs);
}
const expandDims = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ expandDims_ });
//# sourceMappingURL=expand_dims.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "expm1": () => (/* binding */ expm1)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes exponential of the input `tf.Tensor` minus one element-wise.
 * `e ^ x - 1`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, -3]);
 *
 * x.expm1().print();  // or tf.expm1(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function expm1_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'expm1');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Expm1, inputs);
}
const expm1 = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ expm1_ });
//# sourceMappingURL=expm1.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/eye.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/eye.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eye": () => (/* binding */ eye)
/* harmony export */ });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _expand_dims__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./expand_dims */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tile */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Create an identity matrix.
 *
 * @param numRows Number of rows.
 * @param numColumns Number of columns. Defaults to `numRows`.
 * @param batchShape If provided, will add the batch shape to the beginning
 *   of the shape of the returned `tf.Tensor` by repeating the identity
 *   matrix.
 * @param dtype Data type.
 * @returns Identity matrix of the specified size and data type, possibly
 *   with batch repetition if `batchShape` is specified.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function eye_(numRows, numColumns, batchShape, dtype = 'float32') {
    if (numColumns == null) {
        numColumns = numRows;
    }
    const buff = (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.buffer)([numRows, numColumns], dtype);
    const n = numRows <= numColumns ? numRows : numColumns;
    for (let i = 0; i < n; ++i) {
        buff.set(1, i, i);
    }
    const out = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(buff.toTensor(), [numRows, numColumns]);
    if (batchShape == null) {
        return out;
    }
    else {
        if (batchShape.length === 1) {
            return (0,_tile__WEBPACK_IMPORTED_MODULE_2__.tile)((0,_expand_dims__WEBPACK_IMPORTED_MODULE_3__.expandDims)(out, 0), [batchShape[0], 1, 1]);
        }
        else if (batchShape.length === 2) {
            // tslint:disable-next-line:no-unnecessary-type-assertion
            return (0,_tile__WEBPACK_IMPORTED_MODULE_2__.tile)((0,_expand_dims__WEBPACK_IMPORTED_MODULE_3__.expandDims)((0,_expand_dims__WEBPACK_IMPORTED_MODULE_3__.expandDims)(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);
        }
        else if (batchShape.length === 3) {
            // tslint:disable-next-line:no-unnecessary-type-assertion
            return (0,_tile__WEBPACK_IMPORTED_MODULE_2__.tile)((0,_expand_dims__WEBPACK_IMPORTED_MODULE_3__.expandDims)((0,_expand_dims__WEBPACK_IMPORTED_MODULE_3__.expandDims)((0,_expand_dims__WEBPACK_IMPORTED_MODULE_3__.expandDims)(out, 0), 0), 0), [
                batchShape[0], batchShape[1], batchShape[2], 1, 1
            ]);
        }
        else {
            throw new Error(`eye() currently supports only 1D and 2D ` +
                // tslint:disable-next-line:no-any
                `batchShapes, but received ${batchShape.length}D.`);
        }
    }
}
const eye = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ eye_ });
//# sourceMappingURL=eye.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fill": () => (/* binding */ fill)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Creates a `tf.Tensor` filled with a scalar value.
 *
 * ```js
 * tf.fill([2, 2], 4).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param value The scalar value to fill the tensor with.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 * 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function fill(shape, value, dtype) {
    const attrs = { shape, value, dtype };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.Fill, {}, attrs);
}

//# sourceMappingURL=fill.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floor": () => (/* binding */ floor)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes floor of input `tf.Tensor` element-wise: `floor(x)`.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.floor().print();  // or tf.floor(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function floor_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'floor');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Floor, inputs);
}
const floor = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ floor_ });
//# sourceMappingURL=floor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floorDiv": () => (/* binding */ floorDiv)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting.
 * The result is rounded with floor function.
 *
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 9, 16]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.floorDiv(b).print();  // or tf.div(a, b)
 * ```
 *
 * ```js
 * // Broadcast div a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(2);
 *
 * a.floorDiv(b).print();  // or tf.floorDiv(a, b)
 * ```
 *
 * @param a The first tensor as the numerator.
 * @param b The second tensor as the denominator. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function floorDiv_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'floorDiv');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'floorDiv');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.FloorDiv, inputs);
}
const floorDiv = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ floorDiv_ });
//# sourceMappingURL=floorDiv.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/conv2d.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fused/conv2d.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2d": () => (/* binding */ conv2d)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _conv2d__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../conv2d_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_filter.js");
/* harmony import */ var _conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../conv2d_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_backprop_input.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _fused_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../fused_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */















/**
 * Computes a 2D convolution over the input x, optionally fused with adding a
 * bias and applying an activation.
 *
 * ```js
 * const inputDepth = 2;
 * const inShape = [2, 2, 2, inputDepth];
 * const outputDepth = 2;
 * const fSize = 1;
 * const pad = 0;
 * const strides = 1;
 *
 * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
 * 16], inShape);
 * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,
 * outputDepth]);
 *
 * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',
 * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();
 * ```
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter, rank 4, of shape
 *     `[filterHeight, filterWidth, inDepth, outDepth]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid` output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dataFormat An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`) to be
 *     applied
 *      after biasAdd.
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`
 *     activation.
 */
function fusedConv2d_({ x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode, bias, activation = 'linear', preluActivationWeights, leakyreluAlpha }) {
    activation = activation || 'linear';
    if ((0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.shouldFuse)(_engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.state.gradientDepth, activation) === false) {
        let result = (0,_conv2d__WEBPACK_IMPORTED_MODULE_2__.conv2d)(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
        if (bias != null) {
            result = (0,_add__WEBPACK_IMPORTED_MODULE_3__.add)(result, bias);
        }
        return (0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.applyActivation)(result, activation, preluActivationWeights, leakyreluAlpha);
    }
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(x, 'x', 'conv2d');
    const $filter = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(filter, 'filter', 'conv2d');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_5__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_6__.assert(x4D.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ` +
        `${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_6__.assert($filter.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ` +
        `${$filter.rank}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_6__.assert(_util__WEBPACK_IMPORTED_MODULE_6__.isInt(pad), () => `Error in fused conv2d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    _util__WEBPACK_IMPORTED_MODULE_6__.assert(x4D.shape[3] === $filter.shape[2], () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match ` +
        `input depth for filter ${$filter.shape[2]}.`);
    _util__WEBPACK_IMPORTED_MODULE_6__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_7__.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    _util__WEBPACK_IMPORTED_MODULE_6__.assert(dataFormat === 'NHWC', () => `Error in conv2d: got dataFormat of ${dataFormat} but only NHWC is currently supported.`);
    const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_7__.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);
    let $bias;
    if (bias != null) {
        $bias = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(bias, 'bias', 'fused conv2d');
        [$bias] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_8__.makeTypesMatch)($bias, $x);
        _broadcast_util__WEBPACK_IMPORTED_MODULE_9__.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) {
        $preluActivationWeights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(preluActivationWeights, 'prelu weights', 'fused conv2d');
    }
    const grad = (dy, saved) => {
        const [$filter, x4D, y, $bias] = saved;
        const dyActivation = (0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.getFusedDyActivation)(dy, y, activation);
        _util__WEBPACK_IMPORTED_MODULE_6__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_7__.tupleValuesAreOne(dilations), () => 'Error in gradient of fused conv2D: ' +
            `dilation rates greater than 1 ` +
            `are not yet supported in gradients. Got dilations '${dilations}'`);
        const xDer = (0,_conv2d_backprop_input__WEBPACK_IMPORTED_MODULE_10__.conv2DBackpropInput)(x4D.shape, dyActivation, $filter, strides, pad);
        const filterDer = (0,_conv2d_backprop_filter__WEBPACK_IMPORTED_MODULE_11__.conv2DBackpropFilter)(x4D, dyActivation, $filter.shape, strides, pad);
        const der = [xDer, filterDer];
        if ($bias != null) {
            const biasDer = (0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.getFusedBiasGradient)($bias, dyActivation);
            der.push(biasDer);
        }
        return der;
    };
    const inputs = {
        x: x4D,
        filter: $filter,
        bias: $bias,
        preluActivationWeights: $preluActivationWeights
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dilations,
        dimRoundingMode,
        activation,
        leakyreluAlpha
    };
    // Depending on the the params passed in we will have different number of
    // inputs and thus a a different number of elements in the gradient.
    if (bias == null) {
        const customOp = (0,_gradients__WEBPACK_IMPORTED_MODULE_12__.customGrad)((x4D, filter, save) => {
            let res = 
            // tslint:disable-next-line: no-unnecessary-type-assertion
            _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_13__.FusedConv2D, inputs, attrs);
            save([filter, x4D, res]);
            if (reshapedTo4D) {
                // tslint:disable-next-line: no-unnecessary-type-assertion
                res = (0,_reshape__WEBPACK_IMPORTED_MODULE_5__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
            }
            return { value: res, gradFunc: grad };
        });
        return customOp(x4D, $filter);
    }
    else {
        const customOpWithBias = (0,_gradients__WEBPACK_IMPORTED_MODULE_12__.customGrad)((x4D, filter, bias, save) => {
            let res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_13__.FusedConv2D, inputs, attrs);
            save([filter, x4D, res, bias]);
            if (reshapedTo4D) {
                // tslint:disable-next-line: no-unnecessary-type-assertion
                res = (0,_reshape__WEBPACK_IMPORTED_MODULE_5__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
            }
            return { value: res, gradFunc: grad };
        });
        return customOpWithBias(x4D, $filter, $bias);
    }
}
const conv2d = (0,_operation__WEBPACK_IMPORTED_MODULE_14__.op)({ fusedConv2d_ });
//# sourceMappingURL=conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/depthwise_conv2d.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fused/depthwise_conv2d.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "depthwiseConv2d": () => (/* binding */ depthwiseConv2d)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _depthwise_conv2d__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js");
/* harmony import */ var _depthwise_conv2d_native_backprop_filter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../depthwise_conv2d_native_backprop_filter */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_filter.js");
/* harmony import */ var _depthwise_conv2d_native_backprop_input__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../depthwise_conv2d_native_backprop_input */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d_native_backprop_input.js");
/* harmony import */ var _fused_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../fused_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */















/**
 * Computes depthwise 2D convolution, optionally fused with adding a
 * bias and applying an activation.
 *
 * Given a 4D `input` array and a `filter` array of shape
 * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing
 * `inChannels` convolutional filters of depth 1, this op applies a
 * different filter to each input channel (expanding from 1 channel to
 * `channelMultiplier` channels for each), then concatenates the results
 * together. The output has `inChannels * channelMultiplier` channels.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)
 * for more details.
 *
 * @param obj An object with the following properties:
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param filter The filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param bias Tensor to be added to the result.
 * @param activation Name of activation kernel (defaults to `linear`).
 * @param preluActivationWeights Tensor of prelu weights to be applied as part
 *     of a `prelu` activation, typically the same shape as `x`.
 * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`
 *     activation.
 */
function fusedDepthwiseConv2d_({ x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode, bias, activation = 'linear', preluActivationWeights, leakyreluAlpha }) {
    if ((0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.shouldFuse)(_engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.state.gradientDepth, activation) === false) {
        let result = (0,_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_2__.depthwiseConv2d)(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
        if (bias != null) {
            result = (0,_add__WEBPACK_IMPORTED_MODULE_3__.add)(result, bias);
        }
        return (0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.applyActivation)(result, activation, preluActivationWeights, leakyreluAlpha);
    }
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(x, 'x', 'depthwiseConv2d');
    const $filter = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(filter, 'filter', 'depthwiseConv2d');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_5__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_6__.assert(x4D.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` +
        `rank ${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_6__.assert($filter.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, ` +
        `but got rank ${$filter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_6__.assert(x4D.shape[3] === $filter.shape[2], () => `Error in fused depthwiseConv2d: number of input channels ` +
        `(${x4D.shape[3]}) must match the inChannels dimension in ` +
        `filter ${$filter.shape[2]}.`);
    if (dilations == null) {
        dilations = [1, 1];
    }
    _util__WEBPACK_IMPORTED_MODULE_6__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_7__.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in fused depthwiseConv2d: Either strides or dilations must ' +
        `be 1. Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_6__.assert(_util__WEBPACK_IMPORTED_MODULE_6__.isInt(pad), () => `Error in fused depthwiseConv2d: pad must be an integer when ` +
            `using dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_7__.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);
    let $bias;
    if (bias != null) {
        $bias = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(bias, 'bias', 'fused conv2d');
        [$bias] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_8__.makeTypesMatch)($bias, $x);
        _broadcast_util__WEBPACK_IMPORTED_MODULE_9__.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) {
        $preluActivationWeights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');
    }
    const grad = (dy, saved) => {
        _util__WEBPACK_IMPORTED_MODULE_6__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_7__.tupleValuesAreOne(dilations), () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' +
            `greater than 1 are not yet supported. Got dilations ` +
            `'${dilations}'`);
        const [$filter, x4D, y, bias] = saved;
        const dyActivation = (0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.getFusedDyActivation)(dy, y, activation);
        const xDer = (0,_depthwise_conv2d_native_backprop_input__WEBPACK_IMPORTED_MODULE_10__.depthwiseConv2dNativeBackpropInput)(x4D.shape, dyActivation, $filter, strides, pad, dilations, dimRoundingMode);
        const filterDer = (0,_depthwise_conv2d_native_backprop_filter__WEBPACK_IMPORTED_MODULE_11__.depthwiseConv2dNativeBackpropFilter)(x4D, dyActivation, $filter.shape, strides, pad, dilations, dimRoundingMode);
        if (bias != null) {
            const biasDer = (0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.getFusedBiasGradient)($bias, dyActivation);
            return [xDer, filterDer, biasDer];
        }
        return [xDer, filterDer];
    };
    const inputs = {
        x: x4D,
        filter: $filter,
        bias: $bias,
        preluActivationWeights: $preluActivationWeights
    };
    const attrs = {
        strides,
        pad,
        dataFormat,
        dilations,
        dimRoundingMode,
        activation,
        leakyreluAlpha
    };
    // Depending on the the params passed in we will have different number of
    // inputs and thus a a different number of elements in the gradient.
    if (bias == null) {
        const customOp = (0,_gradients__WEBPACK_IMPORTED_MODULE_12__.customGrad)((x4D, filter, save) => {
            // tslint:disable-next-line: no-unnecessary-type-assertion
            let res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_13__.FusedDepthwiseConv2D, inputs, attrs);
            save([filter, x4D, res]);
            if (reshapedTo4D) {
                // tslint:disable-next-line: no-unnecessary-type-assertion
                res = (0,_reshape__WEBPACK_IMPORTED_MODULE_5__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
            }
            return { value: res, gradFunc: grad };
        });
        return customOp(x4D, $filter);
    }
    else {
        const customOpWithBias = (0,_gradients__WEBPACK_IMPORTED_MODULE_12__.customGrad)((x4D, filter, bias, save) => {
            // tslint:disable-next-line: no-unnecessary-type-assertion
            let res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_13__.FusedDepthwiseConv2D, inputs, attrs);
            save([filter, x4D, res, bias]);
            if (reshapedTo4D) {
                // tslint:disable-next-line: no-unnecessary-type-assertion
                res = (0,_reshape__WEBPACK_IMPORTED_MODULE_5__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
            }
            return { value: res, gradFunc: grad };
        });
        return customOpWithBias(x4D, $filter, $bias);
    }
}
const depthwiseConv2d = (0,_operation__WEBPACK_IMPORTED_MODULE_14__.op)({ fusedDepthwiseConv2d_ });
//# sourceMappingURL=depthwise_conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/mat_mul.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fused/mat_mul.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "matMul": () => (/* binding */ matMul)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _fused_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../fused_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */












/**
 * Computes the dot product of two matrices with optional activation and bias.
 *
 * ```js
 * const a = tf.tensor2d([-1, -2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const bias = tf.tensor2d([1, 2], [1, 2]);
 *
 * tf.fused.matMul({a, b, bias, activation: 'relu'}).print();
 * ```
 *
 * @param obj An object with the following properties:
 * - `a` First matrix in dot product operation.
 * - `b` Second matrix in dot product operation.
 * - `transposeA` If true, `a` is transposed before multiplication.
 * - `transposeB` If true, `b` is transposed before multiplication.
 * - `bias` Matrix to be added to the result.
 * - `activation` Name of activation kernel (defaults to `linear`).
 * - `preluActivationWeights` Tensor of prelu weights.
 * - `leakyreluAlpha` Alpha of leakyrelu.
 */
function fusedMatMul_({ a, b, transposeA = false, transposeB = false, bias, activation = 'linear', preluActivationWeights, leakyreluAlpha, }) {
    if ((0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.shouldFuse)(_engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.state.gradientDepth, activation) === false) {
        let result = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_2__.matMul)(a, b, transposeA, transposeB);
        if (bias != null) {
            result = (0,_add__WEBPACK_IMPORTED_MODULE_3__.add)(result, bias);
        }
        return (0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.applyActivation)(result, activation, preluActivationWeights, leakyreluAlpha);
    }
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(a, 'a', 'fused matMul');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(b, 'b', 'fused matMul');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_5__.makeTypesMatch)($a, $b);
    const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];
    const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];
    const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];
    const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];
    const outerDimsA = $a.shape.slice(0, -2);
    const outerDimsB = $b.shape.slice(0, -2);
    const batchDimA = _util__WEBPACK_IMPORTED_MODULE_6__.sizeFromShape(outerDimsA);
    const batchDimB = _util__WEBPACK_IMPORTED_MODULE_6__.sizeFromShape(outerDimsB);
    _util__WEBPACK_IMPORTED_MODULE_6__.assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, () => `Error in fused matMul: inputs must have the same rank of at ` +
        `least 2, got ranks ${$a.rank} and ${$b.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_6__.assert(_util__WEBPACK_IMPORTED_MODULE_6__.arraysEqual(outerDimsA, outerDimsB), () => `Error in fused matMul: outer dimensions (${outerDimsA}) and (` +
        `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` +
        `${$b.shape} must match.`);
    _util__WEBPACK_IMPORTED_MODULE_6__.assert(innerShapeA === innerShapeB, () => `Error in fused matMul: inner shapes (${innerShapeA}) and (` +
        `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +
        `${$b.shape} and transposeA=${transposeA}` +
        ` and transposeB=${transposeB} must match.`);
    const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);
    const a3D = transposeA ?
        (0,_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)($a, [batchDimA, innerShapeA, outerShapeA]) :
        (0,_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)($a, [batchDimA, outerShapeA, innerShapeA]);
    const b3D = transposeB ?
        (0,_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)($b, [batchDimB, outerShapeB, innerShapeB]) :
        (0,_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)($b, [batchDimB, innerShapeB, outerShapeB]);
    let $bias;
    if (bias != null) {
        $bias = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(bias, 'bias', 'fused matMul');
        [$bias] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_5__.makeTypesMatch)($bias, $a);
        _broadcast_util__WEBPACK_IMPORTED_MODULE_8__.assertAndGetBroadcastShape(outShape, $bias.shape);
    }
    let $preluActivationWeights;
    if (preluActivationWeights != null) {
        $preluActivationWeights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_4__.convertToTensor)(preluActivationWeights, 'prelu weights', 'fused matMul');
    }
    const grad = (dy, saved) => {
        const [a3D, b3D, y, $bias] = saved;
        // we reshape dy because the result of the forward is not
        // necessarily going to be a 3d tensor due to a reshape done at the end of
        // the customOp.
        const dyActivation = (0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.getFusedDyActivation)((0,_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(dy, y.shape), y, activation);
        let aDer;
        let bDer;
        if (!transposeA && !transposeB) {
            aDer = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_2__.matMul)(dyActivation, b3D, false, true);
            bDer = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_2__.matMul)(a3D, dyActivation, true, false);
        }
        else if (!transposeA && transposeB) {
            aDer = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_2__.matMul)(dyActivation, b3D, false, false);
            bDer = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_2__.matMul)(dyActivation, a3D, true, false);
        }
        else if (transposeA && !transposeB) {
            aDer = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_2__.matMul)(b3D, dyActivation, false, true);
            bDer = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_2__.matMul)(a3D, dyActivation, false, false);
        }
        else {
            aDer = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_2__.matMul)(b3D, dyActivation, true, true);
            bDer = (0,_mat_mul__WEBPACK_IMPORTED_MODULE_2__.matMul)(dyActivation, a3D, true, true);
        }
        if (bias != null) {
            const biasDer = (0,_fused_util__WEBPACK_IMPORTED_MODULE_1__.getFusedBiasGradient)($bias, dyActivation);
            return [aDer, bDer, biasDer];
        }
        else {
            return [aDer, bDer];
        }
    };
    const inputs = {
        a: a3D,
        b: b3D,
        bias: $bias,
        preluActivationWeights: $preluActivationWeights
    };
    const attrs = { transposeA, transposeB, activation, leakyreluAlpha };
    // Depending on the the params passed in we will have different number of
    // inputs and thus a a different number of elements in the gradient.
    if (bias == null) {
        const customOp = (0,_gradients__WEBPACK_IMPORTED_MODULE_9__.customGrad)((a3D, b3D, save) => {
            const res = 
            // tslint:disable-next-line: no-unnecessary-type-assertion
            _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_10__._FusedMatMul, inputs, attrs);
            save([a3D, b3D, res]);
            return { value: (0,_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(res, outShape), gradFunc: grad };
        });
        return customOp(a3D, b3D);
    }
    else {
        const customOpWithBias = (0,_gradients__WEBPACK_IMPORTED_MODULE_9__.customGrad)((a3D, b3D, $bias, save) => {
            const res = 
            // tslint:disable-next-line: no-unnecessary-type-assertion
            _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_10__._FusedMatMul, inputs, attrs);
            save([a3D, b3D, res, $bias]);
            return { value: (0,_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(res, outShape), gradFunc: grad };
        });
        return customOpWithBias(a3D, b3D, $bias);
    }
}
const matMul = (0,_operation__WEBPACK_IMPORTED_MODULE_11__.op)({ fusedMatMul_ });
//# sourceMappingURL=mat_mul.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conv2d": () => (/* reexport safe */ _fused_conv2d__WEBPACK_IMPORTED_MODULE_0__.conv2d),
/* harmony export */   "depthwiseConv2d": () => (/* reexport safe */ _fused_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_1__.depthwiseConv2d),
/* harmony export */   "matMul": () => (/* reexport safe */ _fused_mat_mul__WEBPACK_IMPORTED_MODULE_2__.matMul)
/* harmony export */ });
/* harmony import */ var _fused_conv2d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fused/conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/conv2d.js");
/* harmony import */ var _fused_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fused/depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/depthwise_conv2d.js");
/* harmony import */ var _fused_mat_mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fused/mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused/mat_mul.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




//# sourceMappingURL=fused_ops.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/fused_util.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFusedDyActivation": () => (/* binding */ getFusedDyActivation),
/* harmony export */   "getFusedBiasGradient": () => (/* binding */ getFusedBiasGradient),
/* harmony export */   "applyActivation": () => (/* binding */ applyActivation),
/* harmony export */   "shouldFuse": () => (/* binding */ shouldFuse)
/* harmony export */ });
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _elu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./elu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js");
/* harmony import */ var _leaky_relu__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./leaky_relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _prelu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./prelu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js");
/* harmony import */ var _relu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js");
/* harmony import */ var _relu6__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./relu6 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _step__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./step */ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










// Returns gradient for fused activation.
function getFusedDyActivation(dy, y, activation) {
    if (activation == null || activation === 'linear') {
        return dy;
    }
    if (activation === 'relu') {
        return (0,_mul__WEBPACK_IMPORTED_MODULE_0__.mul)(dy, (0,_step__WEBPACK_IMPORTED_MODULE_1__.step)(y));
    }
    throw new Error(`Cannot compute gradient for fused activation ${activation}.`);
}
// Returns gradient for fused bias.
function getFusedBiasGradient(bias, dyActivation) {
    let res = dyActivation;
    const reduceAxes = _broadcast_util__WEBPACK_IMPORTED_MODULE_2__.getReductionAxes(bias.shape, dyActivation.shape);
    if (reduceAxes.length > 0) {
        res = (0,_sum__WEBPACK_IMPORTED_MODULE_3__.sum)(res, reduceAxes);
    }
    return (0,_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)(res, bias.shape);
}
function applyActivation(x, activation, preluActivationWeights, leakyreluAlpha) {
    if (activation === 'linear') {
        return x;
    }
    else if (activation === 'relu') {
        return (0,_relu__WEBPACK_IMPORTED_MODULE_5__.relu)(x);
    }
    else if (activation === 'elu') {
        return (0,_elu__WEBPACK_IMPORTED_MODULE_6__.elu)(x);
    }
    else if (activation === 'relu6') {
        return (0,_relu6__WEBPACK_IMPORTED_MODULE_7__.relu6)(x);
    }
    else if (activation === 'prelu') {
        return (0,_prelu__WEBPACK_IMPORTED_MODULE_8__.prelu)(x, preluActivationWeights);
    }
    else if (activation === 'leakyrelu') {
        return (0,_leaky_relu__WEBPACK_IMPORTED_MODULE_9__.leakyRelu)(x, leakyreluAlpha);
    }
    throw new Error(`Unknown fused activation ${activation}.`);
}
// Whether we should call fused ops.
const shouldFuse = (gradientDepth, activation) => {
    const gradientMode = gradientDepth > 0;
    return !gradientMode || activation === 'linear';
};
//# sourceMappingURL=fused_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gather": () => (/* binding */ gather)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Gather slices from tensor `x`'s axis `axis` according to `indices`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const indices = tf.tensor1d([1, 3, 3], 'int32');
 *
 * x.gather(indices).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const indices = tf.tensor1d([1, 1, 0], 'int32');
 *
 * x.gather(indices).print();
 * ```
 * @param x The input tensor whose slices to be gathered.
 * @param indices The indices of the values to extract.
 * @param axis The axis over which to select values. Defaults to 0.
 * @param batchDims Optional. The number of batch dimensions. It must be less
 *     than or equal to rank(indices). Defaults to 0.
 *     The output tensor will have shape of
 *     `x.shape[:axis] + indices.shape[batchDims:] + x.shape[axis + 1:]`
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function gather_(x, indices, axis = 0, batchDims = 0) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'gather');
    const $indices = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(indices, 'indices', 'gather', 'int32');
    const inputs = { x: $x, indices: $indices };
    const attrs = { axis, batchDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.GatherV2, inputs, attrs);
}
const gather = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ gather_ });
//# sourceMappingURL=gather.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gatherND": () => (/* binding */ gatherND)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Gather slices from input tensor into a Tensor with shape specified by
 * `indices`.
 *
 * `indices` is an K-dimensional integer tensor, best thought of as a
 * (K-1)-dimensional tensor of indices into input, where each element defines a
 * slice of input:
 * output[\\(i_0, ..., i_{K-2}\\)] = input[indices[\\(i_0, ..., i_{K-2}\\)]]
 *
 * Whereas in `tf.gather`, `indices` defines slices into the first dimension of
 * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions
 * of input, where N = indices.shape[-1].
 *
 * The last dimension of indices can be at most the rank of input:
 * indices.shape[-1] <= input.rank
 *
 * The last dimension of `indices` corresponds to elements
 * (if indices.shape[-1] == input.rank) or slices
 * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of
 * input.
 * The output tensor has shape
 * indices.shape[:-1] + input.shape[indices.shape[-1]:]
 *
 * Note that on CPU, if an out of bound index is found, an error is returned. On
 * GPU, if an out of bound index is found, a 0 is stored in the corresponding
 * output value.
 *
 * ```js
 * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');
 * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);
 * tf.gatherND(input, indices).print() // [10, 11]
 * ```
 *
 * @param x The tensor from which to gather values.
 * @param indices Index tensor, must be of type int32.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function gatherND_(x, indices) {
    const $indices = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(indices, 'indices', 'gatherND', 'int32');
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'gatherND');
    const inputs = { params: $x, indices: $indices };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.GatherNd, inputs);
}
const gatherND = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ gatherND_ });
//# sourceMappingURL=gather_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd_util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prepareAndValidate": () => (/* binding */ prepareAndValidate)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");

/**
 * Validate gather nd inputs.
 *
 * @param tensor The tensor contains the source values.
 * @param indices The tensor contains the indices to slice the source.
 *
 * @returns [resultShape, numUpdates, sliceSize, strides]
 */
function prepareAndValidate(tensor, indices) {
    const tensorRank = tensor.shape.length;
    const indicesRank = indices.shape.length;
    if (tensorRank < 1) {
        throw new Error('tf.gatherND() expects the input to be rank 1 or higher,' +
            ` but the rank was ${tensorRank}.`);
    }
    if (indicesRank < 1) {
        throw new Error('tf.gatherND() expects the indices to be rank 1 or higher,' +
            ` but the rank was ${indicesRank}.`);
    }
    if (indices.dtype !== 'int32') {
        throw new Error('tf.gatherND() expects the indices to be int32 type,' +
            ` but the dtype was ${indices.dtype}.`);
    }
    if (indices.shape[indicesRank - 1] > tensorRank) {
        throw new Error('index innermost dimension length must be <= tensor rank; saw: ' +
            `${indices.shape[indicesRank - 1]} vs. ${tensorRank}`);
    }
    if ((0,_util__WEBPACK_IMPORTED_MODULE_0__.sizeFromShape)(tensor.shape) === 0) {
        throw new Error('Requested more than 0 entries, but input is empty.' +
            ` Input shape: ${tensor.shape}.`);
    }
    const indicesShape = indices.shape;
    const sliceRank = indicesShape[indicesShape.length - 1];
    // The result shape is
    //   indices.shape[:-1] + params.shape[indices.shape[-1]:]
    let nResult = 1;
    for (let i = 0; i < indicesShape.length - 1; ++i) {
        nResult *= indicesShape[i];
    }
    const inputShape = tensor.shape;
    const resultShape = indicesShape.slice();
    resultShape.pop();
    let sliceSize = 1;
    for (let i = sliceRank; i < tensorRank; ++i) {
        sliceSize *= inputShape[i];
        resultShape.push(inputShape[i]);
    }
    const strides = [...(0,_util__WEBPACK_IMPORTED_MODULE_0__.computeStrides)(tensor.shape).map(stride => stride / sliceSize),
        1].slice(0, sliceRank);
    return [resultShape, nResult, sliceSize, strides];
}
//# sourceMappingURL=gather_nd_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "greater": () => (/* binding */ greater)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a > b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greater(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function greater_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'greater');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'greater');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_3__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.Greater, inputs);
}
const greater = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ greater_ });
//# sourceMappingURL=greater.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "greaterEqual": () => (/* binding */ greaterEqual)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a >= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.greaterEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function greaterEqual_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'greaterEqual');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'greaterEqual');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_3__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.GreaterEqual, inputs);
}
const greaterEqual = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ greaterEqual_ });
//# sourceMappingURL=greater_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "imag": () => (/* binding */ imag)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns the imaginary part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the imaginary part of each element in input considered as a complex number.
 * If input is real, a tensor of all zeros is returned.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.imag(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function imag_(input) {
    const $input = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(input, 'input', 'imag');
    const inputs = { input: $input };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Imag, inputs);
}
const imag = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ imag_ });
//# sourceMappingURL=imag.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cropAndResize": () => (/* binding */ cropAndResize)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Extracts crops from the input image tensor and resizes them using bilinear
 * sampling or nearest neighbor sampling (possibly with aspect ratio change)
 * to a common output size specified by cropSize.
 *
 * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,
 *     where imageHeight and imageWidth must be positive, specifying the
 *     batch of images from which to take crops
 * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized
 *     coordinates of the box in the boxInd[i]'th image in the batch
 * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range
 *     `[0, batch)` that specifies the image that the `i`-th box refers to.
 * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`
 *     specifying the size to which all crops are resized to.
 * @param method Optional string from `'bilinear' | 'nearest'`,
 *     defaults to bilinear, which specifies the sampling method for resizing
 * @param extrapolationValue A threshold for deciding when to remove boxes based
 *     on score. Defaults to 0.
 * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function cropAndResize_(image, boxes, boxInd, cropSize, method = 'bilinear', extrapolationValue = 0) {
    const $image = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(image, 'image', 'cropAndResize');
    const $boxes = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(boxes, 'boxes', 'cropAndResize', 'float32');
    const $boxInd = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(boxInd, 'boxInd', 'cropAndResize', 'int32');
    const numBoxes = $boxes.shape[0];
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($image.rank === 4, () => 'Error in cropAndResize: image must be rank 4,' +
        `but got rank ${$image.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +
        `but had shape ${$boxes.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +
        `but had shape ${$boxes.shape}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got ` +
        `length ${cropSize.length}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(method === 'bilinear' || method === 'nearest', () => `method must be bilinear or nearest, but was ${method}`);
    const inputs = { image: $image, boxes: $boxes, boxInd: $boxInd };
    const attrs = { method, extrapolationValue, cropSize };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.CropAndResize, inputs, attrs);
    return res;
}
const cropAndResize = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ cropAndResize_ });
//# sourceMappingURL=crop_and_resize.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flipLeftRight": () => (/* binding */ flipLeftRight)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Flips the image left to right. Currently available in the CPU, WebGL, and
 * WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 */
/** @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'} */
function flipLeftRight_(image) {
    const $image = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(image, 'image', 'flipLeftRight', 'float32');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($image.rank === 4, () => 'Error in flipLeftRight: image must be rank 4,' +
        `but got rank ${$image.rank}.`);
    const inputs = { image: $image };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.FlipLeftRight, inputs, {});
    return res;
}
const flipLeftRight = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ flipLeftRight_ });
//# sourceMappingURL=flip_left_right.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppression": () => (/* binding */ nonMaxSuppression)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @return A 1D tensor with the selected box indices.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function nonMaxSuppression_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
    const $boxes = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(boxes, 'boxes', 'nonMaxSuppression');
    const $scores = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(scores, 'scores', 'nonMaxSuppression');
    const inputs = (0,_nonmax_util__WEBPACK_IMPORTED_MODULE_2__.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
    maxOutputSize = inputs.maxOutputSize;
    iouThreshold = inputs.iouThreshold;
    scoreThreshold = inputs.scoreThreshold;
    const attrs = { maxOutputSize, iouThreshold, scoreThreshold };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.NonMaxSuppressionV3, { boxes: $boxes, scores: $scores }, attrs);
}
const nonMaxSuppression = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ nonMaxSuppression_ });
//# sourceMappingURL=non_max_suppression.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionAsync": () => (/* binding */ nonMaxSuppressionAsync)
/* harmony export */ });
/* harmony import */ var _backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../backends/non_max_suppression_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/* harmony import */ var _tensor1d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This is the async version of `nonMaxSuppression`
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @return A 1D tensor with the selected box indices.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {
    const $boxes = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(boxes, 'boxes', 'nonMaxSuppressionAsync');
    const $scores = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(scores, 'scores', 'nonMaxSuppressionAsync');
    const inputs = (0,_nonmax_util__WEBPACK_IMPORTED_MODULE_1__.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);
    maxOutputSize = inputs.maxOutputSize;
    iouThreshold = inputs.iouThreshold;
    scoreThreshold = inputs.scoreThreshold;
    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);
    const boxesVals = boxesAndScores[0];
    const scoresVals = boxesAndScores[1];
    // We call a cpu based impl directly with the typedarray data  here rather
    // than a kernel because all kernels are synchronous (and thus cannot await
    // .data()).
    const { selectedIndices } = (0,_backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_2__.nonMaxSuppressionV3Impl)(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);
    if ($boxes !== boxes) {
        $boxes.dispose();
    }
    if ($scores !== scores) {
        $scores.dispose();
    }
    return (0,_tensor1d__WEBPACK_IMPORTED_MODULE_3__.tensor1d)(selectedIndices, 'int32');
}
const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;
//# sourceMappingURL=non_max_suppression_async.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionPadded": () => (/* binding */ nonMaxSuppressionPadded)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defalts to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function nonMaxSuppressionPadded_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
    const $boxes = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(boxes, 'boxes', 'nonMaxSuppression');
    const $scores = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(scores, 'scores', 'nonMaxSuppression');
    const params = (0,_nonmax_util__WEBPACK_IMPORTED_MODULE_2__.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);
    const $maxOutputSize = params.maxOutputSize;
    const $iouThreshold = params.iouThreshold;
    const $scoreThreshold = params.scoreThreshold;
    const inputs = { boxes: $boxes, scores: $scores };
    const attrs = {
        maxOutputSize: $maxOutputSize,
        iouThreshold: $iouThreshold,
        scoreThreshold: $scoreThreshold,
        padToMaxOutputSize
    };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const result = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.NonMaxSuppressionV4, inputs, attrs);
    return { selectedIndices: result[0], validOutputs: result[1] };
}
const nonMaxSuppressionPadded = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ nonMaxSuppressionPadded_ });
//# sourceMappingURL=non_max_suppression_padded.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionPaddedAsync": () => (/* binding */ nonMaxSuppressionPaddedAsync)
/* harmony export */ });
/* harmony import */ var _backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../backends/non_max_suppression_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _tensor1d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union), with an option to pad results.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param padToMaxOutputSize Defalts to false. If true, size of output
 *     `selectedIndices` is padded to maxOutputSize.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - validOutputs: A scalar denoting how many elements in `selectedIndices`
 *       are valid. Valid elements occur first, then padding.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionPaddedAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, padToMaxOutputSize = false) {
    const $boxes = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(boxes, 'boxes', 'nonMaxSuppressionAsync');
    const $scores = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(scores, 'scores', 'nonMaxSuppressionAsync');
    const params = (0,_nonmax_util__WEBPACK_IMPORTED_MODULE_1__.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, null /* softNmsSigma */);
    const $maxOutputSize = params.maxOutputSize;
    const $iouThreshold = params.iouThreshold;
    const $scoreThreshold = params.scoreThreshold;
    const [boxesVals, scoresVals] = await Promise.all([$boxes.data(), $scores.data()]);
    // We call a cpu based impl directly with the typedarray data here rather
    // than a kernel because all kernels are synchronous (and thus cannot await
    // .data()).
    const { selectedIndices, validOutputs } = (0,_backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_2__.nonMaxSuppressionV4Impl)(boxesVals, scoresVals, $maxOutputSize, $iouThreshold, $scoreThreshold, padToMaxOutputSize);
    if ($boxes !== boxes) {
        $boxes.dispose();
    }
    if ($scores !== scores) {
        $scores.dispose();
    }
    return {
        selectedIndices: (0,_tensor1d__WEBPACK_IMPORTED_MODULE_3__.tensor1d)(selectedIndices, 'int32'),
        validOutputs: (0,_scalar__WEBPACK_IMPORTED_MODULE_4__.scalar)(validOutputs, 'int32')
    };
}
const nonMaxSuppressionPaddedAsync = nonMaxSuppressionPaddedAsync_;
//# sourceMappingURL=non_max_suppression_padded_async.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionWithScore": () => (/* binding */ nonMaxSuppressionWithScore)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (c.f.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function nonMaxSuppressionWithScore_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
    const $boxes = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(boxes, 'boxes', 'nonMaxSuppression');
    const $scores = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(scores, 'scores', 'nonMaxSuppression');
    const params = (0,_nonmax_util__WEBPACK_IMPORTED_MODULE_2__.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    maxOutputSize = params.maxOutputSize;
    iouThreshold = params.iouThreshold;
    scoreThreshold = params.scoreThreshold;
    softNmsSigma = params.softNmsSigma;
    const inputs = { boxes: $boxes, scores: $scores };
    const attrs = { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const result = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.NonMaxSuppressionV5, inputs, attrs);
    return { selectedIndices: result[0], selectedScores: result[1] };
}
const nonMaxSuppressionWithScore = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ nonMaxSuppressionWithScore_ });
//# sourceMappingURL=non_max_suppression_with_score.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppressionWithScoreAsync": () => (/* binding */ nonMaxSuppressionWithScoreAsync)
/* harmony export */ });
/* harmony import */ var _backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../backends/non_max_suppression_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/non_max_suppression_impl.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _nonmax_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../nonmax_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js");
/* harmony import */ var _tensor1d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Asynchronously performs non maximum suppression of bounding boxes based on
 * iou (intersection over union).
 *
 * This op also supports a Soft-NMS mode (c.f.
 * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
 * of other overlapping boxes, therefore favoring different regions of the image
 * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`
 * parameter to be larger than 0.
 *
 * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is
 *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of
 *     the bounding box.
 * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.
 * @param maxOutputSize The maximum number of boxes to be selected.
 * @param iouThreshold A float representing the threshold for deciding whether
 *     boxes overlap too much with respect to IOU. Must be between [0, 1].
 *     Defaults to 0.5 (50% box overlap).
 * @param scoreThreshold A threshold for deciding when to remove boxes based
 *     on score. Defaults to -inf, which means any score is accepted.
 * @param softNmsSigma A float representing the sigma parameter for Soft NMS.
 *     When sigma is 0, it falls back to nonMaxSuppression.
 * @return A map with the following properties:
 *     - selectedIndices: A 1D tensor with the selected box indices.
 *     - selectedScores: A 1D tensor with the corresponding scores for each
 *       selected box.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
async function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY, softNmsSigma = 0.0) {
    const $boxes = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(boxes, 'boxes', 'nonMaxSuppressionAsync');
    const $scores = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(scores, 'scores', 'nonMaxSuppressionAsync');
    const params = (0,_nonmax_util__WEBPACK_IMPORTED_MODULE_1__.nonMaxSuppSanityCheck)($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    maxOutputSize = params.maxOutputSize;
    iouThreshold = params.iouThreshold;
    scoreThreshold = params.scoreThreshold;
    softNmsSigma = params.softNmsSigma;
    const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);
    const boxesVals = boxesAndScores[0];
    const scoresVals = boxesAndScores[1];
    // We call a cpu based impl directly with the typedarray data  here rather
    // than a kernel because all kernels are synchronous (and thus cannot await
    // .data()).
    const { selectedIndices, selectedScores } = (0,_backends_non_max_suppression_impl__WEBPACK_IMPORTED_MODULE_2__.nonMaxSuppressionV5Impl)(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    if ($boxes !== boxes) {
        $boxes.dispose();
    }
    if ($scores !== scores) {
        $scores.dispose();
    }
    return {
        selectedIndices: (0,_tensor1d__WEBPACK_IMPORTED_MODULE_3__.tensor1d)(selectedIndices, 'int32'),
        selectedScores: (0,_tensor1d__WEBPACK_IMPORTED_MODULE_3__.tensor1d)(selectedScores)
    };
}
const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;
//# sourceMappingURL=non_max_suppression_with_score_async.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeBilinear": () => (/* binding */ resizeBilinear)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Bilinear resize a single 3D image or a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to `false`. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 * @param halfPixelCenters Defaults to `false`. Whether to assume pixel centers
 *     are at 0.5, which would make the floating point coordinates of the top
 *     left pixel 0.5, 0.5.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function resizeBilinear_(images, size, alignCorners = false, halfPixelCenters = false) {
    const $images = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(images, 'images', 'resizeBilinear');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got ` +
        `rank ${$images.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(size.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ` +
        `${size}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeBilinear: If halfPixelCenters is true, ` +
        `alignCorners must be false.`);
    let batchImages = $images;
    let reshapedTo4D = false;
    if ($images.rank === 3) {
        reshapedTo4D = true;
        batchImages = (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);
    }
    const [] = size;
    const inputs = { images: batchImages };
    const attrs = { alignCorners, halfPixelCenters, size };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.ResizeBilinear, inputs, attrs);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const resizeBilinear = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ resizeBilinear_ });
//# sourceMappingURL=resize_bilinear.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resizeNearestNeighbor": () => (/* binding */ resizeNearestNeighbor)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * NearestNeighbor resize a batch of 3D images to a new shape.
 *
 * @param images The images, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param size The new shape `[newHeight, newWidth]` to resize the
 *     images to. Each channel is resized individually.
 * @param alignCorners Defaults to False. If true, rescale
 *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4
 *     corners of images and resized images. If false, rescale by
 *     `new_height / height`. Treat similarly the width dimension.
 * @param halfPixelCenters Defaults to `false`. Whether to assumes pixels are of
 *      half the actual dimensions, and yields more accurate resizes. This flag
 *      would also make the floating point coordinates of the top left pixel
 *      0.5, 0.5.
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function resizeNearestNeighbor_(images, size, alignCorners = false, halfPixelCenters = false) {
    const $images = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(images, 'images', 'resizeNearestNeighbor');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +
        `rank ${$images.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +
        `${size}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, ` +
        `alignCorners must be false.`);
    let batchImages = $images;
    let reshapedTo4D = false;
    if ($images.rank === 3) {
        reshapedTo4D = true;
        batchImages = (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);
    }
    const [] = size;
    const inputs = { images: batchImages };
    const attrs = { alignCorners, halfPixelCenters, size };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.ResizeNearestNeighbor, inputs, attrs);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const resizeNearestNeighbor = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ resizeNearestNeighbor_ });
//# sourceMappingURL=resize_nearest_neighbor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotateWithOffset": () => (/* binding */ rotateWithOffset)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Rotates the input image tensor counter-clockwise with an optional offset
 * center of rotation. Currently available in the CPU, WebGL, and WASM backends.
 *
 * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.
 * @param radians The amount of rotation.
 * @param fillValue The value to fill in the empty space leftover
 *     after rotation. Can be either a single grayscale value (0-255), or an
 *     array of three numbers `[red, green, blue]` specifying the red, green,
 *     and blue channels. Defaults to `0` (black).
 * @param center The center of rotation. Can be either a single value (0-1), or
 *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates
 *     the image around its center).
 *
 * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}
 */
function rotateWithOffset_(image, radians, fillValue = 0, center = 0.5) {
    const $image = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(image, 'image', 'rotateWithOffset', 'float32');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($image.rank === 4, () => 'Error in rotateWithOffset: image must be rank 4,' +
        `but got rank ${$image.rank}.`);
    const inputs = { image: $image };
    const attrs = { radians, fillValue, center };
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.RotateWithOffset, inputs, attrs);
    return res;
}
const rotateWithOffset = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ rotateWithOffset_ });
//# sourceMappingURL=rotate_with_offset.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/in_top_k.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/in_top_k.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inTopKAsync": () => (/* binding */ inTopKAsync)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Returns whether the targets are in the top K predictions.
 *
 * ```js
 * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);
 * const targets = tf.tensor1d([2, 0]);
 * const precision = await tf.inTopKAsync(predictions, targets);
 * precision.print();
 * ```
 * @param predictions 2-D or higher `tf.Tensor` with last dimension being
 *     at least `k`.
 * @param targets 1-D or higher `tf.Tensor`.
 * @param k Optional Number of top elements to look at for computing precision,
 *     default to 1.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
async function inTopKAsync_(predictions, targets, k = 1) {
    const $predictions = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(predictions, 'predictions', 'inTopK');
    const $targets = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(targets, 'targets', 'inTopK');
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)($predictions.rank > 1, () => 'inTopK() expects the predictions to be of rank 2 or higher, ' +
        `but got ${$predictions.rank}`);
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)($predictions.rank - 1 === $targets.rank, () => `predictions rank should be 1 larger than ` +
        `targets rank, but got predictions rank ` +
        `${$predictions.rank} and targets rank ${$targets.rank}`);
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatch)($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, `predictions's shape should be align with the targets' shape, ` +
        'except the last dimension.');
    const lastDim = $predictions.shape[$predictions.shape.length - 1];
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(k > 0 && k <= lastDim, () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` +
        `dimension (${lastDim}), but got ${k}`);
    const predictionsVals = await $predictions.data();
    const targetsVals = await $targets.data();
    // Reshape predictionsVals into a 2d tensor [batch, lastDim]
    // and look up topK along lastDim.
    const [batch, size] = [predictionsVals.length / lastDim, lastDim];
    const precision = (0,_util__WEBPACK_IMPORTED_MODULE_1__.getTypedArrayFromDType)('bool', batch);
    for (let b = 0; b < batch; b++) {
        const offset = b * size;
        const vals = predictionsVals.subarray(offset, offset + size);
        const valAndInd = [];
        for (let i = 0; i < vals.length; i++) {
            valAndInd.push({ value: vals[i], index: i });
        }
        valAndInd.sort((a, b) => b.value - a.value);
        precision[b] = 0;
        for (let i = 0; i < k; i++) {
            if (valAndInd[i].index === targetsVals[b]) {
                precision[b] = 1;
                break;
            }
        }
    }
    if (predictions !== $predictions) {
        $predictions.dispose();
    }
    if (targets !== $targets) {
        $targets.dispose();
    }
    // Output precision has the same shape as targets.
    return (0,_tensor__WEBPACK_IMPORTED_MODULE_2__.tensor)(precision, $targets.shape, 'bool');
}
const inTopKAsync = inTopKAsync_;
//# sourceMappingURL=in_top_k.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_finite.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/is_finite.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFinite": () => (/* binding */ isFinite)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns which elements of x are finite.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isFinite().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isFinite_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'isFinite');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.IsFinite, inputs);
}
const isFinite = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ isFinite_ });
//# sourceMappingURL=is_finite.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_inf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/is_inf.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isInf": () => (/* binding */ isInf)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns which elements of x are Infinity or -Infinity.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isInf().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isInf_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'isInf');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.IsInf, inputs);
}
const isInf = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ isInf_ });
//# sourceMappingURL=is_inf.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_nan.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/is_nan.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNaN": () => (/* binding */ isNaN)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * RReturns which elements of x are NaN.
 *
 * ```js
 * const x = tf.tensor1d([NaN, Infinity, -Infinity, 0, 1]);
 *
 * x.isNaN().print();  // or tf.isNaN(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function isNaN_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'isNaN');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.IsNan, inputs);
}
const isNaN = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ isNaN_ });
//# sourceMappingURL=is_nan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "leakyRelu": () => (/* binding */ leakyRelu)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes leaky rectified linear element-wise.
 *
 * See
 * [http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf](
 *     http://web.stanford.edu/~awni/papers/relu_hybrid_icml2013_final.pdf)
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.leakyRelu(0.1).print();  // or tf.leakyRelu(x, 0.1)
 * ```
 * @param x The input tensor.
 * @param alpha The scaling factor for negative values, defaults to 0.2.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function leakyRelu_(x, alpha = 0.2) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'leakyRelu');
    const inputs = { x: $x };
    const attrs = { alpha };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.LeakyRelu, inputs, attrs);
}
const leakyRelu = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ leakyRelu_ });
//# sourceMappingURL=leaky_relu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/less.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/less.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "less": () => (/* binding */ less)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a < b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.less(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function less_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'less');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'less');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_3__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.Less, inputs);
}
const less = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ less_ });
//# sourceMappingURL=less.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lessEqual": () => (/* binding */ lessEqual)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a <= b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([2, 2, 2]);
 *
 * a.lessEqual(b).print();
 * ```
 *
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function lessEqual_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'lessEqual');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'lessEqual');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_3__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.LessEqual, inputs);
}
const lessEqual = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ lessEqual_ });
//# sourceMappingURL=less_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bandPart": () => (/* binding */ bandPart)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _greater_equal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _less_equal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _logical_and__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../range */ "./node_modules/@tensorflow/tfjs-core/dist/ops/range.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _unstack__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../unstack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js");
/* harmony import */ var _where__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _zeros__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */














/**
 * Copy a tensor setting everything outside a central band in each innermost
 * matrix to zero.
 *
 * The band part is computed as follows: Assume input has `k` dimensions
 * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where
 * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.
 * The indicator function
 * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`
 * `&& (num_upper < 0 || (n-m) <= num_upper)`
 *
 * ```js
 * const x = tf.tensor2d([[ 0,  1,  2, 3],
 *                        [-1,  0,  1, 2],
 *                        [-2, -1,  0, 1],
 *                        [-3, -2, -1, 0]]);
 * let y = tf.linalg.bandPart(x, 1, -1);
 * y.print(); // [[ 0,  1,  2, 3],
 *            //  [-1,  0,  1, 2],
 *            //  [ 0, -1,  0, 1],
 *            //  [ 0, 0 , -1, 0]]
 * let z = tf.linalg.bandPart(x, 2, 1);
 * z.print(); // [[ 0,  1,  0, 0],
 *            //  [-1,  0,  1, 0],
 *            //  [-2, -1,  0, 1],
 *            //  [ 0, -2, -1, 0]]
 * ```
 *
 * @param x Rank `k` tensor
 * @param numLower Number of subdiagonals to keep.
 *   If negative, keep entire lower triangle.
 * @param numUpper Number of subdiagonals to keep.
 *   If negative, keep entire upper triangle.
 * @returns Rank `k` tensor of the same shape as input.
 *   The extracted banded tensor.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */
function bandPart_(a, numLower, numUpper) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'bandPart');
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);
    const shape = $a.shape;
    const [M, N] = $a.shape.slice(-2);
    if (!(numLower <= M)) {
        throw new Error(`bandPart(): numLower (${numLower})` +
            ` must not be greater than the number of rows (${M}).`);
    }
    if (!(numUpper <= N)) {
        throw new Error(`bandPart(): numUpper (${numUpper})` +
            ` must not be greater than the number of columns (${N}).`);
    }
    if (numLower < 0) {
        numLower = M;
    }
    if (numUpper < 0) {
        numUpper = N;
    }
    const i = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)((0,_range__WEBPACK_IMPORTED_MODULE_3__.range)(0, M, 1, 'int32'), [-1, 1]);
    const j = (0,_range__WEBPACK_IMPORTED_MODULE_3__.range)(0, N, 1, 'int32');
    const ij = (0,_sub__WEBPACK_IMPORTED_MODULE_4__.sub)(i, j);
    const inBand = (0,_logical_and__WEBPACK_IMPORTED_MODULE_5__.logicalAnd)((0,_less_equal__WEBPACK_IMPORTED_MODULE_6__.lessEqual)(ij, (0,_scalar__WEBPACK_IMPORTED_MODULE_7__.scalar)(+numLower, 'int32')), (0,_greater_equal__WEBPACK_IMPORTED_MODULE_8__.greaterEqual)(ij, (0,_scalar__WEBPACK_IMPORTED_MODULE_7__.scalar)(-numUpper, 'int32')));
    const zero = (0,_zeros__WEBPACK_IMPORTED_MODULE_9__.zeros)([M, N], $a.dtype);
    return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)((0,_stack__WEBPACK_IMPORTED_MODULE_10__.stack)((0,_unstack__WEBPACK_IMPORTED_MODULE_11__.unstack)((0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($a, [-1, M, N]))
        .map(mat => (0,_where__WEBPACK_IMPORTED_MODULE_12__.where)(inBand, mat, zero))), shape);
}
const bandPart = (0,_operation__WEBPACK_IMPORTED_MODULE_13__.op)({ bandPart_ });
//# sourceMappingURL=band_part.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gramSchmidt": () => (/* binding */ gramSchmidt)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _norm__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../norm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../split */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js");
/* harmony import */ var _squeeze__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../squeeze */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js");
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











/**
 * Gram-Schmidt orthogonalization.
 *
 * ```js
 * const x = tf.tensor2d([[1, 2], [3, 4]]);
 * let y = tf.linalg.gramSchmidt(x);
 * y.print();
 * console.log('Othogonalized:');
 * y.dot(y.transpose()).print();  // should be nearly the identity matrix.
 * console.log('First row direction maintained:');
 * const data = await y.array();
 * console.log(data[0][1] / data[0][0]);  // should be nearly 2.
 * ```
 *
 * @param xs The vectors to be orthogonalized, in one of the two following
 *   formats:
 *   - An Array of `tf.Tensor1D`.
 *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows
 *     of `xs`.
 *   In each case, all the vectors must have the same length and the length
 *   must be greater than or equal to the number of vectors.
 * @returns The orthogonalized and normalized vectors or matrix.
 *   Orthogonalization means that the vectors or the rows of the matrix
 *   are orthogonal (zero inner products). Normalization means that each
 *   vector or each row of the matrix has an L2 norm that equals `1`.
 *
 * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}
 */
function gramSchmidt_(xs) {
    let inputIsTensor2D;
    if (Array.isArray(xs)) {
        inputIsTensor2D = false;
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' +
            'empty');
        const dim = xs[0].shape[0];
        for (let i = 1; i < xs.length; ++i) {
            (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' +
                `(${xs[i].shape[0]} vs. ${dim})`);
        }
    }
    else {
        inputIsTensor2D = true;
        xs = (0,_split__WEBPACK_IMPORTED_MODULE_2__.split)(xs, xs.shape[0], 0).map(x => (0,_squeeze__WEBPACK_IMPORTED_MODULE_3__.squeeze)(x, [0]));
    }
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` +
        `number of dimensions (${xs[0].shape[0]}).`);
    const ys = [];
    const xs1d = xs;
    for (let i = 0; i < xs.length; ++i) {
        ys.push(_engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.tidy(() => {
            let x = xs1d[i];
            if (i > 0) {
                for (let j = 0; j < i; ++j) {
                    const proj = (0,_mul__WEBPACK_IMPORTED_MODULE_4__.mul)((0,_sum__WEBPACK_IMPORTED_MODULE_5__.sum)((0,_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(ys[j], x)), ys[j]);
                    x = (0,_sub__WEBPACK_IMPORTED_MODULE_6__.sub)(x, proj);
                }
            }
            return (0,_div__WEBPACK_IMPORTED_MODULE_7__.div)(x, (0,_norm__WEBPACK_IMPORTED_MODULE_8__.norm)(x, 'euclidean'));
        }));
    }
    if (inputIsTensor2D) {
        return (0,_stack__WEBPACK_IMPORTED_MODULE_9__.stack)(ys, 0);
    }
    else {
        return ys;
    }
}
const gramSchmidt = (0,_operation__WEBPACK_IMPORTED_MODULE_10__.op)({ gramSchmidt_ });
//# sourceMappingURL=gram_schmidt.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "qr": () => (/* binding */ qr)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _clone__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../clone */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _eye__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../eye */ "./node_modules/@tensorflow/tfjs-core/dist/ops/eye.js");
/* harmony import */ var _greater__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _norm__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../norm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _tensor2d__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tensor2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/* harmony import */ var _unstack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../unstack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js");
/* harmony import */ var _where__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





















/**
 * Compute QR decomposition of m-by-n matrix using Householder transformation.
 *
 * Implementation based on
 *   [http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf]
 * (http://www.cs.cornell.edu/~bindel/class/cs6210-f09/lec18.pdf)
 *
 * ```js
 * const a = tf.tensor2d([[1, 2], [3, 4]]);
 * let [q, r] = tf.linalg.qr(a);
 * console.log('Q');
 * q.print();
 * console.log('R');
 * r.print();
 * console.log('Orthogonalized');
 * q.dot(q.transpose()).print()  // should be nearly the identity matrix.
 * console.log('Reconstructed');
 * q.dot(r).print(); // should be nearly [[1, 2], [3, 4]];
 * ```
 *
 * @param x The `tf.Tensor` to be QR-decomposed. Must have rank >= 2. Suppose
 *   it has the shape `[..., M, N]`.
 * @param fullMatrices An optional boolean parameter. Defaults to `false`.
 *   If `true`, compute full-sized `Q`. If `false` (the default),
 *   compute only the leading N columns of `Q` and `R`.
 * @returns An `Array` of two `tf.Tensor`s: `[Q, R]`. `Q` is a unitary matrix,
 *   i.e., its columns all have unit norm and are mutually orthogonal.
 *   If `M >= N`,
 *     If `fullMatrices` is `false` (default),
 *       - `Q` has a shape of `[..., M, N]`,
 *       - `R` has a shape of `[..., N, N]`.
 *     If `fullMatrices` is `true` (default),
 *       - `Q` has a shape of `[..., M, M]`,
 *       - `R` has a shape of `[..., M, N]`.
 *   If `M < N`,
 *     - `Q` has a shape of `[..., M, M]`,
 *     - `R` has a shape of `[..., M, N]`.
 * @throws If the rank of `x` is less than 2.
 *
 * @doc {heading:'Operations',
 *       subheading:'Linear Algebra',
 *       namespace:'linalg'}
 */
function qr_(x, fullMatrices = false) {
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(x.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${x.rank}`);
    if (x.rank === 2) {
        return qr2d(x, fullMatrices);
    }
    else {
        // Rank > 2.
        // TODO(cais): Below we split the input into individual 2D tensors,
        //   perform QR decomposition on them and then stack the results back
        //   together. We should explore whether this can be parallelized.
        const outerDimsProd = x.shape.slice(0, x.shape.length - 2)
            .reduce((value, prev) => value * prev);
        const x2ds = (0,_unstack__WEBPACK_IMPORTED_MODULE_2__.unstack)((0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(x, [
            outerDimsProd, x.shape[x.shape.length - 2],
            x.shape[x.shape.length - 1]
        ]), 0);
        const q2ds = [];
        const r2ds = [];
        x2ds.forEach(x2d => {
            const [q2d, r2d] = qr2d(x2d, fullMatrices);
            q2ds.push(q2d);
            r2ds.push(r2d);
        });
        const q = (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)((0,_stack__WEBPACK_IMPORTED_MODULE_4__.stack)(q2ds, 0), x.shape);
        const r = (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)((0,_stack__WEBPACK_IMPORTED_MODULE_4__.stack)(r2ds, 0), x.shape);
        return [q, r];
    }
}
function qr2d(x, fullMatrices = false) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.tidy(() => {
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(x.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${x.shape.length}D Tensor.`);
        const m = x.shape[0];
        const n = x.shape[1];
        let q = (0,_eye__WEBPACK_IMPORTED_MODULE_5__.eye)(m); // Orthogonal transform so far.
        let r = (0,_clone__WEBPACK_IMPORTED_MODULE_6__.clone)(x); // Transformed matrix so far.
        const one2D = (0,_tensor2d__WEBPACK_IMPORTED_MODULE_7__.tensor2d)([[1]], [1, 1]);
        let w = (0,_clone__WEBPACK_IMPORTED_MODULE_6__.clone)(one2D);
        const iters = m >= n ? n : m;
        for (let j = 0; j < iters; ++j) {
            // This tidy within the for-loop ensures we clean up temporary
            // tensors as soon as they are no longer needed.
            const rTemp = r;
            const wTemp = w;
            const qTemp = q;
            [w, r, q] = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.tidy(() => {
                // Find H = I - tau * w * w', to put zeros below R(j, j).
                const rjEnd1 = (0,_slice__WEBPACK_IMPORTED_MODULE_8__.slice)(r, [j, j], [m - j, 1]);
                const normX = (0,_norm__WEBPACK_IMPORTED_MODULE_9__.norm)(rjEnd1);
                const rjj = (0,_slice__WEBPACK_IMPORTED_MODULE_8__.slice)(r, [j, j], [1, 1]);
                // The sign() function returns 0 on 0, which causes division by zero.
                const s = (0,_where__WEBPACK_IMPORTED_MODULE_10__.where)((0,_greater__WEBPACK_IMPORTED_MODULE_11__.greater)(rjj, 0), (0,_tensor2d__WEBPACK_IMPORTED_MODULE_7__.tensor2d)([[-1]]), (0,_tensor2d__WEBPACK_IMPORTED_MODULE_7__.tensor2d)([[1]]));
                const u1 = (0,_sub__WEBPACK_IMPORTED_MODULE_12__.sub)(rjj, (0,_mul__WEBPACK_IMPORTED_MODULE_13__.mul)(s, normX));
                const wPre = (0,_div__WEBPACK_IMPORTED_MODULE_14__.div)(rjEnd1, u1);
                if (wPre.shape[0] === 1) {
                    w = (0,_clone__WEBPACK_IMPORTED_MODULE_6__.clone)(one2D);
                }
                else {
                    w = (0,_concat__WEBPACK_IMPORTED_MODULE_15__.concat)([
                        one2D,
                        (0,_slice__WEBPACK_IMPORTED_MODULE_8__.slice)(wPre, [1, 0], [wPre.shape[0] - 1, wPre.shape[1]])
                    ], 0);
                }
                const tau = (0,_neg__WEBPACK_IMPORTED_MODULE_16__.neg)((0,_div__WEBPACK_IMPORTED_MODULE_14__.div)((0,_mat_mul__WEBPACK_IMPORTED_MODULE_17__.matMul)(s, u1), normX));
                // -- R := HR, Q := QH.
                const rjEndAll = (0,_slice__WEBPACK_IMPORTED_MODULE_8__.slice)(r, [j, 0], [m - j, n]);
                const tauTimesW = (0,_mul__WEBPACK_IMPORTED_MODULE_13__.mul)(tau, w);
                const wT = (0,_transpose__WEBPACK_IMPORTED_MODULE_18__.transpose)(w);
                if (j === 0) {
                    r = (0,_sub__WEBPACK_IMPORTED_MODULE_12__.sub)(rjEndAll, (0,_mat_mul__WEBPACK_IMPORTED_MODULE_17__.matMul)(tauTimesW, (0,_mat_mul__WEBPACK_IMPORTED_MODULE_17__.matMul)(wT, rjEndAll)));
                }
                else {
                    const rTimesTau = (0,_sub__WEBPACK_IMPORTED_MODULE_12__.sub)(rjEndAll, (0,_mat_mul__WEBPACK_IMPORTED_MODULE_17__.matMul)(tauTimesW, (0,_mat_mul__WEBPACK_IMPORTED_MODULE_17__.matMul)(wT, rjEndAll)));
                    r = (0,_concat__WEBPACK_IMPORTED_MODULE_15__.concat)([(0,_slice__WEBPACK_IMPORTED_MODULE_8__.slice)(r, [0, 0], [j, n]), rTimesTau], 0);
                }
                const tawTimesWT = (0,_transpose__WEBPACK_IMPORTED_MODULE_18__.transpose)(tauTimesW);
                const qAllJEnd = (0,_slice__WEBPACK_IMPORTED_MODULE_8__.slice)(q, [0, j], [m, q.shape[1] - j]);
                if (j === 0) {
                    q = (0,_sub__WEBPACK_IMPORTED_MODULE_12__.sub)(qAllJEnd, (0,_mat_mul__WEBPACK_IMPORTED_MODULE_17__.matMul)((0,_mat_mul__WEBPACK_IMPORTED_MODULE_17__.matMul)(qAllJEnd, w), tawTimesWT));
                }
                else {
                    const qTimesTau = (0,_sub__WEBPACK_IMPORTED_MODULE_12__.sub)(qAllJEnd, (0,_mat_mul__WEBPACK_IMPORTED_MODULE_17__.matMul)((0,_mat_mul__WEBPACK_IMPORTED_MODULE_17__.matMul)(qAllJEnd, w), tawTimesWT));
                    q = (0,_concat__WEBPACK_IMPORTED_MODULE_15__.concat)([(0,_slice__WEBPACK_IMPORTED_MODULE_8__.slice)(q, [0, 0], [m, j]), qTimesTau], 1);
                }
                return [w, r, q];
            });
            (0,_globals__WEBPACK_IMPORTED_MODULE_19__.dispose)([rTemp, wTemp, qTemp]);
        }
        if (!fullMatrices && m > n) {
            q = (0,_slice__WEBPACK_IMPORTED_MODULE_8__.slice)(q, [0, 0], [m, n]);
            r = (0,_slice__WEBPACK_IMPORTED_MODULE_8__.slice)(r, [0, 0], [n, n]);
        }
        return [q, r];
    });
}
const qr = (0,_operation__WEBPACK_IMPORTED_MODULE_20__.op)({ qr_ });
//# sourceMappingURL=qr.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/linspace.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/linspace.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linspace": () => (/* binding */ linspace)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Return an evenly spaced sequence of numbers over the given interval.
 *
 * ```js
 * tf.linspace(0, 9, 10).print();
 * ```
 * @param start The start value of the sequence.
 * @param stop The end value of the sequence.
 * @param num The number of values to generate.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function linspace(start, stop, num) {
    if (num <= 0) {
        throw new Error('The number of values should be positive.');
    }
    const attrs = { start, stop, num };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.LinSpace, {}, attrs);
}
//# sourceMappingURL=linspace.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "localResponseNormalization": () => (/* binding */ localResponseNormalization)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Normalizes the activation of a local neighborhood across or within
 * channels.
 *
 * @param x The input tensor. The 4-D input tensor is treated as a 3-D array
 *     of 1D vectors (along the last dimension), and each vector is
 *     normalized independently.
 * @param depthRadius The number of adjacent channels in the 1D normalization
 *     window.
 * @param bias A constant bias term for the basis.
 * @param alpha A scale factor, usually positive.
 * @param beta An exponent.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function localResponseNormalization_(x, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'localResponseNormalization');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.rank === 4 || $x.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${$x.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(_util__WEBPACK_IMPORTED_MODULE_2__.isInt(depthRadius), () => `Error in localResponseNormalization: depthRadius must be an ` +
        `integer but got depthRadius ${depthRadius}.`);
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    const inputs = { x: x4D };
    const attrs = { depthRadius, bias, alpha, beta };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.LRN, inputs, attrs);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    else {
        return res;
    }
}
const localResponseNormalization = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ localResponseNormalization_ });
//# sourceMappingURL=local_response_normalization.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization_backprop.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "localResponseNormalizationBackprop": () => (/* binding */ localResponseNormalizationBackprop)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function localResponseNormalizationBackprop_(x, y, dy, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5) {
    const inputs = { x, y, dy };
    const attrs = { depthRadius, bias, alpha, beta };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.LRNGrad, inputs, attrs);
}
const localResponseNormalizationBackprop = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ localResponseNormalizationBackprop_ });
//# sourceMappingURL=local_response_normalization_backprop.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/log.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log": () => (/* binding */ log)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes natural logarithm of the input `tf.Tensor` element-wise: `ln(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E]);
 *
 * x.log().print();  // or tf.log(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function log_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'log');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Log, inputs);
}
const log = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ log_ });
//# sourceMappingURL=log.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log1p": () => (/* binding */ log1p)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes natural logarithm of the input `tf.Tensor` plus one
 * element-wise: `ln(1 + x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.E - 1]);
 *
 * x.log1p().print();  // or tf.log1p(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function log1p_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'log1p');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Log1p, inputs);
}
const log1p = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ log1p_ });
//# sourceMappingURL=log1p.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sigmoid.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/log_sigmoid.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logSigmoid": () => (/* binding */ logSigmoid)
/* harmony export */ });
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _sigmoid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js");
/* harmony import */ var _softplus__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./softplus */ "./node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes log sigmoid of the input `tf.Tensor` element-wise:
 * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.logSigmoid().print();  // or tf.logSigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function logSigmoid_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'logSigmoid');
    // Use a custom gradient to maintain previous implementation.
    // There is no LogSigmoid kernel in TF so we can't use engine.runKernel
    // directly
    const customOp = (0,_gradients__WEBPACK_IMPORTED_MODULE_1__.customGrad)((x) => {
        // TODO(yassogba) we can remove the chained softplus call here only
        // after backends have modualrized softplus at which point we can call
        // engine runKernel(..., Sotfplus, ...) directly.
        const value = (0,_neg__WEBPACK_IMPORTED_MODULE_2__.neg)((0,_softplus__WEBPACK_IMPORTED_MODULE_3__.softplus)((0,_neg__WEBPACK_IMPORTED_MODULE_2__.neg)(x)));
        const gradFunc = (dy) => {
            const derX = (0,_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(dy, (0,_sigmoid__WEBPACK_IMPORTED_MODULE_5__.sigmoid)((0,_neg__WEBPACK_IMPORTED_MODULE_2__.neg)(x)));
            return derX;
        };
        return { value, gradFunc };
    });
    return customOp($x);
}
const logSigmoid = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ logSigmoid_ });
//# sourceMappingURL=log_sigmoid.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logSoftmax": () => (/* binding */ logSoftmax)
/* harmony export */ });
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./log */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/**
 * Computes the log softmax.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.logSoftmax().print();  // or tf.logSoftmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param axis The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function logSoftmax_(logits, axis = -1) {
    const $logits = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(logits, 'logits', 'logSoftmax');
    if (axis === -1) {
        axis = $logits.rank - 1;
    }
    if (axis !== $logits.rank - 1) {
        throw Error('Log Softmax along a non-last dimension is not yet supported. ' +
            `Logits was rank ${$logits.rank} and axis was ${axis}`);
    }
    // const forward: ForwardFunc<Tensor> = (backend, save) => {
    //   const keepDims = true;
    //   const xMax = max(logits, axis, true);
    //   const shifted = sub(logits, xMax);
    //   const value =
    //       sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis,
    //       keepDims)));
    //   save([value]);
    //   return value;
    // };
    // Use a custom gradient for numerical stability.
    const customOp = (0,_gradients__WEBPACK_IMPORTED_MODULE_1__.customGrad)((logits, save) => {
        const keepDims = true;
        const xMax = (0,_max__WEBPACK_IMPORTED_MODULE_2__.max)(logits, axis, true);
        const shifted = (0,_sub__WEBPACK_IMPORTED_MODULE_3__.sub)(logits, xMax);
        const value = (0,_sub__WEBPACK_IMPORTED_MODULE_3__.sub)((0,_cast__WEBPACK_IMPORTED_MODULE_4__.cast)(shifted, 'float32'), (0,_log__WEBPACK_IMPORTED_MODULE_5__.log)((0,_sum__WEBPACK_IMPORTED_MODULE_6__.sum)((0,_exp__WEBPACK_IMPORTED_MODULE_7__.exp)(shifted), axis, keepDims)));
        save([value]);
        const gradFunc = (dy, saved) => {
            const [value] = saved;
            const keepDims = true;
            const softmax = (0,_exp__WEBPACK_IMPORTED_MODULE_7__.exp)(value);
            return (0,_sub__WEBPACK_IMPORTED_MODULE_3__.sub)(dy, (0,_mul__WEBPACK_IMPORTED_MODULE_8__.mul)((0,_sum__WEBPACK_IMPORTED_MODULE_6__.sum)(dy, axis, keepDims), softmax));
        };
        return { value, gradFunc };
    });
    return customOp($logits);
    // TODO Use Engine.runKernel when CPU/WebGL/WASM backends implement this.
    // const inputs: LogSoftmaxInputs = {logits: $logits};
    // const attrs: LogSoftmaxAttrs = {axis};
    // return ENGINE.runKernel(
    //            LogSoftmax, inputs as {} as NamedTensorMap,
    //            attrs as {} as NamedAttrMap);
}
const logSoftmax = (0,_operation__WEBPACK_IMPORTED_MODULE_9__.op)({ logSoftmax_ });
//# sourceMappingURL=log_softmax.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logSumExp": () => (/* binding */ logSumExp)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./log */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











/**
 * Computes the log(sum(exp(elements across the reduction dimensions)).
 *
 * Reduces the input along the dimensions given in `axis`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.logSumExp().print();  // or tf.logSumExp(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)
 * ```
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. If null (the default),
 *     reduces all dimensions.
 * @param keepDims If true, retains reduced dimensions with length
 *     of 1. Defaults to false.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function logSumExp_(x, axis = null, keepDims = false) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'logSumExp');
    const axes = (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam)(axis, $x.shape);
    const xMax = (0,_max__WEBPACK_IMPORTED_MODULE_2__.max)($x, axes, true /* keepDims */);
    const a = (0,_sub__WEBPACK_IMPORTED_MODULE_3__.sub)($x, xMax);
    const b = (0,_exp__WEBPACK_IMPORTED_MODULE_4__.exp)(a);
    const c = (0,_sum__WEBPACK_IMPORTED_MODULE_5__.sum)(b, axes);
    const d = (0,_log__WEBPACK_IMPORTED_MODULE_6__.log)(c);
    const res = (0,_add__WEBPACK_IMPORTED_MODULE_7__.add)((0,_reshape__WEBPACK_IMPORTED_MODULE_8__.reshape)(xMax, d.shape), d);
    if (keepDims) {
        const newShape = (0,_axis_util__WEBPACK_IMPORTED_MODULE_9__.expandShapeToKeepDim)(res.shape, axes);
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_8__.reshape)(res, newShape);
    }
    return res;
}
const logSumExp = (0,_operation__WEBPACK_IMPORTED_MODULE_10__.op)({ logSumExp_ });
//# sourceMappingURL=log_sum_exp.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicalAnd": () => (/* binding */ logicalAnd)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Returns the truth value of `a AND b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalAnd(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalAnd_(a, b) {
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'logicalAnd', 'bool');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'logicalAnd', 'bool');
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_2__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.LogicalAnd, inputs);
}
const logicalAnd = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ logicalAnd_ });
//# sourceMappingURL=logical_and.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicalNot": () => (/* binding */ logicalNot)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns the truth value of `NOT x` element-wise.
 *
 * ```js
 * const a = tf.tensor1d([false, true], 'bool');
 *
 * a.logicalNot().print();
 * ```
 *
 * @param x The input tensor. Must be of dtype 'bool'.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalNot_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'logicalNot', 'bool');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.LogicalNot, inputs);
}
const logicalNot = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ logicalNot_ });
//# sourceMappingURL=logical_not.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicalOr": () => (/* binding */ logicalOr)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Returns the truth value of `a OR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalOr(b).print();
 * ```
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalOr_(a, b) {
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'logicalOr', 'bool');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'logicalOr', 'bool');
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_2__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.LogicalOr, inputs);
}
const logicalOr = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ logicalOr_ });
//# sourceMappingURL=logical_or.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicalXor": () => (/* binding */ logicalXor)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _logical_and__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _logical_not__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logical_not */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js");
/* harmony import */ var _logical_or__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logical_or */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of `a XOR b` element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([false, false, true, true], 'bool');
 * const b = tf.tensor1d([false, true, false, true], 'bool');
 *
 * a.logicalXor(b).print();
 * ```
 *
 * @param a The first input tensor. Must be of dtype bool.
 * @param b The second input tensor. Must be of dtype bool.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function logicalXor_(a, b) {
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(a, 'a', 'logicalXor', 'bool');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(b, 'b', 'logicalXor', 'bool');
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_1__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    // x ^ y = (x | y) & ~(x & y)
    return (0,_logical_and__WEBPACK_IMPORTED_MODULE_2__.logicalAnd)((0,_logical_or__WEBPACK_IMPORTED_MODULE_3__.logicalOr)(a, b), (0,_logical_not__WEBPACK_IMPORTED_MODULE_4__.logicalNot)((0,_logical_and__WEBPACK_IMPORTED_MODULE_2__.logicalAnd)(a, b)));
}
const logicalXor = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ logicalXor_ });
//# sourceMappingURL=logical_xor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Reduction": () => (/* binding */ Reduction)
/* harmony export */ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Reduction;
(function (Reduction) {
    Reduction[Reduction["NONE"] = 0] = "NONE";
    Reduction[Reduction["MEAN"] = 1] = "MEAN";
    Reduction[Reduction["SUM"] = 2] = "SUM";
    Reduction[Reduction["SUM_BY_NONZERO_WEIGHTS"] = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Reduction || (Reduction = {}));
//# sourceMappingURL=loss_ops_utils.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "absoluteDifference": () => (/* binding */ absoluteDifference)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the absolute difference loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function absoluteDifference_(labels, predictions, weights, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__.Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(labels, 'labels', 'absoluteDifference');
    const $predictions = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(predictions, 'predictions', 'absoluteDifference');
    let $weights = null;
    if (weights != null) {
        $weights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(weights, 'weights', 'absoluteDifference');
    }
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in absoluteDifference: ');
    const losses = (0,_abs__WEBPACK_IMPORTED_MODULE_3__.abs)((0,_sub__WEBPACK_IMPORTED_MODULE_4__.sub)($labels, $predictions));
    return (0,_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_5__.computeWeightedLoss)(losses, $weights, reduction);
}
const absoluteDifference = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ absoluteDifference_ });
//# sourceMappingURL=absolute_difference.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "computeWeightedLoss": () => (/* binding */ computeWeightedLoss)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mean__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../mean */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _not_equal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../not_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js");
/* harmony import */ var _ones__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ones */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");











/**
 * Computes the weighted loss between two tensors.
 *
 * @param losses Tensor of shape `[batch_size, d1, ... dN]`.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `losses`, and must be broadcastable to `losses` (i.e., all
 *    dimensions must be either `1`, or the same as the corresponding
 *    `losses` dimension).
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function computeWeightedLoss_(losses, weights, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__.Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $losses = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(losses, 'losses', 'computeWeightedLoss');
    let $weights = null;
    if (weights != null) {
        $weights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(weights, 'weights', 'computeWeightedLoss');
    }
    const weightedLoss = ($weights == null) ? $losses : (0,_mul__WEBPACK_IMPORTED_MODULE_2__.mul)($losses, $weights);
    if (reduction === _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__.Reduction.NONE) {
        return weightedLoss;
    }
    if (reduction === _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__.Reduction.SUM) {
        return (0,_sum__WEBPACK_IMPORTED_MODULE_3__.sum)(weightedLoss);
    }
    if (reduction === _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__.Reduction.MEAN) {
        if ($weights == null) {
            return (0,_mean__WEBPACK_IMPORTED_MODULE_4__.mean)(weightedLoss);
        }
        else {
            const broadcastFactor = $losses.size / $weights.size;
            const result = (0,_div__WEBPACK_IMPORTED_MODULE_5__.div)((0,_sum__WEBPACK_IMPORTED_MODULE_3__.sum)(weightedLoss), (0,_sum__WEBPACK_IMPORTED_MODULE_3__.sum)($weights));
            return broadcastFactor > 1 ? (0,_div__WEBPACK_IMPORTED_MODULE_5__.div)(result, (0,_scalar__WEBPACK_IMPORTED_MODULE_6__.scalar)(broadcastFactor)) :
                result;
        }
    }
    if (reduction === _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__.Reduction.SUM_BY_NONZERO_WEIGHTS) {
        if ($weights == null) {
            return (0,_div__WEBPACK_IMPORTED_MODULE_5__.div)((0,_sum__WEBPACK_IMPORTED_MODULE_3__.sum)(weightedLoss), (0,_scalar__WEBPACK_IMPORTED_MODULE_6__.scalar)($losses.size));
        }
        else {
            const broadcastedWeights = (0,_mul__WEBPACK_IMPORTED_MODULE_2__.mul)($weights, (0,_ones__WEBPACK_IMPORTED_MODULE_7__.ones)($losses.shape));
            const numNonZeros = (0,_cast__WEBPACK_IMPORTED_MODULE_8__.cast)((0,_sum__WEBPACK_IMPORTED_MODULE_3__.sum)((0,_not_equal__WEBPACK_IMPORTED_MODULE_9__.notEqual)(broadcastedWeights, (0,_scalar__WEBPACK_IMPORTED_MODULE_6__.scalar)(0))), 'float32');
            return (0,_div__WEBPACK_IMPORTED_MODULE_5__.div)((0,_sum__WEBPACK_IMPORTED_MODULE_3__.sum)(weightedLoss), numNonZeros);
        }
    }
    throw Error(`Unknown reduction: ${reduction}`);
}
const computeWeightedLoss = (0,_operation__WEBPACK_IMPORTED_MODULE_10__.op)({ computeWeightedLoss_ });
//# sourceMappingURL=compute_weighted_loss.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cosineDistance": () => (/* binding */ cosineDistance)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");









/**
 * Computes the cosine distance loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param axis The dimension along which the cosine distance is computed.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function cosineDistance_(labels, predictions, axis, weights, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__.Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(labels, 'labels', 'cosineDistance');
    const $predictions = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(predictions, 'predictions', 'cosineDistance');
    let $weights = null;
    if (weights != null) {
        $weights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(weights, 'weights', 'cosineDistance');
    }
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in cosineDistance: ');
    const one = (0,_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1);
    const losses = (0,_sub__WEBPACK_IMPORTED_MODULE_4__.sub)(one, (0,_sum__WEBPACK_IMPORTED_MODULE_5__.sum)((0,_mul__WEBPACK_IMPORTED_MODULE_6__.mul)($labels, $predictions), axis, true));
    return (0,_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_7__.computeWeightedLoss)(losses, $weights, reduction);
}
const cosineDistance = (0,_operation__WEBPACK_IMPORTED_MODULE_8__.op)({ cosineDistance_ });
//# sourceMappingURL=cosine_distance.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hingeLoss": () => (/* binding */ hingeLoss)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _relu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");









/**
 * Computes the Hinge loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function hingeLoss_(labels, predictions, weights, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__.Reduction.SUM_BY_NONZERO_WEIGHTS) {
    let $labels = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(labels, 'labels', 'hingeLoss');
    const $predictions = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(predictions, 'predictions', 'hingeLoss');
    let $weights = null;
    if (weights != null) {
        $weights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(weights, 'weights', 'hingeLoss');
    }
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in hingeLoss: ');
    const one = (0,_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1);
    // Convert binary labels to (-1, 1)
    $labels = (0,_sub__WEBPACK_IMPORTED_MODULE_4__.sub)((0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(2), $labels), one);
    const losses = (0,_relu__WEBPACK_IMPORTED_MODULE_6__.relu)((0,_sub__WEBPACK_IMPORTED_MODULE_4__.sub)(one, (0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)($labels, $predictions)));
    return (0,_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_7__.computeWeightedLoss)(losses, $weights, reduction);
}
const hingeLoss = (0,_operation__WEBPACK_IMPORTED_MODULE_8__.op)({ hingeLoss_ });
//# sourceMappingURL=hinge_loss.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "huberLoss": () => (/* binding */ huberLoss)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _minimum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../minimum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */












/**
 * Computes the huber loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param delta Point where huber loss changes from quadratic to linear.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`.
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function huberLoss_(labels, predictions, weights, delta = 1.0, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__.Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(labels, 'labels', 'huberLoss');
    const $predictions = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(predictions, 'predictions', 'huberLoss');
    let $weights = null;
    if (weights != null) {
        $weights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(weights, 'weights', 'huberLoss');
    }
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in huberLoss: ');
    const deltaScalar = (0,_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(delta);
    const error = (0,_abs__WEBPACK_IMPORTED_MODULE_4__.abs)((0,_sub__WEBPACK_IMPORTED_MODULE_5__.sub)($predictions, $labels));
    const quadratic = (0,_minimum__WEBPACK_IMPORTED_MODULE_6__.minimum)(error, deltaScalar);
    const linear = (0,_sub__WEBPACK_IMPORTED_MODULE_5__.sub)(error, quadratic);
    const losses = (0,_add__WEBPACK_IMPORTED_MODULE_7__.add)((0,_mul__WEBPACK_IMPORTED_MODULE_8__.mul)((0,_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(0.5), (0,_square__WEBPACK_IMPORTED_MODULE_9__.square)(quadratic)), (0,_mul__WEBPACK_IMPORTED_MODULE_8__.mul)(deltaScalar, linear));
    return (0,_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_10__.computeWeightedLoss)(losses, $weights, reduction);
}
const huberLoss = (0,_operation__WEBPACK_IMPORTED_MODULE_11__.op)({ huberLoss_ });
//# sourceMappingURL=huber_loss.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logLoss": () => (/* binding */ logLoss)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../log */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











/**
 * Computes the log loss between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param epsilon A small increment to avoid taking log of zero
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function logLoss_(labels, predictions, weights, epsilon = 1e-7, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__.Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(labels, 'labels', 'logLoss');
    const $predictions = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(predictions, 'predictions', 'logLoss');
    let $weights = null;
    if (weights != null) {
        $weights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(weights, 'weights', 'logLoss');
    }
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in logLoss: ');
    const one = (0,_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1);
    const epsilonScalar = (0,_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(epsilon);
    const l1 = (0,_neg__WEBPACK_IMPORTED_MODULE_4__.neg)((0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)($labels, (0,_log__WEBPACK_IMPORTED_MODULE_6__.log)((0,_add__WEBPACK_IMPORTED_MODULE_7__.add)($predictions, epsilonScalar))));
    const l2 = (0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_sub__WEBPACK_IMPORTED_MODULE_8__.sub)(one, $labels), (0,_log__WEBPACK_IMPORTED_MODULE_6__.log)((0,_add__WEBPACK_IMPORTED_MODULE_7__.add)((0,_sub__WEBPACK_IMPORTED_MODULE_8__.sub)(one, $predictions), epsilonScalar)));
    const losses = (0,_sub__WEBPACK_IMPORTED_MODULE_8__.sub)(l1, l2);
    return (0,_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_9__.computeWeightedLoss)(losses, $weights, reduction);
}
const logLoss = (0,_operation__WEBPACK_IMPORTED_MODULE_10__.op)({ logLoss_ });
//# sourceMappingURL=log_loss.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "meanSquaredError": () => (/* binding */ meanSquaredError)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _squared_difference__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../squared_difference */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Computes the mean squared error between two tensors.
 *
 * @param labels The ground truth output tensor, same dimensions as
 *    'predictions'.
 * @param predictions The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}
 */
function meanSquaredError_(labels, predictions, weights, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_0__.Reduction.SUM_BY_NONZERO_WEIGHTS) {
    const $labels = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(labels, 'labels', 'meanSquaredError');
    const $predictions = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(predictions, 'predictions', 'meanSquaredError');
    let $weights = null;
    if (weights != null) {
        $weights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(weights, 'weights', 'meanSquaredError');
    }
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assertShapesMatch)($labels.shape, $predictions.shape, 'Error in meanSquaredError: ');
    const losses = (0,_squared_difference__WEBPACK_IMPORTED_MODULE_3__.squaredDifference)($labels, $predictions);
    return (0,_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_4__.computeWeightedLoss)(losses, $weights, reduction);
}
const meanSquaredError = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ meanSquaredError_ });
//# sourceMappingURL=mean_squared_error.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sigmoidCrossEntropy": () => (/* binding */ sigmoidCrossEntropy)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _log1p__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../log1p */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _relu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */














function sigmoidCrossEntropyWithLogits_(labels, logits) {
    const $labels = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(labels, 'labels', 'sigmoidCrossEntropyWithLogits');
    const $logits = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(logits, 'logits', 'sigmoidCrossEntropyWithLogits');
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatch)($labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');
    /**
     * Implementation Details:
     *
     * For brevity, let `x = logits`, `z = labels`.  The logistic loss is
     *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))
     *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))
     *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))
     *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))
     *   = (1 - z) * x + log(1 + exp(-x))
     *   = x - x * z + log(1 + exp(-x))
     *
     *   For x < 0, to avoid overflow in exp(-x), we reformulate the above
     *     x - x * z + log(1 + exp(-x))
     *   = log(exp(x)) - x * z + log(1 + exp(-x))
     *   = - x * z + log(1 + exp(x))
     *
     * Hence, to ensure stability and avoid overflow, the implementation uses
     * this equivalent formulation:
     *     max(x, 0) - x * z + log(1 + exp(-abs(x)))
     */
    const maxOutput = (0,_relu__WEBPACK_IMPORTED_MODULE_2__.relu)($logits);
    const outputXTarget = (0,_mul__WEBPACK_IMPORTED_MODULE_3__.mul)($logits, $labels);
    const sigmoidOutput = (0,_log1p__WEBPACK_IMPORTED_MODULE_4__.log1p)((0,_exp__WEBPACK_IMPORTED_MODULE_5__.exp)((0,_neg__WEBPACK_IMPORTED_MODULE_6__.neg)((0,_abs__WEBPACK_IMPORTED_MODULE_7__.abs)($logits))));
    return (0,_add__WEBPACK_IMPORTED_MODULE_8__.add)((0,_sub__WEBPACK_IMPORTED_MODULE_9__.sub)(maxOutput, outputXTarget), sigmoidOutput);
}
/**
 * Computes the sigmoid cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)
 *                         + 0.5 * labelSmoothing
 *
 * @param multiClassLabels The ground truth output tensor of shape
 * [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or the same rank as
 *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions
 *    must be either `1`, or the same as the corresponding `losses`
 *    dimension).
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */
function sigmoidCrossEntropy_(multiClassLabels, logits, weights, labelSmoothing = 0, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_10__.Reduction.SUM_BY_NONZERO_WEIGHTS) {
    let $multiClassLabels = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');
    const $logits = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(logits, 'logits', 'sigmoidCrossEntropy');
    let $weights = null;
    if (weights != null) {
        $weights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(weights, 'weights', 'sigmoidCrossEntropy');
    }
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assertShapesMatch)($multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');
    if (labelSmoothing > 0) {
        const labelSmoothingScalar = (0,_scalar__WEBPACK_IMPORTED_MODULE_11__.scalar)(labelSmoothing);
        const one = (0,_scalar__WEBPACK_IMPORTED_MODULE_11__.scalar)(1);
        const half = (0,_scalar__WEBPACK_IMPORTED_MODULE_11__.scalar)(0.5);
        $multiClassLabels =
            (0,_add__WEBPACK_IMPORTED_MODULE_8__.add)((0,_mul__WEBPACK_IMPORTED_MODULE_3__.mul)($multiClassLabels, (0,_sub__WEBPACK_IMPORTED_MODULE_9__.sub)(one, labelSmoothingScalar)), (0,_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(half, labelSmoothingScalar));
    }
    const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);
    return (0,_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_12__.computeWeightedLoss)(losses, $weights, reduction);
}
const sigmoidCrossEntropy = (0,_operation__WEBPACK_IMPORTED_MODULE_13__.op)({ sigmoidCrossEntropy_ });
//# sourceMappingURL=sigmoid_cross_entropy.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softmaxCrossEntropy": () => (/* binding */ softmaxCrossEntropy)
/* harmony export */ });
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _log_sum_exp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../log_sum_exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js");
/* harmony import */ var _loss_ops_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../loss_ops_utils */ "./node_modules/@tensorflow/tfjs-core/dist/ops/loss_ops_utils.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _compute_weighted_loss__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


















/**
 * Computes softmax cross entropy between logits and labels.
 *
 * Measures the probability error in discrete classification tasks in which
 * the classes are mutually exclusive (each entry is in exactly one class).
 * For example, each CIFAR-10 image is labeled with one and only one label: an
 * image can be a dog or a truck, but not both.
 *
 * `NOTE`: While the classes are mutually exclusive, their probabilities need
 * not be. All that is required is that each row of labels is a valid
 * probability distribution. If they are not, the computation of the gradient
 * will be incorrect.
 *
 * `WARNING`: This op expects unscaled logits, since it performs a softmax on
 * logits internally for efficiency. Do not call this op with the output of
 * softmax, as it will produce incorrect results.
 *
 * logits and labels must have the same shape, e.g. [batch_size, num_classes]
 * and the same dtype.
 * @param labels The labels array.
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 */
function softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {
    if (dim === -1) {
        dim = logits.rank - 1;
    }
    if (dim !== logits.rank - 1) {
        throw Error(`Softmax cross entropy along a non-last dimension is not yet ` +
            `supported. Labels / logits was rank ${logits.rank} ` +
            `and dim was ${dim}`);
    }
    // Use a custom gradient for numerical stability.
    const customOp = (0,_gradients__WEBPACK_IMPORTED_MODULE_0__.customGrad)((labels, logits, save) => {
        // Reference:
        //   1. http://cs231n.github.io/linear-classify/#softmax
        //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/
        const keepDims = true;
        const lse = (0,_log_sum_exp__WEBPACK_IMPORTED_MODULE_1__.logSumExp)(logits, [dim], keepDims);
        const logResult = (0,_sub__WEBPACK_IMPORTED_MODULE_2__.sub)((0,_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(logits, 'float32'), lse);
        save([labels, logResult]);
        const costVector = (0,_neg__WEBPACK_IMPORTED_MODULE_4__.neg)((0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(logResult, labels));
        const value = (0,_sum__WEBPACK_IMPORTED_MODULE_6__.sum)(costVector, [dim]);
        const gradFunc = (dy, saved) => {
            const [labels, logResult] = saved;
            const dyShape = (0,_axis_util__WEBPACK_IMPORTED_MODULE_7__.expandShapeToKeepDim)(dy.shape, [dim]);
            return [
                (0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_reshape__WEBPACK_IMPORTED_MODULE_8__.reshape)(dy, dyShape), (0,_sub__WEBPACK_IMPORTED_MODULE_2__.sub)((0,_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(labels, 'float32'), (0,_exp__WEBPACK_IMPORTED_MODULE_9__.exp)(logResult))),
                (0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_reshape__WEBPACK_IMPORTED_MODULE_8__.reshape)(dy, dyShape), (0,_sub__WEBPACK_IMPORTED_MODULE_2__.sub)((0,_exp__WEBPACK_IMPORTED_MODULE_9__.exp)(logResult), (0,_cast__WEBPACK_IMPORTED_MODULE_3__.cast)(labels, 'float32'))),
            ];
        };
        return { value, gradFunc };
    });
    return customOp(labels, logits);
}
/**
 * Computes the softmax cross entropy loss between two tensors.
 *
 * If labelSmoothing is nonzero, smooth the labels towards 1/2:
 *
 *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)
 *                         + labelSmoothing / numClasses
 *
 * @param onehotLabels One hot encoded labels
 *    [batch_size, num_classes], same dimensions as 'predictions'.
 * @param logits The predicted outputs.
 * @param weights Tensor whose rank is either 0, or 1, and must be
 *    broadcastable to `loss`  of shape [batch_size]
 * @param labelSmoothing If greater than 0, then smooth the labels.
 * @param reduction Type of reduction to apply to loss. Should be of type
 *    `Reduction`
 *
 * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }
 */
function softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = _loss_ops_utils__WEBPACK_IMPORTED_MODULE_10__.Reduction.SUM_BY_NONZERO_WEIGHTS) {
    let $onehotLabels = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_11__.convertToTensor)(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');
    const $logits = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_11__.convertToTensor)(logits, 'logits', 'softmaxCrossEntropy');
    let $weights = null;
    if (weights != null) {
        $weights = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_11__.convertToTensor)(weights, 'weights', 'softmaxCrossEntropy');
    }
    (0,_util__WEBPACK_IMPORTED_MODULE_12__.assertShapesMatch)($onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');
    if (labelSmoothing > 0) {
        const labelSmoothingScalar = (0,_scalar__WEBPACK_IMPORTED_MODULE_13__.scalar)(labelSmoothing);
        const one = (0,_scalar__WEBPACK_IMPORTED_MODULE_13__.scalar)(1);
        const numClasses = (0,_scalar__WEBPACK_IMPORTED_MODULE_13__.scalar)($onehotLabels.shape[1]);
        $onehotLabels =
            (0,_add__WEBPACK_IMPORTED_MODULE_14__.add)((0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)($onehotLabels, (0,_sub__WEBPACK_IMPORTED_MODULE_2__.sub)(one, labelSmoothingScalar)), (0,_div__WEBPACK_IMPORTED_MODULE_15__.div)(labelSmoothingScalar, numClasses));
    }
    const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);
    return (0,_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_16__.computeWeightedLoss)(losses, $weights, reduction);
}
const softmaxCrossEntropy = (0,_operation__WEBPACK_IMPORTED_MODULE_17__.op)({ softmaxCrossEntropy_ });
//# sourceMappingURL=softmax_cross_entropy.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "matMul": () => (/* binding */ matMul)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the dot product of two matrices, A * B. These must be matrices.
 *
 * ```js
 * const a = tf.tensor2d([1, 2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.matMul(b).print();  // or tf.matMul(a, b)
 * ```
 * @param a First matrix in dot product operation.
 * @param b Second matrix in dot product operation.
 * @param transposeA If true, `a` is transposed before multiplication.
 * @param transposeB If true, `b` is transposed before multiplication.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function matMul_(a, b, transposeA = false, transposeB = false) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'matMul');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'matMul');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    const inputs = { a: $a, b: $b };
    const attrs = { transposeA, transposeB };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.BatchMatMul, inputs, attrs);
}
const matMul = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ matMul_ });
//# sourceMappingURL=mat_mul.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "max": () => (/* binding */ max)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the maximum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and an
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.max().print();  // or tf.max(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.max(axis).print();  // or tf.max(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function max_(x, axis = null, keepDims = false) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'max');
    const inputs = { x: $x };
    const attrs = { reductionIndices: axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Max, inputs, attrs);
}
const max = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ max_ });
//# sourceMappingURL=max.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool": () => (/* binding */ maxPool)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the 2D max pooling of an image.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilations` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function maxPool_(x, filterSize, strides, pad, dimRoundingMode) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'maxPool');
    const dilations = 1;
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(x4D.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_4__.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__.assert(_util__WEBPACK_IMPORTED_MODULE_3__.isInt(pad), () => `Error in maxPool: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inputs = { x: x4D };
    const attrs = { filterSize, strides, pad, dimRoundingMode };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_5__.MaxPool, inputs, attrs);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const maxPool = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ maxPool_ });
//# sourceMappingURL=max_pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool3d": () => (/* binding */ maxPool3d)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/**
 * Computes the 3D max pooling.
 *
 * ```js
 * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);
 * const result = tf.maxPool3d(x, 2, 1, 'valid');
 * result.print();
 * ```
 *
 * @param x The input tensor, of rank 5 or rank 4 of shape
 *     `[batch, depth, height, width, inChannels]`.
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     If `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`.
 *     If `strides` is a single number,
 *     then `strideDepth == strideHeight == strideWidth`.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1*1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param dilations Deprecated, this field will be gone in v3.0.0.
 *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function maxPool3d_(x, filterSize = [1, 1, 1], strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {
    if (dilations == null) {
        dilations = [1, 1, 1];
    }
    else {
        (0,_globals__WEBPACK_IMPORTED_MODULE_1__.deprecationWarn)('dilations is deprecated, this field will be gone in ' +
            'v3.0.0.');
    }
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__.convertToTensor)(x, 'x', 'maxPool3d');
    let x5D = $x;
    let reshapedTo5D = false;
    if ($x.rank === 4) {
        reshapedTo5D = true;
        x5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_4__.assert(x5D.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_4__.assert(dataFormat === 'NDHWC', () => `Error in maxPool3d: Only NDHWC is currently supported, ` +
        `but got dataFormat of ${dataFormat}`);
    _util__WEBPACK_IMPORTED_MODULE_4__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_5__.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool3d: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_4__.assert(_util__WEBPACK_IMPORTED_MODULE_4__.isInt(pad), () => `Error in maxPool3d: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inputs = { x: x5D };
    const attrs = { filterSize, strides, pad, dimRoundingMode, dataFormat, dilations };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_6__.MaxPool3D, inputs, attrs);
    if (reshapedTo5D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const maxPool3d = (0,_operation__WEBPACK_IMPORTED_MODULE_7__.op)({ maxPool3d_ });
//# sourceMappingURL=max_pool_3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_grad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d_grad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPool3dGrad": () => (/* binding */ maxPool3dGrad)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Computes the backprop of a 3d max pool.
 *
 * @param dy The dy error, of rank 5 of shape
 *     [batchSize, depth, height, width, channels].
 * assumed.
 * @param input The original input image, of rank 5 or rank 4 of shape
 *     [batchSize, depth, height, width, channels].
 * @param output The original output image, of rank 5 of shape
 *     [batchSize, outDepth, outHeight, outWidth, channels].
 * @param filterSize The filter size:
 *     `[filterDepth, filterHeight, filterWidth]`.
 *     `filterSize` is a single number,
 *     then `filterDepth == filterHeight == filterWidth`.
 * @param strides The strides of the pooling:
 *     `[strideDepth, strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dilations Deprecated, this field will be gone in v3.0.0.
 *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`
 *     in which we sample input values across the depth, height and width
 *     dimensions in dilated pooling.
 *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,
 *     then `dilationDepth == dilationHeight == dilationWidth`.
 *     If it is greater than 1, then all values of `strides` must be 1.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function maxPool3dGrad_(dy, input, output, filterSize, strides, dilations = [1, 1, 1], pad, dimRoundingMode) {
    const $dy = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(dy, 'dy', 'maxPool3dGrad');
    const $input = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(input, 'input', 'maxPool3dGrad');
    const $output = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(output, 'output', 'maxPool3dGrad');
    let dy5D = $dy;
    let input5D = $input;
    let output5D = $output;
    let reshapedTo5D = false;
    if ($input.rank === 4) {
        reshapedTo5D = true;
        dy5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);
        input5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($input, [
            1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]
        ]);
        output5D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($output, [
            1, $output.shape[0], $output.shape[1], $output.shape[2], $output.shape[3]
        ]);
    }
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(dy5D.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ` +
        `${dy5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(input5D.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ` +
        `${input5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(output5D.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ` +
        `${output5D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_3__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_4__.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool3dGrad: Either strides or dilations ' +
        `must be 1. Got strides ${strides} and dilations '${dilations}'`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_3__.assert(_util__WEBPACK_IMPORTED_MODULE_3__.isInt(pad), () => `Error in maxPool3dGrad: pad must be an integer when ` +
            `using, dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inputs = { dy: dy5D, input: input5D, output: output5D };
    const attrs = { filterSize, strides, dilations, pad, dimRoundingMode };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_5__.MaxPool3DGrad, inputs, attrs);
    if (reshapedTo5D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);
    }
    return res;
}
const maxPool3dGrad = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ maxPool3dGrad_ });
//# sourceMappingURL=max_pool_3d_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_grad.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_grad.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPoolGrad": () => (/* binding */ maxPoolGrad)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the backprop of a 2D max pool.
 *
 * @param dy The dy error, of rank 4 or rank 3 of shape
 *     [batchSize, height, width, channels]. If rank 3, batch of 1 is
 * assumed.
 * @param input The original input image, of rank 4, of shape
 *     [batchSize, height, width, channels].
 * @param output The original output image, of rank 4, of shape
 *     [batchSize, outHeight, outWidth, channels].
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param pad A string from: 'same', 'valid'. The type of padding algorithm
 *     used in the forward prop of the op.
 * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is
 *     provided, it will default to truncate.
 */
function maxPoolGrad_(dy, input, output, filterSize, strides, pad, dimRoundingMode) {
    const $dy = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(dy, 'dy', 'maxPoolGrad');
    const $input = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(input, 'input', 'maxPoolGrad');
    const $output = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(output, 'output', 'maxPoolGrad');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy ` +
        `(${$dy.rank})`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($dy.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ` +
        `${$dy.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($input.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ` +
        `${$input.rank}.`);
    if (dimRoundingMode != null) {
        _util__WEBPACK_IMPORTED_MODULE_2__.assert(_util__WEBPACK_IMPORTED_MODULE_2__.isInt(pad), () => `Error in maxPoolGrad: pad must be an integer when using, ` +
            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);
    }
    const inputs = { dy: $dy, input: $input, output: $output };
    const attrs = { filterSize, strides, pad, dimRoundingMode };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.MaxPoolGrad, inputs, attrs);
}
const maxPoolGrad = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ maxPoolGrad_ });
//# sourceMappingURL=max_pool_grad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxPoolWithArgmax": () => (/* binding */ maxPoolWithArgmax)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the 2D max pooling of an image with Argmax index.
 * The indices in argmax are flattened, so that a maximum value at position `[b,
 * y, x, c]` becomes flattened index: `(y * width + x) * channels + c` if
 * include_batch_in_index is False; `((b * height + y) * width + x) * channels
 * +c` if include_batch_in_index is True.
 *
 * The indices returned are always in `[0, height) x [0, width)` before
 * flattening.
 *
 * @param x The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param filterSize The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 * @param dataFormat An optional string from: "NDHWC", "NCDHW". Defaults to
 *     "NDHWC". Specify the data format of the input and output data. With the
 *     default format "NDHWC", the data is stored in the order of: [batch,
 *     depth, height, width, channels]. Only "NDHWC" is currently supported.
 * @param pad The type of padding algorithm.
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param includeBatchIndex Defaults to False. Whether to include batch
 *    dimension in flattened index of argmax.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function maxPoolWithArgmax_(x, filterSize, strides, pad, includeBatchInIndex = false) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'maxPoolWithArgmax');
    const inputs = { x: $x };
    const attrs = { filterSize, strides, pad, includeBatchInIndex };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const result = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.MaxPoolWithArgmax, inputs, attrs);
    return { result: result[0], indexes: result[1] };
}
const maxPoolWithArgmax = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ maxPoolWithArgmax_ });
//# sourceMappingURL=max_pool_with_argmax.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maximum": () => (/* binding */ maximum)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Returns the max of a and b (`a > b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `tf.maximumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * ```js
 * // Broadcast maximum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.maximum(b).print();  // or tf.maximum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function maximum_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'maximum');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'maximum');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    if ($a.dtype === 'bool') {
        $a = (0,_cast__WEBPACK_IMPORTED_MODULE_3__.cast)($a, 'int32');
        $b = (0,_cast__WEBPACK_IMPORTED_MODULE_3__.cast)($b, 'int32');
    }
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_4__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_5__.Maximum, inputs);
}
const maximum = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ maximum_ });
//# sourceMappingURL=maximum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mean": () => (/* binding */ mean)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the mean of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces `x` along the dimensions given in `axis`. Unless `keepDims` is
 * true, the rank of the `tf.Tensor` is reduced by 1 for each entry in `axis`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axis` has no entries, all dimensions are reduced, and a `tf.Tensor` with
 * a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.mean().print();  // or tf.mean(a)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.mean(axis).print();  // or tf.mean(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function mean_(x, axis = null, keepDims = false) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'mean');
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Mean, inputs, attrs);
}
const mean = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ mean_ });
//# sourceMappingURL=mean.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/min.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/min.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "min": () => (/* binding */ min)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the minimum value from the input.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axes`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axes` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.min().print();  // or tf.min(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.min(axis).print();  // or tf.min(x, axis)
 * ```
 *
 * @param x The input Tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function min_(x, axis = null, keepDims = false) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'min');
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Min, inputs, attrs);
}
const min = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ min_ });
//# sourceMappingURL=min.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minimum": () => (/* binding */ minimum)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Returns the min of a and b (`a < b ? a : b`) element-wise.
 * Supports broadcasting.
 *
 * We also expose `minimumStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * ```js
 * // Broadcast minimum a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.minimum(b).print();  // or tf.minimum(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function minimum_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'minimum');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'minimum');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    if ($a.dtype === 'bool') {
        $a = (0,_cast__WEBPACK_IMPORTED_MODULE_3__.cast)($a, 'int32');
        $b = (0,_cast__WEBPACK_IMPORTED_MODULE_3__.cast)($b, 'int32');
    }
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_4__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_5__.Minimum, inputs);
}
const minimum = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ minimum_ });
//# sourceMappingURL=minimum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/mirror_pad.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/mirror_pad.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mirrorPad": () => (/* binding */ mirrorPad)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Pads a `tf.Tensor` using mirror padding.
 *
 * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.
 *
 * ```js
 * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);
 * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * In "reflect" mode, the padded regions do not include the borders,
 * while in "symmetric" mode the padded regions do include the borders.
 * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,
 * then the output is `[1, 2, 3, 2, 1]` in "reflect" mode, and
 * `[1, 2, 3, 3, 2]` in "symmetric" mode.
 * If `mode` is "reflect" then both `paddings[D, 0]` and `paddings[D, 1]`
 * must be no greater than `x.shape[D] - 1`. If mode is "symmetric"
 * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than
 * `x.shape[D]`
 * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`
 */
/** @doc {heading: 'Tensors', subheading: 'Transformations'} */
function mirrorPad_(x, paddings, mode) {
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(mode === 'reflect' || mode === 'symmetric', () => `Invalid mode. Mode must be either reflect or symmetric. ` +
        `Got ${mode}.`);
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__.convertToTensor)(x, 'x', 'mirrorPad');
    if ($x.rank === 0) {
        throw new Error('mirrorPad(scalar) is not defined. ' +
            'Pass non-scalar to mirrorPad');
    }
    _util__WEBPACK_IMPORTED_MODULE_1__.assert(paddings.length === $x.rank, () => `Padding doesn't match input. Must be ${$x.rank}. ` +
        `Got ${paddings.length}.`);
    const shapeOffset = mode === 'reflect' ? 1 : 0;
    for (let i = 0; i < $x.rank; i++) {
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(paddings[i].length === 2, () => `Invalid number of paddings. Must be length of 2 each.`);
        _util__WEBPACK_IMPORTED_MODULE_1__.assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset &&
            paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, () => `Padding in dimension ${i} cannot be greater than or equal ` +
            `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` +
            `shape ${$x.shape}`);
    }
    const attrs = { paddings, mode };
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.MirrorPad, inputs, attrs);
}
const mirrorPad = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ mirrorPad_ });
//# sourceMappingURL=mirror_pad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mod": () => (/* binding */ mod)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Returns the mod of a and b element-wise.
 * `floor(x / y) * y + mod(x, y) = x`
 * Supports broadcasting.
 *
 * We also expose `tf.modStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * ```js
 * // Broadcast a mod b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.mod(b).print();  // or tf.mod(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function mod_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'mod');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'mod');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Mod, inputs);
}
const mod = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ mod_ });
//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/moments.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/moments.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "moments": () => (/* binding */ moments)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _mean__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mean */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









/**
 * Calculates the mean and variance of `x`. The mean and variance are
 * calculated by aggregating the contents of `x` across `axes`. If `x` is
 * 1-D and `axes = [0]` this is just the mean and variance of a vector.
 *
 * @param x The input tensor.
 * @param axis The dimension(s) along with to compute mean and
 *     variance. By default it reduces all dimensions.
 * @param keepDims If true, the moments have the same dimensionality as the
 *     input.
 * @return An object with two keys: `mean` and `variance`.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function moments_(x, axis = null, keepDims = false) {
    x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'moments');
    const axes = (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam)(axis, x.shape);
    const xMean = (0,_mean__WEBPACK_IMPORTED_MODULE_2__.mean)(x, axes, keepDims);
    let keepDimsShape = xMean.shape;
    if (!keepDims) {
        keepDimsShape = (0,_axis_util__WEBPACK_IMPORTED_MODULE_3__.expandShapeToKeepDim)(xMean.shape, axes);
    }
    const devSquared = (0,_square__WEBPACK_IMPORTED_MODULE_4__.square)((0,_sub__WEBPACK_IMPORTED_MODULE_5__.sub)((0,_cast__WEBPACK_IMPORTED_MODULE_6__.cast)(x, 'float32'), (0,_reshape__WEBPACK_IMPORTED_MODULE_7__.reshape)(xMean, keepDimsShape)));
    const variance = (0,_mean__WEBPACK_IMPORTED_MODULE_2__.mean)(devSquared, axes, keepDims);
    return { mean: xMean, variance };
}
const moments = (0,_operation__WEBPACK_IMPORTED_MODULE_8__.op)({ moments_ });
//# sourceMappingURL=moments.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "movingAverage": () => (/* binding */ movingAverage)
/* harmony export */ });
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/**
 * Compute the moving average of a variable.
 *
 * Without zeroDebias, the moving average operation is defined by:
 *   `v += delta`
 * where
 *   `delta = (1 - decay) * (x - v)`
 *
 * With zeroDebias (default), the `delta` term is scaled to debias the
 * effect of the (assumed) zero-initialization of `v`.
 *   `delta /= (1 - decay ^ step)`
 *
 * For more details on the zero-debiasing algorithm, see:
 *   https://arxiv.org/abs/1412.6980
 *
 * Note that this function is completely stateless and does not keep track of
 * step count. The step count needs to be maintained by the caller and passed
 * in as `step`.
 *
 * @param v The current moving average value.
 * @param x New input value, must have the same shape and dtype as `v`.
 * @param decay The decay factor. Typical values are 0.95 and 0.99.
 * @param step Step count.
 * @param zeroDebias: Whether zeroDebias is to be performed (default: `true`).
 * @returns The new moving average value.
 *
 * @doc {heading: 'Operations', subheading: 'Moving Average'}
 */
function movingAverage_(v, x, decay, step, zeroDebias = true) {
    const $v = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(v, 'v', 'movingAverage');
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'movingAverage');
    const $decay = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(decay, 'decay', 'movingAverage');
    (0,_tensor_util__WEBPACK_IMPORTED_MODULE_1__.assertTypesMatch)($v, $x);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(_util__WEBPACK_IMPORTED_MODULE_2__.arraysEqual($v.shape, $x.shape), () => 'Shape mismatch in v and x');
    const one = (0,_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(1);
    const oneMinusDecay = (0,_sub__WEBPACK_IMPORTED_MODULE_4__.sub)(one, $decay);
    let update = (0,_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_sub__WEBPACK_IMPORTED_MODULE_4__.sub)($x, $v), oneMinusDecay);
    if (zeroDebias) {
        _util__WEBPACK_IMPORTED_MODULE_2__.assert(step != null, () => 'When using zeroDebias: true, step is required.');
        const $step = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(step, 'step', 'movingAverage');
        update = (0,_div__WEBPACK_IMPORTED_MODULE_6__.div)(update, (0,_sub__WEBPACK_IMPORTED_MODULE_4__.sub)(one, (0,_pow__WEBPACK_IMPORTED_MODULE_7__.pow)($decay, $step)));
    }
    return (0,_add__WEBPACK_IMPORTED_MODULE_8__.add)($v, update);
}
const movingAverage = (0,_operation__WEBPACK_IMPORTED_MODULE_9__.op)({ movingAverage_ });
//# sourceMappingURL=moving_average.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mul": () => (/* binding */ mul)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.
 *
 * We also expose `tf.mulStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([2, 3, 4, 5]);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 *
 * ```js
 * // Broadcast mul a with b.
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.scalar(5);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 * @param a The first tensor to multiply.
 * @param b The second tensor to multiply. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function mul_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'mul');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'mul');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Multiply, inputs);
}
const mul = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ mul_ });
//# sourceMappingURL=mul.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multiRNNCell": () => (/* binding */ multiRNNCell)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");


/**
 * Computes the next states and outputs of a stack of LSTMCells.
 *
 * Each cell output is used as input to the next cell.
 *
 * Returns `[cellState, cellOutput]`.
 *
 * Derived from tf.contrib.rn.MultiRNNCell.
 *
 * @param lstmCells Array of LSTMCell functions.
 * @param data The input to the cell.
 * @param c Array of previous cell states.
 * @param h Array of previous cell outputs.
 *
 * @doc {heading: 'Operations', subheading: 'RNN'}
 */
function multiRNNCell_(lstmCells, data, c, h) {
    const $data = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(data, 'data', 'multiRNNCell');
    const $c = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensorArray)(c, 'c', 'multiRNNCell');
    const $h = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensorArray)(h, 'h', 'multiRNNCell');
    let input = $data;
    const newStates = [];
    for (let i = 0; i < lstmCells.length; i++) {
        const output = lstmCells[i](input, $c[i], $h[i]);
        newStates.push(output[0]);
        newStates.push(output[1]);
        input = output[1];
    }
    const newC = [];
    const newH = [];
    for (let i = 0; i < newStates.length; i += 2) {
        newC.push(newStates[i]);
        newH.push(newStates[i + 1]);
    }
    return [newC, newH];
}
const multiRNNCell = (0,_operation__WEBPACK_IMPORTED_MODULE_1__.op)({ multiRNNCell_ });
//# sourceMappingURL=multi_rnn_cell.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multinomial": () => (/* binding */ multinomial)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Creates a `tf.Tensor` with values drawn from a multinomial distribution.
 *
 * ```js
 * const probs = tf.tensor([.75, .25]);
 * tf.multinomial(probs, 3).print();
 * ```
 *
 * @param logits 1D array with unnormalized log-probabilities, or
 *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`
 *     parameter.
 * @param numSamples Number of samples to draw for each row slice.
 * @param seed The seed number.
 * @param normalized Whether the provided `logits` are normalized true
 *     probabilities (sum to 1). Defaults to false.
 * @return 1D array of shape `[numSamples]`, or 2D array of shape
 *     `[batchSize, numSamples]`, depending on the rank of the input.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function multinomial_(logits, numSamples, seed, normalized = false) {
    const $logits = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(logits, 'logits', 'multinomial');
    const numOutcomes = $logits.size;
    const origRank = $logits.rank;
    if (numOutcomes < 2) {
        throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` +
            `${numOutcomes}.`);
    }
    if (origRank > 2) {
        throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);
    }
    // TODO(lina128): Investigate correct seed behavior. The code seems not allow
    // setting see to 0.
    seed = seed || Math.random();
    // The kernel only accepts (and returns) rank 2 tensors.
    const logits2D = origRank === 1 ? (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($logits, [1, -1]) : $logits;
    const inputs = { logits: logits2D };
    const attrs = { numSamples, seed, normalized };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    const res = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Multinomial, inputs, attrs);
    // tslint:disable-next-line:no-unnecessary-type-assertion
    return origRank === 1 ? (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(res, [res.size]) : res;
}
const multinomial = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ multinomial_ });
//# sourceMappingURL=multinomial.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "neg": () => (/* binding */ neg)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes `-1 * x` element-wise.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, -2, 0], [2, 2]);
 *
 * x.neg().print();  // or tf.neg(x)
 * ```
 *
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function neg_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'neg');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Neg, inputs);
}
const neg = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ neg_ });
//# sourceMappingURL=neg.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/nonmax_util.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "nonMaxSuppSanityCheck": () => (/* binding */ nonMaxSuppSanityCheck)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {
    if (iouThreshold == null) {
        iouThreshold = 0.5;
    }
    if (scoreThreshold == null) {
        scoreThreshold = Number.NEGATIVE_INFINITY;
    }
    if (softNmsSigma == null) {
        softNmsSigma = 0.0;
    }
    const numBoxes = boxes.shape[0];
    maxOutputSize = Math.min(maxOutputSize, numBoxes);
    _util__WEBPACK_IMPORTED_MODULE_0__.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);
    _util__WEBPACK_IMPORTED_MODULE_0__.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);
    _util__WEBPACK_IMPORTED_MODULE_0__.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);
    _util__WEBPACK_IMPORTED_MODULE_0__.assert(scores.rank === 1, () => 'scores must be a 1D tensor');
    _util__WEBPACK_IMPORTED_MODULE_0__.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +
        `but was ${scores.shape[0]}`);
    _util__WEBPACK_IMPORTED_MODULE_0__.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);
    return { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma };
}

//# sourceMappingURL=nonmax_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "norm": () => (/* binding */ norm)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _axis_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./axis_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/axis_util.js");
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js");
/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./min */ "./node_modules/@tensorflow/tfjs-core/dist/ops/min.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _sqrt__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */













/**
 * Computes the norm of scalar, vectors, and matrices.
 * This function can compute several different vector norms (the 1-norm, the
 * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)
 * and matrix norms (Frobenius, 1-norm, and inf-norm).
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.norm().print();  // or tf.norm(x)
 * ```
 *
 * @param x The input array.
 * @param ord Optional. Order of the norm. Supported norm types are
 * following:
 *
 *  | ord        | norm for matrices         | norm for vectors
 *  |------------|---------------------------|---------------------
 *  |'euclidean' |Frobenius norm             |2-norm
 *  |'fro'       |Frobenius norm	           |
 *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))
 *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))
 *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))
 *  |2           |                           |sum(abs(x)^2)^1/2*
 *
 * @param axis Optional. If axis is null (the default), the input is
 * considered a vector and a single vector norm is computed over the entire
 * set of values in the Tensor, i.e. norm(x, ord) is equivalent
 * to norm(x.reshape([-1]), ord). If axis is a integer, the input
 * is considered a batch of vectors, and axis determines the axis in x
 * over which to compute vector norms. If axis is a 2-tuple of integer it is
 * considered a batch of matrices and axis determines the axes in NDArray
 * over which to compute a matrix norm.
 * @param keepDims Optional. If true, the norm have the same dimensionality
 * as the input.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function norm_(x, ord = 'euclidean', axis = null, keepDims = false) {
    x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'norm');
    const norm = normImpl(x, ord, axis);
    let keepDimsShape = norm.shape;
    if (keepDims) {
        const axes = (0,_util__WEBPACK_IMPORTED_MODULE_1__.parseAxisParam)(axis, x.shape);
        keepDimsShape = _axis_util__WEBPACK_IMPORTED_MODULE_2__.expandShapeToKeepDim(norm.shape, axes);
    }
    return (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(norm, keepDimsShape);
}
function normImpl(x, p, axis = null) {
    if (x.rank === 0) {
        return (0,_abs__WEBPACK_IMPORTED_MODULE_4__.abs)(x);
    }
    // consider vector when no axis is specified
    if (x.rank !== 1 && axis === null) {
        return normImpl((0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)(x, [-1]), p, axis);
    }
    // vector
    if (x.rank === 1 || typeof axis === 'number' ||
        Array.isArray(axis) && axis.length === 1) {
        if (p === 1) {
            return (0,_sum__WEBPACK_IMPORTED_MODULE_5__.sum)((0,_abs__WEBPACK_IMPORTED_MODULE_4__.abs)(x), axis);
        }
        if (p === Infinity) {
            return (0,_max__WEBPACK_IMPORTED_MODULE_6__.max)((0,_abs__WEBPACK_IMPORTED_MODULE_4__.abs)(x), axis);
        }
        if (p === -Infinity) {
            return (0,_min__WEBPACK_IMPORTED_MODULE_7__.min)((0,_abs__WEBPACK_IMPORTED_MODULE_4__.abs)(x), axis);
        }
        if (p === 'euclidean' || p === 2) {
            // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2
            return (0,_sqrt__WEBPACK_IMPORTED_MODULE_8__.sqrt)((0,_sum__WEBPACK_IMPORTED_MODULE_5__.sum)((0,_pow__WEBPACK_IMPORTED_MODULE_9__.pow)((0,_abs__WEBPACK_IMPORTED_MODULE_4__.abs)(x), (0,_scalar__WEBPACK_IMPORTED_MODULE_10__.scalar)(2, 'int32')), axis));
        }
        throw new Error(`Error in norm: invalid ord value: ${p}`);
    }
    // matrix (assumption axis[0] < axis[1])
    if (Array.isArray(axis) && axis.length === 2) {
        if (p === 1) {
            return (0,_max__WEBPACK_IMPORTED_MODULE_6__.max)((0,_sum__WEBPACK_IMPORTED_MODULE_5__.sum)((0,_abs__WEBPACK_IMPORTED_MODULE_4__.abs)(x), axis[0]), axis[1] - 1);
        }
        if (p === Infinity) {
            return (0,_max__WEBPACK_IMPORTED_MODULE_6__.max)((0,_sum__WEBPACK_IMPORTED_MODULE_5__.sum)((0,_abs__WEBPACK_IMPORTED_MODULE_4__.abs)(x), axis[1]), axis[0]);
        }
        if (p === -Infinity) {
            return (0,_min__WEBPACK_IMPORTED_MODULE_7__.min)((0,_sum__WEBPACK_IMPORTED_MODULE_5__.sum)((0,_abs__WEBPACK_IMPORTED_MODULE_4__.abs)(x), axis[1]), axis[0]);
        }
        if (p === 'fro' || p === 'euclidean') {
            // norm(x) = sqrt(sum(pow(x, 2)))
            return (0,_sqrt__WEBPACK_IMPORTED_MODULE_8__.sqrt)((0,_sum__WEBPACK_IMPORTED_MODULE_5__.sum)((0,_square__WEBPACK_IMPORTED_MODULE_11__.square)(x), axis));
        }
        throw new Error(`Error in norm: invalid ord value: ${p}`);
    }
    throw new Error(`Error in norm: invalid axis: ${axis}`);
}
const norm = (0,_operation__WEBPACK_IMPORTED_MODULE_12__.op)({ norm_ });
//# sourceMappingURL=norm.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "notEqual": () => (/* binding */ notEqual)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns the truth value of (a != b) element-wise. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([0, 2, 3]);
 *
 * a.notEqual(b).print();
 * ```
 * @param a The first input tensor.
 * @param b The second input tensor. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function notEqual_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'notEqual');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'notEqual');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_3__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.NotEqual, inputs);
}
const notEqual = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ notEqual_ });
//# sourceMappingURL=not_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "oneHot": () => (/* binding */ oneHot)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take
 * value `onValue` (defaults to 1), while all other locations take value
 * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank
 * `R+1` with the last axis of size `depth`.
 *
 * ```js
 * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();
 * ```
 *
 * @param indices `tf.Tensor` of indices with dtype `int32`.
 * @param depth The depth of the one hot dimension.
 * @param onValue A number used to fill in the output when the index matches
 * the location.
 * @param offValue A number used to fill in the output when the index does
 *     not match the location.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function oneHot_(indices, depth, onValue = 1, offValue = 0) {
    if (depth < 2) {
        throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);
    }
    const $indices = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(indices, 'indices', 'oneHot', 'int32');
    const inputs = { indices: $indices };
    const attrs = { depth, onValue, offValue };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.OneHot, inputs, attrs);
}
const oneHot = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ oneHot_ });
//# sourceMappingURL=one_hot.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ones": () => (/* binding */ ones)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony import */ var _zeros__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Creates a `tf.Tensor` with all elements set to 1.
 *
 * ```js
 * tf.ones([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Defaults to
 *     'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function ones(shape, dtype = 'float32') {
    if (dtype === 'complex64') {
        const real = ones(shape, 'float32');
        const imag = (0,_zeros__WEBPACK_IMPORTED_MODULE_1__.zeros)(shape, 'float32');
        return (0,_complex__WEBPACK_IMPORTED_MODULE_2__.complex)(real, imag);
    }
    const values = (0,_util__WEBPACK_IMPORTED_MODULE_3__.makeOnesTypedArray)((0,_util__WEBPACK_IMPORTED_MODULE_3__.sizeFromShape)(shape), dtype);
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.makeTensor(values, shape, dtype);
}
//# sourceMappingURL=ones.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "onesLike": () => (/* binding */ onesLike)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Creates a `tf.Tensor` with all elements set to 1 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.onesLike(x).print();
 * ```
 * @param x A tensor.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function onesLike_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'onesLike');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.OnesLike, inputs);
}
const onesLike = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ onesLike_ });
//# sourceMappingURL=ones_like.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OP_SCOPE_SUFFIX": () => (/* binding */ OP_SCOPE_SUFFIX),
/* harmony export */   "op": () => (/* binding */ op)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


const OP_SCOPE_SUFFIX = '__op';
/**
 * Used for wrapping functions that perform math operations on
 * Tensors. The function will be wrapped in a named scope that cleans all
 * memory usage after the function is done.
 */
function op(f) {
    const keys = Object.keys(f);
    if (keys.length !== 1) {
        throw new Error(`Please provide an object with a single key ` +
            `(operation name) mapping to a function. Got an object with ` +
            `${keys.length} keys.`);
    }
    let opName = keys[0];
    const fn = f[opName];
    // Strip the underscore from the end of the function name.
    if (opName.endsWith('_')) {
        opName = opName.substring(0, opName.length - 1);
    }
    // add an __op suffix to distinguish ops from kernels in tf.profile
    opName = opName + OP_SCOPE_SUFFIX;
    // tslint:disable-next-line:no-any
    const f2 = (...args) => {
        _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.startScope(opName);
        try {
            const result = fn(...args);
            if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isPromise)(result)) {
                console.error('Cannot return a Promise inside of tidy.');
            }
            _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.endScope(result);
            return result;
        }
        catch (ex) {
            _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.endScope(null);
            throw ex;
        }
    };
    Object.defineProperty(f2, 'name', { value: opName, configurable: true });
    // tslint:disable-next-line:no-any
    return f2;
}
//# sourceMappingURL=operation.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/ops.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "abs": () => (/* reexport safe */ _abs__WEBPACK_IMPORTED_MODULE_0__.abs),
/* harmony export */   "acos": () => (/* reexport safe */ _acos__WEBPACK_IMPORTED_MODULE_1__.acos),
/* harmony export */   "acosh": () => (/* reexport safe */ _acosh__WEBPACK_IMPORTED_MODULE_2__.acosh),
/* harmony export */   "add": () => (/* reexport safe */ _add__WEBPACK_IMPORTED_MODULE_3__.add),
/* harmony export */   "addN": () => (/* reexport safe */ _add_n__WEBPACK_IMPORTED_MODULE_4__.addN),
/* harmony export */   "all": () => (/* reexport safe */ _all__WEBPACK_IMPORTED_MODULE_5__.all),
/* harmony export */   "any": () => (/* reexport safe */ _any__WEBPACK_IMPORTED_MODULE_6__.any),
/* harmony export */   "argMax": () => (/* reexport safe */ _arg_max__WEBPACK_IMPORTED_MODULE_7__.argMax),
/* harmony export */   "argMin": () => (/* reexport safe */ _arg_min__WEBPACK_IMPORTED_MODULE_8__.argMin),
/* harmony export */   "asin": () => (/* reexport safe */ _asin__WEBPACK_IMPORTED_MODULE_9__.asin),
/* harmony export */   "asinh": () => (/* reexport safe */ _asinh__WEBPACK_IMPORTED_MODULE_10__.asinh),
/* harmony export */   "atan": () => (/* reexport safe */ _atan__WEBPACK_IMPORTED_MODULE_11__.atan),
/* harmony export */   "atan2": () => (/* reexport safe */ _atan2__WEBPACK_IMPORTED_MODULE_12__.atan2),
/* harmony export */   "atanh": () => (/* reexport safe */ _atanh__WEBPACK_IMPORTED_MODULE_13__.atanh),
/* harmony export */   "avgPool": () => (/* reexport safe */ _avg_pool__WEBPACK_IMPORTED_MODULE_14__.avgPool),
/* harmony export */   "avgPool3d": () => (/* reexport safe */ _avg_pool_3d__WEBPACK_IMPORTED_MODULE_15__.avgPool3d),
/* harmony export */   "basicLSTMCell": () => (/* reexport safe */ _basic_lstm_cell__WEBPACK_IMPORTED_MODULE_16__.basicLSTMCell),
/* harmony export */   "batchToSpaceND": () => (/* reexport safe */ _batch_to_space_nd__WEBPACK_IMPORTED_MODULE_17__.batchToSpaceND),
/* harmony export */   "batchNorm": () => (/* reexport safe */ _batchnorm__WEBPACK_IMPORTED_MODULE_18__.batchNorm),
/* harmony export */   "batchNorm2d": () => (/* reexport safe */ _batchnorm2d__WEBPACK_IMPORTED_MODULE_19__.batchNorm2d),
/* harmony export */   "batchNorm3d": () => (/* reexport safe */ _batchnorm3d__WEBPACK_IMPORTED_MODULE_20__.batchNorm3d),
/* harmony export */   "batchNorm4d": () => (/* reexport safe */ _batchnorm4d__WEBPACK_IMPORTED_MODULE_21__.batchNorm4d),
/* harmony export */   "bincount": () => (/* reexport safe */ _bincount__WEBPACK_IMPORTED_MODULE_22__.bincount),
/* harmony export */   "broadcastTo": () => (/* reexport safe */ _broadcast_to__WEBPACK_IMPORTED_MODULE_23__.broadcastTo),
/* harmony export */   "buffer": () => (/* reexport safe */ _buffer__WEBPACK_IMPORTED_MODULE_24__.buffer),
/* harmony export */   "cast": () => (/* reexport safe */ _cast__WEBPACK_IMPORTED_MODULE_25__.cast),
/* harmony export */   "ceil": () => (/* reexport safe */ _ceil__WEBPACK_IMPORTED_MODULE_26__.ceil),
/* harmony export */   "clipByValue": () => (/* reexport safe */ _clip_by_value__WEBPACK_IMPORTED_MODULE_27__.clipByValue),
/* harmony export */   "clone": () => (/* reexport safe */ _clone__WEBPACK_IMPORTED_MODULE_28__.clone),
/* harmony export */   "complex": () => (/* reexport safe */ _complex__WEBPACK_IMPORTED_MODULE_29__.complex),
/* harmony export */   "concat": () => (/* reexport safe */ _concat__WEBPACK_IMPORTED_MODULE_30__.concat),
/* harmony export */   "concat1d": () => (/* reexport safe */ _concat_1d__WEBPACK_IMPORTED_MODULE_31__.concat1d),
/* harmony export */   "concat2d": () => (/* reexport safe */ _concat_2d__WEBPACK_IMPORTED_MODULE_32__.concat2d),
/* harmony export */   "concat3d": () => (/* reexport safe */ _concat_3d__WEBPACK_IMPORTED_MODULE_33__.concat3d),
/* harmony export */   "concat4d": () => (/* reexport safe */ _concat_4d__WEBPACK_IMPORTED_MODULE_34__.concat4d),
/* harmony export */   "conv1d": () => (/* reexport safe */ _conv1d__WEBPACK_IMPORTED_MODULE_35__.conv1d),
/* harmony export */   "conv2d": () => (/* reexport safe */ _conv2d__WEBPACK_IMPORTED_MODULE_36__.conv2d),
/* harmony export */   "conv2dTranspose": () => (/* reexport safe */ _conv2d_transpose__WEBPACK_IMPORTED_MODULE_37__.conv2dTranspose),
/* harmony export */   "conv3d": () => (/* reexport safe */ _conv3d__WEBPACK_IMPORTED_MODULE_38__.conv3d),
/* harmony export */   "conv3dTranspose": () => (/* reexport safe */ _conv3d_transpose__WEBPACK_IMPORTED_MODULE_39__.conv3dTranspose),
/* harmony export */   "cos": () => (/* reexport safe */ _cos__WEBPACK_IMPORTED_MODULE_40__.cos),
/* harmony export */   "cosh": () => (/* reexport safe */ _cosh__WEBPACK_IMPORTED_MODULE_41__.cosh),
/* harmony export */   "cumsum": () => (/* reexport safe */ _cumsum__WEBPACK_IMPORTED_MODULE_42__.cumsum),
/* harmony export */   "denseBincount": () => (/* reexport safe */ _dense_bincount__WEBPACK_IMPORTED_MODULE_43__.denseBincount),
/* harmony export */   "depthToSpace": () => (/* reexport safe */ _depth_to_space__WEBPACK_IMPORTED_MODULE_44__.depthToSpace),
/* harmony export */   "depthwiseConv2d": () => (/* reexport safe */ _depthwise_conv2d__WEBPACK_IMPORTED_MODULE_45__.depthwiseConv2d),
/* harmony export */   "diag": () => (/* reexport safe */ _diag__WEBPACK_IMPORTED_MODULE_46__.diag),
/* harmony export */   "dilation2d": () => (/* reexport safe */ _dilation2d__WEBPACK_IMPORTED_MODULE_47__.dilation2d),
/* harmony export */   "div": () => (/* reexport safe */ _div__WEBPACK_IMPORTED_MODULE_48__.div),
/* harmony export */   "divNoNan": () => (/* reexport safe */ _div_no_nan__WEBPACK_IMPORTED_MODULE_49__.divNoNan),
/* harmony export */   "dot": () => (/* reexport safe */ _dot__WEBPACK_IMPORTED_MODULE_50__.dot),
/* harmony export */   "elu": () => (/* reexport safe */ _elu__WEBPACK_IMPORTED_MODULE_51__.elu),
/* harmony export */   "equal": () => (/* reexport safe */ _equal__WEBPACK_IMPORTED_MODULE_52__.equal),
/* harmony export */   "erf": () => (/* reexport safe */ _erf__WEBPACK_IMPORTED_MODULE_53__.erf),
/* harmony export */   "exp": () => (/* reexport safe */ _exp__WEBPACK_IMPORTED_MODULE_54__.exp),
/* harmony export */   "expandDims": () => (/* reexport safe */ _expand_dims__WEBPACK_IMPORTED_MODULE_55__.expandDims),
/* harmony export */   "expm1": () => (/* reexport safe */ _expm1__WEBPACK_IMPORTED_MODULE_56__.expm1),
/* harmony export */   "eye": () => (/* reexport safe */ _eye__WEBPACK_IMPORTED_MODULE_57__.eye),
/* harmony export */   "fill": () => (/* reexport safe */ _fill__WEBPACK_IMPORTED_MODULE_58__.fill),
/* harmony export */   "floor": () => (/* reexport safe */ _floor__WEBPACK_IMPORTED_MODULE_59__.floor),
/* harmony export */   "floorDiv": () => (/* reexport safe */ _floorDiv__WEBPACK_IMPORTED_MODULE_60__.floorDiv),
/* harmony export */   "gather": () => (/* reexport safe */ _gather__WEBPACK_IMPORTED_MODULE_61__.gather),
/* harmony export */   "greater": () => (/* reexport safe */ _greater__WEBPACK_IMPORTED_MODULE_62__.greater),
/* harmony export */   "greaterEqual": () => (/* reexport safe */ _greater_equal__WEBPACK_IMPORTED_MODULE_63__.greaterEqual),
/* harmony export */   "imag": () => (/* reexport safe */ _imag__WEBPACK_IMPORTED_MODULE_64__.imag),
/* harmony export */   "isFinite": () => (/* reexport safe */ _is_finite__WEBPACK_IMPORTED_MODULE_65__.isFinite),
/* harmony export */   "isInf": () => (/* reexport safe */ _is_inf__WEBPACK_IMPORTED_MODULE_66__.isInf),
/* harmony export */   "isNaN": () => (/* reexport safe */ _is_nan__WEBPACK_IMPORTED_MODULE_67__.isNaN),
/* harmony export */   "leakyRelu": () => (/* reexport safe */ _leaky_relu__WEBPACK_IMPORTED_MODULE_68__.leakyRelu),
/* harmony export */   "less": () => (/* reexport safe */ _less__WEBPACK_IMPORTED_MODULE_69__.less),
/* harmony export */   "lessEqual": () => (/* reexport safe */ _less_equal__WEBPACK_IMPORTED_MODULE_70__.lessEqual),
/* harmony export */   "linspace": () => (/* reexport safe */ _linspace__WEBPACK_IMPORTED_MODULE_71__.linspace),
/* harmony export */   "localResponseNormalization": () => (/* reexport safe */ _local_response_normalization__WEBPACK_IMPORTED_MODULE_72__.localResponseNormalization),
/* harmony export */   "log": () => (/* reexport safe */ _log__WEBPACK_IMPORTED_MODULE_73__.log),
/* harmony export */   "log1p": () => (/* reexport safe */ _log1p__WEBPACK_IMPORTED_MODULE_74__.log1p),
/* harmony export */   "logSigmoid": () => (/* reexport safe */ _log_sigmoid__WEBPACK_IMPORTED_MODULE_75__.logSigmoid),
/* harmony export */   "logSoftmax": () => (/* reexport safe */ _log_softmax__WEBPACK_IMPORTED_MODULE_76__.logSoftmax),
/* harmony export */   "logSumExp": () => (/* reexport safe */ _log_sum_exp__WEBPACK_IMPORTED_MODULE_77__.logSumExp),
/* harmony export */   "logicalAnd": () => (/* reexport safe */ _logical_and__WEBPACK_IMPORTED_MODULE_78__.logicalAnd),
/* harmony export */   "logicalNot": () => (/* reexport safe */ _logical_not__WEBPACK_IMPORTED_MODULE_79__.logicalNot),
/* harmony export */   "logicalOr": () => (/* reexport safe */ _logical_or__WEBPACK_IMPORTED_MODULE_80__.logicalOr),
/* harmony export */   "logicalXor": () => (/* reexport safe */ _logical_xor__WEBPACK_IMPORTED_MODULE_81__.logicalXor),
/* harmony export */   "matMul": () => (/* reexport safe */ _mat_mul__WEBPACK_IMPORTED_MODULE_82__.matMul),
/* harmony export */   "max": () => (/* reexport safe */ _max__WEBPACK_IMPORTED_MODULE_83__.max),
/* harmony export */   "maxPool": () => (/* reexport safe */ _max_pool__WEBPACK_IMPORTED_MODULE_84__.maxPool),
/* harmony export */   "maxPool3d": () => (/* reexport safe */ _max_pool_3d__WEBPACK_IMPORTED_MODULE_85__.maxPool3d),
/* harmony export */   "maxPoolWithArgmax": () => (/* reexport safe */ _max_pool_with_argmax__WEBPACK_IMPORTED_MODULE_86__.maxPoolWithArgmax),
/* harmony export */   "maximum": () => (/* reexport safe */ _maximum__WEBPACK_IMPORTED_MODULE_87__.maximum),
/* harmony export */   "mean": () => (/* reexport safe */ _mean__WEBPACK_IMPORTED_MODULE_88__.mean),
/* harmony export */   "min": () => (/* reexport safe */ _min__WEBPACK_IMPORTED_MODULE_89__.min),
/* harmony export */   "minimum": () => (/* reexport safe */ _minimum__WEBPACK_IMPORTED_MODULE_90__.minimum),
/* harmony export */   "mirrorPad": () => (/* reexport safe */ _mirror_pad__WEBPACK_IMPORTED_MODULE_91__.mirrorPad),
/* harmony export */   "mod": () => (/* reexport safe */ _mod__WEBPACK_IMPORTED_MODULE_92__.mod),
/* harmony export */   "moments": () => (/* reexport safe */ _moments__WEBPACK_IMPORTED_MODULE_93__.moments),
/* harmony export */   "mul": () => (/* reexport safe */ _mul__WEBPACK_IMPORTED_MODULE_94__.mul),
/* harmony export */   "multiRNNCell": () => (/* reexport safe */ _multi_rnn_cell__WEBPACK_IMPORTED_MODULE_95__.multiRNNCell),
/* harmony export */   "multinomial": () => (/* reexport safe */ _multinomial__WEBPACK_IMPORTED_MODULE_96__.multinomial),
/* harmony export */   "neg": () => (/* reexport safe */ _neg__WEBPACK_IMPORTED_MODULE_97__.neg),
/* harmony export */   "notEqual": () => (/* reexport safe */ _not_equal__WEBPACK_IMPORTED_MODULE_98__.notEqual),
/* harmony export */   "oneHot": () => (/* reexport safe */ _one_hot__WEBPACK_IMPORTED_MODULE_99__.oneHot),
/* harmony export */   "ones": () => (/* reexport safe */ _ones__WEBPACK_IMPORTED_MODULE_100__.ones),
/* harmony export */   "onesLike": () => (/* reexport safe */ _ones_like__WEBPACK_IMPORTED_MODULE_101__.onesLike),
/* harmony export */   "outerProduct": () => (/* reexport safe */ _outer_product__WEBPACK_IMPORTED_MODULE_102__.outerProduct),
/* harmony export */   "pad": () => (/* reexport safe */ _pad__WEBPACK_IMPORTED_MODULE_103__.pad),
/* harmony export */   "pad1d": () => (/* reexport safe */ _pad1d__WEBPACK_IMPORTED_MODULE_104__.pad1d),
/* harmony export */   "pad2d": () => (/* reexport safe */ _pad2d__WEBPACK_IMPORTED_MODULE_105__.pad2d),
/* harmony export */   "pad3d": () => (/* reexport safe */ _pad3d__WEBPACK_IMPORTED_MODULE_106__.pad3d),
/* harmony export */   "pad4d": () => (/* reexport safe */ _pad4d__WEBPACK_IMPORTED_MODULE_107__.pad4d),
/* harmony export */   "pool": () => (/* reexport safe */ _pool__WEBPACK_IMPORTED_MODULE_108__.pool),
/* harmony export */   "pow": () => (/* reexport safe */ _pow__WEBPACK_IMPORTED_MODULE_109__.pow),
/* harmony export */   "prelu": () => (/* reexport safe */ _prelu__WEBPACK_IMPORTED_MODULE_110__.prelu),
/* harmony export */   "print": () => (/* reexport safe */ _print__WEBPACK_IMPORTED_MODULE_111__.print),
/* harmony export */   "prod": () => (/* reexport safe */ _prod__WEBPACK_IMPORTED_MODULE_112__.prod),
/* harmony export */   "rand": () => (/* reexport safe */ _rand__WEBPACK_IMPORTED_MODULE_113__.rand),
/* harmony export */   "randomGamma": () => (/* reexport safe */ _random_gamma__WEBPACK_IMPORTED_MODULE_114__.randomGamma),
/* harmony export */   "randomNormal": () => (/* reexport safe */ _random_normal__WEBPACK_IMPORTED_MODULE_115__.randomNormal),
/* harmony export */   "randomUniform": () => (/* reexport safe */ _random_uniform__WEBPACK_IMPORTED_MODULE_116__.randomUniform),
/* harmony export */   "range": () => (/* reexport safe */ _range__WEBPACK_IMPORTED_MODULE_117__.range),
/* harmony export */   "real": () => (/* reexport safe */ _real__WEBPACK_IMPORTED_MODULE_118__.real),
/* harmony export */   "reciprocal": () => (/* reexport safe */ _reciprocal__WEBPACK_IMPORTED_MODULE_119__.reciprocal),
/* harmony export */   "relu": () => (/* reexport safe */ _relu__WEBPACK_IMPORTED_MODULE_120__.relu),
/* harmony export */   "relu6": () => (/* reexport safe */ _relu6__WEBPACK_IMPORTED_MODULE_121__.relu6),
/* harmony export */   "reshape": () => (/* reexport safe */ _reshape__WEBPACK_IMPORTED_MODULE_122__.reshape),
/* harmony export */   "reverse": () => (/* reexport safe */ _reverse__WEBPACK_IMPORTED_MODULE_123__.reverse),
/* harmony export */   "reverse1d": () => (/* reexport safe */ _reverse_1d__WEBPACK_IMPORTED_MODULE_124__.reverse1d),
/* harmony export */   "reverse2d": () => (/* reexport safe */ _reverse_2d__WEBPACK_IMPORTED_MODULE_125__.reverse2d),
/* harmony export */   "reverse3d": () => (/* reexport safe */ _reverse_3d__WEBPACK_IMPORTED_MODULE_126__.reverse3d),
/* harmony export */   "reverse4d": () => (/* reexport safe */ _reverse_4d__WEBPACK_IMPORTED_MODULE_127__.reverse4d),
/* harmony export */   "round": () => (/* reexport safe */ _round__WEBPACK_IMPORTED_MODULE_128__.round),
/* harmony export */   "rsqrt": () => (/* reexport safe */ _rsqrt__WEBPACK_IMPORTED_MODULE_129__.rsqrt),
/* harmony export */   "scalar": () => (/* reexport safe */ _scalar__WEBPACK_IMPORTED_MODULE_130__.scalar),
/* harmony export */   "selu": () => (/* reexport safe */ _selu__WEBPACK_IMPORTED_MODULE_131__.selu),
/* harmony export */   "separableConv2d": () => (/* reexport safe */ _separable_conv2d__WEBPACK_IMPORTED_MODULE_132__.separableConv2d),
/* harmony export */   "setdiff1dAsync": () => (/* reexport safe */ _setdiff1d_async__WEBPACK_IMPORTED_MODULE_133__.setdiff1dAsync),
/* harmony export */   "sigmoid": () => (/* reexport safe */ _sigmoid__WEBPACK_IMPORTED_MODULE_134__.sigmoid),
/* harmony export */   "sign": () => (/* reexport safe */ _sign__WEBPACK_IMPORTED_MODULE_135__.sign),
/* harmony export */   "sin": () => (/* reexport safe */ _sin__WEBPACK_IMPORTED_MODULE_136__.sin),
/* harmony export */   "sinh": () => (/* reexport safe */ _sinh__WEBPACK_IMPORTED_MODULE_137__.sinh),
/* harmony export */   "slice": () => (/* reexport safe */ _slice__WEBPACK_IMPORTED_MODULE_138__.slice),
/* harmony export */   "slice1d": () => (/* reexport safe */ _slice1d__WEBPACK_IMPORTED_MODULE_139__.slice1d),
/* harmony export */   "slice2d": () => (/* reexport safe */ _slice2d__WEBPACK_IMPORTED_MODULE_140__.slice2d),
/* harmony export */   "slice3d": () => (/* reexport safe */ _slice3d__WEBPACK_IMPORTED_MODULE_141__.slice3d),
/* harmony export */   "slice4d": () => (/* reexport safe */ _slice4d__WEBPACK_IMPORTED_MODULE_142__.slice4d),
/* harmony export */   "softmax": () => (/* reexport safe */ _softmax__WEBPACK_IMPORTED_MODULE_143__.softmax),
/* harmony export */   "softplus": () => (/* reexport safe */ _softplus__WEBPACK_IMPORTED_MODULE_144__.softplus),
/* harmony export */   "spaceToBatchND": () => (/* reexport safe */ _space_to_batch_nd__WEBPACK_IMPORTED_MODULE_145__.spaceToBatchND),
/* harmony export */   "fft": () => (/* reexport safe */ _spectral_fft__WEBPACK_IMPORTED_MODULE_146__.fft),
/* harmony export */   "ifft": () => (/* reexport safe */ _spectral_ifft__WEBPACK_IMPORTED_MODULE_147__.ifft),
/* harmony export */   "irfft": () => (/* reexport safe */ _spectral_irfft__WEBPACK_IMPORTED_MODULE_148__.irfft),
/* harmony export */   "rfft": () => (/* reexport safe */ _spectral_rfft__WEBPACK_IMPORTED_MODULE_149__.rfft),
/* harmony export */   "split": () => (/* reexport safe */ _split__WEBPACK_IMPORTED_MODULE_150__.split),
/* harmony export */   "sqrt": () => (/* reexport safe */ _sqrt__WEBPACK_IMPORTED_MODULE_151__.sqrt),
/* harmony export */   "square": () => (/* reexport safe */ _square__WEBPACK_IMPORTED_MODULE_152__.square),
/* harmony export */   "squaredDifference": () => (/* reexport safe */ _squared_difference__WEBPACK_IMPORTED_MODULE_153__.squaredDifference),
/* harmony export */   "squeeze": () => (/* reexport safe */ _squeeze__WEBPACK_IMPORTED_MODULE_154__.squeeze),
/* harmony export */   "stack": () => (/* reexport safe */ _stack__WEBPACK_IMPORTED_MODULE_155__.stack),
/* harmony export */   "step": () => (/* reexport safe */ _step__WEBPACK_IMPORTED_MODULE_156__.step),
/* harmony export */   "stridedSlice": () => (/* reexport safe */ _strided_slice__WEBPACK_IMPORTED_MODULE_157__.stridedSlice),
/* harmony export */   "sub": () => (/* reexport safe */ _sub__WEBPACK_IMPORTED_MODULE_158__.sub),
/* harmony export */   "sum": () => (/* reexport safe */ _sum__WEBPACK_IMPORTED_MODULE_159__.sum),
/* harmony export */   "tan": () => (/* reexport safe */ _tan__WEBPACK_IMPORTED_MODULE_160__.tan),
/* harmony export */   "tanh": () => (/* reexport safe */ _tanh__WEBPACK_IMPORTED_MODULE_161__.tanh),
/* harmony export */   "tensor": () => (/* reexport safe */ _tensor__WEBPACK_IMPORTED_MODULE_162__.tensor),
/* harmony export */   "tensor1d": () => (/* reexport safe */ _tensor1d__WEBPACK_IMPORTED_MODULE_163__.tensor1d),
/* harmony export */   "tensor2d": () => (/* reexport safe */ _tensor2d__WEBPACK_IMPORTED_MODULE_164__.tensor2d),
/* harmony export */   "tensor3d": () => (/* reexport safe */ _tensor3d__WEBPACK_IMPORTED_MODULE_165__.tensor3d),
/* harmony export */   "tensor4d": () => (/* reexport safe */ _tensor4d__WEBPACK_IMPORTED_MODULE_166__.tensor4d),
/* harmony export */   "tensor5d": () => (/* reexport safe */ _tensor5d__WEBPACK_IMPORTED_MODULE_167__.tensor5d),
/* harmony export */   "tensor6d": () => (/* reexport safe */ _tensor6d__WEBPACK_IMPORTED_MODULE_168__.tensor6d),
/* harmony export */   "tile": () => (/* reexport safe */ _tile__WEBPACK_IMPORTED_MODULE_169__.tile),
/* harmony export */   "topk": () => (/* reexport safe */ _topk__WEBPACK_IMPORTED_MODULE_170__.topk),
/* harmony export */   "truncatedNormal": () => (/* reexport safe */ _truncated_normal__WEBPACK_IMPORTED_MODULE_171__.truncatedNormal),
/* harmony export */   "unique": () => (/* reexport safe */ _unique__WEBPACK_IMPORTED_MODULE_172__.unique),
/* harmony export */   "unsortedSegmentSum": () => (/* reexport safe */ _unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_173__.unsortedSegmentSum),
/* harmony export */   "unstack": () => (/* reexport safe */ _unstack__WEBPACK_IMPORTED_MODULE_174__.unstack),
/* harmony export */   "variable": () => (/* reexport safe */ _variable__WEBPACK_IMPORTED_MODULE_175__.variable),
/* harmony export */   "where": () => (/* reexport safe */ _where__WEBPACK_IMPORTED_MODULE_176__.where),
/* harmony export */   "whereAsync": () => (/* reexport safe */ _where_async__WEBPACK_IMPORTED_MODULE_177__.whereAsync),
/* harmony export */   "zeros": () => (/* reexport safe */ _zeros__WEBPACK_IMPORTED_MODULE_178__.zeros),
/* harmony export */   "zerosLike": () => (/* reexport safe */ _zeros_like__WEBPACK_IMPORTED_MODULE_179__.zerosLike),
/* harmony export */   "booleanMaskAsync": () => (/* reexport safe */ _boolean_mask__WEBPACK_IMPORTED_MODULE_180__.booleanMaskAsync),
/* harmony export */   "equalStrict": () => (/* reexport safe */ _compare__WEBPACK_IMPORTED_MODULE_181__.equalStrict),
/* harmony export */   "greaterEqualStrict": () => (/* reexport safe */ _compare__WEBPACK_IMPORTED_MODULE_181__.greaterEqualStrict),
/* harmony export */   "greaterStrict": () => (/* reexport safe */ _compare__WEBPACK_IMPORTED_MODULE_181__.greaterStrict),
/* harmony export */   "lessEqualStrict": () => (/* reexport safe */ _compare__WEBPACK_IMPORTED_MODULE_181__.lessEqualStrict),
/* harmony export */   "lessStrict": () => (/* reexport safe */ _compare__WEBPACK_IMPORTED_MODULE_181__.lessStrict),
/* harmony export */   "notEqualStrict": () => (/* reexport safe */ _compare__WEBPACK_IMPORTED_MODULE_181__.notEqualStrict),
/* harmony export */   "addStrict": () => (/* reexport safe */ _binary_ops__WEBPACK_IMPORTED_MODULE_182__.addStrict),
/* harmony export */   "divStrict": () => (/* reexport safe */ _binary_ops__WEBPACK_IMPORTED_MODULE_182__.divStrict),
/* harmony export */   "maximumStrict": () => (/* reexport safe */ _binary_ops__WEBPACK_IMPORTED_MODULE_182__.maximumStrict),
/* harmony export */   "minimumStrict": () => (/* reexport safe */ _binary_ops__WEBPACK_IMPORTED_MODULE_182__.minimumStrict),
/* harmony export */   "modStrict": () => (/* reexport safe */ _binary_ops__WEBPACK_IMPORTED_MODULE_182__.modStrict),
/* harmony export */   "mulStrict": () => (/* reexport safe */ _binary_ops__WEBPACK_IMPORTED_MODULE_182__.mulStrict),
/* harmony export */   "powStrict": () => (/* reexport safe */ _binary_ops__WEBPACK_IMPORTED_MODULE_182__.powStrict),
/* harmony export */   "squaredDifferenceStrict": () => (/* reexport safe */ _binary_ops__WEBPACK_IMPORTED_MODULE_182__.squaredDifferenceStrict),
/* harmony export */   "subStrict": () => (/* reexport safe */ _binary_ops__WEBPACK_IMPORTED_MODULE_182__.subStrict),
/* harmony export */   "transpose": () => (/* reexport safe */ _transpose__WEBPACK_IMPORTED_MODULE_183__.transpose),
/* harmony export */   "norm": () => (/* reexport safe */ _norm__WEBPACK_IMPORTED_MODULE_184__.norm),
/* harmony export */   "movingAverage": () => (/* reexport safe */ _moving_average__WEBPACK_IMPORTED_MODULE_185__.movingAverage),
/* harmony export */   "scatterND": () => (/* reexport safe */ _scatter_nd__WEBPACK_IMPORTED_MODULE_186__.scatterND),
/* harmony export */   "sparseToDense": () => (/* reexport safe */ _sparse_to_dense__WEBPACK_IMPORTED_MODULE_187__.sparseToDense),
/* harmony export */   "gatherND": () => (/* reexport safe */ _gather_nd__WEBPACK_IMPORTED_MODULE_188__.gatherND),
/* harmony export */   "dropout": () => (/* reexport safe */ _dropout__WEBPACK_IMPORTED_MODULE_189__.dropout),
/* harmony export */   "cosineWindow": () => (/* reexport safe */ _signal_ops_util__WEBPACK_IMPORTED_MODULE_190__.cosineWindow),
/* harmony export */   "enclosingPowerOfTwo": () => (/* reexport safe */ _signal_ops_util__WEBPACK_IMPORTED_MODULE_190__.enclosingPowerOfTwo),
/* harmony export */   "inTopKAsync": () => (/* reexport safe */ _in_top_k__WEBPACK_IMPORTED_MODULE_191__.inTopKAsync),
/* harmony export */   "op": () => (/* reexport safe */ _operation__WEBPACK_IMPORTED_MODULE_192__.op),
/* harmony export */   "OP_SCOPE_SUFFIX": () => (/* reexport safe */ _operation__WEBPACK_IMPORTED_MODULE_192__.OP_SCOPE_SUFFIX),
/* harmony export */   "image": () => (/* binding */ image),
/* harmony export */   "linalg": () => (/* binding */ linalg),
/* harmony export */   "losses": () => (/* binding */ losses),
/* harmony export */   "spectral": () => (/* binding */ spectral),
/* harmony export */   "fused": () => (/* reexport module object */ _fused_ops__WEBPACK_IMPORTED_MODULE_220__),
/* harmony export */   "signal": () => (/* binding */ signal)
/* harmony export */ });
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _acos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./acos */ "./node_modules/@tensorflow/tfjs-core/dist/ops/acos.js");
/* harmony import */ var _acosh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./acosh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _add_n__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./add_n */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add_n.js");
/* harmony import */ var _all__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./all */ "./node_modules/@tensorflow/tfjs-core/dist/ops/all.js");
/* harmony import */ var _any__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./any */ "./node_modules/@tensorflow/tfjs-core/dist/ops/any.js");
/* harmony import */ var _arg_max__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./arg_max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js");
/* harmony import */ var _arg_min__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./arg_min */ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js");
/* harmony import */ var _asin__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./asin */ "./node_modules/@tensorflow/tfjs-core/dist/ops/asin.js");
/* harmony import */ var _asinh__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./asinh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js");
/* harmony import */ var _atan__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./atan */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan.js");
/* harmony import */ var _atan2__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./atan2 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js");
/* harmony import */ var _atanh__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./atanh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js");
/* harmony import */ var _avg_pool__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./avg_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js");
/* harmony import */ var _avg_pool_3d__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./avg_pool_3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool_3d.js");
/* harmony import */ var _basic_lstm_cell__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./basic_lstm_cell */ "./node_modules/@tensorflow/tfjs-core/dist/ops/basic_lstm_cell.js");
/* harmony import */ var _batch_to_space_nd__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./batch_to_space_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js");
/* harmony import */ var _batchnorm__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js");
/* harmony import */ var _batchnorm2d__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./batchnorm2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm2d.js");
/* harmony import */ var _batchnorm3d__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./batchnorm3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm3d.js");
/* harmony import */ var _batchnorm4d__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./batchnorm4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm4d.js");
/* harmony import */ var _bincount__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./bincount */ "./node_modules/@tensorflow/tfjs-core/dist/ops/bincount.js");
/* harmony import */ var _broadcast_to__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./broadcast_to */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js");
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _ceil__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./ceil */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js");
/* harmony import */ var _clip_by_value__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./clip_by_value */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js");
/* harmony import */ var _clone__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./clone */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clone.js");
/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _concat_1d__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./concat_1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js");
/* harmony import */ var _concat_2d__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./concat_2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_2d.js");
/* harmony import */ var _concat_3d__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./concat_3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_3d.js");
/* harmony import */ var _concat_4d__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./concat_4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat_4d.js");
/* harmony import */ var _conv1d__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./conv1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js");
/* harmony import */ var _conv2d__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _conv2d_transpose__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./conv2d_transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js");
/* harmony import */ var _conv3d__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./conv3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d.js");
/* harmony import */ var _conv3d_transpose__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./conv3d_transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv3d_transpose.js");
/* harmony import */ var _cos__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./cos */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js");
/* harmony import */ var _cosh__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./cosh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js");
/* harmony import */ var _cumsum__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./cumsum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js");
/* harmony import */ var _dense_bincount__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./dense_bincount */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dense_bincount.js");
/* harmony import */ var _depth_to_space__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./depth_to_space */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js");
/* harmony import */ var _depthwise_conv2d__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js");
/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./diag */ "./node_modules/@tensorflow/tfjs-core/dist/ops/diag.js");
/* harmony import */ var _dilation2d__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./dilation2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _div_no_nan__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./div_no_nan */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js");
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./dot */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dot.js");
/* harmony import */ var _elu__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./elu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js");
/* harmony import */ var _equal__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js");
/* harmony import */ var _erf__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./erf */ "./node_modules/@tensorflow/tfjs-core/dist/ops/erf.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _expand_dims__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./expand_dims */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js");
/* harmony import */ var _expm1__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./expm1 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js");
/* harmony import */ var _eye__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./eye */ "./node_modules/@tensorflow/tfjs-core/dist/ops/eye.js");
/* harmony import */ var _fill__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./fill */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js");
/* harmony import */ var _floor__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./floor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js");
/* harmony import */ var _floorDiv__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./floorDiv */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js");
/* harmony import */ var _gather__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./gather */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js");
/* harmony import */ var _greater__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _greater_equal__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _imag__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./imag */ "./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js");
/* harmony import */ var _is_finite__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./is_finite */ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_finite.js");
/* harmony import */ var _is_inf__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./is_inf */ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_inf.js");
/* harmony import */ var _is_nan__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./is_nan */ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_nan.js");
/* harmony import */ var _leaky_relu__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./leaky_relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js");
/* harmony import */ var _less__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./less */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less.js");
/* harmony import */ var _less_equal__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _linspace__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./linspace */ "./node_modules/@tensorflow/tfjs-core/dist/ops/linspace.js");
/* harmony import */ var _local_response_normalization__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./local_response_normalization */ "./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./log */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony import */ var _log1p__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./log1p */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js");
/* harmony import */ var _log_sigmoid__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./log_sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sigmoid.js");
/* harmony import */ var _log_softmax__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./log_softmax */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js");
/* harmony import */ var _log_sum_exp__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./log_sum_exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js");
/* harmony import */ var _logical_and__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _logical_not__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./logical_not */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js");
/* harmony import */ var _logical_or__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./logical_or */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js");
/* harmony import */ var _logical_xor__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./logical_xor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js");
/* harmony import */ var _max_pool__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./max_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js");
/* harmony import */ var _max_pool_3d__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./max_pool_3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_3d.js");
/* harmony import */ var _max_pool_with_argmax__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./max_pool_with_argmax */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax.js");
/* harmony import */ var _maximum__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./maximum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony import */ var _mean__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./mean */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js");
/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./min */ "./node_modules/@tensorflow/tfjs-core/dist/ops/min.js");
/* harmony import */ var _minimum__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./minimum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js");
/* harmony import */ var _mirror_pad__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./mirror_pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mirror_pad.js");
/* harmony import */ var _mod__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./mod */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js");
/* harmony import */ var _moments__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./moments */ "./node_modules/@tensorflow/tfjs-core/dist/ops/moments.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _multi_rnn_cell__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./multi_rnn_cell */ "./node_modules/@tensorflow/tfjs-core/dist/ops/multi_rnn_cell.js");
/* harmony import */ var _multinomial__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./multinomial */ "./node_modules/@tensorflow/tfjs-core/dist/ops/multinomial.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./neg */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _not_equal__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./not_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js");
/* harmony import */ var _one_hot__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./one_hot */ "./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js");
/* harmony import */ var _ones__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./ones */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones.js");
/* harmony import */ var _ones_like__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./ones_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js");
/* harmony import */ var _outer_product__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./outer_product */ "./node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js");
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");
/* harmony import */ var _pad1d__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./pad1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js");
/* harmony import */ var _pad2d__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./pad2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js");
/* harmony import */ var _pad3d__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./pad3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js");
/* harmony import */ var _pad4d__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./pad4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js");
/* harmony import */ var _pool__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js");
/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _prelu__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./prelu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js");
/* harmony import */ var _print__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./print */ "./node_modules/@tensorflow/tfjs-core/dist/ops/print.js");
/* harmony import */ var _prod__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./prod */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prod.js");
/* harmony import */ var _rand__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./rand */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js");
/* harmony import */ var _random_gamma__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./random_gamma */ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js");
/* harmony import */ var _random_normal__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./random_normal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_normal.js");
/* harmony import */ var _random_uniform__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./random_uniform */ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js");
/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./range */ "./node_modules/@tensorflow/tfjs-core/dist/ops/range.js");
/* harmony import */ var _real__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./real */ "./node_modules/@tensorflow/tfjs-core/dist/ops/real.js");
/* harmony import */ var _reciprocal__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./reciprocal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js");
/* harmony import */ var _relu__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js");
/* harmony import */ var _relu6__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./relu6 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/* harmony import */ var _reverse_1d__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./reverse_1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_1d.js");
/* harmony import */ var _reverse_2d__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./reverse_2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_2d.js");
/* harmony import */ var _reverse_3d__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./reverse_3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_3d.js");
/* harmony import */ var _reverse_4d__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./reverse_4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_4d.js");
/* harmony import */ var _round__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./round */ "./node_modules/@tensorflow/tfjs-core/dist/ops/round.js");
/* harmony import */ var _rsqrt__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./rsqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _selu__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./selu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu.js");
/* harmony import */ var _separable_conv2d__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./separable_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js");
/* harmony import */ var _setdiff1d_async__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./setdiff1d_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js");
/* harmony import */ var _sigmoid__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js");
/* harmony import */ var _sign__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./sign */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sign.js");
/* harmony import */ var _sin__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./sin */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sin.js");
/* harmony import */ var _sinh__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./sinh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _slice1d__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./slice1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice1d.js");
/* harmony import */ var _slice2d__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./slice2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice2d.js");
/* harmony import */ var _slice3d__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./slice3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice3d.js");
/* harmony import */ var _slice4d__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./slice4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice4d.js");
/* harmony import */ var _softmax__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./softmax */ "./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js");
/* harmony import */ var _softplus__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./softplus */ "./node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js");
/* harmony import */ var _space_to_batch_nd__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./space_to_batch_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js");
/* harmony import */ var _spectral_fft__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./spectral/fft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js");
/* harmony import */ var _spectral_ifft__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./spectral/ifft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js");
/* harmony import */ var _spectral_irfft__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./spectral/irfft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js");
/* harmony import */ var _spectral_rfft__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./spectral/rfft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js");
/* harmony import */ var _split__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./split */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js");
/* harmony import */ var _sqrt__WEBPACK_IMPORTED_MODULE_151__ = __webpack_require__(/*! ./sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_152__ = __webpack_require__(/*! ./square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _squared_difference__WEBPACK_IMPORTED_MODULE_153__ = __webpack_require__(/*! ./squared_difference */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js");
/* harmony import */ var _squeeze__WEBPACK_IMPORTED_MODULE_154__ = __webpack_require__(/*! ./squeeze */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js");
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_155__ = __webpack_require__(/*! ./stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/* harmony import */ var _step__WEBPACK_IMPORTED_MODULE_156__ = __webpack_require__(/*! ./step */ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js");
/* harmony import */ var _strided_slice__WEBPACK_IMPORTED_MODULE_157__ = __webpack_require__(/*! ./strided_slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_158__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_159__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _tan__WEBPACK_IMPORTED_MODULE_160__ = __webpack_require__(/*! ./tan */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tan.js");
/* harmony import */ var _tanh__WEBPACK_IMPORTED_MODULE_161__ = __webpack_require__(/*! ./tanh */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_162__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js");
/* harmony import */ var _tensor1d__WEBPACK_IMPORTED_MODULE_163__ = __webpack_require__(/*! ./tensor1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js");
/* harmony import */ var _tensor2d__WEBPACK_IMPORTED_MODULE_164__ = __webpack_require__(/*! ./tensor2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js");
/* harmony import */ var _tensor3d__WEBPACK_IMPORTED_MODULE_165__ = __webpack_require__(/*! ./tensor3d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js");
/* harmony import */ var _tensor4d__WEBPACK_IMPORTED_MODULE_166__ = __webpack_require__(/*! ./tensor4d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor4d.js");
/* harmony import */ var _tensor5d__WEBPACK_IMPORTED_MODULE_167__ = __webpack_require__(/*! ./tensor5d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor5d.js");
/* harmony import */ var _tensor6d__WEBPACK_IMPORTED_MODULE_168__ = __webpack_require__(/*! ./tensor6d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor6d.js");
/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_169__ = __webpack_require__(/*! ./tile */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js");
/* harmony import */ var _topk__WEBPACK_IMPORTED_MODULE_170__ = __webpack_require__(/*! ./topk */ "./node_modules/@tensorflow/tfjs-core/dist/ops/topk.js");
/* harmony import */ var _truncated_normal__WEBPACK_IMPORTED_MODULE_171__ = __webpack_require__(/*! ./truncated_normal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js");
/* harmony import */ var _unique__WEBPACK_IMPORTED_MODULE_172__ = __webpack_require__(/*! ./unique */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unique.js");
/* harmony import */ var _unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_173__ = __webpack_require__(/*! ./unsorted_segment_sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js");
/* harmony import */ var _unstack__WEBPACK_IMPORTED_MODULE_174__ = __webpack_require__(/*! ./unstack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js");
/* harmony import */ var _variable__WEBPACK_IMPORTED_MODULE_175__ = __webpack_require__(/*! ./variable */ "./node_modules/@tensorflow/tfjs-core/dist/ops/variable.js");
/* harmony import */ var _where__WEBPACK_IMPORTED_MODULE_176__ = __webpack_require__(/*! ./where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _where_async__WEBPACK_IMPORTED_MODULE_177__ = __webpack_require__(/*! ./where_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js");
/* harmony import */ var _zeros__WEBPACK_IMPORTED_MODULE_178__ = __webpack_require__(/*! ./zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/* harmony import */ var _zeros_like__WEBPACK_IMPORTED_MODULE_179__ = __webpack_require__(/*! ./zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _boolean_mask__WEBPACK_IMPORTED_MODULE_180__ = __webpack_require__(/*! ./boolean_mask */ "./node_modules/@tensorflow/tfjs-core/dist/ops/boolean_mask.js");
/* harmony import */ var _compare__WEBPACK_IMPORTED_MODULE_181__ = __webpack_require__(/*! ./compare */ "./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js");
/* harmony import */ var _binary_ops__WEBPACK_IMPORTED_MODULE_182__ = __webpack_require__(/*! ./binary_ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_183__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/* harmony import */ var _norm__WEBPACK_IMPORTED_MODULE_184__ = __webpack_require__(/*! ./norm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js");
/* harmony import */ var _moving_average__WEBPACK_IMPORTED_MODULE_185__ = __webpack_require__(/*! ./moving_average */ "./node_modules/@tensorflow/tfjs-core/dist/ops/moving_average.js");
/* harmony import */ var _scatter_nd__WEBPACK_IMPORTED_MODULE_186__ = __webpack_require__(/*! ./scatter_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js");
/* harmony import */ var _sparse_to_dense__WEBPACK_IMPORTED_MODULE_187__ = __webpack_require__(/*! ./sparse_to_dense */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js");
/* harmony import */ var _gather_nd__WEBPACK_IMPORTED_MODULE_188__ = __webpack_require__(/*! ./gather_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js");
/* harmony import */ var _dropout__WEBPACK_IMPORTED_MODULE_189__ = __webpack_require__(/*! ./dropout */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dropout.js");
/* harmony import */ var _signal_ops_util__WEBPACK_IMPORTED_MODULE_190__ = __webpack_require__(/*! ./signal_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js");
/* harmony import */ var _in_top_k__WEBPACK_IMPORTED_MODULE_191__ = __webpack_require__(/*! ./in_top_k */ "./node_modules/@tensorflow/tfjs-core/dist/ops/in_top_k.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_192__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _fused_ops__WEBPACK_IMPORTED_MODULE_220__ = __webpack_require__(/*! ./fused_ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fused_ops.js");
/* harmony import */ var _signal_hamming_window__WEBPACK_IMPORTED_MODULE_193__ = __webpack_require__(/*! ./signal/hamming_window */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js");
/* harmony import */ var _signal_hann_window__WEBPACK_IMPORTED_MODULE_194__ = __webpack_require__(/*! ./signal/hann_window */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js");
/* harmony import */ var _signal_frame__WEBPACK_IMPORTED_MODULE_195__ = __webpack_require__(/*! ./signal/frame */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js");
/* harmony import */ var _signal_stft__WEBPACK_IMPORTED_MODULE_196__ = __webpack_require__(/*! ./signal/stft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js");
/* harmony import */ var _image_crop_and_resize__WEBPACK_IMPORTED_MODULE_201__ = __webpack_require__(/*! ./image/crop_and_resize */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/crop_and_resize.js");
/* harmony import */ var _image_flip_left_right__WEBPACK_IMPORTED_MODULE_197__ = __webpack_require__(/*! ./image/flip_left_right */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/flip_left_right.js");
/* harmony import */ var _image_rotate_with_offset__WEBPACK_IMPORTED_MODULE_200__ = __webpack_require__(/*! ./image/rotate_with_offset */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/rotate_with_offset.js");
/* harmony import */ var _image_non_max_suppression__WEBPACK_IMPORTED_MODULE_202__ = __webpack_require__(/*! ./image/non_max_suppression */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression.js");
/* harmony import */ var _image_non_max_suppression_async__WEBPACK_IMPORTED_MODULE_203__ = __webpack_require__(/*! ./image/non_max_suppression_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_async.js");
/* harmony import */ var _image_non_max_suppression_with_score__WEBPACK_IMPORTED_MODULE_204__ = __webpack_require__(/*! ./image/non_max_suppression_with_score */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score.js");
/* harmony import */ var _image_non_max_suppression_with_score_async__WEBPACK_IMPORTED_MODULE_205__ = __webpack_require__(/*! ./image/non_max_suppression_with_score_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_with_score_async.js");
/* harmony import */ var _image_non_max_suppression_padded__WEBPACK_IMPORTED_MODULE_206__ = __webpack_require__(/*! ./image/non_max_suppression_padded */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded.js");
/* harmony import */ var _image_non_max_suppression_padded_async__WEBPACK_IMPORTED_MODULE_207__ = __webpack_require__(/*! ./image/non_max_suppression_padded_async */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/non_max_suppression_padded_async.js");
/* harmony import */ var _image_resize_bilinear__WEBPACK_IMPORTED_MODULE_199__ = __webpack_require__(/*! ./image/resize_bilinear */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js");
/* harmony import */ var _image_resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_198__ = __webpack_require__(/*! ./image/resize_nearest_neighbor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js");
/* harmony import */ var _linalg_band_part__WEBPACK_IMPORTED_MODULE_208__ = __webpack_require__(/*! ./linalg/band_part */ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/band_part.js");
/* harmony import */ var _linalg_gram_schmidt__WEBPACK_IMPORTED_MODULE_209__ = __webpack_require__(/*! ./linalg/gram_schmidt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/gram_schmidt.js");
/* harmony import */ var _linalg_qr__WEBPACK_IMPORTED_MODULE_210__ = __webpack_require__(/*! ./linalg/qr */ "./node_modules/@tensorflow/tfjs-core/dist/ops/linalg/qr.js");
/* harmony import */ var _losses_absolute_difference__WEBPACK_IMPORTED_MODULE_211__ = __webpack_require__(/*! ./losses/absolute_difference */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/absolute_difference.js");
/* harmony import */ var _losses_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_212__ = __webpack_require__(/*! ./losses/compute_weighted_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/compute_weighted_loss.js");
/* harmony import */ var _losses_cosine_distance__WEBPACK_IMPORTED_MODULE_213__ = __webpack_require__(/*! ./losses/cosine_distance */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/cosine_distance.js");
/* harmony import */ var _losses_hinge_loss__WEBPACK_IMPORTED_MODULE_214__ = __webpack_require__(/*! ./losses/hinge_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/hinge_loss.js");
/* harmony import */ var _losses_huber_loss__WEBPACK_IMPORTED_MODULE_215__ = __webpack_require__(/*! ./losses/huber_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/huber_loss.js");
/* harmony import */ var _losses_log_loss__WEBPACK_IMPORTED_MODULE_216__ = __webpack_require__(/*! ./losses/log_loss */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/log_loss.js");
/* harmony import */ var _losses_mean_squared_error__WEBPACK_IMPORTED_MODULE_217__ = __webpack_require__(/*! ./losses/mean_squared_error */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/mean_squared_error.js");
/* harmony import */ var _losses_sigmoid_cross_entropy__WEBPACK_IMPORTED_MODULE_218__ = __webpack_require__(/*! ./losses/sigmoid_cross_entropy */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/sigmoid_cross_entropy.js");
/* harmony import */ var _losses_softmax_cross_entropy__WEBPACK_IMPORTED_MODULE_219__ = __webpack_require__(/*! ./losses/softmax_cross_entropy */ "./node_modules/@tensorflow/tfjs-core/dist/ops/losses/softmax_cross_entropy.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Modularized ops.





































































































































































































const spectral = {
    fft: _spectral_fft__WEBPACK_IMPORTED_MODULE_146__.fft,
    ifft: _spectral_ifft__WEBPACK_IMPORTED_MODULE_147__.ifft,
    rfft: _spectral_rfft__WEBPACK_IMPORTED_MODULE_149__.rfft,
    irfft: _spectral_irfft__WEBPACK_IMPORTED_MODULE_148__.irfft
};





const signal = {
    hammingWindow: _signal_hamming_window__WEBPACK_IMPORTED_MODULE_193__.hammingWindow,
    hannWindow: _signal_hann_window__WEBPACK_IMPORTED_MODULE_194__.hannWindow,
    frame: _signal_frame__WEBPACK_IMPORTED_MODULE_195__.frame,
    stft: _signal_stft__WEBPACK_IMPORTED_MODULE_196__.stft,
};
// Image Ops namespace











const image = {
    flipLeftRight: _image_flip_left_right__WEBPACK_IMPORTED_MODULE_197__.flipLeftRight,
    resizeNearestNeighbor: _image_resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_198__.resizeNearestNeighbor,
    resizeBilinear: _image_resize_bilinear__WEBPACK_IMPORTED_MODULE_199__.resizeBilinear,
    rotateWithOffset: _image_rotate_with_offset__WEBPACK_IMPORTED_MODULE_200__.rotateWithOffset,
    cropAndResize: _image_crop_and_resize__WEBPACK_IMPORTED_MODULE_201__.cropAndResize,
    nonMaxSuppression: _image_non_max_suppression__WEBPACK_IMPORTED_MODULE_202__.nonMaxSuppression,
    nonMaxSuppressionAsync: _image_non_max_suppression_async__WEBPACK_IMPORTED_MODULE_203__.nonMaxSuppressionAsync,
    nonMaxSuppressionWithScore: _image_non_max_suppression_with_score__WEBPACK_IMPORTED_MODULE_204__.nonMaxSuppressionWithScore,
    nonMaxSuppressionWithScoreAsync: _image_non_max_suppression_with_score_async__WEBPACK_IMPORTED_MODULE_205__.nonMaxSuppressionWithScoreAsync,
    nonMaxSuppressionPadded: _image_non_max_suppression_padded__WEBPACK_IMPORTED_MODULE_206__.nonMaxSuppressionPadded,
    nonMaxSuppressionPaddedAsync: _image_non_max_suppression_padded_async__WEBPACK_IMPORTED_MODULE_207__.nonMaxSuppressionPaddedAsync
};
// linalg namespace



const linalg = {
    bandPart: _linalg_band_part__WEBPACK_IMPORTED_MODULE_208__.bandPart,
    gramSchmidt: _linalg_gram_schmidt__WEBPACK_IMPORTED_MODULE_209__.gramSchmidt,
    qr: _linalg_qr__WEBPACK_IMPORTED_MODULE_210__.qr
};
// losses namespace;









const losses = {
    absoluteDifference: _losses_absolute_difference__WEBPACK_IMPORTED_MODULE_211__.absoluteDifference,
    computeWeightedLoss: _losses_compute_weighted_loss__WEBPACK_IMPORTED_MODULE_212__.computeWeightedLoss,
    cosineDistance: _losses_cosine_distance__WEBPACK_IMPORTED_MODULE_213__.cosineDistance,
    hingeLoss: _losses_hinge_loss__WEBPACK_IMPORTED_MODULE_214__.hingeLoss,
    huberLoss: _losses_huber_loss__WEBPACK_IMPORTED_MODULE_215__.huberLoss,
    logLoss: _losses_log_loss__WEBPACK_IMPORTED_MODULE_216__.logLoss,
    meanSquaredError: _losses_mean_squared_error__WEBPACK_IMPORTED_MODULE_217__.meanSquaredError,
    sigmoidCrossEntropy: _losses_sigmoid_cross_entropy__WEBPACK_IMPORTED_MODULE_218__.sigmoidCrossEntropy,
    softmaxCrossEntropy: _losses_softmax_cross_entropy__WEBPACK_IMPORTED_MODULE_219__.softmaxCrossEntropy
};
// Second level exports.

//# sourceMappingURL=ops.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/outer_product.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "outerProduct": () => (/* binding */ outerProduct)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");





/**
 * Computes the outer product of two vectors, `v1` and `v2`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 * const b = tf.tensor1d([3, 4, 5]);
 *
 * tf.outerProduct(a, b).print();
 * ```
 * @param v1 The first vector in the outer product operation.
 * @param v2 The second vector in the outer product operation.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function outerProduct_(v1, v2) {
    const $v1 = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(v1, 'v1', 'outerProduct');
    const $v2 = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(v2, 'v2', 'outerProduct');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($v1.rank === 1 && $v2.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ` +
        `${$v1.rank} and ${$v2.rank}.`);
    const v12D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($v1, [-1, 1]);
    const v22D = (0,_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)($v2, [1, -1]);
    return (0,_mat_mul__WEBPACK_IMPORTED_MODULE_3__.matMul)(v12D, v22D);
}
const outerProduct = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ outerProduct_ });
//# sourceMappingURL=outer_product.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pad": () => (/* binding */ pad)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Pads a `tf.Tensor` with a given value and paddings.
 *
 * This operation implements `CONSTANT` mode. For `REFLECT` and `SYMMETRIC`,
 * refer to `tf.mirrorPad`
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `paddings` is of given length.
 *   - `tf.pad1d`
 *   - `tf.pad2d`
 *   - `tf.pad3d`
 *   - `tf.pad4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.pad([[1, 2]]).print();
 * ```
 * @param x The tensor to pad.
 * @param paddings An array of length `R` (the rank of the tensor), where
 * each element is a length-2 tuple of ints `[padBefore, padAfter]`,
 * specifying how much to pad along each dimension of the tensor.
 * @param constantValue The pad value to use. Defaults to 0.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function pad_(x, paddings, constantValue = 0) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'pad');
    if ($x.rank === 0) {
        throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');
    }
    const attrs = { paddings, constantValue };
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.PadV2, inputs, attrs);
}
const pad = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ pad_ });
//# sourceMappingURL=pad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pad1d.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pad1d": () => (/* binding */ pad1d)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");



/**
 * Pads a `tf.Tensor1D` with a given value and paddings. See `pad` for details.
 */
function pad1d_(x, paddings, constantValue = 0) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(paddings.length === 2, () => 'Invalid number of paddings. Must be length of 2.');
    return (0,_pad__WEBPACK_IMPORTED_MODULE_1__.pad)(x, [paddings], constantValue);
}
const pad1d = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ pad1d_ });
//# sourceMappingURL=pad1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pad2d.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pad2d": () => (/* binding */ pad2d)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");



/**
 * Pads a `tf.Tensor2D` with a given value and paddings. See `pad` for details.
 */
function pad2d_(x, paddings, constantValue = 0) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(paddings.length === 2 && paddings[0].length === 2 &&
        paddings[1].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
    return (0,_pad__WEBPACK_IMPORTED_MODULE_1__.pad)(x, paddings, constantValue);
}
const pad2d = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ pad2d_ });
//# sourceMappingURL=pad2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pad3d.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pad3d": () => (/* binding */ pad3d)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");



/**
 * Pads a `tf.Tensor3D` with a given value and paddings. See `pad` for details.
 */
function pad3d_(x, paddings, constantValue = 0) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(paddings.length === 3 && paddings[0].length === 2 &&
        paddings[1].length === 2 && paddings[2].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
    return (0,_pad__WEBPACK_IMPORTED_MODULE_1__.pad)(x, paddings, constantValue);
}
const pad3d = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ pad3d_ });
//# sourceMappingURL=pad3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pad4d.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pad4d": () => (/* binding */ pad4d)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");



/**
 * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.
 */
function pad4d_(x, paddings, constantValue = 0) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(paddings.length === 4 && paddings[0].length === 2 &&
        paddings[1].length === 2 && paddings[2].length === 2 &&
        paddings[3].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');
    return (0,_pad__WEBPACK_IMPORTED_MODULE_1__.pad)(x, paddings, constantValue);
}
const pad4d = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ pad4d_ });
//# sourceMappingURL=pad4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pool": () => (/* binding */ pool)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _avg_pool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./avg_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js");
/* harmony import */ var _batch_to_space_nd__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./batch_to_space_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js");
/* harmony import */ var _conv_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conv_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv_util.js");
/* harmony import */ var _max_pool__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./max_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _space_to_batch_nd__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./space_to_batch_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */









/**
 * Performs an N-D pooling operation
 *
 * @param input The input tensor, of rank 4 or rank 3 of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.
 * @param windowShape The filter size: `[filterHeight, filterWidth]`. If
 *     `filterSize` is a single number, then `filterHeight == filterWidth`.
 * @param poolingType The type of pooling, either 'max' or 'avg'.
 * @param pad The type of padding algorithm:
 *    - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *    - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *    - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *         https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in dilated pooling. Defaults to `[1, 1]`. If `dilationRate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If
 *     `strides` is a single number, then `strideHeight == strideWidth`.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function pool_(input, windowShape, poolingType, pad, dilations, strides) {
    if (dilations == null) {
        dilations = [1, 1];
    }
    if (strides == null) {
        strides = 1;
    }
    if (pad === 0) {
        pad = 'valid';
    }
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(input, 'x', 'maxPool');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(_conv_util__WEBPACK_IMPORTED_MODULE_3__.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in pool: Either strides or dilations must be 1. ' +
        `Got strides ${strides} and dilations '${dilations}'`);
    const convInfo = _conv_util__WEBPACK_IMPORTED_MODULE_3__.computePool2DInfo(x4D.shape, windowShape, strides, dilations, pad);
    const dilation = [convInfo.dilationHeight, convInfo.dilationWidth];
    // The following implementation does batchToSpace(pool(spaceToBatch(x)))
    // whenever dilation > 1 since the TF kernels do not support dilation > 1.
    // tslint:disable-next-line:max-line-length
    // https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L1037
    let basePadding;
    if (pad === 'same') {
        basePadding = withSpaceToBatchBasePaddings([convInfo.filterHeight, convInfo.filterWidth], dilation);
    }
    else {
        basePadding = [[0, 0], [0, 0]];
    }
    const isDilationOne = dilation[0] === 1 && dilation[1] === 1;
    const [adjustedPadding, adjustedCrops] = requiredSpaceToBatchPaddings([convInfo.inHeight, convInfo.inWidth], dilation, basePadding);
    const convertedPad = isDilationOne ? pad : 'valid';
    const convertedX = isDilationOne ? x4D : (0,_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_4__.spaceToBatchND)(x4D, dilation, adjustedPadding);
    const forwardOp = poolingType === 'avg' ?
        () => (0,_avg_pool__WEBPACK_IMPORTED_MODULE_5__.avgPool)(convertedX, windowShape, strides, convertedPad) :
        () => (0,_max_pool__WEBPACK_IMPORTED_MODULE_6__.maxPool)(convertedX, windowShape, strides, convertedPad);
    const y = forwardOp();
    const res = isDilationOne ? y : (0,_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_7__.batchToSpaceND)(y, dilation, adjustedCrops);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
// Helper function to compute crops and paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/array_ops.py#L2184
function requiredSpaceToBatchPaddings(inputShape, blockShape, basePadding) {
    const padStart = basePadding.map(b => b[0]);
    const origPadEnd = basePadding.map(b => b[1]);
    const fullInputShape = inputShape.concat(padStart, origPadEnd);
    const padEndExtra = blockShape.map((b, i) => (b - fullInputShape[i] % b) % b);
    const padEnd = origPadEnd.map((s, i) => s + padEndExtra[i]);
    const paddings = blockShape.map((_, i) => [padStart[i], padEnd[i]]);
    const crops = blockShape.map((_, i) => [0, padEndExtra[i]]);
    return [paddings, crops];
}
// Helper function to compute base paddings for pool with dilation > 1.
// tslint:disable-next-line:max-line-length
// https://github.com/tensorflow/tensorflow/blob/50f6bb67dc98c9b74630b6047aae7a4f8a40fd02/tensorflow/python/ops/nn_ops.py#L524
function withSpaceToBatchBasePaddings(filterShape, dilation) {
    // Spatial dimensions of the filters and the upsampled filters in which we
    // introduce (rate - 1) zeros between consecutive filter values.
    const dilatedFilterShape = filterShape.map((s, i) => {
        return s + (s - 1) * (dilation[i] - 1);
    });
    const padExtraShape = dilatedFilterShape.map(s => s - 1);
    // When padding is odd, we pad more at end, following the same
    // convention as conv2d.
    const padExtraStart = padExtraShape.map(s => Math.floor(s / 2));
    const padExtraEnd = padExtraShape.map((s, i) => s - padExtraStart[i]);
    return padExtraShape.map((_, i) => {
        return [padExtraStart[i], padExtraEnd[i]];
    });
}
const pool = (0,_operation__WEBPACK_IMPORTED_MODULE_8__.op)({ pool_ });
//# sourceMappingURL=pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pow": () => (/* binding */ pow)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the power of one `tf.Tensor` to another. Supports broadcasting.
 *
 * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for
 * corresponding elements in x and y. The result's dtype will be the upcasted
 * type of the `base` and `exp` dtypes.
 *
 * ```js
 * const a = tf.tensor([[2, 3], [4, 5]])
 * const b = tf.tensor([[1, 2], [3, 0]]).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 *
 * ```js
 * const a = tf.tensor([[1, 2], [3, 4]])
 * const b = tf.tensor(2).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 * We also expose `powStrict` which has the same signature as this op and
 * asserts that `base` and `exp` are the same shape (does not broadcast).
 *
 * @param base The base `tf.Tensor` to pow element-wise.
 * @param exp The exponent `tf.Tensor` to pow element-wise.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function pow_(base, exp) {
    let $base = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(base, 'base', 'pow');
    let $exp = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(exp, 'exp', 'pow');
    [$base, $exp] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($base, $exp);
    const inputs = { a: $base, b: $exp };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Pow, inputs);
}
const pow = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ pow_ });
//# sourceMappingURL=pow.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prelu": () => (/* binding */ prelu)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes leaky rectified linear element-wise with parametric alphas.
 *
 * `x < 0 ? alpha * x : f(x) = x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 * const alpha = tf.scalar(0.1);
 *
 * x.prelu(alpha).print();  // or tf.prelu(x, alpha)
 * ```
 * @param x The input tensor.
 * @param alpha Scaling factor for negative values.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function prelu_(x, alpha) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'prelu');
    const $alpha = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(alpha, 'alpha', 'prelu');
    const inputs = { x: $x, alpha: $alpha };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Prelu, inputs);
}
const prelu = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ prelu_ });
//# sourceMappingURL=prelu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/print.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/print.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "print": () => (/* binding */ print)
/* harmony export */ });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Prints information about the `tf.Tensor` including its data.
 *
 * ```js
 * const verbose = true;
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print(verbose);
 * ```
 * @param x The tensor to be printed.
 * @param verbose Whether to print verbose information about the ` Tensor`,
 * including dtype and size.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function print(x, verbose = false) {
    console.log(x.toString(verbose));
}
//# sourceMappingURL=print.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/prod.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/prod.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prod": () => (/* binding */ prod)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the product of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.prod().print();  // or tf.prod(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.prod(axis).print();  // or tf.prod(x, axis)
 * ```
 *
 * @param x The input tensor to compute the product over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function prod_(x, axis = null, keepDims = false) {
    let $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'prod');
    if ($x.dtype === 'bool') {
        // bool is not an allowed type for the underlying kernel.
        $x = (0,_cast__WEBPACK_IMPORTED_MODULE_2__.cast)($x, 'int32');
    }
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Prod, inputs, attrs);
}
const prod = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ prod_ });
//# sourceMappingURL=prod.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/rand.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rand": () => (/* binding */ rand)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with values sampled from a random number generator
 * function defined by the user.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param randFunction A random number generator function which is called
 * for each element in the output tensor.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 */
function rand_(shape, randFunction, dtype) {
    const size = (0,_util__WEBPACK_IMPORTED_MODULE_1__.sizeFromShape)(shape);
    let values = null;
    if (dtype == null || dtype === 'float32') {
        values = new Float32Array(size);
    }
    else if (dtype === 'int32') {
        values = new Int32Array(size);
    }
    else if (dtype === 'bool') {
        values = new Uint8Array(size);
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
    for (let i = 0; i < size; i++) {
        values[i] = randFunction();
    }
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.makeTensor(values, shape, dtype);
}
const rand = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ rand_ });
//# sourceMappingURL=rand.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MPRandGauss": () => (/* binding */ MPRandGauss),
/* harmony export */   "RandGamma": () => (/* binding */ RandGamma),
/* harmony export */   "UniformRandom": () => (/* binding */ UniformRandom),
/* harmony export */   "jarqueBeraNormalityTest": () => (/* binding */ jarqueBeraNormalityTest),
/* harmony export */   "expectArrayInMeanStdRange": () => (/* binding */ expectArrayInMeanStdRange)
/* harmony export */ });
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! seedrandom */ "./node_modules/seedrandom/index.js");
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(seedrandom__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _test_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../test_util */ "./node_modules/@tensorflow/tfjs-core/dist/test_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


// https://en.wikipedia.org/wiki/Marsaglia_polar_method
class MPRandGauss {
    constructor(mean, stdDeviation, dtype, truncated, seed) {
        this.mean = mean;
        this.stdDev = stdDeviation;
        this.dtype = dtype;
        this.nextVal = NaN;
        this.truncated = truncated;
        if (this.truncated) {
            this.upper = this.mean + this.stdDev * 2;
            this.lower = this.mean - this.stdDev * 2;
        }
        const seedValue = seed ? seed : Math.random();
        this.random = seedrandom__WEBPACK_IMPORTED_MODULE_0__.alea(seedValue.toString());
    }
    /** Returns next sample from a Gaussian distribution. */
    nextValue() {
        if (!isNaN(this.nextVal)) {
            const value = this.nextVal;
            this.nextVal = NaN;
            return value;
        }
        let resultX, resultY;
        let isValid = false;
        while (!isValid) {
            let v1, v2, s;
            do {
                v1 = 2 * this.random() - 1;
                v2 = 2 * this.random() - 1;
                s = v1 * v1 + v2 * v2;
            } while (s >= 1 || s === 0);
            const mul = Math.sqrt(-2.0 * Math.log(s) / s);
            resultX = this.mean + this.stdDev * v1 * mul;
            resultY = this.mean + this.stdDev * v2 * mul;
            if (!this.truncated || this.isValidTruncated(resultX)) {
                isValid = true;
            }
        }
        if (!this.truncated || this.isValidTruncated(resultY)) {
            this.nextVal = this.convertValue(resultY);
        }
        return this.convertValue(resultX);
    }
    /** Handles proper rounding for non-floating-point numbers. */
    convertValue(value) {
        if (this.dtype == null || this.dtype === 'float32') {
            return value;
        }
        return Math.round(value);
    }
    /** Returns true if less than 2-standard-deviations from the mean. */
    isValidTruncated(value) {
        return value <= this.upper && value >= this.lower;
    }
}
// Marsaglia, George, and Wai Wan Tsang. 2000. "A Simple Method for Generating
// Gamma Variables."
class RandGamma {
    constructor(alpha, beta, dtype, seed) {
        this.alpha = alpha;
        this.beta = 1 / beta; // convert rate to scale parameter
        this.dtype = dtype;
        const seedValue = seed ? seed : Math.random();
        this.randu = seedrandom__WEBPACK_IMPORTED_MODULE_0__.alea(seedValue.toString());
        this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());
        if (alpha < 1) {
            this.d = alpha + (2 / 3);
        }
        else {
            this.d = alpha - (1 / 3);
        }
        this.c = 1 / Math.sqrt(9 * this.d);
    }
    /** Returns next sample from a gamma distribution. */
    nextValue() {
        let x2, v0, v1, x, u, v;
        while (true) {
            do {
                x = this.randn.nextValue();
                v = 1 + (this.c * x);
            } while (v <= 0);
            v *= v * v;
            x2 = x * x;
            v0 = 1 - (0.331 * x2 * x2);
            v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));
            u = this.randu();
            if (u < v0 || Math.log(u) < v1) {
                break;
            }
        }
        v = (1 / this.beta) * this.d * v;
        if (this.alpha < 1) {
            v *= Math.pow(this.randu(), 1 / this.alpha);
        }
        return this.convertValue(v);
    }
    /** Handles proper rounding for non-floating-point numbers. */
    convertValue(value) {
        if (this.dtype === 'float32') {
            return value;
        }
        return Math.round(value);
    }
}
class UniformRandom {
    constructor(min = 0, max = 1, dtype, seed) {
        /** Handles proper rounding for non floating point numbers. */
        this.canReturnFloat = () => (this.dtype == null || this.dtype === 'float32');
        this.min = min;
        this.range = max - min;
        this.dtype = dtype;
        if (seed == null) {
            seed = Math.random();
        }
        if (typeof seed === 'number') {
            seed = seed.toString();
        }
        if (!this.canReturnFloat() && this.range <= 1) {
            throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);
        }
        this.random = seedrandom__WEBPACK_IMPORTED_MODULE_0__.alea(seed);
    }
    convertValue(value) {
        if (this.canReturnFloat()) {
            return value;
        }
        return Math.round(value);
    }
    nextValue() {
        return this.convertValue(this.min + this.range * this.random());
    }
}
function jarqueBeraNormalityTest(values) {
    // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test
    const n = values.length;
    const s = skewness(values);
    const k = kurtosis(values);
    const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));
    // JB test requires 2-degress of freedom from Chi-Square @ 0.95:
    // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm
    const CHI_SQUARE_2DEG = 5.991;
    if (jb > CHI_SQUARE_2DEG) {
        throw new Error(`Invalid p-value for JB: ${jb}`);
    }
}
function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {
    if (epsilon == null) {
        epsilon = (0,_test_util__WEBPACK_IMPORTED_MODULE_1__.testEpsilon)();
    }
    const actualMean = mean(actual);
    (0,_test_util__WEBPACK_IMPORTED_MODULE_1__.expectNumbersClose)(actualMean, expectedMean, epsilon);
    (0,_test_util__WEBPACK_IMPORTED_MODULE_1__.expectNumbersClose)(standardDeviation(actual, actualMean), expectedStdDev, epsilon);
}
function mean(values) {
    let sum = 0;
    for (let i = 0; i < values.length; i++) {
        sum += values[i];
    }
    return sum / values.length;
}
function standardDeviation(values, mean) {
    let squareDiffSum = 0;
    for (let i = 0; i < values.length; i++) {
        const diff = values[i] - mean;
        squareDiffSum += diff * diff;
    }
    return Math.sqrt(squareDiffSum / values.length);
}
function kurtosis(values) {
    // https://en.wikipedia.org/wiki/Kurtosis
    const valuesMean = mean(values);
    const n = values.length;
    let sum2 = 0;
    let sum4 = 0;
    for (let i = 0; i < n; i++) {
        const v = values[i] - valuesMean;
        sum2 += Math.pow(v, 2);
        sum4 += Math.pow(v, 4);
    }
    return (1 / n) * sum4 / Math.pow((1 / n) * sum2, 2);
}
function skewness(values) {
    // https://en.wikipedia.org/wiki/Skewness
    const valuesMean = mean(values);
    const n = values.length;
    let sum2 = 0;
    let sum3 = 0;
    for (let i = 0; i < n; i++) {
        const v = values[i] - valuesMean;
        sum2 += Math.pow(v, 2);
        sum3 += Math.pow(v, 3);
    }
    return (1 / n) * sum3 / Math.pow((1 / (n - 1)) * sum2, 3 / 2);
}
//# sourceMappingURL=rand_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/random_gamma.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "randomGamma": () => (/* binding */ randomGamma)
/* harmony export */ });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _rand_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rand_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with values sampled from a gamma distribution.
 *
 * ```js
 * tf.randomGamma([2, 2], 1).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param alpha The shape parameter of the gamma distribution.
 * @param beta The inverse scale parameter of the gamma distribution. Defaults
 *     to 1.
 * @param dtype The data type of the output. Defaults to float32.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomGamma_(shape, alpha, beta = 1, dtype = 'float32', seed) {
    if (beta == null) {
        beta = 1;
    }
    if (dtype == null) {
        dtype = 'float32';
    }
    if (dtype !== 'float32' && dtype !== 'int32') {
        throw new Error(`Unsupported data type ${dtype}`);
    }
    const rgamma = new _rand_util__WEBPACK_IMPORTED_MODULE_0__.RandGamma(alpha, beta, dtype, seed);
    const res = (0,_buffer__WEBPACK_IMPORTED_MODULE_1__.buffer)(shape, dtype);
    for (let i = 0; i < res.values.length; i++) {
        res.values[i] = rgamma.nextValue();
    }
    return res.toTensor();
}
const randomGamma = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ randomGamma_ });
//# sourceMappingURL=random_gamma.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_normal.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/random_normal.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "randomNormal": () => (/* binding */ randomNormal)
/* harmony export */ });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _rand_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rand_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with values sampled from a normal distribution.
 *
 * ```js
 * tf.randomNormal([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
    if (dtype != null && dtype === 'bool') {
        throw new Error(`Unsupported data type ${dtype}`);
    }
    const randGauss = new _rand_util__WEBPACK_IMPORTED_MODULE_0__.MPRandGauss(mean, stdDev, dtype, false /* truncated */, seed);
    const res = (0,_buffer__WEBPACK_IMPORTED_MODULE_1__.buffer)(shape, dtype);
    for (let i = 0; i < res.values.length; i++) {
        res.values[i] = randGauss.nextValue();
    }
    return res.toTensor();
}
const randomNormal = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ randomNormal_ });
//# sourceMappingURL=random_normal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/random_uniform.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "randomUniform": () => (/* binding */ randomUniform)
/* harmony export */ });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _rand_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rand_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with values sampled from a uniform distribution.
 *
 * The generated values follow a uniform distribution in the range [minval,
 * maxval). The lower bound minval is included in the range, while the upper
 * bound maxval is excluded.
 *
 * ```js
 * tf.randomUniform([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param minval The lower bound on the range of random values to generate.
 *   Defaults to 0.
 * @param maxval The upper bound on the range of random values to generate.
 *   Defaults to 1.
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Random'}
 */
function randomUniform_(shape, minval = 0, maxval = 1, dtype = 'float32', seed) {
    const res = (0,_buffer__WEBPACK_IMPORTED_MODULE_0__.buffer)(shape, dtype);
    const random = new _rand_util__WEBPACK_IMPORTED_MODULE_1__.UniformRandom(minval, maxval, null, seed);
    for (let i = 0; i < res.values.length; i++) {
        res.values[i] = random.nextValue();
    }
    return res.toTensor();
}
const randomUniform = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ randomUniform_ });
//# sourceMappingURL=random_uniform.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/range.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/range.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "range": () => (/* binding */ range)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Creates a new `tf.Tensor1D` filled with the numbers in the range provided.
 *
 * The tensor is a is half-open interval meaning it includes start, but
 * excludes stop. Decrementing ranges and negative step values are also
 * supported.sv
 *
 *
 * ```js
 * tf.range(0, 9, 2).print();
 * ```
 *
 * @param start An integer start value
 * @param stop An integer stop value
 * @param step An integer increment (will default to 1 or -1)
 * @param dtype The data type of the output tensor. Defaults to 'float32'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function range(start, stop, step = 1, dtype = 'float32') {
    if (step === 0) {
        throw new Error('Cannot have a step of zero');
    }
    const attrs = { start, stop, step, dtype };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_1__.Range, {} /* inputs */, attrs);
}
//# sourceMappingURL=range.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/real.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/real.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "real": () => (/* binding */ real)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns the real part of a complex (or real) tensor.
 *
 * Given a tensor input, this operation returns a tensor of type float that is
 * the real part of each element in input considered as a complex number.
 *
 * If the input is real, it simply makes a clone.
 *
 * ```js
 * const x = tf.complex([-2.25, 3.25], [4.75, 5.75]);
 * tf.real(x).print();
 * ```
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function real_(input) {
    const $input = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(input, 'input', 'real');
    const inputs = { input: $input };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Real, inputs);
}
const real = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ real_ });
//# sourceMappingURL=real.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reciprocal": () => (/* binding */ reciprocal)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes reciprocal of x element-wise: `1 / x`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, 2]);
 *
 * x.reciprocal().print();  // or tf.reciprocal(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function reciprocal_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'reciprocal');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Reciprocal, inputs);
}
const reciprocal = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ reciprocal_ });
//# sourceMappingURL=reciprocal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PARALLELIZE_THRESHOLD": () => (/* binding */ PARALLELIZE_THRESHOLD),
/* harmony export */   "computeOptimalWindowSize": () => (/* binding */ computeOptimalWindowSize)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Inputs of size above this threshold will be parallelized by calling multiple
 * shader programs.
 */

const PARALLELIZE_THRESHOLD = 30;
function computeOptimalWindowSize(inSize) {
    if (inSize <= PARALLELIZE_THRESHOLD) {
        return inSize;
    }
    return (0,_util__WEBPACK_IMPORTED_MODULE_0__.nearestDivisor)(inSize, Math.floor(Math.sqrt(inSize)));
}
//# sourceMappingURL=reduce_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "relu": () => (/* binding */ relu)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes rectified linear element-wise: `max(x, 0)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.relu().print();  // or tf.relu(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function relu_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'relu');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Relu, inputs);
}
const relu = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ relu_ });
//# sourceMappingURL=relu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "relu6": () => (/* binding */ relu6)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes rectified linear 6 element-wise: `min(max(x, 0), 6)`.
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 8]);
 *
 * x.relu6().print();  // or tf.relu6(x)
 * ```
 * @param x The input tensor. If the dtype is `bool`, the output dtype will be
 *     `int32'.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function relu6_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'relu6');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Relu6, inputs);
}
const relu6 = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ relu6_ });
//# sourceMappingURL=relu6.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reshape": () => (/* binding */ reshape)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Reshapes a `tf.Tensor` to a given shape.
 *
 * Given an input tensor, returns a new tensor with the same values as the
 * input tensor with shape `shape`.
 *
 * If one component of shape is the special value -1, the size of that
 * dimension is computed so that the total size remains constant. In
 * particular, a shape of [-1] flattens into 1-D. At most one component of
 * shape can be -1.
 *
 * If shape is 1-D or higher, then the operation returns a tensor with shape
 * shape filled with the values of tensor. In this case, the number of
 * elements implied by shape must be the same as the number of elements in
 * tensor.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.reshape([2, 2]).print();
 * ```
 *
 * @param x The input tensor to be reshaped.
 * @param shape An array of integers defining the output tensor shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function reshape_(x, shape) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'reshape', 'string_or_numeric');
    const inputs = { x: $x };
    const attrs = { shape };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Reshape, inputs, attrs);
}
const reshape = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ reshape_ });
//# sourceMappingURL=reshape.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reverse": () => (/* binding */ reverse)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Reverses a `tf.Tensor` along a specified axis.
 *
 * Also available are stricter rank-specific methods that assert that `x` is
 * of the given rank:
 *   - `tf.reverse1d`
 *   - `tf.reverse2d`
 *   - `tf.reverse3d`
 *   - `tf.reverse4d`
 *
 * Except `tf.reverse1d` (which does not have axis param), all methods have
 * same signature as this method.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.reverse().print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.reverse(axis).print();
 * ```
 * @param x The input tensor to be reversed.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function reverse_(x, axis) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'reverse');
    const inputs = { x: $x };
    const attrs = { dims: axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Reverse, inputs, attrs);
}
const reverse = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ reverse_ });
//# sourceMappingURL=reverse.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_1d.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_1d.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reverse1d": () => (/* binding */ reverse1d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Reverses a `tf.Tensor1D`.
 *
 * @param x The input tensor.
 */
function reverse1d_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'reverse');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${$x.rank}.`);
    return (0,_reverse__WEBPACK_IMPORTED_MODULE_2__.reverse)($x, 0);
}
const reverse1d = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ reverse1d_ });
//# sourceMappingURL=reverse_1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_2d.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_2d.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reverse2d": () => (/* binding */ reverse2d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Reverses a `tf.Tensor2D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse2d_(x, axis) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'reverse');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${$x.rank}.`);
    return (0,_reverse__WEBPACK_IMPORTED_MODULE_2__.reverse)($x, axis);
}
const reverse2d = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ reverse2d_ });
//# sourceMappingURL=reverse_2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_3d.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_3d.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reverse3d": () => (/* binding */ reverse3d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Reverses a `tf.Tensor3D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse3d_(x, axis) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'reverse');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${$x.rank}.`);
    return (0,_reverse__WEBPACK_IMPORTED_MODULE_2__.reverse)($x, axis);
}
const reverse3d = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ reverse3d_ });
//# sourceMappingURL=reverse_3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_4d.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/reverse_4d.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reverse4d": () => (/* binding */ reverse4d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Reverses a `tf.Tensor4D` along a specified axis.
 *
 * @param x The input tensor.
 * @param axis The set of dimensions to reverse. Must be in the
 *     range [-rank(x), rank(x)). Defaults to all axes.
 */
function reverse4d_(x, axis) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'reverse');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${$x.rank}.`);
    return (0,_reverse__WEBPACK_IMPORTED_MODULE_2__.reverse)($x, axis);
}
const reverse4d = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ reverse4d_ });
//# sourceMappingURL=reverse_4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/rotate_util.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getImageCenter": () => (/* binding */ getImageCenter)
/* harmony export */ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Returns the image center in pixels.
function getImageCenter(center, imageHeight, imageWidth) {
    const centerX = imageWidth * (typeof center === 'number' ? center : center[0]);
    const centerY = imageHeight * (typeof center === 'number' ? center : center[1]);
    return [centerX, centerY];
}
//# sourceMappingURL=rotate_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/round.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/round.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "round": () => (/* binding */ round)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes round of input `tf.Tensor` element-wise: `round(x)`.
 * It implements banker's rounding.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3]);
 *
 * x.round().print();  // or tf.round(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function round_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'round');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Round, inputs);
}
const round = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ round_ });
//# sourceMappingURL=round.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rsqrt": () => (/* binding */ rsqrt)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes reciprocal of square root of the input `tf.Tensor` element-wise:
 * `y = 1 / sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.rsqrt().print();  // or tf.rsqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function rsqrt_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'rsqrt');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Rsqrt, inputs);
}
const rsqrt = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ rsqrt_ });
//# sourceMappingURL=rsqrt.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scalar": () => (/* binding */ scalar)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.scalar` as it makes the code more readable.
 *
 * ```js
 * tf.scalar(3.14).print();
 * ```
 *
 * @param value The value of the scalar.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function scalar(value, dtype) {
    if ((((0,_util__WEBPACK_IMPORTED_MODULE_0__.isTypedArray)(value) && dtype !== 'string') || Array.isArray(value)) &&
        dtype !== 'complex64') {
        throw new Error('Error creating a new Scalar: value must be a primitive ' +
            '(number|boolean|string)');
    }
    if (dtype === 'string' && (0,_util__WEBPACK_IMPORTED_MODULE_0__.isTypedArray)(value) &&
        !(value instanceof Uint8Array)) {
        throw new Error('When making a scalar from encoded string, ' +
            'the value must be `Uint8Array`.');
    }
    const shape = [];
    const inferredShape = [];
    return (0,_tensor_ops_util__WEBPACK_IMPORTED_MODULE_1__.makeTensor)(value, shape, inferredShape, dtype);
}
//# sourceMappingURL=scalar.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scatterND": () => (/* binding */ scatterND)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _scatter_nd_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scatter_nd_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Creates a new tensor by applying sparse updates to individual
 * values or slices within a zero tensor of the given shape tensor according to
 * indices. This operator is the inverse of the `tf.gatherND` operator which
 * extracts values or slices from a given tensor.
 *
 * ```js
 * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');
 * const updates = tf.tensor1d([9, 10, 11, 12]);
 * const shape = [8];
 * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]
 * ```
 *
 * @param indices The tensor contains the indices into the output tensor.
 * @param updates The tensor contains the value for the indices.
 * @param shape: The shape of the output tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function scatterND_(indices, updates, shape) {
    const $indices = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(indices, 'indices', 'scatterND', 'int32');
    const $updates = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(updates, 'updates', 'scatterND');
    _scatter_nd_util__WEBPACK_IMPORTED_MODULE_2__.validateInput($updates, $indices, shape);
    const inputs = { indices: $indices, updates: $updates };
    const attrs = { shape };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.ScatterNd, inputs, attrs);
}
const scatterND = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ scatterND_ });
//# sourceMappingURL=scatter_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/scatter_nd_util.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "validateUpdateShape": () => (/* binding */ validateUpdateShape),
/* harmony export */   "validateInput": () => (/* binding */ validateInput),
/* harmony export */   "calculateShapes": () => (/* binding */ calculateShapes)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");

/**
 * Check whether updates.shape = indices.shape[:batchDim] +
 * shape[sliceDim:]
 *
 * @param x The input tensor.
 */
function validateUpdateShape(shape, indices, updates) {
    const sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;
    const batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;
    const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +
        `shape[sliceDim:], got updates.shape: ${updates.shape}` +
        `, indices.shape: ${indices.shape}, shape: ${shape}` +
        `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;
    if (updates.rank < batchDim) {
        throw new Error(shapeError + ` update.rank < ${batchDim}. `);
    }
    if (shape.length < sliceDim + (updates.rank - batchDim)) {
        throw new Error(shapeError +
            ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);
    }
    if (updates.rank !== batchDim + shape.length - sliceDim) {
        throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);
    }
    for (let d = 0; d < batchDim; ++d) {
        if (updates.shape[d] !== indices.shape[d]) {
            throw new Error(shapeError +
                ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);
        }
    }
    for (let d = 0; d < updates.rank - batchDim; ++d) {
        if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {
            throw new Error(shapeError +
                ` updates.shape[${d + batchDim}] (${updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${shape[d + batchDim]})`);
        }
    }
}
/**
 * Validate scatter nd inputs.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 */
function validateInput(updates, indices, shape) {
    if (indices.rank < 1) {
        throw new Error('tf.scatterND() expects the indices to be rank 1 or higher,' +
            ` but the rank was ${indices.rank}.`);
    }
    if (updates.rank < 1) {
        throw new Error('tf.scatterND() expects the updates to be rank 1 or higher,' +
            ` but the rank was ${updates.rank}.`);
    }
    if (indices.dtype !== 'int32') {
        throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);
    }
    if (shape.length < 1) {
        throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);
    }
    if (shape.length === 0) {
        if (indices.size === 0) {
            throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);
        }
        if (updates.size === 0) {
            throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);
        }
    }
    validateUpdateShape(shape, indices, updates);
}
/**
 * Calculate the shape information for the output.
 *
 * @param update The tensor contains the update values.
 * @param indices The tensor contains the indices for the update values.
 * @param shape The shape of the output tensor.
 *
 * @returns ScatterShapeInfo
 */
function calculateShapes(updates, indices, shape) {
    // Calculate the number of dimensions in indices
    const indicesRank = indices.shape.length;
    const sliceRank = (indicesRank > 1) ? indices.shape[indicesRank - 1] : 1;
    // Calculate the number of elements that make up each slice of our updated
    // tensor. This allows us to work with flattened tensors and copy over whole
    // slices at a time.
    const totalNd = shape.length;
    let sliceSize = 1;
    for (let i = sliceRank; i < totalNd; ++i) {
        sliceSize *= shape[i];
    }
    const safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;
    const numUpdates = (0,_util__WEBPACK_IMPORTED_MODULE_0__.sizeFromShape)(indices.shape) / safeSliceDim;
    const strides = [...(0,_util__WEBPACK_IMPORTED_MODULE_0__.computeStrides)(shape.slice(0, sliceRank)), 1];
    const outputSize = (0,_util__WEBPACK_IMPORTED_MODULE_0__.sizeFromShape)(shape);
    return { sliceRank, numUpdates, sliceSize, strides, outputSize };
}
//# sourceMappingURL=scatter_nd_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/segment_util.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "segOpComputeOptimalWindowSize": () => (/* binding */ segOpComputeOptimalWindowSize),
/* harmony export */   "computeOutShape": () => (/* binding */ computeOutShape),
/* harmony export */   "collectGatherOpShapeInfo": () => (/* binding */ collectGatherOpShapeInfo)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _reduce_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reduce_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reduce_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


function segOpComputeOptimalWindowSize(inSize, numSegments) {
    let done = false;
    let res;
    if (inSize <= _reduce_util__WEBPACK_IMPORTED_MODULE_0__.PARALLELIZE_THRESHOLD) {
        res = inSize;
        done = true;
    }
    else {
        res = (0,_util__WEBPACK_IMPORTED_MODULE_1__.nearestDivisor)(inSize, Math.floor(Math.sqrt(inSize)));
    }
    while (!done) {
        if (res > numSegments || res === inSize) {
            done = true;
        }
        else {
            res = (0,_util__WEBPACK_IMPORTED_MODULE_1__.nearestDivisor)(inSize, res + 1);
        }
    }
    return res;
}
function computeOutShape(aShape, axis, numSegments) {
    const outShape = [];
    const rank = aShape.length;
    for (let dim = 0; dim < rank; dim++) {
        if (dim !== axis) {
            outShape.push(aShape[dim]);
        }
        else {
            outShape.push(numSegments);
        }
    }
    return outShape;
}
function collectGatherOpShapeInfo(x, indices, axis, batchDims) {
    const indicesRank = indices.shape.length;
    const xRank = x.shape.length;
    if (batchDims !== 0) {
        if (batchDims < -indicesRank || batchDims > indicesRank) {
            throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);
        }
    }
    if (batchDims < 0) {
        batchDims += indicesRank;
    }
    if (batchDims > xRank) {
        throw new Error(`batchDims (${batchDims}) must be less than rank(x) (
    ${xRank}).`);
    }
    if (axis < batchDims) {
        throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);
    }
    for (let i = 0; i < batchDims; ++i) {
        if (x.shape[i] !== indices.shape[i]) {
            throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);
        }
    }
    const dimSize = x.shape[axis];
    const outputShape = [];
    let batchSize = 1;
    let outerSize = 1;
    let sliceSize = 1;
    for (let i = 0; i < batchDims; ++i) {
        outputShape.push(x.shape[i]);
        batchSize *= x.shape[i];
    }
    for (let i = batchDims; i < axis; i++) {
        outputShape.push(x.shape[i]);
        outerSize *= x.shape[i];
    }
    for (let i = batchDims; i < indicesRank; i++) {
        outputShape.push(indices.shape[i]);
    }
    for (let i = axis + 1; i < xRank; i++) {
        outputShape.push(x.shape[i]);
        sliceSize *= x.shape[i];
    }
    return { batchSize, sliceSize, outerSize, dimSize, outputShape };
}
//# sourceMappingURL=segment_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/selu.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selu": () => (/* binding */ selu)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes scaled exponential linear element-wise.
 *
 * `x < 0 ? scale * alpha * (exp(x) - 1) : x`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.selu().print();  // or tf.selu(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function selu_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'selu');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Selu, inputs);
}
const selu = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ selu_ });
//# sourceMappingURL=selu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/selu_util.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SELU_SCALEALPHA": () => (/* binding */ SELU_SCALEALPHA),
/* harmony export */   "SELU_SCALE": () => (/* binding */ SELU_SCALE)
/* harmony export */ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SELU_SCALEALPHA = 1.7580993408473768599402175208123;
const SELU_SCALE = 1.0507009873554804934193349852946;
//# sourceMappingURL=selu_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "separableConv2d": () => (/* binding */ separableConv2d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _conv2d__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _depthwise_conv2d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");






/**
 * 2-D convolution with separable filters.
 *
 * Performs a depthwise convolution that acts separately on channels followed
 * by a pointwise convolution that mixes channels. Note that this is
 * separability between dimensions [1, 2] and 3, not spatial separability
 * between dimensions 1 and 2.
 *
 * See
 * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](
 *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)
 * for more details.
 *
 * @param x The input tensor, of rank 4 or rank 3, of shape
 *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is
 * assumed.
 * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape
 *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is
 *     the filter used in the first step.
 * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape
 *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is
 *     the filter used in the second step.
 * @param strides The strides of the convolution: `[strideHeight,
 * strideWidth]`. If strides is a single number, then `strideHeight ==
 * strideWidth`.
 * @param pad The type of padding algorithm.
 *   - `same` and stride 1: output will be of same size as input,
 *       regardless of filter size.
 *   - `valid`: output will be smaller than input if filter is larger
 *       than 1x1.
 *   - For more info, see this guide:
 *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](
 *          https://www.tensorflow.org/api_guides/python/nn#Convolution)
 * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`
 *     in which we sample input values across the height and width dimensions
 *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single
 *     number, then `dilationHeight == dilationWidth`. If it is greater than
 *     1, then all values of `strides` must be 1.
 * @param dataFormat: An optional string from: "NHWC", "NCHW". Defaults to
 *     "NHWC". Specify the data format of the input and output data. With the
 *     default format "NHWC", the data is stored in the order of: [batch,
 *     height, width, channels]. Only "NHWC" is currently supported.
 *
 * @doc {heading: 'Operations', subheading: 'Convolution'}
 */
function separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad, dilation = [1, 1], dataFormat = 'NHWC') {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'separableConv2d');
    const $depthwiseFilter = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');
    const $pointwiseFilter = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');
    let x4D = $x;
    let reshapedTo4D = false;
    if ($x.rank === 3) {
        reshapedTo4D = true;
        x4D = (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);
    }
    if (dataFormat === 'NCHW') {
        throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' +
            'NHWC is supported');
    }
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(x4D.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got ` +
        `rank ${x4D.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($depthwiseFilter.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but ` +
        `got rank ${$depthwiseFilter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($pointwiseFilter.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but ` +
        `got rank ${$depthwiseFilter.rank}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($pointwiseFilter.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter ` +
        ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($pointwiseFilter.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise ` +
        `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);
    const inChannels = $depthwiseFilter.shape[2];
    const channelMultiplier = $depthwiseFilter.shape[3];
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, () => `Error in separableConv2d: the third dimension of pointwise filter ` +
        `must be ${inChannels * channelMultiplier}, ` +
        `but got ${$pointwiseFilter.shape[2]}.`);
    const depthwise = (0,_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_3__.depthwiseConv2d)(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);
    const pointwiseStride = 1;
    const res = (0,_conv2d__WEBPACK_IMPORTED_MODULE_4__.conv2d)(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);
    if (reshapedTo4D) {
        return (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(res, [res.shape[1], res.shape[2], res.shape[3]]);
    }
    return res;
}
const separableConv2d = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ separableConv2d_ });
//# sourceMappingURL=separable_conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/setdiff1d_async.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setdiff1dAsync": () => (/* binding */ setdiff1dAsync)
/* harmony export */ });
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Computes the difference between two lists of numbers.
 *
 * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`
 * that represents all values that are in `x` but not in `y`. The returned
 * Tensor `out` is sorted in the same order that the numbers appear in `x`
 * (duplicates are preserved). This operation also returns a Tensor indices that
 * represents the position of each out element in `x`. In other words:
 *
 * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`
 *
 * ```js
 * const x = [1, 2, 3, 4, 5, 6];
 * const y = [1, 3, 5];
 *
 * const [out, indices] = await tf.setdiff1dAsync(x, y);
 * out.print(); // [2, 4, 6]
 * indices.print(); // [1, 3, 5]
 * ```
 *
 * @param x 1-D Tensor. Values to keep.
 * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the
 *     output.
 * @returns Promise of Tensor tuple [out, indices].
 *  out: Tensor with the same type as x.
 *  indices: A Tensor of type int32.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
async function setdiff1dAsync_(x, y) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'setdiff1d');
    const $y = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(y, 'y', 'setdiff1d');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);
    const xVals = await $x.data();
    const yVals = await $y.data();
    const ySet = new Set(yVals);
    let outputSize = 0;
    for (let i = 0; i < xVals.length; i++) {
        if (!ySet.has(xVals[i])) {
            outputSize++;
        }
    }
    const buffer = new _tensor__WEBPACK_IMPORTED_MODULE_2__.TensorBuffer([outputSize], $x.dtype);
    const indices = new _tensor__WEBPACK_IMPORTED_MODULE_2__.TensorBuffer([outputSize], 'int32');
    for (let i = 0, p = 0; i < xVals.length; i++) {
        if (!ySet.has(xVals[i])) {
            buffer.values[p] = xVals[i];
            indices.values[p] = i;
            p++;
        }
    }
    return [buffer.toTensor(), indices.toTensor()];
}
const setdiff1dAsync = setdiff1dAsync_;
//# sourceMappingURL=setdiff1d_async.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sigmoid": () => (/* binding */ sigmoid)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes sigmoid element-wise, `1 / (1 + exp(-x))`
 *
 * ```js
 * const x = tf.tensor1d([0, -1, 2, -3]);
 *
 * x.sigmoid().print();  // or tf.sigmoid(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sigmoid_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'sigmoid');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Sigmoid, inputs);
}
const sigmoid = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ sigmoid_ });
//# sourceMappingURL=sigmoid.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sign.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sign.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sign": () => (/* binding */ sign)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Returns an element-wise indication of the sign of a number.
 *
 * ```js
 * const x = tf.tensor1d([.6, 1.1, -3.3, NaN, 0]);
 *
 * x.sign().print();  // or tf.sign(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sign_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'sign');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Sign, inputs);
}
const sign = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ sign_ });
//# sourceMappingURL=sign.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "frame": () => (/* binding */ frame)
/* harmony export */ });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _fill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../fill */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _tensor2d__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tensor2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Expands input into frames of frameLength.
 * Slides a window size with frameStep.
 *
 * ```js
 * tf.signal.frame([1, 2, 3], 2, 1).print();
 * ```
 * @param signal The input tensor to be expanded
 * @param frameLength Length of each frame
 * @param frameStep The frame hop size in samples.
 * @param padEnd Whether to pad the end of signal with padValue.
 * @param padValue An number to use where the input signal does
 *     not exist when padEnd is True.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {
    let start = 0;
    const output = [];
    while (start + frameLength <= signal.size) {
        output.push((0,_slice__WEBPACK_IMPORTED_MODULE_0__.slice)(signal, start, frameLength));
        start += frameStep;
    }
    if (padEnd) {
        while (start < signal.size) {
            const padLen = (start + frameLength) - signal.size;
            const pad = (0,_concat__WEBPACK_IMPORTED_MODULE_1__.concat)([
                (0,_slice__WEBPACK_IMPORTED_MODULE_0__.slice)(signal, start, frameLength - padLen), (0,_fill__WEBPACK_IMPORTED_MODULE_2__.fill)([padLen], padValue)
            ]);
            output.push(pad);
            start += frameStep;
        }
    }
    if (output.length === 0) {
        return (0,_tensor2d__WEBPACK_IMPORTED_MODULE_3__.tensor2d)([], [0, frameLength]);
    }
    return (0,_reshape__WEBPACK_IMPORTED_MODULE_4__.reshape)((0,_concat__WEBPACK_IMPORTED_MODULE_1__.concat)(output), [output.length, frameLength]);
}
const frame = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ frame_ });
//# sourceMappingURL=frame.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hamming_window.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hammingWindow": () => (/* binding */ hammingWindow)
/* harmony export */ });
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _signal_ops_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../signal_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Generate a hamming window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hammingWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function hammingWindow_(windowLength) {
    return (0,_signal_ops_util__WEBPACK_IMPORTED_MODULE_0__.cosineWindow)(windowLength, 0.54, 0.46);
}
const hammingWindow = (0,_operation__WEBPACK_IMPORTED_MODULE_1__.op)({ hammingWindow_ });
//# sourceMappingURL=hamming_window.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hannWindow": () => (/* binding */ hannWindow)
/* harmony export */ });
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _signal_ops_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../signal_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Generate a Hann window.
 *
 * See: https://en.wikipedia.org/wiki/Window_function#Hann_and_Hamming_windows
 *
 * ```js
 * tf.signal.hannWindow(10).print();
 * ```
 * @param The length of window
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function hannWindow_(windowLength) {
    return (0,_signal_ops_util__WEBPACK_IMPORTED_MODULE_0__.cosineWindow)(windowLength, 0.5, 0.5);
}
const hannWindow = (0,_operation__WEBPACK_IMPORTED_MODULE_1__.op)({ hannWindow_ });
//# sourceMappingURL=hann_window.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/signal/stft.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stft": () => (/* binding */ stft)
/* harmony export */ });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _signal_ops_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../signal_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _spectral_rfft__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../spectral/rfft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js");
/* harmony import */ var _frame__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./frame */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/frame.js");
/* harmony import */ var _hann_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hann_window */ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal/hann_window.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/**
 * Computes the Short-time Fourier Transform of signals
 * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform
 *
 * ```js
 * const input = tf.tensor1d([1, 1, 1, 1, 1])
 * tf.signal.stft(input, 3, 1).print();
 * ```
 * @param signal 1-dimensional real value tensor.
 * @param frameLength The window length of samples.
 * @param frameStep The number of samples to step.
 * @param fftLength The size of the FFT to apply.
 * @param windowFn A callable that takes a window length and returns 1-d tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}
 */
function stft_(signal, frameLength, frameStep, fftLength, windowFn = _hann_window__WEBPACK_IMPORTED_MODULE_0__.hannWindow) {
    if (fftLength == null) {
        fftLength = (0,_signal_ops_util__WEBPACK_IMPORTED_MODULE_1__.enclosingPowerOfTwo)(frameLength);
    }
    const framedSignal = (0,_frame__WEBPACK_IMPORTED_MODULE_2__.frame)(signal, frameLength, frameStep);
    const windowedSignal = (0,_mul__WEBPACK_IMPORTED_MODULE_3__.mul)(framedSignal, windowFn(frameLength));
    const output = [];
    for (let i = 0; i < framedSignal.shape[0]; i++) {
        output.push((0,_spectral_rfft__WEBPACK_IMPORTED_MODULE_4__.rfft)((0,_slice__WEBPACK_IMPORTED_MODULE_5__.slice)(windowedSignal, [i, 0], [1, frameLength]), fftLength));
    }
    return (0,_concat__WEBPACK_IMPORTED_MODULE_6__.concat)(output);
}
const stft = (0,_operation__WEBPACK_IMPORTED_MODULE_7__.op)({ stft_ });
//# sourceMappingURL=stft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/signal_ops_util.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "enclosingPowerOfTwo": () => (/* binding */ enclosingPowerOfTwo),
/* harmony export */   "cosineWindow": () => (/* binding */ cosineWindow)
/* harmony export */ });
/* harmony import */ var _tensor1d__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tensor1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function enclosingPowerOfTwo(value) {
    // Return 2**N for integer N such that 2**N >= value.
    return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));
}
function cosineWindow(windowLength, a, b) {
    const even = 1 - windowLength % 2;
    const newValues = new Float32Array(windowLength);
    for (let i = 0; i < windowLength; ++i) {
        const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);
        newValues[i] = a - b * Math.cos(cosArg);
    }
    return (0,_tensor1d__WEBPACK_IMPORTED_MODULE_0__.tensor1d)(newValues, 'float32');
}
//# sourceMappingURL=signal_ops_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sin.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sin.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sin": () => (/* binding */ sin)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes sin of the input Tensor element-wise: `sin(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.sin().print();  // or tf.sin(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sin_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'sin');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Sin, inputs);
}
const sin = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ sin_ });
//# sourceMappingURL=sin.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sinh": () => (/* binding */ sinh)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes hyperbolic sin of the input `tf.Tensor` element-wise: `sinh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.sinh().print();  // or tf.sinh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sinh_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'sinh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Sinh, inputs);
}
const sinh = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ sinh_ });
//# sourceMappingURL=sinh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "slice": () => (/* binding */ slice)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`
 * and is of size `size`.
 *
 * Also available are stricter rank-specific methods with the same signature
 * as this method that assert that `x` is of the given rank:
 *   - `tf.slice1d`
 *   - `tf.slice2d`
 *   - `tf.slice3d`
 *   - `tf.slice4d`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.slice([1], [2]).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * x.slice([1, 0], [1, 2]).print();
 * ```
 * @param x The input `tf.Tensor` to slice from.
 * @param begin The coordinates to start the slice from. The length can be
 *     less than the rank of x - the rest of the axes will have implicit 0 as
 *     start. Can also be a single number, in which case it specifies the
 *     first axis.
 * @param size The size of the slice. The length can be less than the rank of
 *     x - the rest of the axes will have implicit -1. A value of -1 requests
 *     the rest of the dimensions in the axis. Can also be a single number,
 *     in which case it specifies the size of the first axis.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function slice_(x, begin, size) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'slice', 'string_or_numeric');
    if ($x.rank === 0) {
        throw new Error('Slicing scalar is not possible');
    }
    const inputs = { x: $x };
    const attrs = { begin, size };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Slice, inputs, attrs);
}
const slice = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ slice_ });
//# sourceMappingURL=slice.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice1d.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice1d.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "slice1d": () => (/* binding */ slice1d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Extracts a 1D slice from 1D array starting at coordinates `begin` and is
 * of length `size`. See `slice` for details.
 */
function slice1d_(x, begin, size) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'slice1d');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${$x.rank} tensor`);
    return (0,_slice__WEBPACK_IMPORTED_MODULE_2__.slice)($x, [begin], [size]);
}
const slice1d = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ slice1d_ });
//# sourceMappingURL=slice1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice2d.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice2d.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "slice2d": () => (/* binding */ slice2d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Extracts a 2D slice from a 2D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice2d_(x, begin, size) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'slice2d');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${$x.rank} tensor`);
    return (0,_slice__WEBPACK_IMPORTED_MODULE_2__.slice)($x, begin, size);
}
const slice2d = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ slice2d_ });
//# sourceMappingURL=slice2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice3d.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice3d.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "slice3d": () => (/* binding */ slice3d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Extracts a 3D slice from a 3D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice3d_(x, begin, size) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'slice3d');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${$x.rank} tensor`);
    return (0,_slice__WEBPACK_IMPORTED_MODULE_2__.slice)($x, begin, size);
}
const slice3d = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ slice3d_ });
//# sourceMappingURL=slice3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice4d.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice4d.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "slice4d": () => (/* binding */ slice4d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Extracts a 4D slice from a 4D array starting at coordinates `begin` and
 * is of size `size`. See `slice` for details.
 */
function slice4d_(x, begin, size) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'slice4d');
    _util__WEBPACK_IMPORTED_MODULE_1__.assert($x.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${$x.rank} tensor`);
    return (0,_slice__WEBPACK_IMPORTED_MODULE_2__.slice)($x, begin, size);
}
const slice4d = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ slice4d_ });
//# sourceMappingURL=slice4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/slice_util.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertParamsValid": () => (/* binding */ assertParamsValid),
/* harmony export */   "maskToAxes": () => (/* binding */ maskToAxes),
/* harmony export */   "computeOutShape": () => (/* binding */ computeOutShape),
/* harmony export */   "stridesWithElidedDims": () => (/* binding */ stridesWithElidedDims),
/* harmony export */   "getNormalizedAxes": () => (/* binding */ getNormalizedAxes),
/* harmony export */   "startIndicesWithElidedDims": () => (/* binding */ startIndicesWithElidedDims),
/* harmony export */   "stopIndicesWithElidedDims": () => (/* binding */ stopIndicesWithElidedDims),
/* harmony export */   "stridesForAxis": () => (/* binding */ stridesForAxis),
/* harmony export */   "startForAxis": () => (/* binding */ startForAxis),
/* harmony export */   "stopForAxis": () => (/* binding */ stopForAxis),
/* harmony export */   "isSliceContinous": () => (/* binding */ isSliceContinous),
/* harmony export */   "computeFlatOffset": () => (/* binding */ computeFlatOffset),
/* harmony export */   "parseSliceParams": () => (/* binding */ parseSliceParams),
/* harmony export */   "sliceInfo": () => (/* binding */ sliceInfo)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

function assertParamsValid(input, begin, size) {
    const inputRank = input.shape.length;
    _util__WEBPACK_IMPORTED_MODULE_0__.assert(inputRank === begin.length, () => `Error in slice${inputRank}D: Length of begin ${begin} must ` +
        `match the rank of the array (${inputRank}).`);
    _util__WEBPACK_IMPORTED_MODULE_0__.assert(inputRank === size.length, () => `Error in slice${inputRank}D: Length of size ${size} must ` +
        `match the rank of the array (${inputRank}).`);
    for (let i = 0; i < inputRank; ++i) {
        _util__WEBPACK_IMPORTED_MODULE_0__.assert(begin[i] + size[i] <= input.shape[i], () => `Error in slice${inputRank}D: begin[${i}] + size[${i}] ` +
            `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${input.shape[i]})`);
    }
}
/** Converts a binary mask to an array of axes. Used in stridedSlice(). */
function maskToAxes(mask) {
    const axes = [];
    let axis = 0;
    while (mask > 0) {
        if (mask & 1) {
            axes.push(axis);
        }
        mask /= 2;
        axis++;
    }
    return axes;
}
/** Computes the output shape given the strided slice params. */
function computeOutShape(begin, end, strides) {
    const size = [];
    for (let axis = 0; axis < begin.length; axis++) {
        size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);
    }
    return size;
}
// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stride value. Otherwise, insert.
function stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {
    const newStrides = [...strides];
    for (let i = newStrides.length; i < inputShape.length; i++) {
        newStrides.push(1);
    }
    for (let i = 0; i < numElidedAxes; i++) {
        if (i === 0) {
            newStrides[ellipsisInsertionIndex] = 1;
        }
        else {
            newStrides.splice(ellipsisInsertionIndex, 0 /* num elements to delete */, 1 /* element to add */);
            newStrides.pop();
        }
    }
    return newStrides;
}
function unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {
    if (normalizedAxis <= ellipsisInsertionIndex) {
        return normalizedAxis;
    }
    return normalizedAxis - (numElidedAxes - 1);
}
function getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {
    const elidedAxes = [];
    for (let i = 0; i < numElidedAxes; i++) {
        elidedAxes.push(ellipsisInsertionIndex + i);
    }
    return elidedAxes;
}
// Normalize the start, end and strides.
function getNormalizedAxes(inputShape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask) {
    const inputRank = inputShape.length;
    let normalizedBegin = new Array(inputRank), normalizedEnd = new Array(inputRank), normalizedStrides = new Array(inputRank);
    if (ellipsisAxes.length && numInterpolatedAxes > 0) {
        const fullIndex = ellipsisAxes[0];
        // The ellipsis applies to the masked index as well as any dimensions
        // that are interpolated.
        const numElidedAxes = numInterpolatedAxes + 1;
        normalizedBegin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, inputShape);
        normalizedEnd = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, inputShape);
        normalizedStrides =
            stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);
    }
    else {
        for (let axis = 0; axis < inputRank; axis++) {
            normalizedBegin[axis] = startForAxis(beginMask, begin, strides, inputShape, axis, ellipsisMask);
            normalizedEnd[axis] =
                stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);
            normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);
        }
    }
    return {
        begin: normalizedBegin,
        end: normalizedEnd,
        strides: normalizedStrides
    };
}
// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current start value. Otherwise, insert.
function startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {
    const newIndices = [...inputShape];
    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);
    for (let axis = 0; axis < newIndices.length; axis++) {
        if (elidedAxes.indexOf(axis) > -1) {
            newIndices[axis] = 0;
        }
        else {
            const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
            let originalValue = originalBegin[originalAxis];
            if (beginMask & 1 << originalAxis) {
                originalValue = 0;
            }
            newIndices[axis] = originalValue;
        }
    }
    return newIndices;
}
// Creates full selection at the elided dimensions. If the dimension matches
// the ellipsis mask, override the current stop value. Otherwise, insert.
function stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {
    const newIndices = [...inputShape];
    const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);
    for (let axis = 0; axis < newIndices.length; axis++) {
        if (elidedAxes.indexOf(axis) > -1) {
            newIndices[axis] = Number.MAX_SAFE_INTEGER;
        }
        else {
            const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);
            let originalValue = originalEnd[originalAxis];
            if (endMask & 1 << originalAxis) {
                originalValue = Number.MAX_SAFE_INTEGER;
            }
            newIndices[axis] = originalValue;
        }
    }
    for (let i = 0; i < newIndices.length; i++) {
        // Handle negative indices
        const axisSize = inputShape[i];
        if (newIndices[i] < 0) {
            newIndices[i] += axisSize;
        }
        newIndices[i] = _util__WEBPACK_IMPORTED_MODULE_0__.clamp(0, newIndices[i], inputShape[i]);
    }
    return newIndices;
}
function stridesForAxis(strides, axis, ellipsisMask) {
    let stride = strides[axis];
    if (ellipsisMask & (1 << axis) || stride == null) {
        stride = 1;
    }
    return stride;
}
function startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {
    // Begin with the specified index
    let start = startIndices[axis];
    const stride = strides[axis] || 1;
    // Check the axis bit from right of masked axes, or the begin index is not set
    // for the axis.
    if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {
        if (stride > 0) {
            // Forward iteration - use the first element. These values will get
            // clamped below (Note: We could have set them to 0 and axis_size-1, but
            // use lowest() and max() to maintain symmetry with StopForAxis())
            start = Number.MIN_SAFE_INTEGER;
        }
        else {
            // Backward iteration - use the last element.
            start = Number.MAX_SAFE_INTEGER;
        }
    }
    // Handle negative indices
    const axisSize = inputShape[axis];
    if (start < 0) {
        start += axisSize;
    }
    // Clamping
    start = _util__WEBPACK_IMPORTED_MODULE_0__.clamp(0, start, axisSize - 1);
    return start;
}
function stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {
    // Begin with the specified index
    let stop = stopIndices[axis];
    const stride = strides[axis] || 1;
    // Check the axis bit from right of masked axes, or if the stop index is not
    // set for this axis.
    if (endMask & (1 << axis) || ellipsisMask & (1 << axis) || stop == null) {
        if (stride > 0) {
            // Forward iteration - use the last element. These values will get
            // clamped below
            stop = Number.MAX_SAFE_INTEGER;
        }
        else {
            // Backward iteration - use the first element.
            stop = Number.MIN_SAFE_INTEGER;
        }
    }
    // Handle negative indices
    const axisSize = inputShape[axis];
    if (stop < 0) {
        stop += axisSize;
    }
    // Clamping
    // Because the end index points one past the last element, we need slightly
    // different clamping ranges depending on the direction.
    if (stride > 0) {
        // Forward iteration
        stop = _util__WEBPACK_IMPORTED_MODULE_0__.clamp(0, stop, axisSize);
    }
    else {
        // Backward iteration
        stop = _util__WEBPACK_IMPORTED_MODULE_0__.clamp(-1, stop, axisSize - 1);
    }
    return stop;
}
/**
 * Returns true if the slice occupies a continous set of elements in the
 * 'flat' space.
 */
function isSliceContinous(shape, begin, size) {
    // Index of the first axis that has size > 1.
    let firstNonOneAxis = size.length;
    for (let i = 0; i < size.length; i++) {
        if (size[i] > 1) {
            firstNonOneAxis = i;
            break;
        }
    }
    for (let i = firstNonOneAxis + 1; i < size.length; i++) {
        if (begin[i] > 0 || size[i] !== shape[i]) {
            return false;
        }
    }
    return true;
}
function computeFlatOffset(begin, strides) {
    let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;
    for (let i = 0; i < begin.length - 1; i++) {
        flatOffset += begin[i] * strides[i];
    }
    return flatOffset;
}
function parseSliceParams(x, begin, size) {
    // The following logic allows for more ergonomic calls.
    let begin_;
    const xRank = x.shape.length;
    if (typeof begin === 'number') {
        begin_ = [begin, ...new Array(xRank - 1).fill(0)];
    }
    else if (begin.length < xRank) {
        begin_ = begin.concat(new Array(xRank - begin.length).fill(0));
    }
    else {
        begin_ = begin.slice();
    }
    begin_.forEach(d => {
        _util__WEBPACK_IMPORTED_MODULE_0__.assert(d !== -1, () => 'slice() does not support negative begin indexing.');
    });
    let size_;
    if (size == null) {
        size_ = new Array(xRank).fill(-1);
    }
    else if (typeof size === 'number') {
        size_ = [size, ...new Array(xRank - 1).fill(-1)];
    }
    else if (size.length < xRank) {
        size_ = size.concat(new Array(xRank - size.length).fill(-1));
    }
    else {
        size_ = size;
    }
    size_ = size_.map((d, i) => {
        if (d >= 0) {
            return d;
        }
        else {
            _util__WEBPACK_IMPORTED_MODULE_0__.assert(d === -1, () => `Negative size values should be exactly -1 but got ` +
                `${d} for the slice() size at index ${i}.`);
            return x.shape[i] - begin_[i];
        }
    });
    return [begin_, size_];
}
function sliceInfo(xShape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
    // make a copy because it may be modified further down.
    let $begin = begin.slice();
    let $end = end.slice();
    let $strides = strides;
    if (strides == null) {
        $strides = new Array($begin.length);
    }
    const ellipsisAxes = maskToAxes(ellipsisMask);
    if (ellipsisAxes.length > 1) {
        throw new Error('Multiple ellipses in slice is not allowed.');
    }
    if (ellipsisMask !== 0 && newAxisMask !== 0) {
        throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');
    }
    if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {
        throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');
    }
    const numInterpolatedAxes = xShape.length - $begin.length;
    // Expand the dims of x based on the newAxisMask.
    const expandAxes = maskToAxes(newAxisMask);
    const newShape = xShape.slice();
    expandAxes.forEach(axis => {
        $begin[axis] = 0;
        $end[axis] = 1;
        newShape.splice(axis, 0, 1);
    });
    const { begin: normalizedBegin, end: normalizedEnd, strides: normalizedStrides } = getNormalizedAxes(newShape, ellipsisAxes, numInterpolatedAxes, $begin, $end, $strides, beginMask, endMask, ellipsisMask);
    $begin = normalizedBegin;
    $end = normalizedEnd;
    $strides = normalizedStrides;
    const shrinkAxes = maskToAxes(shrinkAxisMask);
    // Adjust the ends based on the shrink mask.
    shrinkAxes.forEach(axis => {
        $end[axis] = $begin[axis] + 1;
        $strides[axis] = 1;
    });
    // Figure out the output shape.
    const size = computeOutShape($begin, $end, $strides);
    // Remove the axes based on shrinkMask.
    const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);
    const nonStrided = $strides.every(v => v === 1);
    return { nonStrided, $begin, $end, $strides, size, newShape, outShape };
}
//# sourceMappingURL=slice_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softmax": () => (/* binding */ softmax)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes the softmax normalized vector given the logits.
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * ```js
 * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);
 *
 * a.softmax().print();  // or tf.softmax(a)
 * ```
 *
 * @param logits The logits array.
 * @param dim The dimension softmax would be performed on. Defaults to `-1`
 *     which indicates the last dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function softmax_(logits, dim = -1) {
    const $logits = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(logits, 'logits', 'softmax', 'float32');
    if (dim === -1) {
        dim = $logits.rank - 1;
    }
    if (dim !== $logits.rank - 1) {
        throw Error('Softmax along a non-last dimension is not yet supported. ' +
            `Logits was rank ${$logits.rank} and dim was ${dim}`);
    }
    const inputs = { logits: $logits };
    const attrs = { dim };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Softmax, inputs, attrs);
}
const softmax = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ softmax_ });
//# sourceMappingURL=softmax.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softplus": () => (/* binding */ softplus)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes softplus of the input `tf.Tensor` element-wise: `log(exp(x) + 1)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, .7]);
 *
 * x.softplus().print();  // or tf.softplus(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function softplus_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'softplus');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Softplus, inputs);
}
const softplus = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ softplus_ });
//# sourceMappingURL=softplus.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "spaceToBatchND": () => (/* binding */ spaceToBatchND)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * This operation divides "spatial" dimensions `[1, ..., M]` of the input into
 * a grid of blocks of shape `blockShape`, and interleaves these blocks with
 * the "batch" dimension (0) such that in the output, the spatial
 * dimensions `[1, ..., M]` correspond to the position within the grid,
 * and the batch dimension combines both the position within a spatial block
 * and the original batch position. Prior to division into blocks,
 * the spatial dimensions of the input are optionally zero padded
 * according to `paddings`. See below for a precise description.
 *
 * ```js
 * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);
 * const blockShape = [2, 2];
 * const paddings = [[0, 0], [0, 0]];
 *
 * x.spaceToBatchND(blockShape, paddings).print();
 * ```
 *
 * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +
 * remainingShape`, where spatialShape has `M` dimensions.
 * @param blockShape A 1-D array. Must have shape `[M]`, all values must
 * be >= 1.
 * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=
 *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad
 * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It
 * is required that
 * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`
 *
 * This operation is equivalent to the following steps:
 *
 * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input
 * according to `paddings` to produce `padded` of shape paddedShape.
 *
 * 2. Reshape `padded` to `reshapedPadded` of shape:
 * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`
 *
 * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`
 * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the
 * batch dimension, producing an output tensor of shape:
 * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,
 * paddedShape[M] / blockShape[M-1]] + remainingShape`
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function spaceToBatchND_(x, blockShape, paddings) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'spaceToBatchND');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.rank >= 1 + blockShape.length, () => `input rank ${$x.rank} should be > than [blockShape] ${blockShape.length}`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(paddings.length === blockShape.length, () => `paddings.shape[0] ${paddings.length} must be equal to [blockShape] ${blockShape.length}`);
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.shape.reduce((a, b, i) => {
        if (i > 0 && i <= blockShape.length) {
            return a &&
                ((b + paddings[i - 1][0] + paddings[i - 1][1]) %
                    blockShape[i - 1] ===
                    0);
        }
        return a;
    }, true), () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${paddings.toString()} must be divisible by blockShapes ${blockShape.toString()}`);
    const inputs = { x: $x };
    const attrs = { blockShape, paddings };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.SpaceToBatchND, inputs, attrs);
}
const spaceToBatchND = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ spaceToBatchND_ });
//# sourceMappingURL=space_to_batch_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sparseToDense": () => (/* binding */ sparseToDense)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _ops_sparse_to_dense_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/sparse_to_dense_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Converts a sparse representation into a dense tensor.
 *
 * Builds an array dense with shape outputShape such that:
 *
 * // If sparseIndices is scalar
 * dense[i] = (i == sparseIndices ? sparseValues : defaultValue)
 *
 * // If sparseIndices is a vector, then for each i
 * dense[sparseIndices[i]] = sparseValues[i]
 *
 * // If sparseIndices is an n by d matrix, then for each i in [0, n)
 * dense[sparseIndices[i][0], ..., sparseIndices[i][d-1]] = sparseValues[i]
 * All other values in dense are set to defaultValue. If sparseValues is a
 * scalar, all sparse indices are set to this single value.
 *
 * If indices are repeated the final value is summed over all values for those
 * indices.
 *
 * ```js
 * const indices = tf.tensor1d([4, 5, 6, 1, 2, 3], 'int32');
 * const values = tf.tensor1d([10, 11, 12, 13, 14, 15], 'float32');
 * const shape = [8];
 * tf.sparseToDense(indices, values, shape).print();
 * ```
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape Shape of the dense output tensor. the type is inferred.
 * @param defaultValue Scalar. Value to set for indices not specified in
 * sparseIndices. Defaults to zero.
 *
 * @doc {heading: 'Operations', subheading: 'Normalization'}
 */
function sparseToDense_(sparseIndices, sparseValues, outputShape, defaultValue = 0) {
    const $sparseIndices = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(sparseIndices, 'sparseIndices', 'sparseToDense', 'int32');
    const $sparseValues = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(sparseValues, 'sparseValues', 'sparseToDense');
    const $defaultValue = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(defaultValue, 'defaultValue', 'sparseToDense', $sparseValues.dtype);
    _ops_sparse_to_dense_util__WEBPACK_IMPORTED_MODULE_2__.validateInput($sparseIndices, $sparseValues, outputShape, $defaultValue);
    const inputs = {
        sparseIndices: $sparseIndices,
        sparseValues: $sparseValues,
        defaultValue: $defaultValue
    };
    const attrs = { outputShape };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.SparseToDense, inputs, attrs);
}
const sparseToDense = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ sparseToDense_ });
//# sourceMappingURL=sparse_to_dense.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sparse_to_dense_util.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "validateInput": () => (/* binding */ validateInput)
/* harmony export */ });
/**
 * Validate sparseToDense inputs.
 *
 * @param sparseIndices A 0-D, 1-D, or 2-D Tensor of type int32.
 * sparseIndices[i] contains the complete index where sparseValues[i] will be
 * placed.
 * @param sparseValues A 0-D or 1-D Tensor. Values
 * corresponding to each row of sparseIndices, or a scalar value to be used for
 * all sparse indices.
 * @param outputShape number[]. Shape of the dense output tensor.
 * @param validateIndices boolean. indice validation is not supported, error
 * will be thrown if it is set.
 */
function validateInput(sparseIndices, sparseValues, outputShape, defaultValues) {
    if (sparseIndices.dtype !== 'int32') {
        throw new Error('tf.sparseToDense() expects the indices to be int32 type,' +
            ` but the dtype was ${sparseIndices.dtype}.`);
    }
    if (sparseIndices.rank > 2) {
        throw new Error('sparseIndices should be a scalar, vector, or matrix,' +
            ` but got shape ${sparseIndices.shape}.`);
    }
    const numElems = sparseIndices.rank > 0 ? sparseIndices.shape[0] : 1;
    const numDims = sparseIndices.rank > 1 ? sparseIndices.shape[1] : 1;
    if (outputShape.length !== numDims) {
        throw new Error('outputShape has incorrect number of elements:,' +
            ` ${outputShape.length}, should be: ${numDims}.`);
    }
    const numValues = sparseValues.size;
    if (!(sparseValues.rank === 0 ||
        sparseValues.rank === 1 && numValues === numElems)) {
        throw new Error('sparseValues has incorrect shape ' +
            `${sparseValues.shape}, should be [] or [${numElems}]`);
    }
    if (sparseValues.dtype !== defaultValues.dtype) {
        throw new Error('sparseValues.dtype must match defaultValues.dtype');
    }
}
//# sourceMappingURL=sparse_to_dense_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fft": () => (/* binding */ fft)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the inner-most
 * dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.fft().print();  // tf.spectral.fft(x).print();
 * ```
 * @param input The complex input to compute an fft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function fft_(input) {
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(input.dtype === 'complex64', () => `The dtype for tf.spectral.fft() must be complex64 ` +
        `but got ${input.dtype}.`);
    const inputs = { input };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.FFT, inputs);
}
const fft = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ fft_ });
//# sourceMappingURL=fft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ifft": () => (/* binding */ ifft)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Inverse fast Fourier transform.
 *
 * Computes the inverse 1-dimensional discrete Fourier transform over the
 * inner-most dimension of input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([1, 2, 3]);
 * const x = tf.complex(real, imag);
 *
 * x.ifft().print();  // tf.spectral.ifft(x).print();
 * ```
 * @param input The complex input to compute an ifft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function ifft_(input) {
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(input.dtype === 'complex64', () => `The dtype for tf.spectral.ifft() must be complex64 ` +
        `but got ${input.dtype}.`);
    const inputs = { input };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.IFFT, inputs);
}
const ifft = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ ifft_ });
//# sourceMappingURL=ifft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "irfft": () => (/* binding */ irfft)
/* harmony export */ });
/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _imag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../imag */ "./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _real__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../real */ "./node_modules/@tensorflow/tfjs-core/dist/ops/real.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/* harmony import */ var _scalar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _ifft__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ifft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











/**
 * Inversed real value input fast Fourier transform.
 *
 * Computes the 1-dimensional inversed discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 * const imag = tf.tensor1d([0, 0, 0]);
 * const x = tf.complex(real, imag);
 *
 * x.irfft().print();
 * ```
 * @param input The real value input to compute an irfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function irfft_(input) {
    const innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    let ret;
    if (innerDimensionSize <= 2) {
        const complexInput = (0,_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)(input, [batch, innerDimensionSize]);
        ret = (0,_ifft__WEBPACK_IMPORTED_MODULE_1__.ifft)(complexInput);
    }
    else {
        // The length of unique components of the DFT of a real-valued signal
        // is 2 * (input_len - 1)
        const outputShape = [batch, 2 * (innerDimensionSize - 1)];
        const realInput = (0,_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)((0,_real__WEBPACK_IMPORTED_MODULE_2__.real)(input), [batch, innerDimensionSize]);
        const imagInput = (0,_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)((0,_imag__WEBPACK_IMPORTED_MODULE_3__.imag)(input), [batch, innerDimensionSize]);
        const realConjugate = (0,_reverse__WEBPACK_IMPORTED_MODULE_4__.reverse)((0,_slice__WEBPACK_IMPORTED_MODULE_5__.slice)(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);
        const imagConjugate = (0,_mul__WEBPACK_IMPORTED_MODULE_6__.mul)((0,_reverse__WEBPACK_IMPORTED_MODULE_4__.reverse)((0,_slice__WEBPACK_IMPORTED_MODULE_5__.slice)(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), (0,_scalar__WEBPACK_IMPORTED_MODULE_7__.scalar)(-1));
        const r = (0,_concat__WEBPACK_IMPORTED_MODULE_8__.concat)([realInput, realConjugate], 1);
        const i = (0,_concat__WEBPACK_IMPORTED_MODULE_8__.concat)([imagInput, imagConjugate], 1);
        const complexInput = (0,_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)((0,_complex__WEBPACK_IMPORTED_MODULE_9__.complex)(r, i), [outputShape[0], outputShape[1]]);
        ret = (0,_ifft__WEBPACK_IMPORTED_MODULE_1__.ifft)(complexInput);
    }
    ret = (0,_real__WEBPACK_IMPORTED_MODULE_2__.real)(ret);
    // reshape the result if the input is 3D tensor.
    if (input.rank === 3 && input.shape[0] !== 0) {
        const temp = ret;
        const batch = input.shape[0];
        ret = (0,_reshape__WEBPACK_IMPORTED_MODULE_0__.reshape)(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);
        temp.dispose();
    }
    return ret;
}
const irfft = (0,_operation__WEBPACK_IMPORTED_MODULE_10__.op)({ irfft_ });
//# sourceMappingURL=irfft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rfft": () => (/* binding */ rfft)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _imag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../imag */ "./node_modules/@tensorflow/tfjs-core/dist/ops/imag.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _real__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../real */ "./node_modules/@tensorflow/tfjs-core/dist/ops/real.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../slice */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _split__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../split */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js");
/* harmony import */ var _zeros__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../zeros */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js");
/* harmony import */ var _zeros_like__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _fft__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fft */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */












/**
 * Real value input fast Fourier transform.
 *
 * Computes the 1-dimensional discrete Fourier transform over the
 * inner-most dimension of the real input.
 *
 * ```js
 * const real = tf.tensor1d([1, 2, 3]);
 *
 * real.rfft().print();
 * ```
 * @param input The real value input to compute an rfft over.
 *
 * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}
 */
function rfft_(input, fftLength) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(input.dtype === 'float32', () => `The dtype for rfft() must be real value but got ${input.dtype}`);
    let innerDimensionSize = input.shape[input.shape.length - 1];
    const batch = input.size / innerDimensionSize;
    let adjustedInput;
    if (fftLength != null && fftLength < innerDimensionSize) {
        // Need to crop
        const begin = input.shape.map(v => 0);
        const size = input.shape.map(v => v);
        size[input.shape.length - 1] = fftLength;
        adjustedInput = (0,_slice__WEBPACK_IMPORTED_MODULE_1__.slice)(input, begin, size);
        innerDimensionSize = fftLength;
    }
    else if (fftLength != null && fftLength > innerDimensionSize) {
        // Need to pad with zeros
        const zerosShape = input.shape.map(v => v);
        zerosShape[input.shape.length - 1] = fftLength - innerDimensionSize;
        adjustedInput = (0,_concat__WEBPACK_IMPORTED_MODULE_2__.concat)([input, (0,_zeros__WEBPACK_IMPORTED_MODULE_3__.zeros)(zerosShape)], input.shape.length - 1);
        innerDimensionSize = fftLength;
    }
    else {
        adjustedInput = input;
    }
    // Complement the input with zero imaginary numbers.
    const zerosInput = (0,_zeros_like__WEBPACK_IMPORTED_MODULE_4__.zerosLike)(adjustedInput);
    const complexInput = (0,_reshape__WEBPACK_IMPORTED_MODULE_5__.reshape)((0,_complex__WEBPACK_IMPORTED_MODULE_6__.complex)(adjustedInput, zerosInput), [batch, innerDimensionSize]);
    const ret = (0,_fft__WEBPACK_IMPORTED_MODULE_7__.fft)(complexInput);
    // Exclude complex conjugations. These conjugations are put symmetrically.
    const half = Math.floor(innerDimensionSize / 2) + 1;
    const realValues = (0,_real__WEBPACK_IMPORTED_MODULE_8__.real)(ret);
    const imagValues = (0,_imag__WEBPACK_IMPORTED_MODULE_9__.imag)(ret);
    const realComplexConjugate = (0,_split__WEBPACK_IMPORTED_MODULE_10__.split)(realValues, [half, innerDimensionSize - half], realValues.shape.length - 1);
    const imagComplexConjugate = (0,_split__WEBPACK_IMPORTED_MODULE_10__.split)(imagValues, [half, innerDimensionSize - half], imagValues.shape.length - 1);
    const outputShape = adjustedInput.shape.slice();
    outputShape[adjustedInput.shape.length - 1] = half;
    return (0,_reshape__WEBPACK_IMPORTED_MODULE_5__.reshape)((0,_complex__WEBPACK_IMPORTED_MODULE_6__.complex)(realComplexConjugate[0], imagComplexConjugate[0]), outputShape);
}
const rfft = (0,_operation__WEBPACK_IMPORTED_MODULE_11__.op)({ rfft_ });
//# sourceMappingURL=rfft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/split.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "split": () => (/* binding */ split)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Splits a `tf.Tensor` into sub tensors.
 *
 * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`
 * into `numOrSizeSplits` smaller tensors.
 * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.
 *
 * If `numOrSizeSplits` is a number array, splits `x` into
 * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the
 * same size as `x` except along dimension `axis` where the size is
 * `numOrSizeSplits[i]`.
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);
 * const [a, b] = tf.split(x, 2, 1);
 * a.print();
 * b.print();
 *
 * const [c, d, e] = tf.split(x, [1, 2, 1], 1);
 * c.print();
 * d.print();
 * e.print();
 * ```
 *
 * @param x The input tensor to split.
 * @param numOrSizeSplits Either an integer indicating the number of
 * splits along the axis or an array of integers containing the sizes of
 * each output tensor along the axis. If a number then it must evenly divide
 * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.
 * Can contain one -1 indicating that dimension is to be inferred.
 * @param axis The dimension along which to split. Defaults to 0 (the first
 * dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function split_(x, numOrSizeSplits, axis = 0) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'split');
    const inputs = { x: $x };
    const attr = { numOrSizeSplits, axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.SplitV, inputs, attr);
}
const split = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ split_ });
//# sourceMappingURL=split.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/split_util.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prepareSplitSize": () => (/* binding */ prepareSplitSize)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");

/**
 * Prepare the split size array. When the input is a number, the axis is evenly
 * divided among the split size. When the input contains the negative value, the
 * rest of the axis is allocated toward that.
 */
function prepareSplitSize(x, numOrSizeSplits, axis = 0) {
    let splitSizes = [];
    if (typeof (numOrSizeSplits) === 'number') {
        (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');
        splitSizes =
            new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);
    }
    else {
        const numOfNegs = numOrSizeSplits.reduce((count, value) => {
            if (value === -1) {
                count += 1;
            }
            return count;
        }, 0);
        (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(numOfNegs <= 1, () => 'There should be only one negative value in split array.');
        const negIndex = numOrSizeSplits.indexOf(-1);
        // Allow the number of split array to be -1, which indicates the rest
        // of dimension is allocated to that split.
        if (negIndex !== -1) {
            const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);
            numOrSizeSplits[negIndex] = x.shape[axis] - total;
        }
        (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');
        splitSizes = numOrSizeSplits;
    }
    return splitSizes;
}
//# sourceMappingURL=split_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sqrt": () => (/* binding */ sqrt)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.sqrt().print();  // or tf.sqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sqrt_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'sqrt');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Sqrt, inputs);
}
const sqrt = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ sqrt_ });
//# sourceMappingURL=sqrt.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/square.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "square": () => (/* binding */ square)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Computes square of `x` element-wise: `x ^ 2`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);
 *
 * x.square().print();  // or tf.square(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function square_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'square');
    const attrs = {};
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel('Square', { x: $x }, attrs);
}
const square = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ square_ });
//# sourceMappingURL=square.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squaredDifference": () => (/* binding */ squaredDifference)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */






/**
 * Returns (a - b) * (a - b) element-wise.
 * Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([1, 4, 3, 16]);
 * const b = tf.tensor1d([1, 2, 9, 4]);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * ```js
 * // Broadcast squared difference  a with b.
 * const a = tf.tensor1d([2, 4, 6, 8]);
 * const b = tf.scalar(5);
 *
 * a.squaredDifference(b).print();  // or tf.squaredDifference(a, b)
 * ```
 *
 * @param a The first tensor.
 * @param b The second tensor. Must have the same type as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function squaredDifference_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'squaredDifference');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'squaredDifference');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_3__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const inputs = { a: $a, b: $b };
    const attrs = {};
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_4__.SquaredDifference, inputs, attrs);
}
const squaredDifference = (0,_operation__WEBPACK_IMPORTED_MODULE_5__.op)({ squaredDifference_ });
//# sourceMappingURL=squared_difference.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "squeeze": () => (/* binding */ squeeze)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Removes dimensions of size 1 from the shape of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);
 * x.squeeze().print();
 * ```
 *
 * @param x The input tensor to be squeezed.
 * @param axis An optional list of numbers. If specified, only
 *     squeezes the dimensions listed. The dimension index starts at 0. It
 * is an error to squeeze a dimension that is not 1.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function squeeze_(x, axis) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(x, 'x', 'squeeze');
    return (0,_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)($x, (0,_util__WEBPACK_IMPORTED_MODULE_2__.squeezeShape)($x.shape, axis).newShape);
}
const squeeze = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ squeeze_ });
//# sourceMappingURL=squeeze.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stack": () => (/* binding */ stack)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Stacks a list of rank-`R` `tf.Tensor`s into one rank-`(R+1)` `tf.Tensor`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 * const b = tf.tensor1d([3, 4]);
 * const c = tf.tensor1d([5, 6]);
 * tf.stack([a, b, c]).print();
 * ```
 *
 * @param tensors A list of tensor objects with the same shape and dtype.
 * @param axis The axis to stack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function stack_(tensors, axis = 0) {
    const $tensors = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensorArray)(tensors, 'tensors', 'stack', 'string_or_numeric');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($tensors.length >= 1, () => 'Pass at least one tensor to tf.stack');
    if ($tensors.length > 0) {
        _util__WEBPACK_IMPORTED_MODULE_2__.assert(axis <= $tensors[0].rank, () => 'Axis must be <= rank of the tensor');
    }
    const inputs = $tensors;
    const attrs = { axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Pack, inputs, attrs);
}
const stack = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ stack_ });
//# sourceMappingURL=stack.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/step.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "step": () => (/* binding */ step)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes step of the input `tf.Tensor` element-wise: `x > 0 ? 1 : alpha * x`
 *
 * ```js
 * const x = tf.tensor1d([0, 2, -1, -3]);
 *
 * x.step(.5).print();  // or tf.step(x, .5)
 * ```
 * @param x The input tensor.
 * @param alpha The gradient when input is negative.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function step_(x, alpha = 0.0) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'step');
    const inputs = { x: $x };
    const attrs = { alpha };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Step, inputs, attrs);
}
const step = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ step_ });
//# sourceMappingURL=step.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stridedSlice": () => (/* binding */ stridedSlice)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Extracts a strided slice of a tensor.
 *
 * Roughly speaking, this op extracts a slice of size (end-begin)/stride from
 * the given input tensor (x). Starting at the location specified by begin the
 * slice continues by adding stride to the index until all dimensions are not
 * less than end. Note that a stride can be negative, which causes a reverse
 * slice.
 *
 * ```js
 * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],
 *    [3, 2, 3]);
 * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]
 * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],
 *                                                     // [4, 4, 4]]]
 * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],
 *                                                     // [3, 3, 3]]]
 * ```
 *
 * @param x The tensor to stride slice.
 * @param begin The coordinates to start the slice from.
 * @param end: The coordinates to end the slice at.
 * @param strides: The size of the slice.
 * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param endMask: If the ith bit of endMask is set, end[i] is ignored
 *      and the fullest possible range in that dimension is used instead.
 * @param shrinkAxisMask: a bitmask where bit i implies that
 * the ith specification should shrink the dimensionality. begin and end must
 * imply a slice of size 1 in the dimension.
 *
 * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}
 */
function stridedSlice_(x, begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'stridedSlice');
    const inputs = { x: $x };
    const attrs = {
        begin,
        end,
        strides,
        beginMask,
        endMask,
        ellipsisMask,
        newAxisMask,
        shrinkAxisMask
    };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.StridedSlice, inputs, attrs);
}
const stridedSlice = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ stridedSlice_ });
//# sourceMappingURL=strided_slice.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sub": () => (/* binding */ sub)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tensor_util */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Subtracts two `tf.Tensor`s element-wise, A - B. Supports broadcasting.
 *
 * ```js
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.tensor1d([1, 2, 3, 4]);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 *
 * ```js
 * // Broadcast subtract a with b.
 * const a = tf.tensor1d([10, 20, 30, 40]);
 * const b = tf.scalar(5);
 *
 * a.sub(b).print();  // or tf.sub(a, b)
 * ```
 * @param a The first `tf.Tensor` to subtract from.
 * @param b The second `tf.Tensor` to be subtracted. Must have the same dtype as
 * `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function sub_(a, b) {
    let $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'sub');
    let $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'sub');
    [$a, $b] = (0,_tensor_util__WEBPACK_IMPORTED_MODULE_2__.makeTypesMatch)($a, $b);
    const inputs = { a: $a, b: $b };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Sub, inputs);
}
const sub = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ sub_ });
//# sourceMappingURL=sub.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sum": () => (/* binding */ sum)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the sum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If axes has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.sum().print();  // or tf.sum(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.sum(axis).print();  // or tf.sum(x, axis)
 * ```
 *
 * @param x The input tensor to compute the sum over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function sum_(x, axis = null, keepDims = false) {
    let $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'sum');
    if ($x.dtype === 'bool') {
        $x = (0,_cast__WEBPACK_IMPORTED_MODULE_2__.cast)($x, 'int32');
    }
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Sum, inputs, attrs);
}
const sum = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ sum_ });
//# sourceMappingURL=sum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tan.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tan.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tan": () => (/* binding */ tan)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes tan of the input `tf.Tensor` element-wise, `tan(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, Math.PI / 2, Math.PI * 3 / 4]);
 *
 * x.tan().print();  // or tf.tan(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function tan_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'tan');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Tan, inputs);
}
const tan = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ tan_ });
//# sourceMappingURL=tan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tanh": () => (/* binding */ tanh)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Computes hyperbolic tangent of the input `tf.Tensor` element-wise: `tanh(x)`
 *
 * ```js
 * const x = tf.tensor1d([0, 1, -1, 70]);
 *
 * x.tanh().print();  // or tf.tanh(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function tanh_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'tanh');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.Tanh, inputs);
}
const tanh = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ tanh_ });
//# sourceMappingURL=tanh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tensor": () => (/* binding */ tensor)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Creates a `tf.Tensor` with the provided values, shape and dtype.
 *
 * ```js
 * // Pass an array of values to create a vector.
 * tf.tensor([1, 2, 3, 4]).print();
 * ```
 *
 * ```js
 * // Pass a nested array of values to make a matrix or a higher
 * // dimensional tensor.
 * tf.tensor([[1, 2], [3, 4]]).print();
 * ```
 *
 * ```js
 * // Pass a flat array and specify a shape yourself.
 * tf.tensor([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`. If the values are strings,
 *     they will be encoded as utf-8 and kept as `Uint8Array[]`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor(values, shape, dtype) {
    const inferredShape = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.inferShape)(values, dtype);
    return (0,_tensor_ops_util__WEBPACK_IMPORTED_MODULE_1__.makeTensor)(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tensor1d": () => (/* binding */ tensor1d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-1 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor1d` as it makes the code more readable.
 *
 * ```js
 * tf.tensor1d([1, 2, 3]).print();
 * ```
 *
 * @param values The values of the tensor. Can be array of numbers,
 *     or a `TypedArray`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor1d(values, dtype) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assertNonNull)(values);
    const inferredShape = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.inferShape)(values, dtype);
    if (inferredShape.length !== 1) {
        throw new Error('tensor1d() requires values to be a flat/TypedArray');
    }
    const shape = null;
    return (0,_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__.makeTensor)(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor2d.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tensor2d": () => (/* binding */ tensor2d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-2 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor2d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor2d([[1, 2], [3, 4]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor2d([1, 2, 3, 4], [2, 2]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided, it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor2d(values, shape, dtype) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assertNonNull)(values);
    if (shape != null && shape.length !== 2) {
        throw new Error('tensor2d() requires shape to have two numbers');
    }
    const inferredShape = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.inferShape)(values, dtype);
    if (inferredShape.length !== 2 && inferredShape.length !== 1) {
        throw new Error('tensor2d() requires values to be number[][] or flat/TypedArray');
    }
    if (inferredShape.length === 1 && shape == null) {
        throw new Error('tensor2d() requires shape to be provided when `values` ' +
            'are a flat/TypedArray');
    }
    return (0,_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__.makeTensor)(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor3d.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tensor3d": () => (/* binding */ tensor3d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor3d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. If not provided,  it is inferred from
 *     `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor3d(values, shape, dtype) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assertNonNull)(values);
    if (shape != null && shape.length !== 3) {
        throw new Error('tensor3d() requires shape to have three numbers');
    }
    const inferredShape = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.inferShape)(values, dtype);
    if (inferredShape.length !== 3 && inferredShape.length !== 1) {
        throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');
    }
    if (inferredShape.length === 1 && shape == null) {
        throw new Error('tensor3d() requires shape to be provided when `values` ' +
            'are a flat array');
    }
    return (0,_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__.makeTensor)(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor4d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor4d.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tensor4d": () => (/* binding */ tensor4d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-4 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor4d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor4d([[[[1], [2]], [[3], [4]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor4d(values, shape, dtype) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assertNonNull)(values);
    if (shape != null && shape.length !== 4) {
        throw new Error('tensor4d() requires shape to have four numbers');
    }
    const inferredShape = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.inferShape)(values, dtype);
    if (inferredShape.length !== 4 && inferredShape.length !== 1) {
        throw new Error('tensor4d() requires values to be number[][][][] or flat/TypedArray');
    }
    if (inferredShape.length === 1 && shape == null) {
        throw new Error('tensor4d() requires shape to be provided when `values` ' +
            'are a flat array');
    }
    return (0,_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__.makeTensor)(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor5d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor5d.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tensor5d": () => (/* binding */ tensor5d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-5 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor5d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor5d([[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor5d(values, shape, dtype) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assertNonNull)(values);
    if (shape != null && shape.length !== 5) {
        throw new Error('tensor5d() requires shape to have five numbers');
    }
    const inferredShape = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.inferShape)(values, dtype);
    if (inferredShape.length !== 5 && inferredShape.length !== 1) {
        throw new Error('tensor5d() requires values to be ' +
            'number[][][][][] or flat/TypedArray');
    }
    if (inferredShape.length === 1 && shape == null) {
        throw new Error('tensor5d() requires shape to be provided when `values` ' +
            'are a flat array');
    }
    return (0,_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__.makeTensor)(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor5d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor6d.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor6d.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tensor6d": () => (/* binding */ tensor6d)
/* harmony export */ });
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_ops_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates rank-6 `tf.Tensor` with the provided values, shape and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.tensor6d` as it makes the code more readable.
 *
 *  ```js
 * // Pass a nested array.
 * tf.tensor6d([[[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]]]).print();
 * ```
 * ```js
 * // Pass a flat array and specify a shape.
 * tf.tensor6d([1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 2, 2, 2, 1]).print();
 * ```
 *
 * @param values The values of the tensor. Can be nested array of numbers,
 *     or a flat array, or a `TypedArray`.
 * @param shape The shape of the tensor. Optional. If not provided,
 *   it is inferred from `values`.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function tensor6d(values, shape, dtype) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assertNonNull)(values);
    if (shape != null && shape.length !== 6) {
        throw new Error('tensor6d() requires shape to have six numbers');
    }
    const inferredShape = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.inferShape)(values, dtype);
    if (inferredShape.length !== 6 && inferredShape.length !== 1) {
        throw new Error('tensor6d() requires values to be number[][][][][][] or ' +
            'flat/TypedArray');
    }
    if (inferredShape.length === 1 && shape == null) {
        throw new Error('tensor6d() requires shape to be provided when `values` ' +
            'are a flat array');
    }
    shape = shape ||
        inferredShape;
    return (0,_tensor_ops_util__WEBPACK_IMPORTED_MODULE_2__.makeTensor)(values, shape, inferredShape, dtype);
}
//# sourceMappingURL=tensor6d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tensor_ops_util.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "makeTensor": () => (/* binding */ makeTensor)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/** This is shared code across all tensor creation methods. */
function makeTensor(values, shape, inferredShape, dtype) {
    if (dtype == null) {
        dtype = (0,_util__WEBPACK_IMPORTED_MODULE_1__.inferDtype)(values);
    }
    if (dtype === 'complex64') {
        throw new Error(`Cannot construct a complex64 tensor directly. ` +
            `Please use tf.complex(real, imag).`);
    }
    if (!(0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(values) && !Array.isArray(values) &&
        typeof values !== 'number' && typeof values !== 'boolean' &&
        typeof values !== 'string') {
        throw new Error('values passed to tensor(values) must be a number/boolean/string or ' +
            'an array of numbers/booleans/strings, or a TypedArray');
    }
    if (shape != null) {
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.assertNonNegativeIntegerDimensions)(shape);
        const providedSize = (0,_util__WEBPACK_IMPORTED_MODULE_1__.sizeFromShape)(shape);
        const inferredSize = (0,_util__WEBPACK_IMPORTED_MODULE_1__.sizeFromShape)(inferredShape);
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(providedSize === inferredSize, () => `Based on the provided shape, [${shape}], the tensor should have ` +
            `${providedSize} values but has ${inferredSize}`);
        for (let i = 0; i < inferredShape.length; ++i) {
            const inferred = inferredShape[i];
            const flatDimsDontMatch = i === inferredShape.length - 1 ?
                inferred !== (0,_util__WEBPACK_IMPORTED_MODULE_1__.sizeFromShape)(shape.slice(i)) :
                true;
            (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(inferredShape[i] === shape[i] || !flatDimsDontMatch, () => `Error creating a new Tensor. Inferred shape ` +
                `(${inferredShape}) does not match the provided ` +
                `shape (${shape}). `);
        }
    }
    if (!(0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(values) && !Array.isArray(values)) {
        values = [values];
    }
    shape = shape || inferredShape;
    values = dtype !== 'string' ?
        (0,_util__WEBPACK_IMPORTED_MODULE_2__.toTypedArray)(values, dtype) :
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.flatten)(values, [], true);
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.makeTensor(values, shape, dtype);
}
//# sourceMappingURL=tensor_ops_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tile": () => (/* binding */ tile)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Construct a tensor by repeating it the number of times given by reps.
 *
 * This operation creates a new tensor by replicating `input` `reps`
 * times. The output tensor's i'th dimension has `input.shape[i] *
 * reps[i]` elements, and the values of `input` are replicated
 * `reps[i]` times along the i'th dimension. For example, tiling
 * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.
 *
 * ```js
 * const a = tf.tensor1d([1, 2]);
 *
 * a.tile([2]).print();    // or a.tile([2])
 * ```
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.tile([1, 2]).print();  // or a.tile([1, 2])
 * ```
 * @param x The tensor to tile.
 * @param reps Determines the number of replications per dimension.
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function tile_(x, reps) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'tile', 'string_or_numeric');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.rank === reps.length, () => `Error in transpose: rank of input ${$x.rank} ` +
        `must match length of reps ${reps}.`);
    const inputs = { x: $x };
    const attrs = { reps };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Tile, inputs, attrs);
}
const tile = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ tile_ });
//# sourceMappingURL=tile.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/topk.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/topk.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "topk": () => (/* binding */ topk)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Finds the values and indices of the `k` largest entries along the last
 * dimension.
 *
 * If the input is a vector (rank=1), finds the k largest entries in the vector
 * and outputs their values and indices as vectors. Thus values[j] is the j-th
 * largest entry in input, and its index is indices[j].
 * For higher rank inputs, computes the top k entries along the last dimension.
 *
 * If two elements are equal, the lower-index element appears first.
 *
 * ```js
 * const a = tf.tensor2d([[1, 5], [4, 3]]);
 * const {values, indices} = tf.topk(a);
 * values.print();
 * indices.print();
 * ```
 * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.
 * @param k Number of top elements to look for along the last dimension.
 * @param sorted If true, the resulting `k` elements will be sorted by the
 *     values in descending order.
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
function topk_(x, k = 1, sorted = true) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'topk');
    if ($x.rank === 0) {
        throw new Error('topk() expects the input to be of rank 1 or higher');
    }
    const lastDim = $x.shape[$x.shape.length - 1];
    if (k > lastDim) {
        throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) ` +
            `but got ${k}`);
    }
    const inputs = { x: $x };
    const attrs = { k, sorted };
    const [values, indices] = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.TopK, inputs, attrs);
    return { values, indices };
}
const topk = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ topk_ });
//# sourceMappingURL=topk.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transpose": () => (/* binding */ transpose)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.
 *
 * The returned `tf.Tensor`'s dimension `i` will correspond to the input
 * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,
 * where `n` is the rank of the input `tf.Tensor`. Hence by default, this
 * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);
 *
 * a.transpose().print();  // or tf.transpose(a)
 * ```
 *
 * @param x The tensor to transpose.
 * @param perm The permutation of the dimensions of a.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function transpose_(x, perm) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'transpose');
    if (perm == null) {
        perm = $x.shape.map((s, i) => i).reverse();
    }
    _util__WEBPACK_IMPORTED_MODULE_2__.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` +
        `must match length of perm ${perm}.`);
    perm.forEach(axis => {
        _util__WEBPACK_IMPORTED_MODULE_2__.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +
            ` but got ${perm}`);
    });
    if ($x.rank <= 1) {
        return $x.clone();
    }
    const inputs = { x: $x };
    const attrs = { perm };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Transpose, inputs, attrs);
}
const transpose = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ transpose_ });
//# sourceMappingURL=transpose.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/truncated_normal.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "truncatedNormal": () => (/* binding */ truncatedNormal)
/* harmony export */ });
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer */ "./node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/* harmony import */ var _rand_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rand_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rand_util.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with values sampled from a truncated normal
 * distribution.
 *
 * ```js
 * tf.truncatedNormal([2, 2]).print();
 * ```
 *
 * The generated values follow a normal distribution with specified mean and
 * standard deviation, except that values whose magnitude is more than 2
 * standard deviations from the mean are dropped and re-picked.
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param mean The mean of the normal distribution.
 * @param stdDev The standard deviation of the normal distribution.
 * @param dtype The data type of the output tensor.
 * @param seed The seed for the random number generator.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function truncatedNormal_(shape, mean = 0, stdDev = 1, dtype, seed) {
    if (dtype != null && dtype === 'bool') {
        throw new Error(`Unsupported data type $ { dtype }`);
    }
    const randGauss = new _rand_util__WEBPACK_IMPORTED_MODULE_0__.MPRandGauss(mean, stdDev, dtype, true /* truncated */, seed);
    const res = (0,_buffer__WEBPACK_IMPORTED_MODULE_1__.buffer)(shape, dtype);
    for (let i = 0; i < res.values.length; i++) {
        res.values[i] = randGauss.nextValue();
    }
    return res.toTensor();
}
const truncatedNormal = (0,_operation__WEBPACK_IMPORTED_MODULE_2__.op)({ truncatedNormal_ });
//# sourceMappingURL=truncated_normal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/unique.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/unique.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unique": () => (/* binding */ unique)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Finds unique elements along an axis of a tensor.
 *
 * It returns a tensor `values` containing all of the unique elements along the
 * `axis` of the given tensor `x` in the same order that they occur along the
 * `axis` in `x`; `x` does not need to be sorted. It also returns a tensor
 * `indices` the same size as the number of the elements in `x` along the `axis`
 * dimension. It contains the index in the unique output `values`.
 *
 * ```js
 * // A 1-D tensor
 * const a = tf.tensor1d([1, 1, 2, 4, 4, 4, 7, 8, 8]);
 * const {values, indices} = tf.unique(a);
 * values.print();   // [1, 2, 4, 7, 8,]
 * indices.print();  // [0, 0, 1, 2, 2, 2, 3, 4, 4]
 * ```
 *
 * ```js
 * // A 2-D tensor with axis=0
 * //
 * // 'a' is: [[1, 0, 0],
 * //          [1, 0, 0],
 * //          [2, 0, 0]]
 * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
 * const {values, indices} = tf.unique(a, 0)
 * values.print();   // [[1, 0, 0],
 *                   //  [2, 0, 0]]
 * indices.print();  // [0, 0, 1]
 * ```
 *
 * ```js
 * // A 2-D tensor with axis=1
 * //
 * // 'a' is: [[1, 0, 0],
 * //          [1, 0, 0],
 * //          [2, 0, 0]]
 * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);
 * const {values, indices} = tf.unique(a, 1)
 * values.print();   // [[1, 0],
 *                   //  [1, 0],
 *                   //  [2, 0]]
 * indices.print();  // [0, 1, 1]
 * ```
 * @param x A tensor (int32, string, bool).
 * @param axis The axis of the tensor to find the unique elements.
 * @returns [uniqueElements, indices] (see above for details)
 *
 * @doc {heading: 'Operations', subheading: 'Evaluation'}
 */
function unique_(x, axis = 0) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'unique', 'string_or_numeric');
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assert)($x.rank > 0, () => 'The input tensor must be at least 1D');
    const inputs = { x: $x };
    const attrs = { axis };
    const [values, indices] = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Unique, inputs, attrs);
    return { values, indices };
}
const unique = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ unique_ });
//# sourceMappingURL=unique.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unsortedSegmentSum": () => (/* binding */ unsortedSegmentSum)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Computes the sum along segments of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');
 * const numSegments = 3;
 *
 * x.unsortedSegmentSum(segmentIds, numSegments).print()
 * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)
 * ```
 * @param x The `tf.Tensor` that will be summed along its segments.
 * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s
 * dimension along the `axis`.  Maps each element of `x` to a segment.
 * @param numSegments The number of distinct `segmentIds`.
 *
 * @doc {heading: 'Operations', subheading: 'Segment'}
 */
function unsortedSegmentSum_(x, segmentIds, numSegments) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'unsortedSegmentSum');
    const $segmentIds = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');
    (0,_util__WEBPACK_IMPORTED_MODULE_2__.assert)((0,_util__WEBPACK_IMPORTED_MODULE_2__.isInt)(numSegments), () => 'numSegments must be of dtype int');
    const inputs = { x: $x, segmentIds: $segmentIds };
    const attrs = { numSegments };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.UnsortedSegmentSum, inputs, attrs);
}
const unsortedSegmentSum = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ unsortedSegmentSum_ });
//# sourceMappingURL=unsorted_segment_sum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unstack": () => (/* binding */ unstack)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





/**
 * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.
 *
 * ```js
 * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * tf.unstack(a).forEach(tensor => tensor.print());
 * ```
 *
 * @param x A tensor object.
 * @param axis The axis to unstack along. Defaults to 0 (the first dim).
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function unstack_(x, axis = 0) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'unstack', 'string_or_numeric');
    _util__WEBPACK_IMPORTED_MODULE_2__.assert(axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);
    const inputs = { value: $x };
    const attrs = { axis };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_3__.Unpack, inputs, attrs);
}
const unstack = (0,_operation__WEBPACK_IMPORTED_MODULE_4__.op)({ unstack_ });
//# sourceMappingURL=unstack.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/variable.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/variable.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "variable": () => (/* binding */ variable)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Creates a new variable with the provided initial value.
 * ```js
 * const x = tf.variable(tf.tensor([1, 2, 3]));
 * x.assign(tf.tensor([4, 5, 6]));
 *
 * x.print();
 * ```
 *
 * @param initialValue Initial value for the tensor.
 * @param trainable If true, optimizers are allowed to update it.
 * @param name Name of the variable. Defaults to a unique id.
 * @param dtype If set, initialValue will be converted to the given type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function variable(initialValue, trainable = true, name, dtype) {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.makeVariable(initialValue, trainable, name, dtype);
}
//# sourceMappingURL=variable.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/where.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "where": () => (/* binding */ where)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _broadcast_to__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./broadcast_to */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js");
/* harmony import */ var _broadcast_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./broadcast_util */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_util.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/**
 * Returns the elements, either `a` or `b` depending on the `condition`.
 *
 * If the condition is true, select from `a`, otherwise select from `b`.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const a = tf.tensor1d([1 , 2, 3]);
 * const b = tf.tensor1d([-1, -2, -3]);
 *
 * a.where(cond, b).print();
 * ```
 *
 * @param condition The input condition. Must be of dtype bool.
 * @param a If `condition` is rank 1, `a` may have a higher rank but
 *     its first dimension must match the size of `condition`.
 * @param b A tensor with the same dtype as `a` and with shape that is
 *     compatible with `a`.
 * @return A tensor with same dtype as `a` and `b`, and shape that is
 *     broadcastable from `a` and `b`.
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
function where_(condition, a, b) {
    const $a = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(a, 'a', 'where');
    const $b = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(b, 'b', 'where');
    const $condition = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(condition, 'condition', 'where', 'bool');
    // TODO: move this logic to forward function when the broadcastTo op is
    // implemented in WASM.
    // Find the broadcastable shape for $a and $b.
    const broadcastShape = (0,_broadcast_util__WEBPACK_IMPORTED_MODULE_2__.assertAndGetBroadcastShape)($a.shape, $b.shape);
    const $broadcastedA = (0,_broadcast_to__WEBPACK_IMPORTED_MODULE_3__.broadcastTo)($a, broadcastShape);
    const $broadcastedB = (0,_broadcast_to__WEBPACK_IMPORTED_MODULE_3__.broadcastTo)($b, broadcastShape);
    if ($condition.rank === 1) {
        // If condition rank is 1, then the first dimension must match the size of
        // condition.
        (0,_util__WEBPACK_IMPORTED_MODULE_4__.assert)($condition.shape[0] === $a.shape[0], () => 'The first dimension of `a` must match the size of `condition`.');
    }
    if ($condition.rank !== 1) {
        // A must have the same shape as condition.
        (0,_util__WEBPACK_IMPORTED_MODULE_4__.assertShapesMatch)($condition.shape, $broadcastedB.shape, 'Error in where: ');
    }
    const inputs = {
        condition: $condition,
        t: $broadcastedA,
        e: $broadcastedB
    };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_5__.Select, inputs);
}
const where = (0,_operation__WEBPACK_IMPORTED_MODULE_6__.op)({ where_ });
//# sourceMappingURL=where.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/where_async.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "whereAsync": () => (/* binding */ whereAsync)
/* harmony export */ });
/* harmony import */ var _backends_where_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backends/where_impl */ "./node_modules/@tensorflow/tfjs-core/dist/backends/where_impl.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Returns the coordinates of true elements of condition.
 *
 * The coordinates are returned in a 2-D tensor where the first dimension (rows)
 * represents the number of true elements, and the second dimension (columns)
 * represents the coordinates of the true elements. Keep in mind, the shape of
 * the output tensor can vary depending on how many true values there are in
 * input. Indices are output in row-major order. The resulting tensor has the
 * shape `[numTrueElems, condition.rank]`.
 *
 * This is analogous to calling the python `tf.where(cond)` without an x or y.
 *
 * ```js
 * const cond = tf.tensor1d([false, false, true], 'bool');
 * const result = await tf.whereAsync(cond);
 * result.print();
 * ```
 *
 * @doc {heading: 'Operations', subheading: 'Logical'}
 */
async function whereAsync_(condition) {
    const $condition = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_0__.convertToTensor)(condition, 'condition', 'whereAsync', 'bool');
    const vals = await $condition.data();
    const res = (0,_backends_where_impl__WEBPACK_IMPORTED_MODULE_1__.whereImpl)($condition.shape, vals);
    if (condition !== $condition) {
        $condition.dispose();
    }
    return res;
}
const whereAsync = whereAsync_;
//# sourceMappingURL=where_async.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zeros": () => (/* binding */ zeros)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _complex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./complex */ "./node_modules/@tensorflow/tfjs-core/dist/ops/complex.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Creates a `tf.Tensor` with all elements set to 0.
 *
 * ```js
 * tf.zeros([2, 2]).print();
 * ```
 *
 * @param shape An array of integers defining the output tensor shape.
 * @param dtype The type of an element in the resulting tensor. Can
 *     be 'float32', 'int32' or 'bool'. Defaults to 'float'.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function zeros(shape, dtype = 'float32') {
    if (dtype === 'complex64') {
        const real = zeros(shape, 'float32');
        const imag = zeros(shape, 'float32');
        return (0,_complex__WEBPACK_IMPORTED_MODULE_1__.complex)(real, imag);
    }
    const values = (0,_util__WEBPACK_IMPORTED_MODULE_2__.makeZerosTypedArray)((0,_util__WEBPACK_IMPORTED_MODULE_2__.sizeFromShape)(shape), dtype);
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.makeTensor(values, shape, dtype);
}
//# sourceMappingURL=zeros.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zerosLike": () => (/* binding */ zerosLike)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _kernel_names__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../kernel_names */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_names.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operation */ "./node_modules/@tensorflow/tfjs-core/dist/ops/operation.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/**
 * Creates a `tf.Tensor` with all elements set to 0 with the same shape as the
 * given tensor.
 *
 * ```js
 * const x = tf.tensor([1, 2]);
 * tf.zerosLike(x).print();
 * ```
 *
 * @param x The tensor of required shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function zerosLike_(x) {
    const $x = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_1__.convertToTensor)(x, 'x', 'zerosLike');
    const inputs = { x: $x };
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.runKernel(_kernel_names__WEBPACK_IMPORTED_MODULE_2__.ZerosLike, inputs);
}
const zerosLike = (0,_operation__WEBPACK_IMPORTED_MODULE_3__.op)({ zerosLike_ });
//# sourceMappingURL=zeros_like.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdadeltaOptimizer": () => (/* binding */ AdadeltaOptimizer)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/** @doclink Optimizer */
class AdadeltaOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_1__.Optimizer {
    constructor(learningRate, rho, epsilon = null) {
        super();
        this.learningRate = learningRate;
        this.rho = rho;
        this.epsilon = epsilon;
        this.accumulatedGrads = [];
        this.accumulatedUpdates = [];
        if (epsilon == null) {
            this.epsilon = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.backend.epsilon();
        }
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ?
            variableGradients.map(item => item.name) :
            Object.keys(variableGradients);
        variableNames.forEach((name, i) => {
            const value = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.registeredVariables[name];
            const trainable = false;
            if (this.accumulatedGrads[i] == null) {
                this.accumulatedGrads[i] = {
                    originalName: `${name}/accum_grad`,
                    variable: (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_3__.zerosLike)(value).variable(trainable))
                };
            }
            if (this.accumulatedUpdates[i] == null) {
                this.accumulatedUpdates[i] = {
                    originalName: `${name}/accum_var`,
                    variable: (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_3__.zerosLike)(value).variable(trainable))
                };
            }
            const gradient = Array.isArray(variableGradients) ?
                variableGradients[i].tensor :
                variableGradients[name];
            if (gradient == null) {
                return;
            }
            const accumulatedGrad = this.accumulatedGrads[i].variable;
            const accumulatedUpdate = this.accumulatedUpdates[i].variable;
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => {
                const newAccumulatedGrad = (0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(accumulatedGrad, this.rho), (0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_ops_square__WEBPACK_IMPORTED_MODULE_6__.square)(gradient), 1 - this.rho));
                const updates = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_ops_div__WEBPACK_IMPORTED_MODULE_7__.div)((0,_ops_ops__WEBPACK_IMPORTED_MODULE_8__.sqrt)((0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)(accumulatedUpdate, this.epsilon)), (0,_ops_ops__WEBPACK_IMPORTED_MODULE_8__.sqrt)((0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)(accumulatedGrad, this.epsilon))), gradient);
                const newAccumulatedUpdate = (0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(accumulatedUpdate, this.rho), (0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_ops_square__WEBPACK_IMPORTED_MODULE_6__.square)(updates), 1 - this.rho));
                accumulatedGrad.assign(newAccumulatedGrad);
                accumulatedUpdate.assign(newAccumulatedUpdate);
                const newValue = (0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(updates, -this.learningRate), value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedUpdates != null) {
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.dispose)(this.accumulatedGrads.map(v => v.variable));
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.dispose)(this.accumulatedUpdates.map(v => v.variable));
        }
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [...this.accumulatedGrads, ...this.accumulatedUpdates];
        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const variableCount = weightValues.length / 2;
        const trainable = false;
        this.accumulatedGrads =
            weightValues.slice(0, variableCount).map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedUpdates =
            weightValues.slice(variableCount, variableCount * 2)
                .map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'rho': this.rho,
            'epsilon': this.epsilon
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['rho'], config['epsilon']);
    }
}
/** @nocollapse */
AdadeltaOptimizer.className = 'Adadelta'; // Name matters for Python compatibility.
(0,_serialization__WEBPACK_IMPORTED_MODULE_9__.registerClass)(AdadeltaOptimizer);
//# sourceMappingURL=adadelta_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdagradOptimizer": () => (/* binding */ AdagradOptimizer)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_fill__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/fill */ "./node_modules/@tensorflow/tfjs-core/dist/ops/fill.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */










/** @doclink Optimizer */
class AdagradOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_1__.Optimizer {
    constructor(learningRate, initialAccumulatorValue = 0.1) {
        super();
        this.learningRate = learningRate;
        this.initialAccumulatorValue = initialAccumulatorValue;
        this.accumulatedGrads = [];
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ?
            variableGradients.map(item => item.name) :
            Object.keys(variableGradients);
        variableNames.forEach((name, i) => {
            const value = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.registeredVariables[name];
            if (this.accumulatedGrads[i] == null) {
                const trainable = false;
                this.accumulatedGrads[i] = {
                    originalName: `${name}/accumulator`,
                    variable: (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => (0,_ops_fill__WEBPACK_IMPORTED_MODULE_3__.fill)(value.shape, this.initialAccumulatorValue)
                        .variable(trainable))
                };
            }
            const gradient = Array.isArray(variableGradients) ?
                variableGradients[i].tensor :
                variableGradients[name];
            if (gradient == null) {
                return;
            }
            const accumulatedGrad = this.accumulatedGrads[i].variable;
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => {
                const newAccumulatedGrad = (0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)(accumulatedGrad, (0,_ops_square__WEBPACK_IMPORTED_MODULE_5__.square)(gradient));
                accumulatedGrad.assign(newAccumulatedGrad);
                const newValue = (0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_6__.mul)((0,_ops_div__WEBPACK_IMPORTED_MODULE_7__.div)(gradient, (0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_8__.sqrt)((0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)(newAccumulatedGrad, _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.backend.epsilon()))), -this.learningRate), value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedGrads != null) {
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.dispose)(this.accumulatedGrads.map(v => v.variable));
        }
    }
    async getWeights() {
        // Order matters for Python compatibility.
        return [await this.saveIterations()].concat(this.accumulatedGrads.map(v => ({ name: v.originalName, tensor: v.variable })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const trainable = false;
        this.accumulatedGrads = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'initialAccumulatorValue': this.initialAccumulatorValue,
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['initialAccumulatorValue']);
    }
}
/** @nocollapse */
AdagradOptimizer.className = 'Adagrad'; // Note: Name matters for Python compatibility.
(0,_serialization__WEBPACK_IMPORTED_MODULE_9__.registerClass)(AdagradOptimizer);
//# sourceMappingURL=adagrad_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdamOptimizer": () => (/* binding */ AdamOptimizer)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_pow__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ops/pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */













class AdamOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_1__.Optimizer {
    constructor(learningRate, beta1, beta2, epsilon = null) {
        super();
        this.learningRate = learningRate;
        this.beta1 = beta1;
        this.beta2 = beta2;
        this.epsilon = epsilon;
        this.accumulatedFirstMoment = [];
        this.accumulatedSecondMoment = [];
        (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => {
            // accB* will be updated by batch.
            this.accBeta1 = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(beta1).variable();
            this.accBeta2 = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(beta2).variable();
        });
        if (epsilon == null) {
            this.epsilon = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.backend.epsilon();
        }
    }
    applyGradients(variableGradients) {
        const varNames = Array.isArray(variableGradients) ?
            variableGradients.map(v => v.name) :
            Object.keys(variableGradients);
        (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => {
            const oneMinusAccBeta1 = (0,_ops_sub__WEBPACK_IMPORTED_MODULE_4__.sub)(1, this.accBeta1);
            const oneMinusAccBeta2 = (0,_ops_sub__WEBPACK_IMPORTED_MODULE_4__.sub)(1, this.accBeta2);
            varNames.forEach((name, i) => {
                const value = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.registeredVariables[name];
                const trainable = false;
                if (this.accumulatedFirstMoment[i] == null) {
                    this.accumulatedFirstMoment[i] = {
                        originalName: `${name}/m`,
                        variable: (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_5__.zerosLike)(value).variable(trainable))
                    };
                }
                if (this.accumulatedSecondMoment[i] == null) {
                    this.accumulatedSecondMoment[i] = {
                        originalName: `${name}/v`,
                        variable: (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_5__.zerosLike)(value).variable(trainable))
                    };
                }
                const gradient = Array.isArray(variableGradients) ?
                    variableGradients[i].tensor :
                    variableGradients[name];
                if (gradient == null) {
                    return;
                }
                const firstMoment = this.accumulatedFirstMoment[i].variable;
                const secondMoment = this.accumulatedSecondMoment[i].variable;
                const newFirstMoment = (0,_ops_add__WEBPACK_IMPORTED_MODULE_6__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)(firstMoment, this.beta1), (0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)(gradient, 1 - this.beta1));
                const newSecondMoment = (0,_ops_add__WEBPACK_IMPORTED_MODULE_6__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)(secondMoment, this.beta2), (0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)((0,_ops_square__WEBPACK_IMPORTED_MODULE_8__.square)(gradient), 1 - this.beta2));
                const biasCorrectedFirstMoment = (0,_ops_div__WEBPACK_IMPORTED_MODULE_9__.div)(newFirstMoment, oneMinusAccBeta1);
                const biasCorrectedSecondMoment = (0,_ops_div__WEBPACK_IMPORTED_MODULE_9__.div)(newSecondMoment, oneMinusAccBeta2);
                firstMoment.assign(newFirstMoment);
                secondMoment.assign(newSecondMoment);
                const newValue = (0,_ops_add__WEBPACK_IMPORTED_MODULE_6__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)((0,_ops_div__WEBPACK_IMPORTED_MODULE_9__.div)(biasCorrectedFirstMoment, (0,_ops_add__WEBPACK_IMPORTED_MODULE_6__.add)((0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_10__.sqrt)(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);
                value.assign(newValue);
            });
            this.accBeta1.assign((0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)(this.accBeta1, this.beta1));
            this.accBeta2.assign((0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)(this.accBeta2, this.beta2));
        });
        this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose();
        this.accBeta2.dispose();
        if (this.accumulatedFirstMoment != null) {
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.dispose)(this.accumulatedFirstMoment.map(v => v.variable));
        }
        if (this.accumulatedSecondMoment != null) {
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.dispose)(this.accumulatedSecondMoment.map(v => v.variable));
        }
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => {
            this.accBeta1.assign((0,_ops_pow__WEBPACK_IMPORTED_MODULE_11__.pow)(this.beta1, this.iterations_ + 1));
            this.accBeta2.assign((0,_ops_pow__WEBPACK_IMPORTED_MODULE_11__.pow)(this.beta2, this.iterations_ + 1));
        });
        const variableCount = weightValues.length / 2;
        const trainable = false;
        this.accumulatedFirstMoment =
            weightValues.slice(0, variableCount).map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedSecondMoment =
            weightValues.slice(variableCount, variableCount * 2)
                .map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'beta1': this.beta1,
            'beta2': this.beta2,
            'epsilon': this.epsilon,
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);
    }
}
/** @nocollapse */
AdamOptimizer.className = 'Adam'; // Note: Name matters for Python compatibility.
(0,_serialization__WEBPACK_IMPORTED_MODULE_12__.registerClass)(AdamOptimizer);
//# sourceMappingURL=adam_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdamaxOptimizer": () => (/* binding */ AdamaxOptimizer)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_abs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/abs */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_maximum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ops/maximum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */












class AdamaxOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_1__.Optimizer {
    constructor(learningRate, beta1, beta2, epsilon = null, decay = 0.0) {
        super();
        this.learningRate = learningRate;
        this.beta1 = beta1;
        this.beta2 = beta2;
        this.epsilon = epsilon;
        this.decay = decay;
        this.accumulatedFirstMoment = [];
        this.accumulatedWeightedInfNorm = [];
        (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => {
            this.iteration = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(0).variable();
            this.accBeta1 = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_3__.scalar)(beta1).variable();
        });
        if (epsilon == null) {
            this.epsilon = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.backend.epsilon();
        }
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ?
            variableGradients.map(item => item.name) :
            Object.keys(variableGradients);
        (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => {
            const oneMinusAccBeta1 = (0,_ops_sub__WEBPACK_IMPORTED_MODULE_4__.sub)(1, this.accBeta1);
            const lr = (0,_ops_div__WEBPACK_IMPORTED_MODULE_5__.div)(-this.learningRate, (0,_ops_add__WEBPACK_IMPORTED_MODULE_6__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)(this.iteration, this.decay), 1));
            variableNames.forEach((name, i) => {
                const value = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.registeredVariables[name];
                const trainable = false;
                if (this.accumulatedFirstMoment[i] == null) {
                    this.accumulatedFirstMoment[i] = {
                        originalName: `${name}/m`,
                        variable: (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_8__.zerosLike)(value).variable(trainable)
                    };
                }
                if (this.accumulatedWeightedInfNorm[i] == null) {
                    this.accumulatedWeightedInfNorm[i] = {
                        originalName: `${name}/v`,
                        variable: (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_8__.zerosLike)(value).variable(trainable)
                    };
                }
                const gradient = Array.isArray(variableGradients) ?
                    variableGradients[i].tensor :
                    variableGradients[name];
                if (gradient == null) {
                    return;
                }
                const firstMoment = this.accumulatedFirstMoment[i].variable;
                const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;
                const newFirstMoment = (0,_ops_add__WEBPACK_IMPORTED_MODULE_6__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)(firstMoment, this.beta1), (0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)(gradient, 1 - this.beta1));
                const ut0 = (0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)(weightedInfNorm, this.beta2);
                const ut1 = (0,_ops_abs__WEBPACK_IMPORTED_MODULE_9__.abs)(gradient);
                const newWeightedInfNorm = (0,_ops_maximum__WEBPACK_IMPORTED_MODULE_10__.maximum)(ut0, ut1);
                firstMoment.assign(newFirstMoment);
                weightedInfNorm.assign(newWeightedInfNorm);
                const newValue = (0,_ops_add__WEBPACK_IMPORTED_MODULE_6__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)((0,_ops_div__WEBPACK_IMPORTED_MODULE_5__.div)(lr, oneMinusAccBeta1), (0,_ops_div__WEBPACK_IMPORTED_MODULE_5__.div)(newFirstMoment, (0,_ops_add__WEBPACK_IMPORTED_MODULE_6__.add)(newWeightedInfNorm, this.epsilon))), value);
                value.assign(newValue);
            });
            this.iteration.assign((0,_ops_add__WEBPACK_IMPORTED_MODULE_6__.add)(this.iteration, 1));
            this.accBeta1.assign((0,_ops_mul__WEBPACK_IMPORTED_MODULE_7__.mul)(this.accBeta1, this.beta1));
        });
        this.incrementIterations();
    }
    dispose() {
        this.accBeta1.dispose();
        this.iteration.dispose();
        if (this.accumulatedFirstMoment != null) {
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.dispose)(this.accumulatedFirstMoment.map(v => v.variable));
        }
        if (this.accumulatedWeightedInfNorm != null) {
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.dispose)(this.accumulatedWeightedInfNorm.map(v => v.variable));
        }
    }
    async getWeights() {
        throw new Error('getWeights() is not implemented for Adamax yet.');
    }
    async setWeights(weightValues) {
        throw new Error('setWeights() is not implemented for Adamax yet.');
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'beta1': this.beta1,
            'beta2': this.beta2,
            'epsilon': this.epsilon,
            'decay': this.decay
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);
    }
}
/** @nocollapse */
AdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.
(0,_serialization__WEBPACK_IMPORTED_MODULE_11__.registerClass)(AdamaxOptimizer);
//# sourceMappingURL=adamax_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MomentumOptimizer": () => (/* binding */ MomentumOptimizer)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _sgd_optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sgd_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */








/** @doclink Optimizer */
class MomentumOptimizer extends _sgd_optimizer__WEBPACK_IMPORTED_MODULE_1__.SGDOptimizer {
    constructor(learningRate, momentum, useNesterov = false) {
        super(learningRate);
        this.learningRate = learningRate;
        this.momentum = momentum;
        this.useNesterov = useNesterov;
        this.accumulations = [];
        this.m = (0,_ops_scalar__WEBPACK_IMPORTED_MODULE_2__.scalar)(this.momentum);
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ?
            variableGradients.map(item => item.name) :
            Object.keys(variableGradients);
        variableNames.forEach((name, i) => {
            const value = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.registeredVariables[name];
            if (this.accumulations[i] == null) {
                const trainable = false;
                this.accumulations[i] = {
                    originalName: `${name}/momentum`,
                    variable: (0,_globals__WEBPACK_IMPORTED_MODULE_3__.tidy)(() => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_4__.zerosLike)(value).variable(trainable))
                };
            }
            const accumulation = this.accumulations[i].variable;
            const gradient = Array.isArray(variableGradients) ?
                variableGradients[i].tensor :
                variableGradients[name];
            if (gradient == null) {
                return;
            }
            (0,_globals__WEBPACK_IMPORTED_MODULE_3__.tidy)(() => {
                let newValue;
                const newAccumulation = (0,_ops_add__WEBPACK_IMPORTED_MODULE_5__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_6__.mul)(this.m, accumulation), gradient);
                if (this.useNesterov) {
                    newValue = (0,_ops_add__WEBPACK_IMPORTED_MODULE_5__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_6__.mul)(this.c, (0,_ops_add__WEBPACK_IMPORTED_MODULE_5__.add)(gradient, (0,_ops_mul__WEBPACK_IMPORTED_MODULE_6__.mul)(newAccumulation, this.m))), value);
                }
                else {
                    newValue = (0,_ops_add__WEBPACK_IMPORTED_MODULE_5__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_6__.mul)(this.c, newAccumulation), value);
                }
                accumulation.assign(newAccumulation);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    dispose() {
        this.m.dispose();
        if (this.accumulations != null) {
            (0,_globals__WEBPACK_IMPORTED_MODULE_3__.dispose)(this.accumulations.map(v => v.variable));
        }
    }
    /**
     * Sets the momentum of the optimizer.
     *
     * @param momentum
     */
    setMomentum(momentum) {
        this.momentum = momentum;
    }
    async getWeights() {
        // Order matters for Python compatibility.
        return [await this.saveIterations()].concat(this.accumulations.map(v => ({ name: v.originalName, tensor: v.variable })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const trainable = false;
        this.accumulations = weightValues.map(v => ({ originalName: v.name, variable: v.tensor.variable(trainable) }));
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'momentum': this.momentum,
            'useNesterov': this.useNesterov
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['momentum'], config['useNesterov']);
    }
}
/** @nocollapse */
MomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.
(0,_serialization__WEBPACK_IMPORTED_MODULE_7__.registerClass)(MomentumOptimizer);
//# sourceMappingURL=momentum_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Optimizer": () => (/* binding */ Optimizer)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _gradients__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../gradients */ "./node_modules/@tensorflow/tfjs-core/dist/gradients.js");
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */
class Optimizer extends _serialization__WEBPACK_IMPORTED_MODULE_0__.Serializable {
    /**
     * Executes `f()` and minimizes the scalar output of `f()` by computing
     * gradients of y with respect to the list of trainable variables provided by
     * `varList`. If no list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to minimize.
     * @param returnCost Whether to return the scalar cost value produced by
     * executing `f()`.
     * @param varList An optional list of variables to update. If specified, only
     * the trainable variables in varList will be updated by minimize. Defaults to
     * all trainable variables.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers'}
     */
    minimize(f, returnCost = false, varList) {
        const { value, grads } = this.computeGradients(f, varList);
        if (varList != null) {
            const gradArray = varList.map(v => ({ name: v.name, tensor: grads[v.name] }));
            this.applyGradients(gradArray);
        }
        else {
            this.applyGradients(grads);
        }
        // Dispose gradients.
        (0,_globals__WEBPACK_IMPORTED_MODULE_1__.dispose)(grads);
        if (returnCost) {
            return value;
        }
        else {
            value.dispose();
            return null;
        }
    }
    /**
     * The number of iterations that this optimizer instance has been invoked for.
     */
    get iterations() {
        if (this.iterations_ == null) {
            this.iterations_ = 0;
        }
        return this.iterations_;
    }
    incrementIterations() {
        this.iterations_ = this.iterations + 1;
    }
    /**
     * Executes f() and computes the gradient of the scalar output of f() with
     * respect to the list of trainable variables provided by `varList`. If no
     * list is provided, it defaults to all trainable variables.
     *
     * @param f The function to execute and whose output to use for computing
     * gradients with respect to variables.
     * @param varList An optional list of variables to compute gradients with
     * respect to. If specified, only the trainable variables in varList will have
     * gradients computed with respect to. Defaults to all trainable variables.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers'}
     */
    computeGradients(f, varList) {
        return (0,_gradients__WEBPACK_IMPORTED_MODULE_2__.variableGrads)(f, varList);
    }
    /**
     * Dispose the variables (if any) owned by this optimizer instance.
     */
    dispose() {
        if (this.iterations_ != null) {
            (0,_globals__WEBPACK_IMPORTED_MODULE_1__.dispose)(this.iterations_);
        }
    }
    async saveIterations() {
        if (this.iterations_ == null) {
            this.iterations_ = 0;
        }
        return {
            name: 'iter',
            // TODO(cais): Use 'int64' type when available.
            tensor: (0,_ops_ops__WEBPACK_IMPORTED_MODULE_3__.scalar)(this.iterations_, 'int32')
        };
    }
    async getWeights() {
        throw new Error('getWeights() is not implemented for this optimizer yet.');
    }
    async setWeights(weightValues) {
        throw new Error(`setWeights() is not implemented for this optimizer class ` +
            `${this.getClassName()}`);
    }
    /**
     * Extract the first element of the weight values and set it
     * as the iterations counter variable of this instance of optimizer.
     *
     * @param weightValues
     * @returns Weight values with the first element consumed and excluded.
     */
    async extractIterations(weightValues) {
        this.iterations_ = (await weightValues[0].tensor.data())[0];
        return weightValues.slice(1);
    }
}
Object.defineProperty(Optimizer, Symbol.hasInstance, {
    value: (instance) => {
        return instance.minimize != null && instance.computeGradients != null &&
            instance.applyGradients != null;
    }
});
//# sourceMappingURL=optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OptimizerConstructors": () => (/* binding */ OptimizerConstructors)
/* harmony export */ });
/* harmony import */ var _adadelta_optimizer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./adadelta_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js");
/* harmony import */ var _adagrad_optimizer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./adagrad_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js");
/* harmony import */ var _adam_optimizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./adam_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js");
/* harmony import */ var _adamax_optimizer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./adamax_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js");
/* harmony import */ var _momentum_optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./momentum_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js");
/* harmony import */ var _rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rmsprop_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js");
/* harmony import */ var _sgd_optimizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sgd_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







class OptimizerConstructors {
    /**
     * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
     *
     * ```js
     * // Fit a quadratic function by learning the coefficients a, b, c.
     * const xs = tf.tensor1d([0, 1, 2, 3]);
     * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
     *
     * const a = tf.scalar(Math.random()).variable();
     * const b = tf.scalar(Math.random()).variable();
     * const c = tf.scalar(Math.random()).variable();
     *
     * // y = a * x^2 + b * x + c.
     * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
     * const loss = (pred, label) => pred.sub(label).square().mean();
     *
     * const learningRate = 0.01;
     * const optimizer = tf.train.sgd(learningRate);
     *
     * // Train the model.
     * for (let i = 0; i < 10; i++) {
     *   optimizer.minimize(() => loss(f(xs), ys));
     * }
     *
     * // Make predictions.
     * console.log(
     *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
     * const preds = f(xs).dataSync();
     * preds.forEach((pred, i) => {
     *   console.log(`x: ${i}, pred: ${pred}`);
     * });
     * ```
     *
     * @param learningRate The learning rate to use for the SGD algorithm.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static sgd(learningRate) {
        return new _sgd_optimizer__WEBPACK_IMPORTED_MODULE_0__.SGDOptimizer(learningRate);
    }
    /**
     * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
     * descent.
     *
     * See
     * [http://proceedings.mlr.press/v28/sutskever13.pdf](
     * http://proceedings.mlr.press/v28/sutskever13.pdf)
     *
     * @param learningRate The learning rate to use for the Momentum gradient
     * descent algorithm.
     * @param momentum The momentum to use for the momentum gradient descent
     * algorithm.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static momentum(learningRate, momentum, useNesterov = false) {
        return new _momentum_optimizer__WEBPACK_IMPORTED_MODULE_1__.MomentumOptimizer(learningRate, momentum, useNesterov);
    }
    /**
     * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
     * descent. This implementation uses plain momentum and is not centered
     * version of RMSProp.
     *
     * See
     * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
     * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
     *
     * @param learningRate The learning rate to use for the RMSProp gradient
     * descent algorithm.
     * @param decay The discounting factor for the history/coming gradient.
     * @param momentum The momentum to use for the RMSProp gradient descent
     * algorithm.
     * @param epsilon Small value to avoid zero denominator.
     * @param centered If true, gradients are normalized by the estimated
     * variance of the gradient.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static rmsprop(learningRate, decay = .9, momentum = 0.0, epsilon = null, centered = false) {
        return new _rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_2__.RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered);
    }
    /**
     * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adam gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adam(learningRate = 0.001, beta1 = 0.9, beta2 = 0.999, epsilon = null) {
        return new _adam_optimizer__WEBPACK_IMPORTED_MODULE_3__.AdamOptimizer(learningRate, beta1, beta2, epsilon);
    }
    /**
     * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
     * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
     *
     * @param learningRate The learning rate to use for the Adadelta gradient
     * descent algorithm.
     * @param rho The learning rate decay over each update.
     * @param epsilon A constant epsilon used to better condition the grad
     * update.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adadelta(learningRate = .001, rho = .95, epsilon = null) {
        return new _adadelta_optimizer__WEBPACK_IMPORTED_MODULE_4__.AdadeltaOptimizer(learningRate, rho, epsilon);
    }
    /**
     * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
     * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
     *
     * @param learningRate The learning rate to use for the Adamax gradient
     * descent algorithm.
     * @param beta1 The exponential decay rate for the 1st moment estimates.
     * @param beta2 The exponential decay rate for the 2nd moment estimates.
     * @param epsilon A small constant for numerical stability.
     * @param decay The learning rate decay over each update.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adamax(learningRate = 0.002, beta1 = 0.9, beta2 = 0.999, epsilon = null, decay = 0.0) {
        return new _adamax_optimizer__WEBPACK_IMPORTED_MODULE_5__.AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay);
    }
    /**
     * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
     * See
     * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
     * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
     * or
     * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
     * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
     *
     * @param learningRate The learning rate to use for the Adagrad gradient
     * descent algorithm.
     * @param initialAccumulatorValue Starting value for the accumulators, must be
     * positive.
     *
     * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
     */
    static adagrad(learningRate, initialAccumulatorValue = 0.1) {
        return new _adagrad_optimizer__WEBPACK_IMPORTED_MODULE_6__.AdagradOptimizer(learningRate, initialAccumulatorValue);
    }
}
//# sourceMappingURL=optimizer_constructors.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RMSPropOptimizer": () => (/* binding */ RMSPropOptimizer)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_sqrt__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../ops/sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _ops_square__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ops/square */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _ops_zeros_like__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */











/** @doclink Optimizer */
class RMSPropOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_1__.Optimizer {
    constructor(learningRate, decay = 0.9, momentum = 0.0, epsilon = null, centered = false) {
        super();
        this.learningRate = learningRate;
        this.decay = decay;
        this.momentum = momentum;
        this.epsilon = epsilon;
        this.accumulatedMeanSquares = [];
        this.accumulatedMoments = [];
        this.accumulatedMeanGrads = [];
        this.centered = centered;
        if (epsilon == null) {
            this.epsilon = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.backend.epsilon();
        }
        if (learningRate == null) {
            throw new Error(`learningRate for RMSPropOptimizer must be defined.`);
        }
    }
    applyGradients(variableGradients) {
        const variableNames = Array.isArray(variableGradients) ?
            variableGradients.map(item => item.name) :
            Object.keys(variableGradients);
        variableNames.forEach((name, i) => {
            const value = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.registeredVariables[name];
            const trainable = false;
            if (this.accumulatedMeanSquares[i] == null) {
                this.accumulatedMeanSquares[i] = {
                    originalName: `${name}/rms`,
                    variable: (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_3__.zerosLike)(value).variable(trainable))
                };
            }
            if (this.accumulatedMoments[i] == null) {
                this.accumulatedMoments[i] = {
                    originalName: `${name}/momentum`,
                    variable: (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_3__.zerosLike)(value).variable(trainable))
                };
            }
            if (this.accumulatedMeanGrads[i] == null && this.centered) {
                this.accumulatedMeanGrads[i] = {
                    originalName: `${name}/mg`,
                    variable: (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => (0,_ops_zeros_like__WEBPACK_IMPORTED_MODULE_3__.zerosLike)(value).variable(trainable))
                };
            }
            const gradient = Array.isArray(variableGradients) ?
                variableGradients[i].tensor :
                variableGradients[name];
            if (gradient == null) {
                return;
            }
            const accumulatedMeanSquare = this.accumulatedMeanSquares[i].variable;
            const accumulatedMoments = this.accumulatedMoments[i].variable;
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => {
                const newAccumulatedMeanSquare = (0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(accumulatedMeanSquare, this.decay), (0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_ops_square__WEBPACK_IMPORTED_MODULE_6__.square)(gradient), 1 - this.decay));
                if (this.centered) {
                    const accumulatedMeanGrad = this.accumulatedMeanGrads[i].variable;
                    // Centered gradient
                    const newAccumulatedMeanGrad = (0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(accumulatedMeanGrad, this.decay), (0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(gradient, 1 - this.decay));
                    const gradContribution = (0,_ops_div__WEBPACK_IMPORTED_MODULE_7__.div)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(gradient, this.learningRate), (0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_8__.sqrt)((0,_ops_sub__WEBPACK_IMPORTED_MODULE_9__.sub)(newAccumulatedMeanSquare, (0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)((0,_ops_square__WEBPACK_IMPORTED_MODULE_6__.square)(newAccumulatedMeanGrad), this.epsilon))));
                    const newAccumulatedMoments = (0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(accumulatedMoments, this.momentum), gradContribution);
                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
                    accumulatedMeanGrad.assign(newAccumulatedMeanGrad);
                    accumulatedMoments.assign(newAccumulatedMoments);
                    const newValue = (0,_ops_sub__WEBPACK_IMPORTED_MODULE_9__.sub)(value, newAccumulatedMoments);
                    value.assign(newValue);
                }
                else {
                    // Plain gradient
                    const newAccumulatedMeanSquare = (0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(accumulatedMeanSquare, this.decay), (0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)((0,_ops_square__WEBPACK_IMPORTED_MODULE_6__.square)(gradient), 1 - this.decay));
                    const newAccumulatedMoments = (0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(accumulatedMoments, this.momentum), (0,_ops_div__WEBPACK_IMPORTED_MODULE_7__.div)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_5__.mul)(gradient, this.learningRate), (0,_ops_sqrt__WEBPACK_IMPORTED_MODULE_8__.sqrt)((0,_ops_add__WEBPACK_IMPORTED_MODULE_4__.add)(newAccumulatedMeanSquare, this.epsilon))));
                    accumulatedMeanSquare.assign(newAccumulatedMeanSquare);
                    accumulatedMoments.assign(newAccumulatedMoments);
                    const newValue = (0,_ops_sub__WEBPACK_IMPORTED_MODULE_9__.sub)(value, newAccumulatedMoments);
                    value.assign(newValue);
                }
            });
        });
        this.incrementIterations();
    }
    dispose() {
        if (this.accumulatedMeanSquares != null) {
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.dispose)(this.accumulatedMeanSquares.map(v => v.variable));
        }
        if (this.accumulatedMeanGrads != null && this.centered) {
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.dispose)(this.accumulatedMeanGrads.map(v => v.variable));
        }
        if (this.accumulatedMoments != null) {
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.dispose)(this.accumulatedMoments.map(v => v.variable));
        }
    }
    async getWeights() {
        // Order matters for Python compatibility.
        const variables = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
        if (this.centered) {
            variables.push(...this.accumulatedMeanGrads);
        }
        return [await this.saveIterations()].concat(variables.map(v => ({ name: v.originalName, tensor: v.variable })));
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        const variableCount = this.centered ? weightValues.length / 3 : weightValues.length / 2;
        const trainable = false;
        this.accumulatedMeanSquares =
            weightValues.slice(0, variableCount).map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        this.accumulatedMoments =
            weightValues.slice(variableCount, variableCount * 2)
                .map(v => ({
                originalName: v.name,
                variable: v.tensor.variable(trainable)
            }));
        if (this.centered) {
            this.accumulatedMeanGrads =
                weightValues.slice(variableCount * 2, variableCount * 3)
                    .map(v => ({
                    originalName: v.name,
                    variable: v.tensor.variable(trainable)
                }));
        }
    }
    getConfig() {
        return {
            'learningRate': this.learningRate,
            'decay': this.decay,
            'momentum': this.momentum,
            'epsilon': this.epsilon,
            'centered': this.centered
        };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate'], config['decay'], config['momentum'], config['epsilon'], config['centered']);
    }
}
/** @nocollapse */
RMSPropOptimizer.className = 'RMSProp'; // Note: Name matters for Python compatibility.
(0,_serialization__WEBPACK_IMPORTED_MODULE_10__.registerClass)(RMSPropOptimizer);
//# sourceMappingURL=rmsprop_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SGDOptimizer": () => (/* binding */ SGDOptimizer)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _ops_scalar__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ops/scalar */ "./node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js");
/* harmony import */ var _serialization__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../serialization */ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js");
/* harmony import */ var _optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */







/** @doclink Optimizer */
class SGDOptimizer extends _optimizer__WEBPACK_IMPORTED_MODULE_1__.Optimizer {
    constructor(learningRate) {
        super();
        this.learningRate = learningRate;
        this.setLearningRate(learningRate);
    }
    applyGradients(variableGradients) {
        const varNames = Array.isArray(variableGradients) ?
            variableGradients.map(v => v.name) :
            Object.keys(variableGradients);
        varNames.forEach((name, i) => {
            const gradient = Array.isArray(variableGradients) ?
                variableGradients[i].tensor :
                variableGradients[name];
            if (gradient == null) {
                return;
            }
            const value = _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.registeredVariables[name];
            (0,_globals__WEBPACK_IMPORTED_MODULE_2__.tidy)(() => {
                const newValue = (0,_ops_add__WEBPACK_IMPORTED_MODULE_3__.add)((0,_ops_mul__WEBPACK_IMPORTED_MODULE_4__.mul)(this.c, gradient), value);
                value.assign(newValue);
            });
        });
        this.incrementIterations();
    }
    /**
     * Sets the learning rate of the optimizer.
     */
    setLearningRate(learningRate) {
        this.learningRate = learningRate;
        if (this.c != null) {
            this.c.dispose();
        }
        this.c = (0,_globals__WEBPACK_IMPORTED_MODULE_2__.keep)((0,_ops_scalar__WEBPACK_IMPORTED_MODULE_5__.scalar)(-learningRate));
    }
    dispose() {
        this.c.dispose();
    }
    async getWeights() {
        return [await this.saveIterations()];
    }
    async setWeights(weightValues) {
        weightValues = await this.extractIterations(weightValues);
        if (weightValues.length !== 0) {
            throw new Error('SGD optimizer does not have settable weights.');
        }
    }
    getConfig() {
        return { 'learningRate': this.learningRate };
    }
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config['learningRate']);
    }
}
/** @nocollapse */
SGDOptimizer.className = 'SGD'; // Note: Name matters for Python compatibility.
(0,_serialization__WEBPACK_IMPORTED_MODULE_6__.registerClass)(SGDOptimizer);
//# sourceMappingURL=sgd_optimizer.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PlatformBrowser": () => (/* binding */ PlatformBrowser)
/* harmony export */ });
/* harmony import */ var _flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../flags */ "./node_modules/@tensorflow/tfjs-core/dist/flags.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _io_indexed_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../io/indexed_db */ "./node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js");
/* harmony import */ var _io_local_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../io/local_storage */ "./node_modules/@tensorflow/tfjs-core/dist/io/local_storage.js");
/* harmony import */ var _io_model_management__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../io/model_management */ "./node_modules/@tensorflow/tfjs-core/dist/io/model_management.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





class PlatformBrowser {
    fetch(path, init) {
        return fetch(path, init);
    }
    now() {
        return performance.now();
    }
    encode(text, encoding) {
        if (encoding !== 'utf-8' && encoding !== 'utf8') {
            throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);
        }
        if (this.textEncoder == null) {
            this.textEncoder = new TextEncoder();
        }
        return this.textEncoder.encode(text);
    }
    decode(bytes, encoding) {
        return new TextDecoder(encoding).decode(bytes);
    }
}
if ((0,_environment__WEBPACK_IMPORTED_MODULE_4__.env)().get('IS_BROWSER')) {
    (0,_environment__WEBPACK_IMPORTED_MODULE_4__.env)().setPlatform('browser', new PlatformBrowser());
    // Register LocalStorage IOHandler
    try {
        _io_model_management__WEBPACK_IMPORTED_MODULE_3__.ModelStoreManagerRegistry.registerManager(_io_local_storage__WEBPACK_IMPORTED_MODULE_2__.BrowserLocalStorage.URL_SCHEME, new _io_local_storage__WEBPACK_IMPORTED_MODULE_2__.BrowserLocalStorageManager());
    }
    catch (err) {
    }
    // Register IndexedDB IOHandler
    try {
        _io_model_management__WEBPACK_IMPORTED_MODULE_3__.ModelStoreManagerRegistry.registerManager(_io_indexed_db__WEBPACK_IMPORTED_MODULE_1__.BrowserIndexedDB.URL_SCHEME, new _io_indexed_db__WEBPACK_IMPORTED_MODULE_1__.BrowserIndexedDBManager());
    }
    catch (err) {
    }
}
//# sourceMappingURL=platform_browser.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/platforms/platform_node.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getNodeFetch": () => (/* binding */ getNodeFetch),
/* harmony export */   "resetSystemFetch": () => (/* binding */ resetSystemFetch),
/* harmony export */   "setSystemFetch": () => (/* binding */ setSystemFetch),
/* harmony export */   "getSystemFetch": () => (/* binding */ getSystemFetch),
/* harmony export */   "PlatformNode": () => (/* binding */ PlatformNode)
/* harmony export */ });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// We are wrapping this within an object so it can be stubbed by Jasmine.
const getNodeFetch = {
    // tslint:disable-next-line:no-require-imports
    importFetch: () => __webpack_require__(/*! node-fetch */ "?7581")
};
let systemFetch;
// These getters and setters are for testing so we don't export a mutable
// variable.
function resetSystemFetch() {
    systemFetch = null;
}
function setSystemFetch(fetchFn) {
    systemFetch = fetchFn;
}
function getSystemFetch() {
    return systemFetch;
}
class PlatformNode {
    constructor() {
        // tslint:disable-next-line:no-require-imports
        this.util = __webpack_require__(/*! util */ "?0bed");
        // According to the spec, the built-in encoder can do only UTF-8 encoding.
        // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder
        this.textEncoder = new this.util.TextEncoder();
    }
    fetch(path, requestInits) {
        if ((0,_environment__WEBPACK_IMPORTED_MODULE_0__.env)().global.fetch != null) {
            return (0,_environment__WEBPACK_IMPORTED_MODULE_0__.env)().global.fetch(path, requestInits);
        }
        if (systemFetch == null) {
            systemFetch = getNodeFetch.importFetch();
        }
        return systemFetch(path, requestInits);
    }
    now() {
        const time = process.hrtime();
        return time[0] * 1000 + time[1] / 1000000;
    }
    encode(text, encoding) {
        if (encoding !== 'utf-8' && encoding !== 'utf8') {
            throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);
        }
        return this.textEncoder.encode(text);
    }
    decode(bytes, encoding) {
        if (bytes.length === 0) {
            return '';
        }
        return new this.util.TextDecoder(encoding).decode(bytes);
    }
}
if ((0,_environment__WEBPACK_IMPORTED_MODULE_0__.env)().get('IS_NODE')) {
    (0,_environment__WEBPACK_IMPORTED_MODULE_0__.env)().setPlatform('node', new PlatformNode());
}
//# sourceMappingURL=platform_node.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/profiler.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/profiler.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Profiler": () => (/* binding */ Profiler),
/* harmony export */   "checkComputationForErrors": () => (/* binding */ checkComputationForErrors),
/* harmony export */   "Logger": () => (/* binding */ Logger)
/* harmony export */ });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


class Profiler {
    constructor(backendTimer, logger) {
        this.backendTimer = backendTimer;
        this.logger = logger;
        if (logger == null) {
            this.logger = new Logger();
        }
    }
    profileKernel(kernelName, inputs, f) {
        let outputs;
        const holdResultWrapperFn = () => {
            outputs = f();
        };
        const timer = this.backendTimer.time(holdResultWrapperFn);
        if ((0,_environment__WEBPACK_IMPORTED_MODULE_0__.env)().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {
            for (let i = 0; i < outputs.length; i++) {
                const output = outputs[i];
                // Dangling promise here because we don't want to propagate up
                // asynchronicity.
                output.data().then(tensorVals => {
                    checkComputationForErrors(tensorVals, output.dtype, kernelName);
                });
            }
        }
        const kernelProfile = {
            kernelName,
            outputs,
            inputs,
            timeMs: timer.then(timing => timing.kernelMs),
            extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ?
                timing.getExtraProfileInfo() :
                '')
        };
        return kernelProfile;
    }
    logKernelProfile(kernelProfile) {
        const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;
        outputs.forEach(result => {
            Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {
                this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);
            });
        });
    }
}
function checkComputationForErrors(vals, dtype, kernelName) {
    if (dtype !== 'float32') {
        // Only floating point computations will generate NaN values
        return false;
    }
    for (let i = 0; i < vals.length; i++) {
        const num = vals[i];
        if (isNaN(num) || !isFinite(num)) {
            // Throwing custom exception so behavior is testable.
            console.warn(`Found ${num} in the result of '${kernelName}'`);
            return true;
        }
    }
    return false;
}
class Logger {
    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {
        const time = typeof timeMs === 'number' ? _util__WEBPACK_IMPORTED_MODULE_1__.rightPad(`${timeMs}ms`, 9) :
            timeMs['error'];
        const paddedName = _util__WEBPACK_IMPORTED_MODULE_1__.rightPad(name, 25);
        const rank = result.rank;
        const size = result.size;
        const shape = _util__WEBPACK_IMPORTED_MODULE_1__.rightPad(result.shape.toString(), 14);
        let inputShapesDescription = '';
        for (const name in inputs) {
            const input = inputs[name];
            if (input != null) {
                // The input might be a non-tensor (e.g HTMLImageElement), in which case
                // we claim the output shape as input shape.
                const inputShape = input.shape || result.shape;
                const inputRank = inputShape.length;
                inputShapesDescription +=
                    `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;
            }
        }
        console.log(`%c${paddedName}\t%c${time}\t%c${rank}D ${shape}\t%c${size}\t%c${inputShapesDescription}\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');
    }
}
//# sourceMappingURL=profiler.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/abs.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/abs.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/abs.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.abs = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.abs)(this);
};
//# sourceMappingURL=abs.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acos.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acos.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/acos.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.acos = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.acos)(this);
};
//# sourceMappingURL=acos.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acosh.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acosh.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/acosh.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.acosh = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.acosh)(this);
};
//# sourceMappingURL=acosh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/add */ "./node_modules/@tensorflow/tfjs-core/dist/ops/add.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.add = function (b) {
    this.throwIfDisposed();
    return (0,_ops_add__WEBPACK_IMPORTED_MODULE_1__.add)(this, b);
};
//# sourceMappingURL=add.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add_strict.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.addStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.addStrict)(this, x);
};
//# sourceMappingURL=add_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/all.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/all.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_all__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/all */ "./node_modules/@tensorflow/tfjs-core/dist/ops/all.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.all = function (axis, keepDims) {
    this.throwIfDisposed();
    return (0,_ops_all__WEBPACK_IMPORTED_MODULE_1__.all)(this, axis, keepDims);
};
//# sourceMappingURL=all.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/any.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/any.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_any__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/any */ "./node_modules/@tensorflow/tfjs-core/dist/ops/any.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.any = function (axis, keepDims) {
    this.throwIfDisposed();
    return (0,_ops_any__WEBPACK_IMPORTED_MODULE_1__.any)(this, axis, keepDims);
};
//# sourceMappingURL=any.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_max.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_max.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_arg_max__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/arg_max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.argMax = function (axis) {
    this.throwIfDisposed();
    return (0,_ops_arg_max__WEBPACK_IMPORTED_MODULE_1__.argMax)(this, axis);
};
//# sourceMappingURL=arg_max.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_min.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_min.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_arg_min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/arg_min */ "./node_modules/@tensorflow/tfjs-core/dist/ops/arg_min.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.argMin = function (axis) {
    this.throwIfDisposed();
    return (0,_ops_arg_min__WEBPACK_IMPORTED_MODULE_1__.argMin)(this, axis);
};
//# sourceMappingURL=arg_min.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as1d.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as1d.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/** Converts a `tf.Tensor` to a `tf.Tensor1D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.as1D = function () {
    this.throwIfDisposed();
    return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [this.size]);
};
//# sourceMappingURL=as1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as2d.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as2d.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor2D`.
 *
 * @param rows Number of rows in `tf.Tensor2D`.
 * @param columns Number of columns in `tf.Tensor2D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.as2D = function (rows, columns) {
    this.throwIfDisposed();
    return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [rows, columns]);
};
//# sourceMappingURL=as2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as3d.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as3d.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor3D`.
 *
 * @param rows Number of rows in `tf.Tensor3D`.
 * @param columns Number of columns in `tf.Tensor3D`.
 * @param depth Depth of `tf.Tensor3D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.as3D = function (rows, columns, depth) {
    this.throwIfDisposed();
    return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [rows, columns, depth]);
};
//# sourceMappingURL=as3d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as4d.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as4d.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor4D`.
 *
 * @param rows Number of rows in `tf.Tensor4D`.
 * @param columns Number of columns in `tf.Tensor4D`.
 * @param depth Depth of `tf.Tensor4D`.
 * @param depth2 4th dimension of `tf.Tensor4D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.as4D = function (rows, columns, depth, depth2) {
    this.throwIfDisposed();
    return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [rows, columns, depth, depth2]);
};
//# sourceMappingURL=as4d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as5d.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as5d.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Converts a `tf.Tensor` to a `tf.Tensor5D`.
 *
 * @param rows Number of rows in `tf.Tensor5D`.
 * @param columns Number of columns in `tf.Tensor5D`.
 * @param depth Depth of `tf.Tensor5D`.
 * @param depth2 4th dimension of `tf.Tensor5D`.
 * @param depth3 5th dimension of 'tf.Tensor5D'
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.as5D = function (rows, columns, depth, depth2, depth3) {
    this.throwIfDisposed();
    return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [rows, columns, depth, depth2, depth3]);
};
//# sourceMappingURL=as5d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_scalar.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_scalar.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/** Converts a size-1 `tf.Tensor` to a `tf.Scalar`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.asScalar = function () {
    this.throwIfDisposed();
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(this.size === 1, () => 'The array must have only 1 element.');
    return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_2__.reshape)(this, []);
};
//# sourceMappingURL=as_scalar.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_type.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_type.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * Casts a `tf.Tensor` to a specified dtype.
 *
 * @param dtype Data-type to cast the tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.asType = function (dtype) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cast)(this, dtype);
};
//# sourceMappingURL=as_type.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asin.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asin.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/asin.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.asin = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.asin)(this);
};
//# sourceMappingURL=asin.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asinh.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asinh.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/asinh.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.asinh = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.asinh)(this);
};
//# sourceMappingURL=asinh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.atan = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.atan)(this);
};
//# sourceMappingURL=atan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_atan2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/atan2 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atan2.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.atan2 = function (b) {
    this.throwIfDisposed();
    return (0,_ops_atan2__WEBPACK_IMPORTED_MODULE_1__.atan2)(this, b);
};
//# sourceMappingURL=atan2.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atanh.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atanh.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/atanh.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.atanh = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.atanh)(this);
};
//# sourceMappingURL=atanh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_avg_pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/avg_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/avg_pool.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.avgPool = function (filterSize, strides, pad, dimRoundingMode) {
    this.throwIfDisposed();
    return (0,_ops_avg_pool__WEBPACK_IMPORTED_MODULE_1__.avgPool)(this, filterSize, strides, pad, dimRoundingMode);
};
//# sourceMappingURL=avg_pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/batch_to_space_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batch_to_space_nd.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.batchToSpaceND = function (blockShape, crops) {
    this.throwIfDisposed();
    return (0,_ops_batch_to_space_nd__WEBPACK_IMPORTED_MODULE_1__.batchToSpaceND)(this, blockShape, crops);
};
//# sourceMappingURL=batch_to_space_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_batchnorm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/ops/batchnorm.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.batchNorm = function (mean, variance, offset, scale, varianceEpsilon) {
    this.throwIfDisposed();
    return (0,_ops_batchnorm__WEBPACK_IMPORTED_MODULE_1__.batchNorm)(this, mean, variance, offset, scale, varianceEpsilon);
};
//# sourceMappingURL=batchnorm.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_broadcast_to__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/broadcast_to */ "./node_modules/@tensorflow/tfjs-core/dist/ops/broadcast_to.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.broadcastTo = function (shape) {
    this.throwIfDisposed();
    return (0,_ops_broadcast_to__WEBPACK_IMPORTED_MODULE_1__.broadcastTo)(this, shape);
};
//# sourceMappingURL=broadcast_to.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cast.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cast.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.cast = function (dtype) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cast)(this, dtype);
};
//# sourceMappingURL=cast.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ceil.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ceil.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ceil.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.ceil = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.ceil)(this);
};
//# sourceMappingURL=ceil.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/clip_by_value.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/clip_by_value.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/clip_by_value.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.clipByValue = function (min, max) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.clipByValue)(this, min, max);
};
//# sourceMappingURL=clip_by_value.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/concat */ "./node_modules/@tensorflow/tfjs-core/dist/ops/concat.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.concat = function (x, axis) {
    this.throwIfDisposed();
    if (x instanceof _tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor) {
        x = [x];
    }
    return (0,_ops_concat__WEBPACK_IMPORTED_MODULE_1__.concat)([this, ...x], axis);
};
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_conv1d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/conv1d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv1d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.conv1d = function (filter, stride, pad, dataFormat, dilation, dimRoundingMode) {
    this.throwIfDisposed();
    return (0,_ops_conv1d__WEBPACK_IMPORTED_MODULE_1__.conv1d)(this, filter, stride, pad, dataFormat, dilation, dimRoundingMode);
};
//# sourceMappingURL=conv1d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.conv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
    this.throwIfDisposed();
    return (0,_ops_conv2d__WEBPACK_IMPORTED_MODULE_1__.conv2d)(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};
//# sourceMappingURL=conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_conv2d_transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/conv2d_transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/conv2d_transpose.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.conv2dTranspose = function (filter, outputShape, strides, pad, dimRoundingMode) {
    this.throwIfDisposed();
    return (0,_ops_conv2d_transpose__WEBPACK_IMPORTED_MODULE_1__.conv2dTranspose)(this, filter, outputShape, strides, pad, dimRoundingMode);
};
//# sourceMappingURL=conv2d_transpose.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cos.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cos.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cos.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.cos = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cos)(this);
};
//# sourceMappingURL=cos.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cosh.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cosh.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cosh.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.cosh = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cosh)(this);
};
//# sourceMappingURL=cosh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_cumsum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/cumsum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cumsum.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.cumsum = function (axis, exclusive, reverse) {
    this.throwIfDisposed();
    return (0,_ops_cumsum__WEBPACK_IMPORTED_MODULE_1__.cumsum)(this, axis, exclusive, reverse);
};
//# sourceMappingURL=cumsum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_depth_to_space__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/depth_to_space */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depth_to_space.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.depthToSpace = function (blockSize, dataFormat) {
    this.throwIfDisposed();
    return (0,_ops_depth_to_space__WEBPACK_IMPORTED_MODULE_1__.depthToSpace)(this, blockSize, dataFormat);
};
//# sourceMappingURL=depth_to_space.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2D_deprecated.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2D_deprecated.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../globals */ "./node_modules/@tensorflow/tfjs-core/dist/globals.js");
/* harmony import */ var _ops_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ops/depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * @deprecated Use `depthwiseConv2d` instead.
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.depthwiseConv2D = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
    (0,_globals__WEBPACK_IMPORTED_MODULE_1__.deprecationWarn)('depthwiseConv2D is deprecated, use depthwiseConv2d instead');
    this.throwIfDisposed();
    return (0,_ops_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_2__.depthwiseConv2d)(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};
//# sourceMappingURL=depthwise_conv2D_deprecated.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/depthwise_conv2d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.depthwiseConv2d = function (filter, strides, pad, dataFormat, dilations, dimRoundingMode) {
    this.throwIfDisposed();
    return (0,_ops_depthwise_conv2d__WEBPACK_IMPORTED_MODULE_1__.depthwiseConv2d)(this, filter, strides, pad, dataFormat, dilations, dimRoundingMode);
};
//# sourceMappingURL=depthwise_conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dilation2d.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dilation2d.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_dilation2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/dilation2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dilation2d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.dilation2d = function (filter, strides, pad, dilations, dataFormat) {
    this.throwIfDisposed();
    return (0,_ops_dilation2d__WEBPACK_IMPORTED_MODULE_1__.dilation2d)(this, filter, strides, pad, dilations, dataFormat);
};
//# sourceMappingURL=dilation2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_div__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/div */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.div = function (b) {
    this.throwIfDisposed();
    return (0,_ops_div__WEBPACK_IMPORTED_MODULE_1__.div)(this, b);
};
//# sourceMappingURL=div.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_div_no_nan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/div_no_nan */ "./node_modules/@tensorflow/tfjs-core/dist/ops/div_no_nan.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.divNoNan = function (b) {
    this.throwIfDisposed();
    return (0,_ops_div_no_nan__WEBPACK_IMPORTED_MODULE_1__.divNoNan)(this, b);
};
//# sourceMappingURL=div_no_nan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_strict.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.divStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.divStrict)(this, x);
};
//# sourceMappingURL=div_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_dot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/dot */ "./node_modules/@tensorflow/tfjs-core/dist/ops/dot.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.dot = function (b) {
    this.throwIfDisposed();
    return (0,_ops_dot__WEBPACK_IMPORTED_MODULE_1__.dot)(this, b);
};
//# sourceMappingURL=dot.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_elu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/elu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/elu.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.elu = function () {
    this.throwIfDisposed();
    return (0,_ops_elu__WEBPACK_IMPORTED_MODULE_1__.elu)(this);
};
//# sourceMappingURL=elu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/equal.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.equal = function (b) {
    this.throwIfDisposed();
    return (0,_ops_equal__WEBPACK_IMPORTED_MODULE_1__.equal)(this, b);
};
//# sourceMappingURL=equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal_strict.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal_strict.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.equalStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.equalStrict)(this, x);
};
//# sourceMappingURL=equal_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/erf.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/erf.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/erf.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.erf = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.erf)(this);
};
//# sourceMappingURL=erf.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/exp.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/exp.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/exp.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.exp = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.exp)(this);
};
//# sourceMappingURL=exp.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_expand_dims__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/expand_dims */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expand_dims.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.expandDims = function (axis) {
    this.throwIfDisposed();
    return (0,_ops_expand_dims__WEBPACK_IMPORTED_MODULE_1__.expandDims)(this, axis);
};
//# sourceMappingURL=expand_dims.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expm1.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expm1.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/expm1.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.expm1 = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.expm1)(this);
};
//# sourceMappingURL=expm1.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/fft.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/fft.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/fft.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.fft = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.fft)(this);
};
//# sourceMappingURL=fft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/flatten.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/flatten.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/** Flatten a Tensor to a 1D array.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.flatten = function () {
    this.throwIfDisposed();
    return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, [this.size]);
};
//# sourceMappingURL=flatten.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floor.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.floor = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.floor)(this);
};
//# sourceMappingURL=floor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_floorDiv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/floorDiv */ "./node_modules/@tensorflow/tfjs-core/dist/ops/floorDiv.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.floorDiv = function (b) {
    this.throwIfDisposed();
    return (0,_ops_floorDiv__WEBPACK_IMPORTED_MODULE_1__.floorDiv)(this, b);
};
//# sourceMappingURL=floorDiv.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/gather.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/gather.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_gather__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/gather */ "./node_modules/@tensorflow/tfjs-core/dist/ops/gather.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.gather = function (indices, axis) {
    this.throwIfDisposed();
    return (0,_ops_gather__WEBPACK_IMPORTED_MODULE_1__.gather)(this, indices, axis);
};
//# sourceMappingURL=gather.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_greater__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/greater */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.greater = function (b) {
    this.throwIfDisposed();
    return (0,_ops_greater__WEBPACK_IMPORTED_MODULE_1__.greater)(this, b);
};
//# sourceMappingURL=greater.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_greater_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/greater_equal.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.greaterEqual = function (b) {
    this.throwIfDisposed();
    return (0,_ops_greater_equal__WEBPACK_IMPORTED_MODULE_1__.greaterEqual)(this, b);
};
//# sourceMappingURL=greater_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal_strict.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal_strict.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.greaterEqualStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.greaterEqualStrict)(this, x);
};
//# sourceMappingURL=greater_equal_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_strict.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_strict.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.greaterStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.greaterStrict)(this, x);
};
//# sourceMappingURL=greater_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ifft.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ifft.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/ifft.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.ifft = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.ifft)(this);
};
//# sourceMappingURL=ifft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/irfft.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/irfft.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/irfft.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.irfft = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.irfft)(this);
};
//# sourceMappingURL=irfft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_finite.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_finite.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_finite.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.isFinite = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.isFinite)(this);
};
//# sourceMappingURL=is_finite.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_inf.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_inf.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_inf.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.isInf = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.isInf)(this);
};
//# sourceMappingURL=is_inf.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_nan.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_nan.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/is_nan.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.isNaN = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.isNaN)(this);
};
//# sourceMappingURL=is_nan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_leaky_relu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/leaky_relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/leaky_relu.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.leakyRelu = function (alpha) {
    this.throwIfDisposed();
    return (0,_ops_leaky_relu__WEBPACK_IMPORTED_MODULE_1__.leakyRelu)(this, alpha);
};
//# sourceMappingURL=leaky_relu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_less__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/less */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.less = function (b) {
    this.throwIfDisposed();
    return (0,_ops_less__WEBPACK_IMPORTED_MODULE_1__.less)(this, b);
};
//# sourceMappingURL=less.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_less_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/less_equal.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.lessEqual = function (b) {
    this.throwIfDisposed();
    return (0,_ops_less_equal__WEBPACK_IMPORTED_MODULE_1__.lessEqual)(this, b);
};
//# sourceMappingURL=less_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal_strict.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal_strict.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.lessEqualStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.lessEqualStrict)(this, x);
};
//# sourceMappingURL=less_equal_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_strict.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_strict.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.lessStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.lessStrict)(this, x);
};
//# sourceMappingURL=less_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_local_response_normalization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/local_response_normalization */ "./node_modules/@tensorflow/tfjs-core/dist/ops/local_response_normalization.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.localResponseNormalization = function (depthRadius, bias, alpha, beta) {
    this.throwIfDisposed();
    return (0,_ops_local_response_normalization__WEBPACK_IMPORTED_MODULE_1__.localResponseNormalization)(this, depthRadius, bias, alpha, beta);
};
//# sourceMappingURL=local_response_normalization.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.log = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.log)(this);
};
//# sourceMappingURL=log.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log1p.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log1p.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log1p.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.log1p = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.log1p)(this);
};
//# sourceMappingURL=log1p.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sigmoid.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sigmoid.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sigmoid.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.logSigmoid = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.logSigmoid)(this);
};
//# sourceMappingURL=log_sigmoid.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_softmax.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_softmax.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_softmax.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.logSoftmax = function (axis) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.logSoftmax)(this, axis);
};
//# sourceMappingURL=log_softmax.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sum_exp.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sum_exp.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_log_sum_exp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/log_sum_exp */ "./node_modules/@tensorflow/tfjs-core/dist/ops/log_sum_exp.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.logSumExp = function (axis, keepDims) {
    this.throwIfDisposed();
    return (0,_ops_log_sum_exp__WEBPACK_IMPORTED_MODULE_1__.logSumExp)(this, axis, keepDims);
};
//# sourceMappingURL=log_sum_exp.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_and.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_and.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_and__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_and.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.logicalAnd = function (b) {
    this.throwIfDisposed();
    return (0,_ops_logical_and__WEBPACK_IMPORTED_MODULE_1__.logicalAnd)(this, b);
};
//# sourceMappingURL=logical_and.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_not.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_not.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_not__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/logical_not */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_not.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.logicalNot = function () {
    this.throwIfDisposed();
    return (0,_ops_logical_not__WEBPACK_IMPORTED_MODULE_1__.logicalNot)(this);
};
//# sourceMappingURL=logical_not.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_or.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_or.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_or__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/logical_or */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_or.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.logicalOr = function (b) {
    this.throwIfDisposed();
    return (0,_ops_logical_or__WEBPACK_IMPORTED_MODULE_1__.logicalOr)(this, b);
};
//# sourceMappingURL=logical_or.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_xor.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_xor.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_logical_xor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/logical_xor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/logical_xor.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.logicalXor = function (b) {
    this.throwIfDisposed();
    return (0,_ops_logical_xor__WEBPACK_IMPORTED_MODULE_1__.logicalXor)(this, b);
};
//# sourceMappingURL=logical_xor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mat_mul.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.matMul = function (b, transposeA, transposeB) {
    this.throwIfDisposed();
    return (0,_ops_mat_mul__WEBPACK_IMPORTED_MODULE_1__.matMul)(this, b, transposeA, transposeB);
};
//# sourceMappingURL=mat_mul.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_max__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/max */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.max = function (axis, keepDims) {
    this.throwIfDisposed();
    return (0,_ops_max__WEBPACK_IMPORTED_MODULE_1__.max)(this, axis, keepDims);
};
//# sourceMappingURL=max.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_max_pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/max_pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/max_pool.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.maxPool = function (filterSize, strides, pad, dimRoundingMode) {
    this.throwIfDisposed();
    return (0,_ops_max_pool__WEBPACK_IMPORTED_MODULE_1__.maxPool)(this, filterSize, strides, pad, dimRoundingMode);
};
//# sourceMappingURL=max_pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_maximum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/maximum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/maximum.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.maximum = function (b) {
    this.throwIfDisposed();
    return (0,_ops_maximum__WEBPACK_IMPORTED_MODULE_1__.maximum)(this, b);
};
//# sourceMappingURL=maximum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum_strict.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum_strict.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.maximumStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.maximumStrict)(this, x);
};
//# sourceMappingURL=maximum_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mean.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mean.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/mean */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mean.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.mean = function (axis, keepDims) {
    this.throwIfDisposed();
    return (0,_ops_mean__WEBPACK_IMPORTED_MODULE_1__.mean)(this, axis, keepDims);
};
//# sourceMappingURL=mean.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/min.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/min.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/min */ "./node_modules/@tensorflow/tfjs-core/dist/ops/min.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.min = function (axis, keepDims) {
    this.throwIfDisposed();
    return (0,_ops_min__WEBPACK_IMPORTED_MODULE_1__.min)(this, axis, keepDims);
};
//# sourceMappingURL=min.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_minimum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/minimum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/minimum.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.minimum = function (b) {
    this.throwIfDisposed();
    return (0,_ops_minimum__WEBPACK_IMPORTED_MODULE_1__.minimum)(this, b);
};
//# sourceMappingURL=minimum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum_strict.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum_strict.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.minimumStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.minimumStrict)(this, x);
};
//# sourceMappingURL=minimum_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mirror_pad.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mirror_pad.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mirror_pad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/mirror_pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mirror_pad.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.mirrorPad = function (paddings, mode) {
    this.throwIfDisposed();
    return (0,_ops_mirror_pad__WEBPACK_IMPORTED_MODULE_1__.mirrorPad)(this, paddings, mode);
};
//# sourceMappingURL=mirror_pad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/mod */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mod.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.mod = function (b) {
    this.throwIfDisposed();
    return (0,_ops_mod__WEBPACK_IMPORTED_MODULE_1__.mod)(this, b);
};
//# sourceMappingURL=mod.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod_strict.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.modStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.modStrict)(this, x);
};
//# sourceMappingURL=mod_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_mul__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/mul */ "./node_modules/@tensorflow/tfjs-core/dist/ops/mul.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.mul = function (b) {
    this.throwIfDisposed();
    return (0,_ops_mul__WEBPACK_IMPORTED_MODULE_1__.mul)(this, b);
};
//# sourceMappingURL=mul.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul_strict.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.mulStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.mulStrict)(this, x);
};
//# sourceMappingURL=mul_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/neg.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/neg.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/neg.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.neg = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.neg)(this);
};
//# sourceMappingURL=neg.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/norm.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/norm.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/norm.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.norm = function (ord, axis, keepDims) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.norm)(this, ord, axis, keepDims);
};
//# sourceMappingURL=norm.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_not_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/not_equal */ "./node_modules/@tensorflow/tfjs-core/dist/ops/not_equal.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.notEqual = function (b) {
    this.throwIfDisposed();
    return (0,_ops_not_equal__WEBPACK_IMPORTED_MODULE_1__.notEqual)(this, b);
};
//# sourceMappingURL=not_equal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal_strict.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal_strict.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/compare.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.notEqualStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.notEqualStrict)(this, x);
};
//# sourceMappingURL=not_equal_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_one_hot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/one_hot */ "./node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.oneHot = function (depth, onValue = 1, offValue = 0) {
    this.throwIfDisposed();
    return (0,_ops_one_hot__WEBPACK_IMPORTED_MODULE_1__.oneHot)(this, depth, onValue, offValue);
};
//# sourceMappingURL=one_hot.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ones_like.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ones_like.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/ones_like.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.onesLike = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.onesLike)(this);
};
//# sourceMappingURL=ones_like.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_pad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/pad */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pad.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.pad = function (paddings, constantValue) {
    this.throwIfDisposed();
    return (0,_ops_pad__WEBPACK_IMPORTED_MODULE_1__.pad)(this, paddings, constantValue);
};
//# sourceMappingURL=pad.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/pool */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pool.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.pool = function (windowShape, poolingType, padding, dilationRate, strides) {
    this.throwIfDisposed();
    return (0,_ops_pool__WEBPACK_IMPORTED_MODULE_1__.pool)(this, windowShape, poolingType, padding, dilationRate, strides);
};
//# sourceMappingURL=pool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_pow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/pow */ "./node_modules/@tensorflow/tfjs-core/dist/ops/pow.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.pow = function (exp) {
    this.throwIfDisposed();
    return (0,_ops_pow__WEBPACK_IMPORTED_MODULE_1__.pow)(this, exp);
};
//# sourceMappingURL=pow.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow_strict.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.powStrict = function (exp) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.powStrict)(this, exp);
};
//# sourceMappingURL=pow_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_prelu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/prelu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prelu.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.prelu = function (alpha) {
    this.throwIfDisposed();
    return (0,_ops_prelu__WEBPACK_IMPORTED_MODULE_1__.prelu)(this, alpha);
};
//# sourceMappingURL=prelu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prod.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prod.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_prod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/prod */ "./node_modules/@tensorflow/tfjs-core/dist/ops/prod.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.prod = function (axis, keepDims) {
    this.throwIfDisposed();
    return (0,_ops_prod__WEBPACK_IMPORTED_MODULE_1__.prod)(this, axis, keepDims);
};
//# sourceMappingURL=prod.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reciprocal.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reciprocal.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reciprocal.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.reciprocal = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.reciprocal)(this);
};
//# sourceMappingURL=reciprocal.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/register_all_chained_ops.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abs */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/abs.js");
/* harmony import */ var _acos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./acos */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acos.js");
/* harmony import */ var _acosh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./acosh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/acosh.js");
/* harmony import */ var _add_strict__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./add_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add_strict.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./add */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/add.js");
/* harmony import */ var _all__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./all */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/all.js");
/* harmony import */ var _any__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./any */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/any.js");
/* harmony import */ var _arg_max__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./arg_max */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_max.js");
/* harmony import */ var _arg_min__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./arg_min */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/arg_min.js");
/* harmony import */ var _as_scalar__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./as_scalar */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_scalar.js");
/* harmony import */ var _as_type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./as_type */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as_type.js");
/* harmony import */ var _as1d__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./as1d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as1d.js");
/* harmony import */ var _as2d__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./as2d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as2d.js");
/* harmony import */ var _as3d__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./as3d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as3d.js");
/* harmony import */ var _as4d__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./as4d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as4d.js");
/* harmony import */ var _as5d__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./as5d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/as5d.js");
/* harmony import */ var _asin__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./asin */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asin.js");
/* harmony import */ var _asinh__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./asinh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/asinh.js");
/* harmony import */ var _atan__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./atan */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan.js");
/* harmony import */ var _atan2__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./atan2 */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atan2.js");
/* harmony import */ var _atanh__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./atanh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/atanh.js");
/* harmony import */ var _avg_pool__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./avg_pool */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/avg_pool.js");
/* harmony import */ var _batch_to_space_nd__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./batch_to_space_nd */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batch_to_space_nd.js");
/* harmony import */ var _batchnorm__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./batchnorm */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/batchnorm.js");
/* harmony import */ var _broadcast_to__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./broadcast_to */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/broadcast_to.js");
/* harmony import */ var _cast__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./cast */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cast.js");
/* harmony import */ var _ceil__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./ceil */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ceil.js");
/* harmony import */ var _clip_by_value__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./clip_by_value */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/clip_by_value.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./concat */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/concat.js");
/* harmony import */ var _conv1d__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./conv1d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv1d.js");
/* harmony import */ var _conv2d_transpose__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./conv2d_transpose */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d_transpose.js");
/* harmony import */ var _conv2d__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/conv2d.js");
/* harmony import */ var _cos__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./cos */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cos.js");
/* harmony import */ var _cosh__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./cosh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cosh.js");
/* harmony import */ var _cumsum__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./cumsum */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/cumsum.js");
/* harmony import */ var _depth_to_space__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./depth_to_space */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depth_to_space.js");
/* harmony import */ var _depthwise_conv2D_deprecated__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./depthwise_conv2D_deprecated */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2D_deprecated.js");
/* harmony import */ var _depthwise_conv2d__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./depthwise_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/depthwise_conv2d.js");
/* harmony import */ var _dilation2d__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./dilation2d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dilation2d.js");
/* harmony import */ var _div_no_nan__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./div_no_nan */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_no_nan.js");
/* harmony import */ var _div_strict__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./div_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div_strict.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./div */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/div.js");
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./dot */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/dot.js");
/* harmony import */ var _elu__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./elu */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/elu.js");
/* harmony import */ var _equal_strict__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./equal_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal_strict.js");
/* harmony import */ var _equal__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./equal */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/equal.js");
/* harmony import */ var _erf__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./erf */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/erf.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./exp */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/exp.js");
/* harmony import */ var _expand_dims__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./expand_dims */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expand_dims.js");
/* harmony import */ var _expm1__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./expm1 */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/expm1.js");
/* harmony import */ var _fft__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./fft */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/fft.js");
/* harmony import */ var _flatten__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./flatten */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/flatten.js");
/* harmony import */ var _floor__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./floor */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floor.js");
/* harmony import */ var _floorDiv__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./floorDiv */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/floorDiv.js");
/* harmony import */ var _gather__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./gather */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/gather.js");
/* harmony import */ var _greater_equal_strict__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./greater_equal_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal_strict.js");
/* harmony import */ var _greater_equal__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./greater_equal */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_equal.js");
/* harmony import */ var _greater_strict__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./greater_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater_strict.js");
/* harmony import */ var _greater__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./greater */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/greater.js");
/* harmony import */ var _ifft__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./ifft */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ifft.js");
/* harmony import */ var _irfft__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./irfft */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/irfft.js");
/* harmony import */ var _is_finite__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./is_finite */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_finite.js");
/* harmony import */ var _is_inf__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./is_inf */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_inf.js");
/* harmony import */ var _is_nan__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./is_nan */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/is_nan.js");
/* harmony import */ var _leaky_relu__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./leaky_relu */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/leaky_relu.js");
/* harmony import */ var _less_equal_strict__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./less_equal_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal_strict.js");
/* harmony import */ var _less_equal__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./less_equal */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_equal.js");
/* harmony import */ var _less_strict__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./less_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less_strict.js");
/* harmony import */ var _less__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./less */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/less.js");
/* harmony import */ var _local_response_normalization__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./local_response_normalization */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/local_response_normalization.js");
/* harmony import */ var _log_sigmoid__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./log_sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sigmoid.js");
/* harmony import */ var _log_softmax__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./log_softmax */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_softmax.js");
/* harmony import */ var _log_sum_exp__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./log_sum_exp */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log_sum_exp.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./log */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log.js");
/* harmony import */ var _log1p__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./log1p */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/log1p.js");
/* harmony import */ var _logical_and__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./logical_and */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_and.js");
/* harmony import */ var _logical_not__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./logical_not */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_not.js");
/* harmony import */ var _logical_or__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./logical_or */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_or.js");
/* harmony import */ var _logical_xor__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./logical_xor */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/logical_xor.js");
/* harmony import */ var _mat_mul__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./mat_mul */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mat_mul.js");
/* harmony import */ var _max_pool__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./max_pool */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max_pool.js");
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./max */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/max.js");
/* harmony import */ var _maximum_strict__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./maximum_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum_strict.js");
/* harmony import */ var _maximum__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./maximum */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/maximum.js");
/* harmony import */ var _mean__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./mean */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mean.js");
/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./min */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/min.js");
/* harmony import */ var _minimum_strict__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./minimum_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum_strict.js");
/* harmony import */ var _minimum__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./minimum */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/minimum.js");
/* harmony import */ var _mirror_pad__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./mirror_pad */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mirror_pad.js");
/* harmony import */ var _mod_strict__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./mod_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod_strict.js");
/* harmony import */ var _mod__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./mod */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mod.js");
/* harmony import */ var _mul_strict__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./mul_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul_strict.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./mul */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/mul.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./neg */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/neg.js");
/* harmony import */ var _norm__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./norm */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/norm.js");
/* harmony import */ var _not_equal_strict__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./not_equal_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal_strict.js");
/* harmony import */ var _not_equal__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./not_equal */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/not_equal.js");
/* harmony import */ var _one_hot__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./one_hot */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/one_hot.js");
/* harmony import */ var _ones_like__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./ones_like */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/ones_like.js");
/* harmony import */ var _pad__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./pad */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pad.js");
/* harmony import */ var _pool__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./pool */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pool.js");
/* harmony import */ var _pow_strict__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./pow_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow_strict.js");
/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./pow */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/pow.js");
/* harmony import */ var _prelu__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./prelu */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prelu.js");
/* harmony import */ var _prod__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./prod */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/prod.js");
/* harmony import */ var _reciprocal__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./reciprocal */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reciprocal.js");
/* harmony import */ var _relu__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./relu */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js");
/* harmony import */ var _relu6__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./relu6 */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js");
/* harmony import */ var _reshape_as__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./reshape_as */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape_as.js");
/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./reshape */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape.js");
/* harmony import */ var _resize_bilinear__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./resize_bilinear */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_bilinear.js");
/* harmony import */ var _resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./resize_nearest_neighbor */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_nearest_neighbor.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./reverse */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reverse.js");
/* harmony import */ var _rfft__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./rfft */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rfft.js");
/* harmony import */ var _round__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./round */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/round.js");
/* harmony import */ var _rsqrt__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./rsqrt */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rsqrt.js");
/* harmony import */ var _selu__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./selu */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js");
/* harmony import */ var _separable_conv2d__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./separable_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js");
/* harmony import */ var _sigmoid__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./sigmoid */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sigmoid.js");
/* harmony import */ var _sign__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./sign */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sign.js");
/* harmony import */ var _sin__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./sin */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sin.js");
/* harmony import */ var _sinh__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./sinh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sinh.js");
/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./slice */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/slice.js");
/* harmony import */ var _softmax__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./softmax */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softmax.js");
/* harmony import */ var _softplus__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./softplus */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softplus.js");
/* harmony import */ var _space_to_batch_nd__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./space_to_batch_nd */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js");
/* harmony import */ var _split__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./split */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js");
/* harmony import */ var _sqrt__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./sqrt */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sqrt.js");
/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./square */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/square.js");
/* harmony import */ var _squared_difference__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./squared_difference */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js");
/* harmony import */ var _squared_difference_strict__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./squared_difference_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference_strict.js");
/* harmony import */ var _squeeze__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./squeeze */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squeeze.js");
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./stack */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/stack.js");
/* harmony import */ var _step__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./step */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/step.js");
/* harmony import */ var _strided_slice__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./strided_slice */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/strided_slice.js");
/* harmony import */ var _sub_strict__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./sub_strict */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub_strict.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./sub */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./sum */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sum.js");
/* harmony import */ var _tan__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./tan */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tan.js");
/* harmony import */ var _tanh__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./tanh */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tanh.js");
/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./tile */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js");
/* harmony import */ var _to_bool__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./to_bool */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_bool.js");
/* harmony import */ var _to_float__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./to_float */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_float.js");
/* harmony import */ var _to_int__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./to_int */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_int.js");
/* harmony import */ var _topk__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./topk */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/topk.js");
/* harmony import */ var _transpose__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./transpose */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js");
/* harmony import */ var _unique__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./unique */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unique.js");
/* harmony import */ var _unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./unsorted_segment_sum */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unsorted_segment_sum.js");
/* harmony import */ var _unstack__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./unstack */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unstack.js");
/* harmony import */ var _where__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./where */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/where.js");
/* harmony import */ var _zeros_like__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./zeros_like */ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/zeros_like.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */























































































































































//# sourceMappingURL=register_all_chained_ops.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_relu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/relu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.relu = function () {
    this.throwIfDisposed();
    return (0,_ops_relu__WEBPACK_IMPORTED_MODULE_1__.relu)(this);
};
//# sourceMappingURL=relu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/relu6.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_relu6__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/relu6 */ "./node_modules/@tensorflow/tfjs-core/dist/ops/relu6.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.relu6 = function () {
    this.throwIfDisposed();
    return (0,_ops_relu6__WEBPACK_IMPORTED_MODULE_1__.relu6)(this);
};
//# sourceMappingURL=relu6.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.reshape = function (shape) {
    this.throwIfDisposed();
    return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, shape);
};
//# sourceMappingURL=reshape.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape_as.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reshape_as.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reshape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reshape */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reshape.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


/**
 * Reshapes the tensor into the shape of the provided tensor.
 *
 * @param x The tensor of required shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.reshapeAs = function (x) {
    this.throwIfDisposed();
    return (0,_ops_reshape__WEBPACK_IMPORTED_MODULE_1__.reshape)(this, x.shape);
};
//# sourceMappingURL=reshape_as.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_bilinear.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_bilinear.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_image_resize_bilinear__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/image/resize_bilinear */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_bilinear.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.resizeBilinear = function (newShape2D, alignCorners, halfPixelCenters) {
    this.throwIfDisposed();
    return (0,_ops_image_resize_bilinear__WEBPACK_IMPORTED_MODULE_1__.resizeBilinear)(this, newShape2D, alignCorners, halfPixelCenters);
};
//# sourceMappingURL=resize_bilinear.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_nearest_neighbor.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/resize_nearest_neighbor.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_image_resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/image/resize_nearest_neighbor */ "./node_modules/@tensorflow/tfjs-core/dist/ops/image/resize_nearest_neighbor.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.resizeNearestNeighbor = function (newShape2D, alignCorners, halfFloatCenters) {
    this.throwIfDisposed();
    return (0,_ops_image_resize_nearest_neighbor__WEBPACK_IMPORTED_MODULE_1__.resizeNearestNeighbor)(this, newShape2D, alignCorners, halfFloatCenters);
};
//# sourceMappingURL=resize_nearest_neighbor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reverse.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/reverse.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_reverse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/reverse */ "./node_modules/@tensorflow/tfjs-core/dist/ops/reverse.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.reverse = function (axis) {
    this.throwIfDisposed();
    return (0,_ops_reverse__WEBPACK_IMPORTED_MODULE_1__.reverse)(this, axis);
};
//# sourceMappingURL=reverse.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rfft.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rfft.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/spectral/rfft.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.rfft = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.rfft)(this);
};
//# sourceMappingURL=rfft.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/round.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/round.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/round.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.round = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.round)(this);
};
//# sourceMappingURL=round.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rsqrt.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/rsqrt.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/rsqrt.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.rsqrt = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.rsqrt)(this);
};
//# sourceMappingURL=rsqrt.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/selu.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_selu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/selu */ "./node_modules/@tensorflow/tfjs-core/dist/ops/selu.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.selu = function () {
    this.throwIfDisposed();
    return (0,_ops_selu__WEBPACK_IMPORTED_MODULE_1__.selu)(this);
};
//# sourceMappingURL=selu.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/separable_conv2d.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_separable_conv2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/separable_conv2d */ "./node_modules/@tensorflow/tfjs-core/dist/ops/separable_conv2d.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.separableConv2d = function (depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat) {
    this.throwIfDisposed();
    return (0,_ops_separable_conv2d__WEBPACK_IMPORTED_MODULE_1__.separableConv2d)(this, depthwiseFilter, pointwiseFilter, strides, pad, dilation, dataFormat);
};
//# sourceMappingURL=separable_conv2d.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sigmoid.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sigmoid.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sigmoid.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.sigmoid = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.sigmoid)(this);
};
//# sourceMappingURL=sigmoid.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sign.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sign.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sign.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.sign = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.sign)(this);
};
//# sourceMappingURL=sign.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sin.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sin.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sin.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.sin = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.sin)(this);
};
//# sourceMappingURL=sin.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sinh.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sinh.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sinh.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.sinh = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.sinh)(this);
};
//# sourceMappingURL=sinh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/slice.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/slice.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/slice.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.slice = function (begin, size) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.slice)(this, begin, size);
};
//# sourceMappingURL=slice.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softmax.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softmax.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/softmax.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.softmax = function (dim) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.softmax)(this, dim);
};
//# sourceMappingURL=softmax.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softplus.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/softplus.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/softplus.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.softplus = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.softplus)(this);
};
//# sourceMappingURL=softplus.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/space_to_batch_nd.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/space_to_batch_nd */ "./node_modules/@tensorflow/tfjs-core/dist/ops/space_to_batch_nd.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.spaceToBatchND = function (blockShape, paddings) {
    this.throwIfDisposed();
    return (0,_ops_space_to_batch_nd__WEBPACK_IMPORTED_MODULE_1__.spaceToBatchND)(this, blockShape, paddings);
};
//# sourceMappingURL=space_to_batch_nd.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/split.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_split__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/split */ "./node_modules/@tensorflow/tfjs-core/dist/ops/split.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.split = function (numOrSizeSplits, axis) {
    this.throwIfDisposed();
    return (0,_ops_split__WEBPACK_IMPORTED_MODULE_1__.split)(this, numOrSizeSplits, axis);
};
//# sourceMappingURL=split.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sqrt.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sqrt.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sqrt.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.sqrt = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.sqrt)(this);
};
//# sourceMappingURL=sqrt.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/square.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/square.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/square.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.square = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.square)(this);
};
//# sourceMappingURL=square.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_squared_difference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/squared_difference */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squared_difference.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.squaredDifference = function (b) {
    this.throwIfDisposed();
    return (0,_ops_squared_difference__WEBPACK_IMPORTED_MODULE_1__.squaredDifference)(this, b);
};
//# sourceMappingURL=squared_difference.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference_strict.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squared_difference_strict.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.squaredDifferenceStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.squaredDifferenceStrict)(this, x);
};
//# sourceMappingURL=squared_difference_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squeeze.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/squeeze.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_squeeze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/squeeze */ "./node_modules/@tensorflow/tfjs-core/dist/ops/squeeze.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.squeeze = function (axis) {
    this.throwIfDisposed();
    return (0,_ops_squeeze__WEBPACK_IMPORTED_MODULE_1__.squeeze)(this, axis);
};
//# sourceMappingURL=squeeze.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/stack.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/stack.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_stack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/stack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/stack.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.stack = function (x, axis) {
    this.throwIfDisposed();
    const tensorsToBeStacked = x instanceof _tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor ? [this, x] : [this, ...x];
    return (0,_ops_stack__WEBPACK_IMPORTED_MODULE_1__.stack)(tensorsToBeStacked, axis);
};
//# sourceMappingURL=stack.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/step.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/step.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/step.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.step = function (alpha) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.step)(this, alpha);
};
//# sourceMappingURL=step.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/strided_slice.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/strided_slice.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/strided_slice.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.stridedSlice = function (begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.stridedSlice)(this, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
};
//# sourceMappingURL=strided_slice.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_sub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/sub */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sub.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.sub = function (b) {
    this.throwIfDisposed();
    return (0,_ops_sub__WEBPACK_IMPORTED_MODULE_1__.sub)(this, b);
};
//# sourceMappingURL=sub.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub_strict.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sub_strict.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/binary_ops.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/**
 * @deprecated strict variants of ops have been deprecated
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.subStrict = function (x) {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.subStrict)(this, x);
};
//# sourceMappingURL=sub_strict.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sum.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/sum.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_sum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/sum.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.sum = function (axis, keepDims) {
    this.throwIfDisposed();
    return (0,_ops_sum__WEBPACK_IMPORTED_MODULE_1__.sum)(this, axis, keepDims);
};
//# sourceMappingURL=sum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tan.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tan.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tan.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.tan = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.tan)(this);
};
//# sourceMappingURL=tan.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tanh.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tanh.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tanh.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.tanh = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.tanh)(this);
};
//# sourceMappingURL=tanh.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/tile.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_tile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/tile */ "./node_modules/@tensorflow/tfjs-core/dist/ops/tile.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.tile = function (reps) {
    this.throwIfDisposed();
    return (0,_ops_tile__WEBPACK_IMPORTED_MODULE_1__.tile)(this, reps);
};
//# sourceMappingURL=tile.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_bool.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_bool.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/** Casts the array to type `bool`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.toBool = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cast)(this, 'bool');
};
//# sourceMappingURL=to_bool.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_float.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_float.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/** Casts the array to type `float32`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.toFloat = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cast)(this, 'float32');
};
//# sourceMappingURL=to_float.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_int.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/to_int.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/cast.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


/** Casts the array to type `int32`
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.toInt = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.cast)(this, 'int32');
};
//# sourceMappingURL=to_int.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/topk.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/topk.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_topk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/topk */ "./node_modules/@tensorflow/tfjs-core/dist/ops/topk.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.topk = function (k, sorted) {
    this.throwIfDisposed();
    return (0,_ops_topk__WEBPACK_IMPORTED_MODULE_1__.topk)(this, k, sorted);
};
//# sourceMappingURL=topk.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/transpose.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_transpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/transpose */ "./node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.transpose = function (perm) {
    this.throwIfDisposed();
    return (0,_ops_transpose__WEBPACK_IMPORTED_MODULE_1__.transpose)(this, perm);
};
//# sourceMappingURL=transpose.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unique.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unique.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_unique__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/unique */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unique.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.unique = function (axis) {
    this.throwIfDisposed();
    return (0,_ops_unique__WEBPACK_IMPORTED_MODULE_1__.unique)(this, axis);
};
//# sourceMappingURL=unique.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unsorted_segment_sum.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unsorted_segment_sum.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/unsorted_segment_sum */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.unsortedSegmentSum = function (segmentIds, numSegments) {
    this.throwIfDisposed();
    return (0,_ops_unsorted_segment_sum__WEBPACK_IMPORTED_MODULE_1__.unsortedSegmentSum)(this, segmentIds, numSegments);
};
//# sourceMappingURL=unsorted_segment_sum.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unstack.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/unstack.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_unstack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/unstack */ "./node_modules/@tensorflow/tfjs-core/dist/ops/unstack.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.unstack = function (axis) {
    this.throwIfDisposed();
    return (0,_ops_unstack__WEBPACK_IMPORTED_MODULE_1__.unstack)(this, axis);
};
//# sourceMappingURL=unstack.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/where.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/where.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_where__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/where */ "./node_modules/@tensorflow/tfjs-core/dist/ops/where.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.where = function (condition, x) {
    this.throwIfDisposed();
    return (0,_ops_where__WEBPACK_IMPORTED_MODULE_1__.where)(condition, this, x);
};
//# sourceMappingURL=where.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/zeros_like.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/public/chained_ops/zeros_like.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ops_ops__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ops/ops */ "./node_modules/@tensorflow/tfjs-core/dist/ops/zeros_like.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.


_tensor__WEBPACK_IMPORTED_MODULE_0__.Tensor.prototype.zerosLike = function () {
    this.throwIfDisposed();
    return (0,_ops_ops__WEBPACK_IMPORTED_MODULE_1__.zerosLike)(this);
};
//# sourceMappingURL=zeros_like.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/register_all_gradients.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _gradients_Abs_grad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gradients/Abs_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Abs_grad.js");
/* harmony import */ var _gradients_Acos_grad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gradients/Acos_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Acos_grad.js");
/* harmony import */ var _gradients_Acosh_grad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gradients/Acosh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Acosh_grad.js");
/* harmony import */ var _gradients_Add_grad__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gradients/Add_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Add_grad.js");
/* harmony import */ var _gradients_AddN_grad__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gradients/AddN_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AddN_grad.js");
/* harmony import */ var _gradients_ArgMax_grad__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./gradients/ArgMax_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMax_grad.js");
/* harmony import */ var _gradients_ArgMin_grad__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./gradients/ArgMin_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ArgMin_grad.js");
/* harmony import */ var _gradients_Asin_grad__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./gradients/Asin_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Asin_grad.js");
/* harmony import */ var _gradients_Asinh_grad__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./gradients/Asinh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Asinh_grad.js");
/* harmony import */ var _gradients_Atan2_grad__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./gradients/Atan2_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan2_grad.js");
/* harmony import */ var _gradients_Atan_grad__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./gradients/Atan_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atan_grad.js");
/* harmony import */ var _gradients_Atanh_grad__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./gradients/Atanh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Atanh_grad.js");
/* harmony import */ var _gradients_AvgPool3D_grad__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./gradients/AvgPool3D_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool3D_grad.js");
/* harmony import */ var _gradients_AvgPool_grad__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./gradients/AvgPool_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/AvgPool_grad.js");
/* harmony import */ var _gradients_BatchMatMul_grad__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./gradients/BatchMatMul_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchMatMul_grad.js");
/* harmony import */ var _gradients_BatchToSpaceND_grad__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./gradients/BatchToSpaceND_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BatchToSpaceND_grad.js");
/* harmony import */ var _gradients_BroadcastTo_grad__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./gradients/BroadcastTo_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/BroadcastTo_grad.js");
/* harmony import */ var _gradients_Cast_grad__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./gradients/Cast_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cast_grad.js");
/* harmony import */ var _gradients_Ceil_grad__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./gradients/Ceil_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Ceil_grad.js");
/* harmony import */ var _gradients_ClipByValue_grad__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./gradients/ClipByValue_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ClipByValue_grad.js");
/* harmony import */ var _gradients_ComplexAbs_grad__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./gradients/ComplexAbs_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ComplexAbs_grad.js");
/* harmony import */ var _gradients_Concat_grad__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./gradients/Concat_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Concat_grad.js");
/* harmony import */ var _gradients_Conv2D_grad__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./gradients/Conv2D_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2D_grad.js");
/* harmony import */ var _gradients_Conv2DBackpropInput_grad__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./gradients/Conv2DBackpropInput_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv2DBackpropInput_grad.js");
/* harmony import */ var _gradients_Conv3D_grad__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./gradients/Conv3D_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Conv3D_grad.js");
/* harmony import */ var _gradients_Cos_grad__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./gradients/Cos_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cos_grad.js");
/* harmony import */ var _gradients_Cosh_grad__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./gradients/Cosh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cosh_grad.js");
/* harmony import */ var _gradients_Cumsum_grad__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./gradients/Cumsum_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Cumsum_grad.js");
/* harmony import */ var _gradients_DepthwiseConv2dNative_grad__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./gradients/DepthwiseConv2dNative_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/DepthwiseConv2dNative_grad.js");
/* harmony import */ var _gradients_Dilation2D_grad__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./gradients/Dilation2D_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Dilation2D_grad.js");
/* harmony import */ var _gradients_Elu_grad__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./gradients/Elu_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Elu_grad.js");
/* harmony import */ var _gradients_Erf_grad__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./gradients/Erf_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Erf_grad.js");
/* harmony import */ var _gradients_Exp_grad__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./gradients/Exp_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Exp_grad.js");
/* harmony import */ var _gradients_ExpandDims_grad__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./gradients/ExpandDims_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ExpandDims_grad.js");
/* harmony import */ var _gradients_Expm1_grad__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./gradients/Expm1_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Expm1_grad.js");
/* harmony import */ var _gradients_Floor_grad__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./gradients/Floor_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Floor_grad.js");
/* harmony import */ var _gradients_FloorDiv_grad__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./gradients/FloorDiv_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/FloorDiv_grad.js");
/* harmony import */ var _gradients_FusedBatchNorm_grad__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./gradients/FusedBatchNorm_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/FusedBatchNorm_grad.js");
/* harmony import */ var _gradients_GatherV2_grad__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./gradients/GatherV2_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/GatherV2_grad.js");
/* harmony import */ var _gradients_GreaterEqual_grad__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./gradients/GreaterEqual_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/GreaterEqual_grad.js");
/* harmony import */ var _gradients_Identity_grad__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./gradients/Identity_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Identity_grad.js");
/* harmony import */ var _gradients_IsFinite_grad__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./gradients/IsFinite_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsFinite_grad.js");
/* harmony import */ var _gradients_IsInf_grad__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./gradients/IsInf_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsInf_grad.js");
/* harmony import */ var _gradients_IsNan_grad__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./gradients/IsNan_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/IsNan_grad.js");
/* harmony import */ var _gradients_LeakyRelu_grad__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./gradients/LeakyRelu_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/LeakyRelu_grad.js");
/* harmony import */ var _gradients_Log1p_grad__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./gradients/Log1p_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Log1p_grad.js");
/* harmony import */ var _gradients_Log_grad__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./gradients/Log_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Log_grad.js");
/* harmony import */ var _gradients_LogSoftmax_grad__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./gradients/LogSoftmax_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/LogSoftmax_grad.js");
/* harmony import */ var _gradients_LRN_grad__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./gradients/LRN_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/LRN_grad.js");
/* harmony import */ var _gradients_Max_grad__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./gradients/Max_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Max_grad.js");
/* harmony import */ var _gradients_Maximum_grad__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./gradients/Maximum_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Maximum_grad.js");
/* harmony import */ var _gradients_MaxPool3D_grad__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./gradients/MaxPool3D_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool3D_grad.js");
/* harmony import */ var _gradients_MaxPool_grad__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./gradients/MaxPool_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MaxPool_grad.js");
/* harmony import */ var _gradients_Mean_grad__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./gradients/Mean_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Mean_grad.js");
/* harmony import */ var _gradients_Min_grad__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./gradients/Min_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Min_grad.js");
/* harmony import */ var _gradients_Minimum_grad__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./gradients/Minimum_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Minimum_grad.js");
/* harmony import */ var _gradients_MirrorPad_grad__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./gradients/MirrorPad_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/MirrorPad_grad.js");
/* harmony import */ var _gradients_Mod_grad__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./gradients/Mod_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Mod_grad.js");
/* harmony import */ var _gradients_Multiply_grad__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./gradients/Multiply_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Multiply_grad.js");
/* harmony import */ var _gradients_Neg_grad__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./gradients/Neg_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Neg_grad.js");
/* harmony import */ var _gradients_OneHot_grad__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./gradients/OneHot_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/OneHot_grad.js");
/* harmony import */ var _gradients_OnesLike_grad__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./gradients/OnesLike_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/OnesLike_grad.js");
/* harmony import */ var _gradients_Pack_grad__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./gradients/Pack_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Pack_grad.js");
/* harmony import */ var _gradients_PadV2_grad__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./gradients/PadV2_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/PadV2_grad.js");
/* harmony import */ var _gradients_Pow_grad__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./gradients/Pow_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Pow_grad.js");
/* harmony import */ var _gradients_Prelu_grad__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./gradients/Prelu_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Prelu_grad.js");
/* harmony import */ var _gradients_RealDiv_grad__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./gradients/RealDiv_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/RealDiv_grad.js");
/* harmony import */ var _gradients_Reciprocal_grad__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./gradients/Reciprocal_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reciprocal_grad.js");
/* harmony import */ var _gradients_Relu6_grad__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./gradients/Relu6_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu6_grad.js");
/* harmony import */ var _gradients_Relu_grad__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./gradients/Relu_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Relu_grad.js");
/* harmony import */ var _gradients_Reshape_grad__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./gradients/Reshape_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reshape_grad.js");
/* harmony import */ var _gradients_ResizeBilinear_grad__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./gradients/ResizeBilinear_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeBilinear_grad.js");
/* harmony import */ var _gradients_ResizeNearestNeighbor_grad__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./gradients/ResizeNearestNeighbor_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ResizeNearestNeighbor_grad.js");
/* harmony import */ var _gradients_Reverse_grad__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./gradients/Reverse_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Reverse_grad.js");
/* harmony import */ var _gradients_Round_grad__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./gradients/Round_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Round_grad.js");
/* harmony import */ var _gradients_Rsqrt_grad__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./gradients/Rsqrt_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Rsqrt_grad.js");
/* harmony import */ var _gradients_Select_grad__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./gradients/Select_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Select_grad.js");
/* harmony import */ var _gradients_Selu_grad__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./gradients/Selu_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Selu_grad.js");
/* harmony import */ var _gradients_Sigmoid_grad__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./gradients/Sigmoid_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sigmoid_grad.js");
/* harmony import */ var _gradients_Sign_grad__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./gradients/Sign_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sign_grad.js");
/* harmony import */ var _gradients_Sin_grad__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./gradients/Sin_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sin_grad.js");
/* harmony import */ var _gradients_Sinh_grad__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./gradients/Sinh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sinh_grad.js");
/* harmony import */ var _gradients_Slice_grad__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./gradients/Slice_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Slice_grad.js");
/* harmony import */ var _gradients_Softmax_grad__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./gradients/Softmax_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Softmax_grad.js");
/* harmony import */ var _gradients_Softplus_grad__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./gradients/Softplus_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Softplus_grad.js");
/* harmony import */ var _gradients_SpaceToBatchND_grad__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./gradients/SpaceToBatchND_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SpaceToBatchND_grad.js");
/* harmony import */ var _gradients_SplitV_grad__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./gradients/SplitV_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SplitV_grad.js");
/* harmony import */ var _gradients_Sqrt_grad__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./gradients/Sqrt_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sqrt_grad.js");
/* harmony import */ var _gradients_Square_grad__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./gradients/Square_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Square_grad.js");
/* harmony import */ var _gradients_SquaredDifference_grad__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./gradients/SquaredDifference_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/SquaredDifference_grad.js");
/* harmony import */ var _gradients_Step_grad__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./gradients/Step_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Step_grad.js");
/* harmony import */ var _gradients_Sub_grad__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./gradients/Sub_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sub_grad.js");
/* harmony import */ var _gradients_Sum_grad__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./gradients/Sum_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Sum_grad.js");
/* harmony import */ var _gradients_Tan_grad__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./gradients/Tan_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tan_grad.js");
/* harmony import */ var _gradients_Tanh_grad__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./gradients/Tanh_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tanh_grad.js");
/* harmony import */ var _gradients_Tile_grad__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./gradients/Tile_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Tile_grad.js");
/* harmony import */ var _gradients_Transpose_grad__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./gradients/Transpose_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Transpose_grad.js");
/* harmony import */ var _gradients_Unpack_grad__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./gradients/Unpack_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/Unpack_grad.js");
/* harmony import */ var _gradients_UnsortedSegmentSum_grad__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./gradients/UnsortedSegmentSum_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/UnsortedSegmentSum_grad.js");
/* harmony import */ var _gradients_ZerosLike_grad__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./gradients/ZerosLike_grad */ "./node_modules/@tensorflow/tfjs-core/dist/gradients/ZerosLike_grad.js");
/* harmony import */ var _kernel_registry__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./kernel_registry */ "./node_modules/@tensorflow/tfjs-core/dist/kernel_registry.js");
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */





































































































// Export all kernel configs here so that the package can auto register them
const gradConfigs = [
    _gradients_Abs_grad__WEBPACK_IMPORTED_MODULE_0__.absGradConfig,
    _gradients_Acos_grad__WEBPACK_IMPORTED_MODULE_1__.acosGradConfig,
    _gradients_Acosh_grad__WEBPACK_IMPORTED_MODULE_2__.acoshGradConfig,
    _gradients_Add_grad__WEBPACK_IMPORTED_MODULE_3__.addGradConfig,
    _gradients_AddN_grad__WEBPACK_IMPORTED_MODULE_4__.addNGradConfig,
    _gradients_ArgMax_grad__WEBPACK_IMPORTED_MODULE_5__.argMaxGradConfig,
    _gradients_ArgMin_grad__WEBPACK_IMPORTED_MODULE_6__.argMinGradConfig,
    _gradients_Asin_grad__WEBPACK_IMPORTED_MODULE_7__.asinGradConfig,
    _gradients_Asinh_grad__WEBPACK_IMPORTED_MODULE_8__.asinhGradConfig,
    _gradients_Atan2_grad__WEBPACK_IMPORTED_MODULE_9__.atan2GradConfig,
    _gradients_Atan_grad__WEBPACK_IMPORTED_MODULE_10__.atanGradConfig,
    _gradients_Atanh_grad__WEBPACK_IMPORTED_MODULE_11__.atanhGradConfig,
    _gradients_AvgPool3D_grad__WEBPACK_IMPORTED_MODULE_12__.avgPool3DGradConfig,
    _gradients_AvgPool_grad__WEBPACK_IMPORTED_MODULE_13__.avgPoolGradConfig,
    _gradients_BatchMatMul_grad__WEBPACK_IMPORTED_MODULE_14__.batchMatMulGradConfig,
    _gradients_BatchToSpaceND_grad__WEBPACK_IMPORTED_MODULE_15__.batchToSpaceNDGradConfig,
    _gradients_BroadcastTo_grad__WEBPACK_IMPORTED_MODULE_16__.broadcastToGradConfig,
    _gradients_Cast_grad__WEBPACK_IMPORTED_MODULE_17__.castGradConfig,
    _gradients_Ceil_grad__WEBPACK_IMPORTED_MODULE_18__.ceilGradConfig,
    _gradients_ClipByValue_grad__WEBPACK_IMPORTED_MODULE_19__.clipByValueGradConfig,
    _gradients_ComplexAbs_grad__WEBPACK_IMPORTED_MODULE_20__.complexAbsGradConfig,
    _gradients_Concat_grad__WEBPACK_IMPORTED_MODULE_21__.concatGradConfig,
    _gradients_Conv2DBackpropInput_grad__WEBPACK_IMPORTED_MODULE_22__.conv2DBackpropInputGradConfig,
    _gradients_Conv2D_grad__WEBPACK_IMPORTED_MODULE_23__.conv2DGradConfig,
    _gradients_Conv3D_grad__WEBPACK_IMPORTED_MODULE_24__.conv3DGradConfig,
    _gradients_Cos_grad__WEBPACK_IMPORTED_MODULE_25__.cosGradConfig,
    _gradients_Cosh_grad__WEBPACK_IMPORTED_MODULE_26__.coshGradConfig,
    _gradients_Cumsum_grad__WEBPACK_IMPORTED_MODULE_27__.cumsumGradConfig,
    _gradients_DepthwiseConv2dNative_grad__WEBPACK_IMPORTED_MODULE_28__.depthwiseConv2dNativeGradConfig,
    _gradients_Dilation2D_grad__WEBPACK_IMPORTED_MODULE_29__.dilation2dGradConfig,
    _gradients_RealDiv_grad__WEBPACK_IMPORTED_MODULE_30__.divGradConfig,
    _gradients_Elu_grad__WEBPACK_IMPORTED_MODULE_31__.eluGradConfig,
    _gradients_Erf_grad__WEBPACK_IMPORTED_MODULE_32__.erfGradConfig,
    _gradients_Exp_grad__WEBPACK_IMPORTED_MODULE_33__.expGradConfig,
    _gradients_ExpandDims_grad__WEBPACK_IMPORTED_MODULE_34__.expandDimsGradConfig,
    _gradients_Expm1_grad__WEBPACK_IMPORTED_MODULE_35__.expm1GradConfig,
    _gradients_FloorDiv_grad__WEBPACK_IMPORTED_MODULE_36__.floorDivGradConfig,
    _gradients_Floor_grad__WEBPACK_IMPORTED_MODULE_37__.floorGradConfig,
    _gradients_FusedBatchNorm_grad__WEBPACK_IMPORTED_MODULE_38__.fusedBatchNormGradConfig,
    _gradients_GatherV2_grad__WEBPACK_IMPORTED_MODULE_39__.gatherGradConfig,
    _gradients_GreaterEqual_grad__WEBPACK_IMPORTED_MODULE_40__.greaterEqualGradConfig,
    _gradients_Identity_grad__WEBPACK_IMPORTED_MODULE_41__.identityGradConfig,
    _gradients_IsFinite_grad__WEBPACK_IMPORTED_MODULE_42__.isFiniteGradConfig,
    _gradients_IsInf_grad__WEBPACK_IMPORTED_MODULE_43__.isInfGradConfig,
    _gradients_IsNan_grad__WEBPACK_IMPORTED_MODULE_44__.isNanGradConfig,
    _gradients_LeakyRelu_grad__WEBPACK_IMPORTED_MODULE_45__.leakyReluGradConfig,
    _gradients_Log1p_grad__WEBPACK_IMPORTED_MODULE_46__.log1pGradConfig,
    _gradients_Log_grad__WEBPACK_IMPORTED_MODULE_47__.logGradConfig,
    _gradients_LogSoftmax_grad__WEBPACK_IMPORTED_MODULE_48__.logSoftmaxGradConfig,
    _gradients_LRN_grad__WEBPACK_IMPORTED_MODULE_49__.lrnGradConfig,
    _gradients_Max_grad__WEBPACK_IMPORTED_MODULE_50__.maxGradConfig,
    _gradients_Max_grad__WEBPACK_IMPORTED_MODULE_50__.maxGradConfig,
    _gradients_Maximum_grad__WEBPACK_IMPORTED_MODULE_51__.maximumGradConfig,
    _gradients_MaxPool3D_grad__WEBPACK_IMPORTED_MODULE_52__.maxPool3DGradConfig,
    _gradients_MaxPool_grad__WEBPACK_IMPORTED_MODULE_53__.maxPoolGradConfig,
    _gradients_Mean_grad__WEBPACK_IMPORTED_MODULE_54__.meanGradConfig,
    _gradients_Min_grad__WEBPACK_IMPORTED_MODULE_55__.minGradConfig,
    _gradients_Minimum_grad__WEBPACK_IMPORTED_MODULE_56__.minimumGradConfig,
    _gradients_MirrorPad_grad__WEBPACK_IMPORTED_MODULE_57__.mirrorPadGradConfig,
    _gradients_Mod_grad__WEBPACK_IMPORTED_MODULE_58__.modGradConfig,
    _gradients_Multiply_grad__WEBPACK_IMPORTED_MODULE_59__.multiplyGradConfig,
    _gradients_Neg_grad__WEBPACK_IMPORTED_MODULE_60__.negGradConfig,
    _gradients_OneHot_grad__WEBPACK_IMPORTED_MODULE_61__.oneHotGradConfig,
    _gradients_OnesLike_grad__WEBPACK_IMPORTED_MODULE_62__.onesLikeGradConfig,
    _gradients_Pack_grad__WEBPACK_IMPORTED_MODULE_63__.packGradConfig,
    _gradients_PadV2_grad__WEBPACK_IMPORTED_MODULE_64__.padV2GradConfig,
    _gradients_PadV2_grad__WEBPACK_IMPORTED_MODULE_64__.padV2GradConfig,
    _gradients_Pow_grad__WEBPACK_IMPORTED_MODULE_65__.powGradConfig,
    _gradients_Prelu_grad__WEBPACK_IMPORTED_MODULE_66__.preluGradConfig,
    _gradients_Reciprocal_grad__WEBPACK_IMPORTED_MODULE_67__.reciprocalGradConfig,
    _gradients_Relu6_grad__WEBPACK_IMPORTED_MODULE_68__.relu6GradConfig,
    _gradients_Relu_grad__WEBPACK_IMPORTED_MODULE_69__.reluGradConfig,
    _gradients_Reshape_grad__WEBPACK_IMPORTED_MODULE_70__.reshapeGradConfig,
    _gradients_ResizeBilinear_grad__WEBPACK_IMPORTED_MODULE_71__.resizeBilinearGradConfig,
    _gradients_ResizeNearestNeighbor_grad__WEBPACK_IMPORTED_MODULE_72__.resizeNearestNeighborGradConfig,
    _gradients_Reverse_grad__WEBPACK_IMPORTED_MODULE_73__.reverseGradConfig,
    _gradients_Round_grad__WEBPACK_IMPORTED_MODULE_74__.roundGradConfig,
    _gradients_Rsqrt_grad__WEBPACK_IMPORTED_MODULE_75__.rsqrtGradConfig,
    _gradients_Select_grad__WEBPACK_IMPORTED_MODULE_76__.selectGradConfig,
    _gradients_Selu_grad__WEBPACK_IMPORTED_MODULE_77__.seluGradConfig,
    _gradients_Sigmoid_grad__WEBPACK_IMPORTED_MODULE_78__.sigmoidGradConfig,
    _gradients_Sign_grad__WEBPACK_IMPORTED_MODULE_79__.signGradConfig,
    _gradients_Sin_grad__WEBPACK_IMPORTED_MODULE_80__.sinGradConfig,
    _gradients_Sinh_grad__WEBPACK_IMPORTED_MODULE_81__.sinhGradConfig,
    _gradients_Slice_grad__WEBPACK_IMPORTED_MODULE_82__.sliceGradConfig,
    _gradients_Softmax_grad__WEBPACK_IMPORTED_MODULE_83__.softmaxGradConfig,
    _gradients_Softplus_grad__WEBPACK_IMPORTED_MODULE_84__.softplusGradConfig,
    _gradients_SpaceToBatchND_grad__WEBPACK_IMPORTED_MODULE_85__.spaceToBatchNDGradConfig,
    _gradients_SpaceToBatchND_grad__WEBPACK_IMPORTED_MODULE_85__.spaceToBatchNDGradConfig,
    _gradients_SplitV_grad__WEBPACK_IMPORTED_MODULE_86__.splitVGradConfig,
    _gradients_SplitV_grad__WEBPACK_IMPORTED_MODULE_86__.splitVGradConfig,
    _gradients_Sqrt_grad__WEBPACK_IMPORTED_MODULE_87__.sqrtGradConfig,
    _gradients_SquaredDifference_grad__WEBPACK_IMPORTED_MODULE_88__.squaredDifferenceGradConfig,
    _gradients_Square_grad__WEBPACK_IMPORTED_MODULE_89__.squareGradConfig,
    _gradients_Step_grad__WEBPACK_IMPORTED_MODULE_90__.stepGradConfig,
    _gradients_Sub_grad__WEBPACK_IMPORTED_MODULE_91__.subGradConfig,
    _gradients_Sum_grad__WEBPACK_IMPORTED_MODULE_92__.sumGradConfig,
    _gradients_Tan_grad__WEBPACK_IMPORTED_MODULE_93__.tanGradConfig,
    _gradients_Tanh_grad__WEBPACK_IMPORTED_MODULE_94__.tanhGradConfig,
    _gradients_Tile_grad__WEBPACK_IMPORTED_MODULE_95__.tileGradConfig,
    _gradients_Transpose_grad__WEBPACK_IMPORTED_MODULE_96__.transposeGradConfig,
    _gradients_Unpack_grad__WEBPACK_IMPORTED_MODULE_97__.unpackGradConfig,
    _gradients_UnsortedSegmentSum_grad__WEBPACK_IMPORTED_MODULE_98__.unsortedSegmentSumGradConfig,
    _gradients_ZerosLike_grad__WEBPACK_IMPORTED_MODULE_99__.zerosLikeGradConfig
];
for (const gradientConfig of gradConfigs) {
    (0,_kernel_registry__WEBPACK_IMPORTED_MODULE_100__.registerGradient)(gradientConfig);
}
//# sourceMappingURL=register_all_gradients.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/serialization.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/serialization.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Serializable": () => (/* binding */ Serializable),
/* harmony export */   "SerializationMap": () => (/* binding */ SerializationMap),
/* harmony export */   "registerClass": () => (/* binding */ registerClass)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Serializable defines the serialization contract.
 *
 * TFJS requires serializable classes to return their className when asked
 * to avoid issues with minification.
 */
class Serializable {
    /**
     * Return the class name for this class to use in serialization contexts.
     *
     * Generally speaking this will be the same thing that constructor.name
     * would have returned.  However, the class name needs to be robust
     * against minification for serialization/deserialization to work properly.
     *
     * There's also places such as initializers.VarianceScaling, where
     * implementation details between different languages led to different
     * class hierarchies and a non-leaf node is used for serialization purposes.
     */
    getClassName() {
        return this.constructor
            .className;
    }
    /**
     * Creates an instance of T from a ConfigDict.
     *
     * This works for most descendants of serializable.  A few need to
     * provide special handling.
     * @param cls A Constructor for the class to instantiate.
     * @param config The Configuration for the object.
     */
    /** @nocollapse */
    static fromConfig(cls, config) {
        return new cls(config);
    }
}
/**
 * Maps string keys to class constructors.
 *
 * Used during (de)serialization from the cross-language JSON format, which
 * requires the class name in the serialization format matches the class
 * names as used in Python, should it exist.
 */
class SerializationMap {
    constructor() {
        this.classNameMap = {};
    }
    /**
     * Returns the singleton instance of the map.
     */
    static getMap() {
        if (SerializationMap.instance == null) {
            SerializationMap.instance = new SerializationMap();
        }
        return SerializationMap.instance;
    }
    /**
     * Registers the class as serializable.
     */
    static register(cls) {
        SerializationMap.getMap().classNameMap[cls.className] =
            [cls, cls.fromConfig];
    }
}
/**
 * Register a class with the serialization map of TensorFlow.js.
 *
 * This is often used for registering custom Layers, so they can be
 * serialized and deserialized.
 *
 * Example:
 *
 * ```js
 * class MyCustomLayer extends tf.layers.Layer {
 *   static className = 'MyCustomLayer';
 *
 *   constructor(config) {
 *     super(config);
 *   }
 * }
 * tf.serialization.registerClass(MyCustomLayer);
 * ```
 *
 * @param cls The class to be registered. It must have a public static member
 *   called `className` defined and the value must be a non-empty string.
 *
 * @doc {heading: 'Models', subheading: 'Serialization', ignoreCI: true}
 */
function registerClass(cls) {
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(cls.className != null, () => `Class being registered does not have the static className ` +
        `property defined.`);
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(typeof cls.className === 'string', () => `className is required to be a string, but got type ` +
        typeof cls.className);
    (0,_util__WEBPACK_IMPORTED_MODULE_0__.assert)(cls.className.length > 0, () => `Class being registered has an empty-string as its className, ` +
        `which is disallowed.`);
    SerializationMap.register(cls);
}
//# sourceMappingURL=serialization.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tape.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tape.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFilteredNodesXToY": () => (/* binding */ getFilteredNodesXToY),
/* harmony export */   "backpropagateGradients": () => (/* binding */ backpropagateGradients)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

/**
 * Computes a list of TapeNodes that connect x to y, filtering everything else
 * out and preserving the order of the original tape elements.
 *
 * @param tape The tape elements to filter.
 * @param xs The input Tensors.
 * @param y The output Tensor.
 */
function getFilteredNodesXToY(tape, xs, y) {
    // Forward pass to compute all the nodes and Tensors that are transitively a
    // function of x.
    const tensorsFromX = {};
    const nodesFromX = {};
    for (let i = 0; i < xs.length; i++) {
        tensorsFromX[xs[i].id] = true;
    }
    for (let i = 0; i < tape.length; i++) {
        const node = tape[i];
        const nodeInputs = node.inputs;
        for (const inputName in nodeInputs) {
            const input = nodeInputs[inputName];
            let anyInputFromX = false;
            for (let j = 0; j < xs.length; j++) {
                if (tensorsFromX[input.id]) {
                    node.outputs.forEach(output => tensorsFromX[output.id] = true);
                    anyInputFromX = true;
                    nodesFromX[node.id] = true;
                    break;
                }
            }
            if (anyInputFromX) {
                break;
            }
        }
    }
    // Backward pass to find all of the nodes and Tensors that lead to y.
    const tensorsLeadToY = {};
    tensorsLeadToY[y.id] = true;
    const nodesToY = {};
    for (let i = tape.length - 1; i >= 0; i--) {
        const node = tape[i];
        const nodeInputs = node.inputs;
        // If any of the outputs lead to y, mark all of the inputs as leading to y.
        for (let j = 0; j < node.outputs.length; j++) {
            if (tensorsLeadToY[node.outputs[j].id]) {
                for (const inputName in nodeInputs) {
                    tensorsLeadToY[nodeInputs[inputName].id] = true;
                    nodesToY[node.id] = true;
                }
                break;
            }
        }
    }
    // Return the paths that come from x and lead to y.
    const filteredTape = [];
    for (let i = 0; i < tape.length; i++) {
        const node = tape[i];
        if (nodesFromX[node.id] && nodesToY[node.id]) {
            // Prune the inputs from the node that aren't a function of x.
            const prunedInputs = {};
            for (const inputName in node.inputs) {
                const nodeInput = node.inputs[inputName];
                if (tensorsFromX[nodeInput.id]) {
                    prunedInputs[inputName] = nodeInput;
                }
            }
            // Copy the node and overwrite inputsAndArgs to the pruned version.
            const prunedNode = Object.assign({}, node);
            prunedNode.inputs = prunedInputs;
            prunedNode.outputs = node.outputs;
            filteredTape.push(prunedNode);
        }
    }
    return filteredTape;
}
/**
 * Backpropagate gradients through the filtered TapeNodes.
 *
 * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map
 * is mutated by this method.
 * @param filteredTape The filtered TapeNodes to backprop through.
 */
function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {
    // Walk the tape backward and keep a map of Tensor to its gradient.
    for (let i = filteredTape.length - 1; i >= 0; i--) {
        const node = filteredTape[i];
        const dys = [];
        node.outputs.forEach(o => {
            const gradTensor = tensorAccumulatedGradientMap[o.id];
            if (gradTensor != null) {
                dys.push(gradTensor);
            }
            else {
                // This particular output is not in the back-propagation subgraph, so it
                // does not affect the final output, thus we put null for its dy.
                dys.push(null);
            }
        });
        if (node.gradient == null) {
            throw new Error(`Cannot compute gradient: gradient function not found ` +
                `for ${node.kernelName}.`);
        }
        // Backprop dy through this node and accumulate gradients over the inputs.
        const inputGradients = node.gradient(dys);
        for (const inputName in node.inputs) {
            if (!(inputName in inputGradients)) {
                throw new Error(`Cannot backprop through input ${inputName}. ` +
                    `Available gradients found: ${Object.keys(inputGradients)}.`);
            }
            // Call the gradient function.
            const dx = tidy(() => inputGradients[inputName]());
            if (dx.dtype !== 'float32') {
                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +
                    `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);
            }
            const x = node.inputs[inputName];
            if (!_util__WEBPACK_IMPORTED_MODULE_0__.arraysEqual(dx.shape, x.shape)) {
                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +
                    `'${inputName}' has shape '${dx.shape}', which does not match ` +
                    `the shape of the input '${x.shape}'`);
            }
            if (tensorAccumulatedGradientMap[x.id] == null) {
                tensorAccumulatedGradientMap[x.id] = dx;
            }
            else {
                const curGradient = tensorAccumulatedGradientMap[x.id];
                tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);
                curGradient.dispose();
            }
        }
    }
}
//# sourceMappingURL=tape.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tensor.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TensorBuffer": () => (/* binding */ TensorBuffer),
/* harmony export */   "setTensorTracker": () => (/* binding */ setTensorTracker),
/* harmony export */   "setOpHandler": () => (/* binding */ setOpHandler),
/* harmony export */   "setDeprecationWarningFn": () => (/* binding */ setDeprecationWarningFn),
/* harmony export */   "Tensor": () => (/* binding */ Tensor),
/* harmony export */   "Variable": () => (/* binding */ Variable)
/* harmony export */ });
/* harmony import */ var _tensor_format__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_format */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_format.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * A mutable object, similar to `tf.Tensor`, that allows users to set values
 * at locations before converting to an immutable `tf.Tensor`.
 *
 * See `tf.buffer` for creating a tensor buffer.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
class TensorBuffer {
    constructor(shape, dtype, values) {
        this.dtype = dtype;
        this.shape = shape.slice();
        this.size = _util__WEBPACK_IMPORTED_MODULE_0__.sizeFromShape(shape);
        if (values != null) {
            const n = values.length;
            _util__WEBPACK_IMPORTED_MODULE_0__.assert(n === this.size, () => `Length of values '${n}' does not match the size ` +
                `inferred by the shape '${this.size}'.`);
        }
        if (dtype === 'complex64') {
            throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +
                `a TensorBuffer for the real and imaginary parts separately and ` +
                `call tf.complex(real, imag).`);
        }
        this.values = values || _util__WEBPACK_IMPORTED_MODULE_0__.getArrayFromDType(dtype, this.size);
        this.strides = (0,_util__WEBPACK_IMPORTED_MODULE_0__.computeStrides)(shape);
    }
    /**
     * Sets a value in the buffer at a given location.
     *
     * @param value The value to set.
     * @param locs  The location indices.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    set(value, ...locs) {
        if (locs.length === 0) {
            locs = [0];
        }
        _util__WEBPACK_IMPORTED_MODULE_0__.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +
            `match the rank (${this.rank})`);
        const index = this.locToIndex(locs);
        this.values[index] = value;
    }
    /**
     * Returns the value in the buffer at the provided location.
     *
     * @param locs The location indices.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    get(...locs) {
        if (locs.length === 0) {
            locs = [0];
        }
        let i = 0;
        for (const loc of locs) {
            if (loc < 0 || loc >= this.shape[i]) {
                const msg = `Requested out of range element at ${locs}. ` +
                    `  Buffer shape=${this.shape}`;
                throw new Error(msg);
            }
            i++;
        }
        let index = locs[locs.length - 1];
        for (let i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return this.values[index];
    }
    locToIndex(locs) {
        if (this.rank === 0) {
            return 0;
        }
        else if (this.rank === 1) {
            return locs[0];
        }
        let index = locs[locs.length - 1];
        for (let i = 0; i < locs.length - 1; ++i) {
            index += this.strides[i] * locs[i];
        }
        return index;
    }
    indexToLoc(index) {
        if (this.rank === 0) {
            return [];
        }
        else if (this.rank === 1) {
            return [index];
        }
        const locs = new Array(this.shape.length);
        for (let i = 0; i < locs.length - 1; ++i) {
            locs[i] = Math.floor(index / this.strides[i]);
            index -= locs[i] * this.strides[i];
        }
        locs[locs.length - 1] = index;
        return locs;
    }
    get rank() {
        return this.shape.length;
    }
    /**
     * Creates an immutable `tf.Tensor` object from the buffer.
     *
     * @doc {heading: 'Tensors', subheading: 'Creation'}
     */
    toTensor() {
        return trackerFn().makeTensor(this.values, this.shape, this.dtype);
    }
}
// For tracking tensor creation and disposal.
let trackerFn = null;
// Used by chaining methods to call into ops.
let opHandler = null;
// Used to warn about deprecated methods.
let deprecationWarningFn = null;
// This here so that we can use this method on dev branches and keep the
// functionality at master.
// tslint:disable-next-line:no-unused-expression
[deprecationWarningFn];
/**
 * An external consumer can register itself as the tensor tracker. This way
 * the Tensor class can notify the tracker for every tensor created and
 * disposed.
 */
function setTensorTracker(fn) {
    trackerFn = fn;
}
/**
 * An external consumer can register itself as the op handler. This way the
 * Tensor class can have chaining methods that call into ops via the op
 * handler.
 */
function setOpHandler(handler) {
    opHandler = handler;
}
/**
 * Sets the deprecation warning function to be used by this file. This way the
 * Tensor class can be a leaf but still use the environment.
 */
function setDeprecationWarningFn(fn) {
    deprecationWarningFn = fn;
}
/**
 * A `tf.Tensor` object represents an immutable, multidimensional array of
 * numbers that has a shape and a data type.
 *
 * See `tf.tensor` for details on how to create a `tf.Tensor`.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
class Tensor {
    constructor(shape, dtype, dataId, id) {
        /** Whether this tensor has been globally kept. */
        this.kept = false;
        this.isDisposedInternal = false;
        this.shape = shape.slice();
        this.dtype = dtype || 'float32';
        this.size = _util__WEBPACK_IMPORTED_MODULE_0__.sizeFromShape(shape);
        this.strides = (0,_util__WEBPACK_IMPORTED_MODULE_0__.computeStrides)(shape);
        this.dataId = dataId;
        this.id = id;
        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');
    }
    get rank() {
        return this.shape.length;
    }
    /**
     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async buffer() {
        const vals = await this.data();
        return opHandler.buffer(this.shape, this.dtype, vals);
    }
    /**
     * Returns a `tf.TensorBuffer` that holds the underlying data.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    bufferSync() {
        return opHandler.buffer(this.shape, this.dtype, this.dataSync());
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * asynchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async array() {
        const vals = await this.data();
        return (0,_util__WEBPACK_IMPORTED_MODULE_0__.toNestedArray)(this.shape, vals);
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * synchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    arraySync() {
        return (0,_util__WEBPACK_IMPORTED_MODULE_0__.toNestedArray)(this.shape, this.dataSync());
    }
    /**
     * Asynchronously downloads the values from the `tf.Tensor`. Returns a
     * promise of `TypedArray` that resolves when the computation has finished.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async data() {
        this.throwIfDisposed();
        const data = trackerFn().read(this.dataId);
        if (this.dtype === 'string') {
            const bytes = await data;
            try {
                return bytes.map(b => _util__WEBPACK_IMPORTED_MODULE_1__.decodeString(b));
            }
            catch (_a) {
                throw new Error('Failed to decode the string bytes into utf-8. ' +
                    'To get the original bytes, call tensor.bytes().');
            }
        }
        return data;
    }
    /**
     * Synchronously downloads the values from the `tf.Tensor`. This blocks the
     * UI thread until the values are ready, which can cause performance issues.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    dataSync() {
        this.throwIfDisposed();
        const data = trackerFn().readSync(this.dataId);
        if (this.dtype === 'string') {
            try {
                return data.map(b => _util__WEBPACK_IMPORTED_MODULE_1__.decodeString(b));
            }
            catch (_a) {
                throw new Error('Failed to decode the string bytes into utf-8. ' +
                    'To get the original bytes, call tensor.bytes().');
            }
        }
        return data;
    }
    /** Returns the underlying bytes of the tensor's data. */
    async bytes() {
        this.throwIfDisposed();
        const data = await trackerFn().read(this.dataId);
        if (this.dtype === 'string') {
            return data;
        }
        else {
            return new Uint8Array(data.buffer);
        }
    }
    /**
     * Disposes `tf.Tensor` from memory.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    dispose() {
        if (this.isDisposed) {
            return;
        }
        trackerFn().disposeTensor(this);
        this.isDisposedInternal = true;
    }
    get isDisposed() {
        return this.isDisposedInternal;
    }
    throwIfDisposed() {
        if (this.isDisposed) {
            throw new Error(`Tensor is disposed.`);
        }
    }
    /**
     * Prints the `tf.Tensor`. See `tf.print` for details.
     *
     * @param verbose Whether to print verbose information about the tensor,
     *    including dtype and size.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    print(verbose = false) {
        return opHandler.print(this, verbose);
    }
    /**
     * Returns a copy of the tensor. See `tf.clone` for details.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    clone() {
        this.throwIfDisposed();
        return opHandler.clone(this);
    }
    /**
     * Returns a human-readable description of the tensor. Useful for logging.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    toString(verbose = false) {
        const vals = this.dataSync();
        return (0,_tensor_format__WEBPACK_IMPORTED_MODULE_2__.tensorToString)(vals, this.shape, this.dtype, verbose);
    }
    cast(dtype) {
        this.throwIfDisposed();
        return opHandler.cast(this, dtype);
    }
    variable(trainable = true, name, dtype) {
        this.throwIfDisposed();
        return trackerFn().makeVariable(this, trainable, name, dtype);
    }
}
Object.defineProperty(Tensor, Symbol.hasInstance, {
    value: (instance) => {
        // Implementation note: we should use properties of the object that will be
        // defined before the constructor body has finished executing (methods).
        // This is because when this code is transpiled by babel, babel will call
        // classCallCheck before the constructor body is run.
        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.
        return !!instance && instance.data != null && instance.dataSync != null &&
            instance.throwIfDisposed != null;
    }
});
/**
 * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
class Variable extends Tensor {
    constructor(initialValue, trainable, name, tensorId) {
        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);
        this.trainable = trainable;
        this.name = name;
    }
    /**
     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
     * the same shape and dtype as the old `tf.Tensor`.
     *
     * @param newValue New tensor to be assigned to this variable.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    assign(newValue) {
        if (newValue.dtype !== this.dtype) {
            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +
                `previous value (${this.dtype}) must match`);
        }
        if (!_util__WEBPACK_IMPORTED_MODULE_0__.arraysEqual(newValue.shape, this.shape)) {
            throw new Error(`shape of the new value (${newValue.shape}) and ` +
                `previous value (${this.shape}) must match`);
        }
        trackerFn().disposeTensor(this);
        this.dataId = newValue.dataId;
        trackerFn().incRef(this, null /* backend */);
    }
    dispose() {
        trackerFn().disposeVariable(this);
        this.isDisposedInternal = true;
    }
}
Object.defineProperty(Variable, Symbol.hasInstance, {
    value: (instance) => {
        return instance instanceof Tensor && instance.assign != null &&
            instance.assign instanceof Function;
    }
});
//# sourceMappingURL=tensor.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tensor_format.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tensor_format.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tensorToString": () => (/* binding */ tensorToString)
/* harmony export */ });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

// Maximum number of values before we decide to show ellipsis.
const FORMAT_LIMIT_NUM_VALS = 20;
// Number of first and last values to show when displaying a, b,...,y, z.
const FORMAT_NUM_FIRST_LAST_VALS = 3;
// Number of significant digits to show.
const FORMAT_NUM_SIG_DIGITS = 7;
function tensorToString(vals, shape, dtype, verbose) {
    const strides = (0,_util__WEBPACK_IMPORTED_MODULE_0__.computeStrides)(shape);
    const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);
    const rank = shape.length;
    const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);
    const lines = ['Tensor'];
    if (verbose) {
        lines.push(`  dtype: ${dtype}`);
        lines.push(`  rank: ${rank}`);
        lines.push(`  shape: [${shape}]`);
        lines.push(`  values:`);
    }
    lines.push(valsLines.map(l => '    ' + l).join('\n'));
    return lines.join('\n');
}
function computeMaxSizePerColumn(vals, shape, dtype, strides) {
    const n = (0,_util__WEBPACK_IMPORTED_MODULE_0__.sizeFromShape)(shape);
    const numCols = strides[strides.length - 1];
    const padPerCol = new Array(numCols).fill(0);
    const rank = shape.length;
    const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;
    if (rank > 1) {
        for (let row = 0; row < n / numCols; row++) {
            const offset = row * numCols;
            for (let j = 0; j < numCols; j++) {
                padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);
            }
        }
    }
    return padPerCol;
}
function valToString(val, pad, dtype) {
    let valStr;
    if (Array.isArray(val)) {
        valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +
            `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;
    }
    else if ((0,_util__WEBPACK_IMPORTED_MODULE_0__.isString)(val)) {
        valStr = `'${val}'`;
    }
    else if (dtype === 'bool') {
        valStr = boolNumToString(val);
    }
    else {
        valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();
    }
    return (0,_util__WEBPACK_IMPORTED_MODULE_0__.rightPad)(valStr, pad);
}
function boolNumToString(v) {
    return v === 0 ? 'false' : 'true';
}
function subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {
    const storagePerElement = dtype === 'complex64' ? 2 : 1;
    const size = shape[0];
    const rank = shape.length;
    if (rank === 0) {
        if (dtype === 'complex64') {
            const complexTuple = createComplexTuples(vals);
            return [valToString(complexTuple[0], 0, dtype)];
        }
        if (dtype === 'bool') {
            return [boolNumToString(vals[0])];
        }
        return [vals[0].toString()];
    }
    if (rank === 1) {
        if (size > FORMAT_LIMIT_NUM_VALS) {
            const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;
            let firstVals = Array.from(vals.slice(0, firstValsSize));
            let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));
            if (dtype === 'complex64') {
                firstVals = createComplexTuples(firstVals);
                lastVals = createComplexTuples(lastVals);
            }
            return [
                '[' +
                    firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))
                        .join(', ') +
                    ', ..., ' +
                    lastVals
                        .map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))
                        .join(', ') +
                    ']'
            ];
        }
        const displayVals = dtype === 'complex64' ? createComplexTuples(vals) :
            Array.from(vals);
        return [
            '[' +
                displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))
                    .join(', ') +
                ']'
        ];
    }
    // The array is rank 2 or more.
    const subshape = shape.slice(1);
    const substrides = strides.slice(1);
    const stride = strides[0] * storagePerElement;
    const lines = [];
    if (size > FORMAT_LIMIT_NUM_VALS) {
        for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {
            const start = i * stride;
            const end = start + stride;
            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */));
        }
        lines.push('...');
        for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {
            const start = i * stride;
            const end = start + stride;
            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));
        }
    }
    else {
        for (let i = 0; i < size; i++) {
            const start = i * stride;
            const end = start + stride;
            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));
        }
    }
    const sep = rank === 2 ? ',' : '';
    lines[0] = '[' + lines[0] + sep;
    for (let i = 1; i < lines.length - 1; i++) {
        lines[i] = ' ' + lines[i] + sep;
    }
    let newLineSep = ',\n';
    for (let i = 2; i < rank; i++) {
        newLineSep += '\n';
    }
    lines[lines.length - 1] =
        ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);
    return lines;
}
function createComplexTuples(vals) {
    const complexTuples = [];
    for (let i = 0; i < vals.length; i += 2) {
        complexTuples.push([vals[i], vals[i + 1]]);
    }
    return complexTuples;
}
//# sourceMappingURL=tensor_format.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "makeTypesMatch": () => (/* binding */ makeTypesMatch),
/* harmony export */   "assertTypesMatch": () => (/* binding */ assertTypesMatch),
/* harmony export */   "isTensorInList": () => (/* binding */ isTensorInList),
/* harmony export */   "getTensorsInContainer": () => (/* binding */ getTensorsInContainer)
/* harmony export */ });
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ "./node_modules/@tensorflow/tfjs-core/dist/types.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



function makeTypesMatch(a, b) {
    if (a.dtype === b.dtype) {
        return [a, b];
    }
    const dtype = (0,_types__WEBPACK_IMPORTED_MODULE_0__.upcastType)(a.dtype, b.dtype);
    return [a.cast(dtype), b.cast(dtype)];
}
function assertTypesMatch(a, b) {
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` +
        ` second(${b.dtype}) input must match`);
}
function isTensorInList(tensor, tensorList) {
    return tensorList.some(x => x.id === tensor.id);
}
/**
 * Extracts any `Tensor`s found within the provided object.
 *
 * @param container an object that may be a `Tensor` or may directly contain
 *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it
 *   is safe to pass any object here, except that `Promise`s are not
 *   supported.
 * @returns An array of `Tensors` found within the passed object. If the
 *   argument is simply a `Tensor', a list containing that `Tensor` is
 *   returned. If the object is not a `Tensor` or does not
 *   contain `Tensors`, an empty list is returned.
 */
function getTensorsInContainer(result) {
    const list = [];
    const seen = new Set();
    walkTensorContainer(result, list, seen);
    return list;
}
function walkTensorContainer(container, list, seen) {
    if (container == null) {
        return;
    }
    if (container instanceof _tensor__WEBPACK_IMPORTED_MODULE_2__.Tensor) {
        list.push(container);
        return;
    }
    if (!isIterable(container)) {
        return;
    }
    // Iteration over keys works also for arrays.
    const iterable = container;
    for (const k in iterable) {
        const val = iterable[k];
        if (!seen.has(val)) {
            seen.add(val);
            walkTensorContainer(val, list, seen);
        }
    }
}
// tslint:disable-next-line:no-any
function isIterable(obj) {
    return Array.isArray(obj) || typeof obj === 'object';
}
//# sourceMappingURL=tensor_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inferShape": () => (/* binding */ inferShape),
/* harmony export */   "convertToTensor": () => (/* binding */ convertToTensor),
/* harmony export */   "convertToTensorArray": () => (/* binding */ convertToTensorArray)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tensor */ "./node_modules/@tensorflow/tfjs-core/dist/tensor.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */




function inferShape(val, dtype) {
    let firstElem = val;
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(val)) {
        return dtype === 'string' ? [] : [val.length];
    }
    if (!Array.isArray(val)) {
        return []; // Scalar.
    }
    const shape = [];
    while (Array.isArray(firstElem) ||
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(firstElem) && dtype !== 'string') {
        shape.push(firstElem.length);
        firstElem = firstElem[0];
    }
    if (Array.isArray(val) &&
        (0,_environment__WEBPACK_IMPORTED_MODULE_2__.env)().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {
        deepAssertShapeConsistency(val, shape, []);
    }
    return shape;
}
function deepAssertShapeConsistency(val, shape, indices) {
    indices = indices || [];
    if (!(Array.isArray(val)) && !(0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(val)) {
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` +
            `but should be an array/TypedArray of ${shape[0]} elements`);
        return;
    }
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` +
        `but is an array of ${val.length} elements`);
    (0,_util__WEBPACK_IMPORTED_MODULE_1__.assert)(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +
        `elements, but has ${val.length} elements`);
    const subShape = shape.slice(1);
    for (let i = 0; i < val.length; ++i) {
        deepAssertShapeConsistency(val[i], subShape, indices.concat(i));
    }
}
function assertDtype(expectedDtype, actualDType, argName, functionName) {
    if (expectedDtype === 'string_or_numeric') {
        return;
    }
    if (expectedDtype == null) {
        throw new Error(`Expected dtype cannot be null.`);
    }
    if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||
        expectedDtype === 'numeric' && actualDType === 'string') {
        throw new Error(`Argument '${argName}' passed to '${functionName}' must ` +
            `be ${expectedDtype} tensor, but got ${actualDType} tensor`);
    }
}
function convertToTensor(x, argName, functionName, parseAsDtype = 'numeric') {
    if (x instanceof _tensor__WEBPACK_IMPORTED_MODULE_3__.Tensor) {
        assertDtype(parseAsDtype, x.dtype, argName, functionName);
        return x;
    }
    let inferredDtype = (0,_util__WEBPACK_IMPORTED_MODULE_1__.inferDtype)(x);
    // If the user expects a bool/int/float, use that info to update the
    // inferredDtype when it is not a string.
    if (inferredDtype !== 'string' &&
        ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {
        inferredDtype = parseAsDtype;
    }
    assertDtype(parseAsDtype, inferredDtype, argName, functionName);
    if ((x == null) ||
        (!(0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(x) && !Array.isArray(x) && typeof x !== 'number' &&
            typeof x !== 'boolean' && typeof x !== 'string')) {
        const type = x == null ? 'null' : x.constructor.name;
        throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` +
            `Tensor or TensorLike, but got '${type}'`);
    }
    const inferredShape = inferShape(x, inferredDtype);
    if (!(0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(x) && !Array.isArray(x)) {
        x = [x];
    }
    const skipTypedArray = true;
    const values = inferredDtype !== 'string' ?
        (0,_util__WEBPACK_IMPORTED_MODULE_4__.toTypedArray)(x, inferredDtype) :
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.flatten)(x, [], skipTypedArray);
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.makeTensor(values, inferredShape, inferredDtype);
}
function convertToTensorArray(arg, argName, functionName, parseAsDtype = 'numeric') {
    if (!Array.isArray(arg)) {
        throw new Error(`Argument ${argName} passed to ${functionName} must be a ` +
            '`Tensor[]` or `TensorLike[]`');
    }
    const tensors = arg;
    return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));
}
//# sourceMappingURL=tensor_util_env.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/test_util.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/test_util.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TEST_EPSILON_FLOAT16": () => (/* binding */ TEST_EPSILON_FLOAT16),
/* harmony export */   "expectArraysClose": () => (/* binding */ expectArraysClose),
/* harmony export */   "testEpsilon": () => (/* binding */ testEpsilon),
/* harmony export */   "expectPromiseToFail": () => (/* binding */ expectPromiseToFail),
/* harmony export */   "expectArraysEqual": () => (/* binding */ expectArraysEqual),
/* harmony export */   "expectNumbersClose": () => (/* binding */ expectNumbersClose),
/* harmony export */   "expectValuesInRange": () => (/* binding */ expectValuesInRange),
/* harmony export */   "expectArrayBuffersEqual": () => (/* binding */ expectArrayBuffersEqual),
/* harmony export */   "encodeStrings": () => (/* binding */ encodeStrings)
/* harmony export */ });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./node_modules/@tensorflow/tfjs-core/dist/engine.js");
/* harmony import */ var _tensor_util_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tensor_util_env */ "./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./node_modules/@tensorflow/tfjs-core/dist/util.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



const TEST_EPSILON_FLOAT32 = 1e-3;
const TEST_EPSILON_FLOAT16 = 1e-1;
function expectArraysClose(actual, expected, epsilon) {
    if (epsilon == null) {
        epsilon = testEpsilon();
    }
    return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));
}
function testEpsilon() {
    return _engine__WEBPACK_IMPORTED_MODULE_0__.ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :
        TEST_EPSILON_FLOAT16;
}
function expectArraysPredicate(actual, expected, predicate) {
    let checkClassType = true;
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(actual) || (0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(expected)) {
        checkClassType = false;
    }
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(actual) && (0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(expected)) {
        checkClassType = true;
    }
    if (checkClassType) {
        const aType = actual.constructor.name;
        const bType = expected.constructor.name;
        if (aType !== bType) {
            throw new Error(`Arrays are of different type. Actual: ${aType}. ` +
                `Expected: ${bType}`);
        }
    }
    if (Array.isArray(actual) && Array.isArray(expected)) {
        const actualShape = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__.inferShape)(actual);
        const expectedShape = (0,_tensor_util_env__WEBPACK_IMPORTED_MODULE_2__.inferShape)(expected);
        if (!(0,_util__WEBPACK_IMPORTED_MODULE_1__.arraysEqual)(actualShape, expectedShape)) {
            throw new Error(`Arrays have different shapes. ` +
                `Actual: [${actualShape}]. Expected: [${expectedShape}]`);
        }
    }
    const actualFlat = (0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(actual) ? actual : (0,_util__WEBPACK_IMPORTED_MODULE_1__.flatten)(actual);
    const expectedFlat = (0,_util__WEBPACK_IMPORTED_MODULE_1__.isTypedArray)(expected) ?
        expected :
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.flatten)(expected);
    if (actualFlat.length !== expectedFlat.length) {
        throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` +
            `expected: ${expectedFlat.length}.\n` +
            `Actual:   ${actualFlat}.\n` +
            `Expected: ${expectedFlat}.`);
    }
    for (let i = 0; i < expectedFlat.length; ++i) {
        const a = actualFlat[i];
        const e = expectedFlat[i];
        if (!predicate(a, e)) {
            throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\n` +
                `Actual:   ${actualFlat}.\n` +
                `Expected: ${expectedFlat}.`);
        }
    }
}
function expectPromiseToFail(fn, done) {
    fn().then(() => done.fail(), () => done());
}
function expectArraysEqual(actual, expected) {
    const exp = typeof expected === 'string' || typeof expected === 'number' ||
        typeof expected === 'boolean' ?
        [expected] :
        expected;
    if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isString)(actual) || (0,_util__WEBPACK_IMPORTED_MODULE_1__.isString)(actual[0]) ||
        (0,_util__WEBPACK_IMPORTED_MODULE_1__.isString)(expected) || (0,_util__WEBPACK_IMPORTED_MODULE_1__.isString)(expected[0])) {
        // tslint:disable-next-line: triple-equals
        return expectArraysPredicate(actual, exp, (a, b) => a == b);
    }
    return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));
}
function expectNumbersClose(a, e, epsilon) {
    if (epsilon == null) {
        epsilon = testEpsilon();
    }
    if (!areClose(a, e, epsilon)) {
        throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);
    }
}
function areClose(a, e, epsilon) {
    if (!isFinite(a) && !isFinite(e)) {
        return true;
    }
    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {
        return false;
    }
    return true;
}
function expectValuesInRange(actual, low, high) {
    for (let i = 0; i < actual.length; i++) {
        if (actual[i] < low || actual[i] > high) {
            throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);
        }
    }
}
function expectArrayBuffersEqual(actual, expected) {
    // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in
    // a Float32Array solves this issue.
    expect(new Float32Array(actual)).toEqual(new Float32Array(expected));
}
/** Encodes strings into utf-8 bytes. */
function encodeStrings(a) {
    for (let i = 0; i < a.length; i++) {
        const val = a[i];
        if (Array.isArray(val)) {
            encodeStrings(val);
        }
        else {
            a[i] = (0,_util__WEBPACK_IMPORTED_MODULE_3__.encodeString)(val);
        }
    }
    return a;
}
//# sourceMappingURL=test_util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/train.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/train.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "train": () => (/* binding */ train)
/* harmony export */ });
/* harmony import */ var _optimizers_adadelta_optimizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./optimizers/adadelta_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adadelta_optimizer.js");
/* harmony import */ var _optimizers_adagrad_optimizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./optimizers/adagrad_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adagrad_optimizer.js");
/* harmony import */ var _optimizers_adam_optimizer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./optimizers/adam_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adam_optimizer.js");
/* harmony import */ var _optimizers_adamax_optimizer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./optimizers/adamax_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/adamax_optimizer.js");
/* harmony import */ var _optimizers_momentum_optimizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./optimizers/momentum_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/momentum_optimizer.js");
/* harmony import */ var _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./optimizers/optimizer_constructors */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/optimizer_constructors.js");
/* harmony import */ var _optimizers_rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./optimizers/rmsprop_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/rmsprop_optimizer.js");
/* harmony import */ var _optimizers_sgd_optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./optimizers/sgd_optimizer */ "./node_modules/@tensorflow/tfjs-core/dist/optimizers/sgd_optimizer.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// So typings can propagate.








// tslint:disable-next-line:no-unused-expression
[_optimizers_momentum_optimizer__WEBPACK_IMPORTED_MODULE_0__.MomentumOptimizer, _optimizers_sgd_optimizer__WEBPACK_IMPORTED_MODULE_1__.SGDOptimizer, _optimizers_adadelta_optimizer__WEBPACK_IMPORTED_MODULE_2__.AdadeltaOptimizer, _optimizers_adagrad_optimizer__WEBPACK_IMPORTED_MODULE_3__.AdagradOptimizer,
    _optimizers_rmsprop_optimizer__WEBPACK_IMPORTED_MODULE_4__.RMSPropOptimizer, _optimizers_adamax_optimizer__WEBPACK_IMPORTED_MODULE_5__.AdamaxOptimizer, _optimizers_adam_optimizer__WEBPACK_IMPORTED_MODULE_6__.AdamOptimizer];
const train = {
    sgd: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_7__.OptimizerConstructors.sgd,
    momentum: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_7__.OptimizerConstructors.momentum,
    adadelta: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_7__.OptimizerConstructors.adadelta,
    adagrad: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_7__.OptimizerConstructors.adagrad,
    rmsprop: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_7__.OptimizerConstructors.rmsprop,
    adamax: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_7__.OptimizerConstructors.adamax,
    adam: _optimizers_optimizer_constructors__WEBPACK_IMPORTED_MODULE_7__.OptimizerConstructors.adam
};
//# sourceMappingURL=train.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Rank": () => (/* binding */ Rank),
/* harmony export */   "upcastType": () => (/* binding */ upcastType),
/* harmony export */   "sumOutType": () => (/* binding */ sumOutType)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Rank;
(function (Rank) {
    Rank["R0"] = "R0";
    Rank["R1"] = "R1";
    Rank["R2"] = "R2";
    Rank["R3"] = "R3";
    Rank["R4"] = "R4";
    Rank["R5"] = "R5";
    Rank["R6"] = "R6";
})(Rank || (Rank = {}));
// Looks for upcasting types. Used, for example, in operations with mixed dtype
// inputs.
var UpcastInt32AndMap;
(function (UpcastInt32AndMap) {
    UpcastInt32AndMap["float32"] = "float32";
    UpcastInt32AndMap["int32"] = "int32";
    UpcastInt32AndMap["bool"] = "int32";
    UpcastInt32AndMap["complex64"] = "complex64";
})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));
var UpcastBoolAndMap;
(function (UpcastBoolAndMap) {
    UpcastBoolAndMap["float32"] = "float32";
    UpcastBoolAndMap["int32"] = "int32";
    UpcastBoolAndMap["bool"] = "bool";
    UpcastBoolAndMap["complex64"] = "complex64";
})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));
var UpcastFloat32AndMap;
(function (UpcastFloat32AndMap) {
    UpcastFloat32AndMap["float32"] = "float32";
    UpcastFloat32AndMap["int32"] = "float32";
    UpcastFloat32AndMap["bool"] = "float32";
    UpcastFloat32AndMap["complex64"] = "complex64";
})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));
var UpcastComplex64AndMap;
(function (UpcastComplex64AndMap) {
    UpcastComplex64AndMap["float32"] = "complex64";
    UpcastComplex64AndMap["int32"] = "complex64";
    UpcastComplex64AndMap["bool"] = "complex64";
    UpcastComplex64AndMap["complex64"] = "complex64";
})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));
const upcastTypeMap = {
    'float32': UpcastFloat32AndMap,
    'int32': UpcastInt32AndMap,
    'bool': UpcastBoolAndMap,
    'complex64': UpcastComplex64AndMap
};
function upcastType(typeA, typeB) {
    if (typeA === 'string' || typeB === 'string') {
        if (typeA === 'string' && typeB === 'string') {
            return 'string';
        }
        throw new Error(`Can not upcast ${typeA} with ${typeB}`);
    }
    return upcastTypeMap[typeA][typeB];
}
/** Returns the output type after summation. */
function sumOutType(type) {
    return upcastType(type, 'int32');
}
//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/util.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/util.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arraysEqual": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.arraysEqual),
/* harmony export */   "assert": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.assert),
/* harmony export */   "assertNonNegativeIntegerDimensions": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.assertNonNegativeIntegerDimensions),
/* harmony export */   "assertNonNull": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.assertNonNull),
/* harmony export */   "assertShapesMatch": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.assertShapesMatch),
/* harmony export */   "bytesFromStringArray": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.bytesFromStringArray),
/* harmony export */   "bytesPerElement": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.bytesPerElement),
/* harmony export */   "checkConversionForErrors": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.checkConversionForErrors),
/* harmony export */   "clamp": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.clamp),
/* harmony export */   "computeStrides": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.computeStrides),
/* harmony export */   "createShuffledIndices": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.createShuffledIndices),
/* harmony export */   "distSquared": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.distSquared),
/* harmony export */   "flatten": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.flatten),
/* harmony export */   "getArrayFromDType": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.getArrayFromDType),
/* harmony export */   "getTypedArrayFromDType": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.getTypedArrayFromDType),
/* harmony export */   "hasEncodingLoss": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.hasEncodingLoss),
/* harmony export */   "indexToLoc": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.indexToLoc),
/* harmony export */   "inferDtype": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.inferDtype),
/* harmony export */   "inferFromImplicitShape": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.inferFromImplicitShape),
/* harmony export */   "isBoolean": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.isBoolean),
/* harmony export */   "isFunction": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.isFunction),
/* harmony export */   "isInt": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.isInt),
/* harmony export */   "isNumber": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.isNumber),
/* harmony export */   "isPromise": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.isPromise),
/* harmony export */   "isScalarShape": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.isScalarShape),
/* harmony export */   "isString": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.isString),
/* harmony export */   "isTypedArray": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.isTypedArray),
/* harmony export */   "isValidDtype": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.isValidDtype),
/* harmony export */   "locToIndex": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.locToIndex),
/* harmony export */   "makeOnesTypedArray": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.makeOnesTypedArray),
/* harmony export */   "makeZerosNestedTypedArray": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.makeZerosNestedTypedArray),
/* harmony export */   "makeZerosTypedArray": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.makeZerosTypedArray),
/* harmony export */   "nearestDivisor": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.nearestDivisor),
/* harmony export */   "nearestLargerEven": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.nearestLargerEven),
/* harmony export */   "parseAxisParam": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.parseAxisParam),
/* harmony export */   "randUniform": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.randUniform),
/* harmony export */   "repeatedTry": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.repeatedTry),
/* harmony export */   "rightPad": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.rightPad),
/* harmony export */   "shuffle": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.shuffle),
/* harmony export */   "sizeFromShape": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.sizeFromShape),
/* harmony export */   "sizeToSquarishShape": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.sizeToSquarishShape),
/* harmony export */   "squeezeShape": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.squeezeShape),
/* harmony export */   "sum": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.sum),
/* harmony export */   "tanh": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.tanh),
/* harmony export */   "toNestedArray": () => (/* reexport safe */ _util_base__WEBPACK_IMPORTED_MODULE_0__.toNestedArray),
/* harmony export */   "createScalarValue": () => (/* binding */ createScalarValue),
/* harmony export */   "toTypedArray": () => (/* binding */ toTypedArray),
/* harmony export */   "now": () => (/* binding */ now),
/* harmony export */   "fetch": () => (/* binding */ fetch),
/* harmony export */   "encodeString": () => (/* binding */ encodeString),
/* harmony export */   "decodeString": () => (/* binding */ decodeString)
/* harmony export */ });
/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment */ "./node_modules/@tensorflow/tfjs-core/dist/environment.js");
/* harmony import */ var _util_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util_base */ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js");
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */



/**
 * Create typed array for scalar value. Used for storing in `DataStorage`.
 */
function createScalarValue(value, dtype) {
    if (dtype === 'string') {
        return encodeString(value);
    }
    return toTypedArray([value], dtype);
}
function noConversionNeeded(a, dtype) {
    return (a instanceof Float32Array && dtype === 'float32') ||
        (a instanceof Int32Array && dtype === 'int32') ||
        (a instanceof Uint8Array && dtype === 'bool');
}
function toTypedArray(a, dtype) {
    if (dtype === 'string') {
        throw new Error('Cannot convert a string[] to a TypedArray');
    }
    if (Array.isArray(a)) {
        a = _util_base__WEBPACK_IMPORTED_MODULE_0__.flatten(a);
    }
    if ((0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)().getBool('DEBUG')) {
        _util_base__WEBPACK_IMPORTED_MODULE_0__.checkConversionForErrors(a, dtype);
    }
    if (noConversionNeeded(a, dtype)) {
        return a;
    }
    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
        return new Float32Array(a);
    }
    else if (dtype === 'int32') {
        return new Int32Array(a);
    }
    else if (dtype === 'bool') {
        const bool = new Uint8Array(a.length);
        for (let i = 0; i < bool.length; ++i) {
            if (Math.round(a[i]) !== 0) {
                bool[i] = 1;
            }
        }
        return bool;
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
}
/**
 * Returns the current high-resolution time in milliseconds relative to an
 * arbitrary time in the past. It works across different platforms (node.js,
 * browsers).
 *
 * ```js
 * console.log(tf.util.now());
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function now() {
    return (0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)().platform.now();
}
/**
 * Returns a platform-specific implementation of
 * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).
 *
 * If `fetch` is defined on the global object (`window`, `process`, etc.),
 * `tf.util.fetch` returns that function.
 *
 * If not, `tf.util.fetch` returns a platform-specific solution.
 *
 * ```js
 * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');
 * // handle response
 * ```
 *
 * @doc {heading: 'Util'}
 */
function fetch(path, requestInits) {
    return (0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)().platform.fetch(path, requestInits);
}
/**
 * Encodes the provided string into bytes using the provided encoding scheme.
 *
 * @param s The string to encode.
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */
function encodeString(s, encoding = 'utf-8') {
    encoding = encoding || 'utf-8';
    return (0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)().platform.encode(s, encoding);
}
/**
 * Decodes the provided bytes into a string using the provided encoding scheme.
 * @param bytes The bytes to decode.
 *
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */
function decodeString(bytes, encoding = 'utf-8') {
    encoding = encoding || 'utf-8';
    return (0,_environment__WEBPACK_IMPORTED_MODULE_1__.env)().platform.decode(bytes, encoding);
}
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/util_base.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/util_base.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shuffle": () => (/* binding */ shuffle),
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "nearestLargerEven": () => (/* binding */ nearestLargerEven),
/* harmony export */   "sum": () => (/* binding */ sum),
/* harmony export */   "randUniform": () => (/* binding */ randUniform),
/* harmony export */   "distSquared": () => (/* binding */ distSquared),
/* harmony export */   "assert": () => (/* binding */ assert),
/* harmony export */   "assertShapesMatch": () => (/* binding */ assertShapesMatch),
/* harmony export */   "assertNonNull": () => (/* binding */ assertNonNull),
/* harmony export */   "flatten": () => (/* binding */ flatten),
/* harmony export */   "sizeFromShape": () => (/* binding */ sizeFromShape),
/* harmony export */   "isScalarShape": () => (/* binding */ isScalarShape),
/* harmony export */   "arraysEqual": () => (/* binding */ arraysEqual),
/* harmony export */   "isInt": () => (/* binding */ isInt),
/* harmony export */   "tanh": () => (/* binding */ tanh),
/* harmony export */   "sizeToSquarishShape": () => (/* binding */ sizeToSquarishShape),
/* harmony export */   "createShuffledIndices": () => (/* binding */ createShuffledIndices),
/* harmony export */   "rightPad": () => (/* binding */ rightPad),
/* harmony export */   "repeatedTry": () => (/* binding */ repeatedTry),
/* harmony export */   "inferFromImplicitShape": () => (/* binding */ inferFromImplicitShape),
/* harmony export */   "parseAxisParam": () => (/* binding */ parseAxisParam),
/* harmony export */   "squeezeShape": () => (/* binding */ squeezeShape),
/* harmony export */   "getTypedArrayFromDType": () => (/* binding */ getTypedArrayFromDType),
/* harmony export */   "getArrayFromDType": () => (/* binding */ getArrayFromDType),
/* harmony export */   "checkConversionForErrors": () => (/* binding */ checkConversionForErrors),
/* harmony export */   "isValidDtype": () => (/* binding */ isValidDtype),
/* harmony export */   "hasEncodingLoss": () => (/* binding */ hasEncodingLoss),
/* harmony export */   "isTypedArray": () => (/* binding */ isTypedArray),
/* harmony export */   "bytesPerElement": () => (/* binding */ bytesPerElement),
/* harmony export */   "bytesFromStringArray": () => (/* binding */ bytesFromStringArray),
/* harmony export */   "isString": () => (/* binding */ isString),
/* harmony export */   "isBoolean": () => (/* binding */ isBoolean),
/* harmony export */   "isNumber": () => (/* binding */ isNumber),
/* harmony export */   "inferDtype": () => (/* binding */ inferDtype),
/* harmony export */   "isFunction": () => (/* binding */ isFunction),
/* harmony export */   "nearestDivisor": () => (/* binding */ nearestDivisor),
/* harmony export */   "computeStrides": () => (/* binding */ computeStrides),
/* harmony export */   "toNestedArray": () => (/* binding */ toNestedArray),
/* harmony export */   "makeOnesTypedArray": () => (/* binding */ makeOnesTypedArray),
/* harmony export */   "makeZerosTypedArray": () => (/* binding */ makeZerosTypedArray),
/* harmony export */   "makeZerosNestedTypedArray": () => (/* binding */ makeZerosNestedTypedArray),
/* harmony export */   "assertNonNegativeIntegerDimensions": () => (/* binding */ assertNonNegativeIntegerDimensions),
/* harmony export */   "locToIndex": () => (/* binding */ locToIndex),
/* harmony export */   "indexToLoc": () => (/* binding */ indexToLoc),
/* harmony export */   "isPromise": () => (/* binding */ isPromise)
/* harmony export */ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Shuffles the array in-place using Fisher-Yates algorithm.
 *
 * ```js
 * const a = [1, 2, 3, 4, 5];
 * tf.util.shuffle(a);
 * console.log(a);
 * ```
 *
 * @param array The array to shuffle in-place.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
// tslint:disable-next-line:no-any
function shuffle(array) {
    let counter = array.length;
    let temp = 0;
    let index = 0;
    // While there are elements in the array
    while (counter > 0) {
        // Pick a random index
        index = (Math.random() * counter) | 0;
        // Decrease counter by 1
        counter--;
        // And swap the last element with it
        temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
    }
}
/** Clamps a value to a specified range. */
function clamp(min, x, max) {
    return Math.max(min, Math.min(x, max));
}
function nearestLargerEven(val) {
    return val % 2 === 0 ? val : val + 1;
}
function sum(arr) {
    let sum = 0;
    for (let i = 0; i < arr.length; i++) {
        sum += arr[i];
    }
    return sum;
}
/**
 * Returns a sample from a uniform [a, b) distribution.
 *
 * @param a The minimum support (inclusive).
 * @param b The maximum support (exclusive).
 * @return A pseudorandom number on the half-open interval [a,b).
 */
function randUniform(a, b) {
    const r = Math.random();
    return (b * r) + (1 - r) * a;
}
/** Returns the squared Euclidean distance between two vectors. */
function distSquared(a, b) {
    let result = 0;
    for (let i = 0; i < a.length; i++) {
        const diff = Number(a[i]) - Number(b[i]);
        result += diff * diff;
    }
    return result;
}
/**
 * Asserts that the expression is true. Otherwise throws an error with the
 * provided message.
 *
 * ```js
 * const x = 2;
 * tf.util.assert(x === 2, 'x is not 2');
 * ```
 *
 * @param expr The expression to assert (as a boolean).
 * @param msg A function that returns the message to report when throwing an
 *     error. We use a function for performance reasons.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function assert(expr, msg) {
    if (!expr) {
        throw new Error(typeof msg === 'string' ? msg : msg());
    }
}
function assertShapesMatch(shapeA, shapeB, errorMessagePrefix = '') {
    assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);
}
function assertNonNull(a) {
    assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);
}
// NOTE: We explicitly type out what T extends instead of any so that
// util.flatten on a nested array of number doesn't try to infer T as a
// number[][], causing us to explicitly type util.flatten<number>().
/**
 *  Flattens an arbitrarily nested array.
 *
 * ```js
 * const a = [[1, 2], [3, 4], [5, [6, [7]]]];
 * const flat = tf.util.flatten(a);
 * console.log(flat);
 * ```
 *
 *  @param arr The nested array to flatten.
 *  @param result The destination array which holds the elements.
 *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults
 *      to false.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function flatten(arr, result = [], skipTypedArray = false) {
    if (result == null) {
        result = [];
    }
    if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {
        for (let i = 0; i < arr.length; ++i) {
            flatten(arr[i], result, skipTypedArray);
        }
    }
    else {
        result.push(arr);
    }
    return result;
}
/**
 * Returns the size (number of elements) of the tensor given its shape.
 *
 * ```js
 * const shape = [3, 4, 2];
 * const size = tf.util.sizeFromShape(shape);
 * console.log(size);
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function sizeFromShape(shape) {
    if (shape.length === 0) {
        // Scalar.
        return 1;
    }
    let size = shape[0];
    for (let i = 1; i < shape.length; i++) {
        size *= shape[i];
    }
    return size;
}
function isScalarShape(shape) {
    return shape.length === 0;
}
function arraysEqual(n1, n2) {
    if (n1 === n2) {
        return true;
    }
    if (n1 == null || n2 == null) {
        return false;
    }
    if (n1.length !== n2.length) {
        return false;
    }
    for (let i = 0; i < n1.length; i++) {
        if (n1[i] !== n2[i]) {
            return false;
        }
    }
    return true;
}
function isInt(a) {
    return a % 1 === 0;
}
function tanh(x) {
    // tslint:disable-next-line:no-any
    if (Math.tanh != null) {
        // tslint:disable-next-line:no-any
        return Math.tanh(x);
    }
    if (x === Infinity) {
        return 1;
    }
    else if (x === -Infinity) {
        return -1;
    }
    else {
        const e2x = Math.exp(2 * x);
        return (e2x - 1) / (e2x + 1);
    }
}
function sizeToSquarishShape(size) {
    const width = Math.ceil(Math.sqrt(size));
    return [width, Math.ceil(size / width)];
}
/**
 * Creates a new array with randomized indicies to a given quantity.
 *
 * ```js
 * const randomTen = tf.util.createShuffledIndices(10);
 * console.log(randomTen);
 * ```
 *
 * @param number Quantity of how many shuffled indicies to create.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function createShuffledIndices(n) {
    const shuffledIndices = new Uint32Array(n);
    for (let i = 0; i < n; ++i) {
        shuffledIndices[i] = i;
    }
    shuffle(shuffledIndices);
    return shuffledIndices;
}
function rightPad(a, size) {
    if (size <= a.length) {
        return a;
    }
    return a + ' '.repeat(size - a.length);
}
function repeatedTry(checkFn, delayFn = (counter) => 0, maxCounter) {
    return new Promise((resolve, reject) => {
        let tryCount = 0;
        const tryFn = () => {
            if (checkFn()) {
                resolve();
                return;
            }
            tryCount++;
            const nextBackoff = delayFn(tryCount);
            if (maxCounter != null && tryCount >= maxCounter) {
                reject();
                return;
            }
            setTimeout(tryFn, nextBackoff);
        };
        tryFn();
    });
}
/**
 * Given the full size of the array and a shape that may contain -1 as the
 * implicit dimension, returns the inferred shape where -1 is replaced.
 * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].
 *
 * @param shape The shape, which may contain -1 in some dimension.
 * @param size The full size (number of elements) of the array.
 * @return The inferred shape where -1 is replaced with the inferred size.
 */
function inferFromImplicitShape(shape, size) {
    let shapeProd = 1;
    let implicitIdx = -1;
    for (let i = 0; i < shape.length; ++i) {
        if (shape[i] >= 0) {
            shapeProd *= shape[i];
        }
        else if (shape[i] === -1) {
            if (implicitIdx !== -1) {
                throw Error(`Shapes can only have 1 implicit size. ` +
                    `Found -1 at dim ${implicitIdx} and dim ${i}`);
            }
            implicitIdx = i;
        }
        else if (shape[i] < 0) {
            throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);
        }
    }
    if (implicitIdx === -1) {
        if (size > 0 && size !== shapeProd) {
            throw Error(`Size(${size}) must match the product of shape ${shape}`);
        }
        return shape;
    }
    if (shapeProd === 0) {
        throw Error(`Cannot infer the missing size in [${shape}] when ` +
            `there are 0 elements`);
    }
    if (size % shapeProd !== 0) {
        throw Error(`The implicit shape can't be a fractional number. ` +
            `Got ${size} / ${shapeProd}`);
    }
    const newShape = shape.slice();
    newShape[implicitIdx] = size / shapeProd;
    return newShape;
}
function parseAxisParam(axis, shape) {
    const rank = shape.length;
    // Normalize input
    axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);
    // Check for valid range
    assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +
        `got axis ${axis}`);
    // Check for only integers
    assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +
        `got axis ${axis}`);
    // Handle negative axis.
    return axis.map(a => a < 0 ? rank + a : a);
}
/** Reduces the shape by removing all dimensions of shape 1. */
function squeezeShape(shape, axis) {
    const newShape = [];
    const keptDims = [];
    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;
    const axes = (axis == null || isEmptyArray) ?
        null :
        parseAxisParam(axis, shape).sort();
    let j = 0;
    for (let i = 0; i < shape.length; ++i) {
        if (axes != null) {
            if (axes[j] === i && shape[i] !== 1) {
                throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);
            }
            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {
                newShape.push(shape[i]);
                keptDims.push(i);
            }
            if (axes[j] <= i) {
                j++;
            }
        }
        if (shape[i] !== 1) {
            newShape.push(shape[i]);
            keptDims.push(i);
        }
    }
    return { newShape, keptDims };
}
function getTypedArrayFromDType(dtype, size) {
    let values = null;
    if (dtype == null || dtype === 'float32') {
        values = new Float32Array(size);
    }
    else if (dtype === 'int32') {
        values = new Int32Array(size);
    }
    else if (dtype === 'bool') {
        values = new Uint8Array(size);
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
    return values;
}
function getArrayFromDType(dtype, size) {
    let values = null;
    if (dtype == null || dtype === 'float32') {
        values = new Float32Array(size);
    }
    else if (dtype === 'int32') {
        values = new Int32Array(size);
    }
    else if (dtype === 'bool') {
        values = new Uint8Array(size);
    }
    else if (dtype === 'string') {
        values = new Array(size);
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
    return values;
}
function checkConversionForErrors(vals, dtype) {
    for (let i = 0; i < vals.length; i++) {
        const num = vals[i];
        if (isNaN(num) || !isFinite(num)) {
            throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);
        }
    }
}
/** Returns true if the dtype is valid. */
function isValidDtype(dtype) {
    return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||
        dtype === 'int32' || dtype === 'string';
}
/**
 * Returns true if the new type can't encode the old type without loss of
 * precision.
 */
function hasEncodingLoss(oldType, newType) {
    if (newType === 'complex64') {
        return false;
    }
    if (newType === 'float32' && oldType !== 'complex64') {
        return false;
    }
    if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {
        return false;
    }
    if (newType === 'bool' && oldType === 'bool') {
        return false;
    }
    return true;
}
function isTypedArray(a) {
    return a instanceof Float32Array || a instanceof Int32Array ||
        a instanceof Uint8Array;
}
function bytesPerElement(dtype) {
    if (dtype === 'float32' || dtype === 'int32') {
        return 4;
    }
    else if (dtype === 'complex64') {
        return 8;
    }
    else if (dtype === 'bool') {
        return 1;
    }
    else {
        throw new Error(`Unknown dtype ${dtype}`);
    }
}
/**
 * Returns the approximate number of bytes allocated in the string array - 2
 * bytes per character. Computing the exact bytes for a native string in JS is
 * not possible since it depends on the encoding of the html page that serves
 * the website.
 */
function bytesFromStringArray(arr) {
    if (arr == null) {
        return 0;
    }
    let bytes = 0;
    arr.forEach(x => bytes += x.length);
    return bytes;
}
/** Returns true if the value is a string. */
function isString(value) {
    return typeof value === 'string' || value instanceof String;
}
function isBoolean(value) {
    return typeof value === 'boolean';
}
function isNumber(value) {
    return typeof value === 'number';
}
function inferDtype(values) {
    if (Array.isArray(values)) {
        return inferDtype(values[0]);
    }
    if (values instanceof Float32Array) {
        return 'float32';
    }
    else if (values instanceof Int32Array || values instanceof Uint8Array) {
        return 'int32';
    }
    else if (isNumber(values)) {
        return 'float32';
    }
    else if (isString(values)) {
        return 'string';
    }
    else if (isBoolean(values)) {
        return 'bool';
    }
    return 'float32';
}
function isFunction(f) {
    return !!(f && f.constructor && f.call && f.apply);
}
function nearestDivisor(size, start) {
    for (let i = start; i < size; ++i) {
        if (size % i === 0) {
            return i;
        }
    }
    return size;
}
function computeStrides(shape) {
    const rank = shape.length;
    if (rank < 2) {
        return [];
    }
    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)
    // strides.
    const strides = new Array(rank - 1);
    strides[rank - 2] = shape[rank - 1];
    for (let i = rank - 3; i >= 0; --i) {
        strides[i] = strides[i + 1] * shape[i + 1];
    }
    return strides;
}
function createNestedArray(offset, shape, a) {
    const ret = new Array();
    if (shape.length === 1) {
        const d = shape[0];
        for (let i = 0; i < d; i++) {
            ret[i] = a[offset + i];
        }
    }
    else {
        const d = shape[0];
        const rest = shape.slice(1);
        const len = rest.reduce((acc, c) => acc * c);
        for (let i = 0; i < d; i++) {
            ret[i] = createNestedArray(offset + i * len, rest, a);
        }
    }
    return ret;
}
// Provide a nested array of TypedArray in given shape.
function toNestedArray(shape, a) {
    if (shape.length === 0) {
        // Scalar type should return a single number.
        return a[0];
    }
    const size = shape.reduce((acc, c) => acc * c);
    if (size === 0) {
        // A tensor with shape zero should be turned into empty list.
        return [];
    }
    if (size !== a.length) {
        throw new Error(`[${shape}] does not match the input size ${a.length}.`);
    }
    return createNestedArray(0, shape, a);
}
function makeOnesTypedArray(size, dtype) {
    const array = makeZerosTypedArray(size, dtype);
    for (let i = 0; i < array.length; i++) {
        array[i] = 1;
    }
    return array;
}
function makeZerosTypedArray(size, dtype) {
    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
        return new Float32Array(size);
    }
    else if (dtype === 'int32') {
        return new Int32Array(size);
    }
    else if (dtype === 'bool') {
        return new Uint8Array(size);
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
}
/**
 * Make nested `TypedArray` filled with zeros.
 * @param shape The shape information for the nested array.
 * @param dtype dtype of the array element.
 */
function makeZerosNestedTypedArray(shape, dtype) {
    const size = shape.reduce((prev, curr) => prev * curr, 1);
    if (dtype == null || dtype === 'float32') {
        return toNestedArray(shape, new Float32Array(size));
    }
    else if (dtype === 'int32') {
        return toNestedArray(shape, new Int32Array(size));
    }
    else if (dtype === 'bool') {
        return toNestedArray(shape, new Uint8Array(size));
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
}
function assertNonNegativeIntegerDimensions(shape) {
    shape.forEach(dimSize => {
        assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +
            `shape [${shape}].`);
    });
}
/**
 * Computes flat index for a given location (multidimentionsal index) in a
 * Tensor/multidimensional array.
 *
 * @param locs Location in the tensor.
 * @param rank Rank of the tensor.
 * @param strides Tensor strides.
 */
function locToIndex(locs, rank, strides) {
    if (rank === 0) {
        return 0;
    }
    else if (rank === 1) {
        return locs[0];
    }
    let index = locs[locs.length - 1];
    for (let i = 0; i < locs.length - 1; ++i) {
        index += strides[i] * locs[i];
    }
    return index;
}
/**
 * Computes the location (multidimensional index) in a tensor/multidimentional
 * array for a given flat index.
 *
 * @param index Index in flat array.
 * @param rank Rank of tensor.
 * @param strides Strides of tensor.
 */
function indexToLoc(index, rank, strides) {
    if (rank === 0) {
        return [];
    }
    else if (rank === 1) {
        return [index];
    }
    const locs = new Array(rank);
    for (let i = 0; i < locs.length - 1; ++i) {
        locs[i] = Math.floor(index / strides[i]);
        index -= locs[i] * strides[i];
    }
    locs[locs.length - 1] = index;
    return locs;
}
/**
 * This method asserts whether an object is a Promise instance.
 * @param object
 */
// tslint:disable-next-line: no-any
function isPromise(object) {
    //  We chose to not use 'obj instanceOf Promise' for two reasons:
    //  1. It only reliably works for es6 Promise, not other Promise
    //  implementations.
    //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch
    //  the async calls, so it is possible the obj (patched) is comparing to a
    //  pre-patched Promise.
    return object && object.then && typeof object.then === 'function';
}
//# sourceMappingURL=util_base.js.map

/***/ }),

/***/ "./node_modules/@tensorflow/tfjs-core/dist/version.js":
/*!************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/version.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/** @license See the LICENSE file. */
// This code is auto-generated, do not modify this file!
const version = '2.8.6';

//# sourceMappingURL=version.js.map

/***/ }),

/***/ "./src/client/SWRegister.tsx":
/*!***********************************!*\
  !*** ./src/client/SWRegister.tsx ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");

class SWRegister extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {
    componentDidMount() {
        if ("serviceWorker" in navigator) {
            navigator.serviceWorker
                .register('/assets/js/sw.js')
                .then((reg) => {
                console.log("service worker registration successful", reg);
            })
                .catch(err => {
                console.warn("service worker registration failed", err.message);
            });
        }
    }
    render() {
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null));
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SWRegister);


/***/ }),

/***/ "./src/client/component/canvas.tsx":
/*!*****************************************!*\
  !*** ./src/client/component/canvas.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _canvas_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvas.scss */ "./src/client/component/canvas.scss");
/* harmony import */ var _canvas_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvas/button */ "./src/client/component/canvas/button.tsx");
/* harmony import */ var _canvas_bspline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./canvas/bspline */ "./src/client/component/canvas/bspline.ts");





const BSPLINE_DEGREE = 5;
const CanvasComponent = (prop) => {
    var _a, _b, _c, _d;
    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
    const [pointer, setPointer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [lines, setLines] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([[]]);
    const [paths, setPaths] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
    const [trigger, setTrigger] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const [fingers, setFingers] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [strokeColor, setStrokeColor] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("#FFF");
    const ratio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((arg) => {
        return {
            x: arg.x * prop.viewBox.width / prop.videoBox.width,
            y: arg.y * prop.viewBox.height / prop.videoBox.height
        };
    }, [
        (_a = prop.viewBox) === null || _a === void 0 ? void 0 : _a.width,
        (_b = prop.viewBox) === null || _b === void 0 ? void 0 : _b.height,
        (_c = prop.videoBox) === null || _c === void 0 ? void 0 : _c.width,
        (_d = prop.videoBox) === null || _d === void 0 ? void 0 : _d.height
    ]);
    const createPath = (_vectors) => {
        const _v = _vectors.map(v => ({ x: v.x, y: v.y }));
        const bspline = new _canvas_bspline__WEBPACK_IMPORTED_MODULE_3__.BSpline(_v, BSPLINE_DEGREE, true);
        const splineVectors = [];
        for (let t = 0; t <= 1; t += 0.01) {
            splineVectors.push(bspline.calcAt(t));
        }
        console.log(splineVectors);
        let line = splineVectors.reduce((p, vector, i) => {
            const prefix = i == 0 ? "M" : "L";
            const preVector = i == 0 ? null : _vectors[i - 1];
            // const preDistance = distance(preVector, vector);
            // console.log("preDistance", preDistance)
            const v = ratio(vector);
            p += `${prefix} ${v.x},${v.y} `;
            return p;
        }, "");
        return line.length > 0 ? line + "" : null;
    };
    const frame = () => {
    };
    const distance = (point1, point2) => {
        const dx = point2.x - point1.x;
        const dy = point2.y - point1.y;
        const px = dx * dx;
        const py = dy * dy;
        const sqrt = Math.sqrt(px + py);
        return sqrt;
    };
    const dot = (a, b) => {
        return a.x * b.x + a.y * b.y;
    };
    const calcTrigger = (thumb, palmBase) => {
        const _dot = dot(thumb, palmBase);
        const result = dot(thumb, palmBase) > 0;
        setTrigger(result);
        return result;
    };
    const write = (vector, ts) => {
        const index = lines.length - 1;
        lines[index].push(Object.assign(Object.assign({}, vector), { ts }));
        const paths = lines.map(line => createPath(line));
        setPaths(paths);
        setLines(lines);
    };
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        console.log('subscribed');
        const subscription = prop.eventBus.subscribe(predictions => {
            if (canvasRef.current == null && predictions.length === 0)
                return;
            const annotations = predictions[0].annotations;
            const keys = Object.keys(annotations);
            const fingers = keys.reduce((p, key) => {
                p[key] = annotations[key].map(joint => ({ x: joint[0], y: joint[1] }));
                return p;
            }, {});
            setFingers(fingers);
            // console.log("fingers", fingers)
            // const thumbDistance = distance(fingers.thumb[3], fingers.thumb[0]);
            // const indexFingerDistance = distance(fingers.indexFinger[3], fingers.indexFinger[0]);
            // const middleFingerDistance = distance(fingers.middleFinger[3], fingers.middleFinger[0]);
            // const ringFingerDistance = distance(fingers.ringFinger[3], fingers.ringFinger[0]);
            // const pinkyDistance = distance(fingers.pinky[3], fingers.pinky[0]);
            // console.log("fingerDistance", {
            //   thumb: thumbDistance,
            //   index: indexFingerDistance,
            //   middle: middleFingerDistance,
            //   ring: ringFingerDistance,
            //   pinky: pinkyDistance
            // });
            setPointer(fingers.indexFinger[3]);
            const _vec = (s, e) => {
                const x = e.x - s.x;
                const y = e.y - s.y;
                return { x, y };
            };
            const _trigger = calcTrigger(_vec(fingers.thumb[2], fingers.thumb[3]), _vec(fingers.thumb[0], fingers.palmBase[0]));
            if (_trigger) {
                write(fingers.indexFinger[3], Date.now());
            }
            else if (lines.length > 0 && lines[lines.length - 1].length != 0) {
                lines.push([]);
                setLines(lines);
            }
        });
        return () => {
            console.log('unsuscribed');
            subscription.unsubscribe();
        };
    }, []);
    const pathStyles = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
        stroke: strokeColor,
        fill: "none",
        strokeWidth: 2,
    }), [strokeColor]);
    const pointerStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
        if (!pointer)
            return {};
        return {
            left: ratio(pointer).x,
            top: ratio(pointer).y
        };
    }, [pointer === null || pointer === void 0 ? void 0 : pointer.x, pointer === null || pointer === void 0 ? void 0 : pointer.y]);
    const born = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
        if (!fingers)
            return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null));
        // console.log("fingers", fingers)
        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,
            fingers.thumb && fingers.thumb.map((f, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { key: i, className: "pointer", style: { left: ratio(f).x, top: ratio(f).y } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { style: { opacity: 0.8, backgroundColor: "#AAF" } })))),
            fingers.indexFinger && fingers.indexFinger.map((f, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { key: i, className: "pointer", style: { left: ratio(f).x, top: ratio(f).y } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { style: { opacity: 0.8, backgroundColor: "#FAA" } })))),
            fingers.middleFinger && fingers.middleFinger.map((f, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { key: i, className: "pointer", style: { left: ratio(f).x, top: ratio(f).y } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { style: { opacity: 0.8, backgroundColor: "#AFA" } })))),
            fingers.ringFinger && fingers.ringFinger.map((f, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { key: i, className: "pointer", style: { left: ratio(f).x, top: ratio(f).y } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { style: { opacity: 0.8, backgroundColor: "#AFF" } })))),
            fingers.pinky && fingers.pinky.map((f, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { key: i, className: "pointer", style: { left: ratio(f).x, top: ratio(f).y } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { style: { opacity: 0.8, backgroundColor: "#FFA" } })))),
            fingers.palmBase && fingers.palmBase.map((f, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { key: i, className: "pointer", style: { left: ratio(f).x, top: ratio(f).y } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { style: { opacity: 0.8, backgroundColor: "#FAF" } }))))));
    }, [JSON.stringify(fingers)]);
    const prepareVector = (v) => {
        var _a;
        if (!v)
            return { x: -100, y: -100 };
        if (!((_a = prop.viewBox) === null || _a === void 0 ? void 0 : _a.width))
            return ratio(v);
        //     const normalizeX = prop.videoBox.width - (v.x  * prop.videoBox.width / prop.viewBox.width);
        // console.log(normalizeX)
        //     return {
        //       x: normalizeX * prop.viewBox.width / prop.videoBox.width,
        //       y: v.y
        //     };
        return {
            x: prop.viewBox.width - ratio(v).x,
            y: ratio(v).y
        };
    };
    // const style = useMemo(() => ({...prop.videoBox, border:'solid 1px black', position: 'absolute', visibility: 'hidden' } as CSSProperties), [])
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "canvas" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${prop.viewBox.width} ${prop.viewBox.height}`, width: prop.viewBox.width, height: prop.viewBox.height }, paths.length > 0 &&
                paths.map((path, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", { key: i, style: pathStyles, d: path })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "debug-trigger", style: {
                    position: "absolute",
                    top: 0,
                    right: 0,
                    width: 20,
                    height: 20,
                    borderRadius: 10,
                    backgroundColor: (trigger ? "#F00" : "#000")
                } }),
            pointer && !trigger && react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "pointer", style: pointerStyle },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "button-container" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_canvas_button__WEBPACK_IMPORTED_MODULE_2__.default, { order: 0, label: "黒", point: prepareVector(pointer), click: trigger, callback: () => setStrokeColor("#000") }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_canvas_button__WEBPACK_IMPORTED_MODULE_2__.default, { order: 0, label: "白", point: prepareVector(pointer), click: trigger, callback: () => setStrokeColor("#FFF") }))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CanvasComponent);


/***/ }),

/***/ "./src/client/component/canvas/bspline.ts":
/*!************************************************!*\
  !*** ./src/client/component/canvas/bspline.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BSpline": () => (/* binding */ BSpline)
/* harmony export */ });
class BSpline {
    constructor(points, degree, copy) {
        this.dimKey = {
            0: "x",
            1: "y",
            2: "z"
        };
        this.points = copy ? points.slice() : points;
        this.degree = degree;
        this.dimension = 2; // dimension
        if (degree == 2) {
            this.baseFunc = this.basisDeg2;
            this.baseFuncRangeInt = 2;
        }
        else if (degree == 3) {
            this.baseFunc = this.basisDeg3;
            this.baseFuncRangeInt = 2;
        }
        else if (degree == 4) {
            this.baseFunc = this.basisDeg4;
            this.baseFuncRangeInt = 3;
        }
        else if (degree == 5) {
            this.baseFunc = this.basisDeg5;
            this.baseFuncRangeInt = 3;
        }
    }
    seqAt(dim) {
        const points = this.points;
        const margin = this.degree + 1;
        return (n) => {
            if (n < margin) {
                return points[0][this.dimKey[dim]];
            }
            else if (points.length + margin <= n) {
                return points[points.length - 1][this.dimKey[dim]];
            }
            return points[n - margin][this.dimKey[dim]];
        };
    }
    basisDeg2(x) {
        if (-0.5 <= x && x < 0.5) {
            return 0.75 - x * x;
        }
        else if (0.5 <= x && x <= 1.5) {
            return 1.125 + (-1.5 + x / 2.0) * x;
        }
        else if (-1.5 <= x && x < -0.5) {
            return 1.125 + (1.5 + x / 2.0) * x;
        }
        return 0;
    }
    basisDeg3(x) {
        if (-1 <= x && x < 0) {
            return 2.0 / 3.0 + (-1.0 - x / 2.0) * x * x;
        }
        else if (1 <= x && x <= 2) {
            return 4.0 / 3.0 + x * (-2.0 + (1.0 - x / 6.0) * x);
        }
        else if (-2 <= x && x < -1) {
            return 4.0 / 3.0 + x * (2.0 + (1.0 + x / 6.0) * x);
        }
        else if (0 <= x && x < 1) {
            return 2.0 / 3.0 + (-1.0 + x / 2.0) * x * x;
        }
        return 0;
    }
    basisDeg4(x) {
        if (-1.5 <= x && x < -0.5) {
            return 55.0 / 96.0 + x * (-(5.0 / 24.0) + x * (-(5.0 / 4.0) + (-(5.0 / 6.0) - x / 6.0) * x));
        }
        else if (0.5 <= x && x < 1.5) {
            return 55.0 / 96.0 + x * (5.0 / 24.0 + x * (-(5.0 / 4.0) + (5.0 / 6.0 - x / 6.0) * x));
        }
        else if (1.5 <= x && x <= 2.5) {
            return 625.0 / 384.0 + x * (-(125.0 / 48.0) + x * (25.0 / 16.0 + (-(5.0 / 12.0) + x / 24.0) * x));
        }
        else if (-2.5 <= x && x <= -1.5) {
            return 625.0 / 384.0 + x * (125.0 / 48.0 + x * (25.0 / 16.0 + (5.0 / 12.0 + x / 24.0) * x));
        }
        else if (-1.5 <= x && x < 1.5) {
            return 115.0 / 192.0 + x * x * (-(5.0 / 8.0) + x * x / 4.0);
        }
        return 0;
    }
    basisDeg5(x) {
        if (-2 <= x && x < -1) {
            return 17.0 / 40.0 + x * (-(5.0 / 8.0) + x * (-(7.0 / 4.0) + x * (-(5.0 / 4.0) + (-(3.0 / 8.0) - x / 24.0) * x)));
        }
        else if (0 <= x && x < 1) {
            return 11.0 / 20.0 + x * x * (-(1.0 / 2.0) + (1.0 / 4.0 - x / 12.0) * x * x);
        }
        else if (2 <= x && x <= 3) {
            return 81.0 / 40.0 + x * (-(27.0 / 8.0) + x * (9.0 / 4.0 + x * (-(3.0 / 4.0) + (1.0 / 8.0 - x / 120.0) * x)));
        }
        else if (-3 <= x && x < -2) {
            return 81.0 / 40.0 + x * (27.0 / 8.0 + x * (9.0 / 4.0 + x * (3.0 / 4.0 + (1.0 / 8.0 + x / 120.0) * x)));
        }
        else if (1 <= x && x < 2) {
            return 17.0 / 40.0 + x * (5.0 / 8.0 + x * (-(7.0 / 4.0) + x * (5.0 / 4.0 + (-(3.0 / 8.0) + x / 24.0) * x)));
        }
        else if (-1 <= x && x < 0) {
            return 11.0 / 20.0 + x * x * (-(1.0 / 2.0) + (1.0 / 4.0 + x / 12.0) * x * x);
        }
        return 0;
    }
    getInterpol(seq, t) {
        const rangeInt = this.baseFuncRangeInt;
        const tInt = Math.floor(t);
        let result = 0;
        for (let i = tInt - rangeInt; i <= tInt + rangeInt; i++) {
            result += seq(i) * this.baseFunc(t - i);
        }
        return result;
    }
    calcAt(t) {
        const _t = t * ((this.degree + 1) * 2 + this.points.length); //t must be in [0,1]
        const res = [];
        for (let i = 0; i < this.dimension; i++) {
            res.push(this.getInterpol(this.seqAt(i), _t));
        }
        return { x: res[0], y: res[1] };
    }
}


/***/ }),

/***/ "./src/client/component/canvas/button.tsx":
/*!************************************************!*\
  !*** ./src/client/component/canvas/button.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _button_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./button.scss */ "./src/client/component/canvas/button.scss");



const ButtonComponent = (prop) => {
    var _a, _b;
    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
    const [focus, setFocus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        const ele = ref.current;
        const rect = ele.getBoundingClientRect();
        setFocus(rect.bottom > prop.point.y &&
            rect.top < prop.point.y &&
            rect.left < prop.point.x &&
            rect.right > prop.point.x);
    }, [(_a = prop.point) === null || _a === void 0 ? void 0 : _a.x, (_b = prop.point) === null || _b === void 0 ? void 0 : _b.y]);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        if (prop.callback && prop.click && focus) {
            prop.callback();
        }
    }, [prop.callback, prop.click, focus]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { ref: ref, className: `button ${focus ? "focus" : ""} ${prop.click ? "active" : ""}` }, prop.label));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ButtonComponent);


/***/ }),

/***/ "./src/client/index.tsx":
/*!******************************!*\
  !*** ./src/client/index.tsx ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/esm/react-router-dom.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _pages_login__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pages/login */ "./src/client/pages/login.tsx");
/* harmony import */ var _pages_board__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/board */ "./src/client/pages/board.tsx");
/* harmony import */ var _pages_signup__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages/signup */ "./src/client/pages/signup.tsx");
/* harmony import */ var _index_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index.scss */ "./src/client/index.scss");
/* harmony import */ var _SWRegister__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SWRegister */ "./src/client/SWRegister.tsx");








const root = document.getElementById('root');
const App = () => {
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_7__.BrowserRouter, null,
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_8__.Route, { exact: true, path: "/", component: _pages_login__WEBPACK_IMPORTED_MODULE_2__.default }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_8__.Route, { path: "/board", component: _pages_board__WEBPACK_IMPORTED_MODULE_3__.default }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_8__.Route, { path: "/signup", component: _pages_signup__WEBPACK_IMPORTED_MODULE_4__.default })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SWRegister__WEBPACK_IMPORTED_MODULE_6__.default, null)));
};
(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.render)(react__WEBPACK_IMPORTED_MODULE_0__.createElement(App, null), root);


/***/ }),

/***/ "./src/client/pages/board.tsx":
/*!************************************!*\
  !*** ./src/client/pages/board.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _tensorflow_models_handpose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tensorflow-models/handpose */ "./node_modules/@tensorflow-models/handpose/dist/handpose.esm.js");
/* harmony import */ var _board_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./board.scss */ "./src/client/pages/board.scss");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/internal/Subject.js");
/* harmony import */ var _component_canvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../component/canvas */ "./src/client/component/canvas.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






const BoardPageComponent = () => {
    const eventBus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject(), []);
    const [videoBox, setVideoBox] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const [viewBox, setViewBox] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const videoContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
        if (!videoContainerRef)
            return;
        (() => __awaiter(void 0, void 0, void 0, function* () {
            const stream = yield navigator.mediaDevices.getUserMedia({
                audio: false,
                video: { facingMode: 'user' }
            });
            yield __webpack_require__.e(/*! import() */ "vendors-node_modules_tensorflow_tfjs-backend-webgl_dist_index_js").then(__webpack_require__.bind(__webpack_require__, /*! @tensorflow/tfjs-backend-webgl */ "./node_modules/@tensorflow/tfjs-backend-webgl/dist/index.js"));
            const m = yield _tensorflow_models_handpose__WEBPACK_IMPORTED_MODULE_1__.load();
            const video = document.createElement('video');
            video.srcObject = stream;
            // video.style.position = 'absolute';
            video.style.transform = 'scaleX(-1)';
            video.style.opacity = '0.5';
            // document.body.appendChild(video);
            const container = videoContainerRef.current;
            container.innerHTML = "";
            container.appendChild(video);
            const reflectPoint = () => __awaiter(void 0, void 0, void 0, function* () {
                const pos = yield m.estimateHands(video);
                if (pos.length > 0) {
                    eventBus.next(pos);
                }
                // setTimeout(reflectPoint, 500)
                requestAnimationFrame(reflectPoint);
            });
            video.onloadedmetadata = () => {
                const _viewRatio = 1.5;
                video.width = video.videoWidth * _viewRatio;
                video.height = video.videoHeight * _viewRatio;
                video.play();
                setVideoBox({ width: video.videoWidth, height: video.videoHeight });
                setViewBox({ width: video.width, height: video.height });
                console.log({ width: video.videoWidth, height: video.videoHeight }, { width: video.width, height: video.height });
            };
            video.onloadeddata = reflectPoint;
        }))();
    }, [!!videoContainerRef]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "board" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "body", style: viewBox && { width: viewBox.width, height: viewBox.height } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "video-container", ref: videoContainerRef }, "Now Loading..."),
            videoBox && viewBox && react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_canvas__WEBPACK_IMPORTED_MODULE_3__.default, { eventBus: eventBus, videoBox: videoBox, viewBox: viewBox }))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BoardPageComponent);


/***/ }),

/***/ "./src/client/pages/login.tsx":
/*!************************************!*\
  !*** ./src/client/pages/login.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/esm/react-router-dom.js");



const LoginPageComponent = () => {
    const [username, setUsername] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
    const [password, setPassword] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
    const [remember, setRemember] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
    const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
    const disabled = !username || username.length == 0 || !password || password.length == 0;
    const auth = () => {
        const method = "POST";
        const headers = { 'Content-Type': 'application/json' };
        const body = JSON.stringify({ username, password, remember });
        fetch('/login', { method, headers, body })
            .then((res) => {
            console.log(res);
            if (res.status == 401) {
                return setErrorMessage('認証に失敗しました');
            }
            if (res.status == 200) {
                return location.href = res.url;
            }
        });
    };
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "login-page" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null, "LOGIN PAGE"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("form", { action: "/login", method: "post" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "\u30E6\u30FC\u30B6\u30FCID\uFF1A"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "text", name: "username", value: username, placeholder: "ID", onChange: (e) => setUsername(e.target.value) })),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "\u30D1\u30B9\u30EF\u30FC\u30C9\uFF1A"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "password", name: "password", value: password, placeholder: "PASSWORD", onChange: (e) => setPassword(e.target.value) })),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "checkbox", name: "remember", checked: remember, onChange: (e) => setRemember(e.target.checked) }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Remind Me")),
            errorMessage &&
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "error-message" }, errorMessage),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { disabled: disabled, type: "button", value: "\u30ED\u30B0\u30A4\u30F3", onClick: auth }))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_1__.Link, { to: "/signup" }, "\u65B0\u898F\u767B\u9332")));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LoginPageComponent);


/***/ }),

/***/ "./src/client/pages/signup.tsx":
/*!*************************************!*\
  !*** ./src/client/pages/signup.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const SignUpPageComponent = () => {
    const [username, setUsername] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
    const [password, setPassword] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
    const [password2, setPassword2] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
    const disabled = !username || username.length == 0 || !password || password.length == 0 || !password2 || password2.length == 0;
    const request = () => {
        const method = "POST";
        const headers = { 'Content-Type': 'application/json' };
        const body = JSON.stringify({ username, password });
        console.log(body.toString());
        fetch('/api/create', { method, body, headers }).then((res) => __awaiter(void 0, void 0, void 0, function* () {
            var _a, _b, _c;
            const val = (_c = (yield ((_b = (_a = res.body) === null || _a === void 0 ? void 0 : _a.getReader()) === null || _b === void 0 ? void 0 : _b.read()))) === null || _c === void 0 ? void 0 : _c.value;
            if (!val) {
                console.error(val);
                return;
            }
            const obj = JSON.parse((new TextDecoder).decode(val.buffer));
            if (obj.ok) {
                alert('新規登録完了');
                location.href = '/profile?id=' + obj.id;
            }
            else {
                alert(obj.msg.ja);
            }
        }));
    };
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "login-page" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null, "LOGIN PAGE"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("form", { action: "/api/create", method: "post" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "\u30E6\u30FC\u30B6\u30FCID\uFF1A"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "text", name: "username", value: username, onChange: (e) => setUsername(e.target.value) })),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "\u30D1\u30B9\u30EF\u30FC\u30C9\uFF1A"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "password", name: "password", value: password, onChange: (e) => setPassword(e.target.value) })),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null,
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "\u30D1\u30B9\u30EF\u30FC\u30C9\uFF08\u518D\u5165\u529B\uFF09\uFF1A"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "password", name: "password2", value: password2, onChange: (e) => setPassword2(e.target.value) })),
            password && password2 && password != password2 &&
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null, "\u30D1\u30B9\u30EF\u30FC\u30C9\u304C\u7570\u306A\u3063\u3066\u3044\u307E\u3059"),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { disabled: disabled, type: "button", value: "\u65B0\u898F\u767B\u9332", onClick: request }))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SignUpPageComponent);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/component/canvas.scss":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/component/canvas.scss ***!
  \***************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".canvas {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  transform: scaleX(-1); }\n  .canvas svg {\n    position: absolute;\n    top: 0;\n    left: 0; }\n  .canvas .pointer {\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    align-items: center; }\n    .canvas .pointer > div {\n      width: 16px;\n      height: 16px;\n      opacity: 0.2;\n      background-color: red;\n      border-radius: 8px; }\n\n.button-container {\n  position: absolute;\n  display: flex;\n  left: 0;\n  right: 0;\n  top: 0;\n  height: 150px;\n  justify-content: flex-start;\n  margin: 0 20px; }\n", "",{"version":3,"sources":["webpack://./src/client/component/canvas.scss"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,qBAAqB,EAAA;EANvB;IASI,kBAAkB;IAClB,MAAM;IACN,OAAO,EAAA;EAXX;IAeI,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB,EAAA;IAlBvB;MAoBM,WAAW;MACX,YAAY;MACZ,YAAY;MACZ,qBAAqB;MACrB,kBAAkB,EAAA;;AAKxB;EACE,kBAAkB;EAClB,aAAa;EACb,OAAO;EACP,QAAQ;EACR,MAAM;EACN,aAAa;EACb,2BAA2B;EAC3B,cAAc,EAAA","sourcesContent":[".canvas {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  transform: scaleX(-1);\n\n  svg {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n  \n  .pointer {\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    & > div {\n      width: 16px;\n      height: 16px;\n      opacity: 0.2;\n      background-color: red;\n      border-radius: 8px;\n    }\n  }\n}\n\n.button-container {\n  position: absolute;\n  display: flex;\n  left: 0;\n  right: 0;\n  top: 0;\n  height: 150px;\n  justify-content: flex-start;\n  margin: 0 20px;\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/component/canvas/button.scss":
/*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/component/canvas/button.scss ***!
  \**********************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".button {\n  width: 120px;\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n  background-color: #FFFFFFAA;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 5px; }\n  .button.focus {\n    background-color: #AAAAAAAA; }\n", "",{"version":3,"sources":["webpack://./src/client/component/canvas/button.scss"],"names":[],"mappings":"AAAA;EACE,YAAY;EACZ,8BAA8B;EAC9B,+BAA+B;EAC/B,2BAA2B;EAC3B,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,aAAa,EAAA;EARf;IAWI,2BAA2B,EAAA","sourcesContent":[".button {\n  width: 120px;\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n  background-color: #FFFFFFAA;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 5px;\n\n  &.focus {\n    background-color: #AAAAAAAA;\n  }\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/index.scss":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/index.scss ***!
  \****************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "body {\n  margin: 0; }\n\n.profile {\n  margin: 2px; }\n", "",{"version":3,"sources":["webpack://./src/client/index.scss"],"names":[],"mappings":"AAAA;EACE,SAAS,EAAA;;AAGX;EACE,WAAW,EAAA","sourcesContent":["body {\n  margin: 0;\n}\n\n.profile {\n  margin: 2px;\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/pages/board.scss":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/pages/board.scss ***!
  \**********************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".board {\n  position: relative; }\n  .board .body {\n    position: relative;\n    display: flex; }\n    .board .body .video-container {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      display: flex;\n      justify-content: center;\n      align-items: center; }\n", "",{"version":3,"sources":["webpack://./src/client/pages/board.scss"],"names":[],"mappings":"AAAA;EAGE,kBAAkB,EAAA;EAHpB;IAMI,kBAAkB;IAClB,aAAa,EAAA;IAPjB;MAUM,kBAAkB;MAClB,WAAW;MACX,YAAY;MACZ,aAAa;MACb,uBAAuB;MACvB,mBAAmB,EAAA","sourcesContent":[".board {\n  // position: absolute;\n  // z-index: 10000;\n  position: relative;\n\n  .body {\n    position: relative;\n    display: flex;\n\n    .video-container {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/cssWithMappingToString.js ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

module.exports = function cssWithMappingToString(item) {
  var _item = _slicedToArray(item, 4),
      content = _item[1],
      cssMapping = _item[3];

  if (typeof btoa === 'function') {
    // eslint-disable-next-line no-undef
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
};

/***/ }),

/***/ "./node_modules/history/esm/history.js":
/*!*********************************************!*\
  !*** ./node_modules/history/esm/history.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createBrowserHistory": () => (/* binding */ createBrowserHistory),
/* harmony export */   "createHashHistory": () => (/* binding */ createHashHistory),
/* harmony export */   "createMemoryHistory": () => (/* binding */ createMemoryHistory),
/* harmony export */   "createLocation": () => (/* binding */ createLocation),
/* harmony export */   "locationsAreEqual": () => (/* binding */ locationsAreEqual),
/* harmony export */   "parsePath": () => (/* binding */ parsePath),
/* harmony export */   "createPath": () => (/* binding */ createPath)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var resolve_pathname__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! resolve-pathname */ "./node_modules/resolve-pathname/esm/resolve-pathname.js");
/* harmony import */ var value_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! value-equal */ "./node_modules/value-equal/esm/value-equal.js");
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/tiny-invariant.esm.js");






function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
}
function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
}
function hasBasename(path, prefix) {
  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
}
function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
}
function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
}
function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';
  var hashIndex = pathname.indexOf('#');

  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');

  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
}
function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;
  var path = pathname || '/';
  if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
  return path;
}

function createLocation(path, state, key, currentLocation) {
  var location;

  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = parsePath(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, path);
    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = (0,resolve_pathname__WEBPACK_IMPORTED_MODULE_1__.default)(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
}
function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0,value_equal__WEBPACK_IMPORTED_MODULE_2__.default)(a.state, b.state);
}

function createTransitionManager() {
  var prompt = null;

  function setPrompt(nextPrompt) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(prompt == null, 'A history supports only one prompt at a time') : 0;
    prompt = nextPrompt;
    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  }

  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
           true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : 0;
          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  }

  var listeners = [];

  function appendListener(fn) {
    var isActive = true;

    function listener() {
      if (isActive) fn.apply(void 0, arguments);
    }

    listeners.push(listener);
    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  }

  function notifyListeners() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(void 0, args);
    });
  }

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
function getConfirmation(message, callback) {
  callback(window.confirm(message)); // eslint-disable-line no-alert
}
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

function supportsHistory() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
  return window.history && 'pushState' in window.history;
}
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */

function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
}
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */

function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
}
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
}

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
}
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */


function createBrowserHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_4__.default)(false, 'Browser history needs a DOM') : 0 : void 0;
  var globalHistory = window.history;
  var canUseHistory = supportsHistory();
  var needsHashChangeListener = !supportsPopStateOnHashChange();
  var _props = props,
      _props$forceRefresh = _props.forceRefresh,
      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

  function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;
    var path = pathname + search + hash;
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : 0;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path, state, key);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if (isExtraneousPopstateEvent(event)) return;
    handlePop(getDOMLocation(event.state));
  }

  function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  }

  var forceNextPop = false;

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allKeys.indexOf(fromLocation.key);
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  }

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key]; // Public interface

  function createHref(location) {
    return basename + createPath(location);
  }

  function push(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : 0;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.pushState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex + 1);
          nextKeys.push(location.key);
          allKeys = nextKeys;
          setState({
            action: action,
            location: location
          });
        }
      } else {
         true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : 0;
        window.location.href = href;
      }
    });
  }

  function replace(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : 0;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.replaceState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
          setState({
            action: action,
            location: location
          });
        }
      } else {
         true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : 0;
        window.location.replace(href);
      }
    });
  }

  function go(n) {
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

var HashChangeEvent$1 = 'hashchange';
var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: stripLeadingSlash,
    decodePath: addLeadingSlash
  },
  slash: {
    encodePath: addLeadingSlash,
    decodePath: addLeadingSlash
  }
};

function stripHash(url) {
  var hashIndex = url.indexOf('#');
  return hashIndex === -1 ? url : url.slice(0, hashIndex);
}

function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
}

function pushHashPath(path) {
  window.location.hash = path;
}

function replaceHashPath(path) {
  window.location.replace(stripHash(window.location.href) + '#' + path);
}

function createHashHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_4__.default)(false, 'Hash history needs a DOM') : 0 : void 0;
  var globalHistory = window.history;
  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
  var _props = props,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$hashType = _props.hashType,
      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;

  function getDOMLocation() {
    var path = decodePath(getHashPath());
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : 0;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  var forceNextPop = false;
  var ignorePath = null;

  function locationsAreEqual$$1(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
  }

  function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;
      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;
      handlePop(location);
    }
  }

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  } // Ensure the hash is encoded properly before doing anything else.


  var path = getHashPath();
  var encodedPath = encodePath(path);
  if (path !== encodedPath) replaceHashPath(encodedPath);
  var initialLocation = getDOMLocation();
  var allPaths = [createPath(initialLocation)]; // Public interface

  function createHref(location) {
    var baseTag = document.querySelector('base');
    var href = '';

    if (baseTag && baseTag.getAttribute('href')) {
      href = stripHash(window.location.href);
    }

    return href + '#' + encodePath(basename + createPath(location));
  }

  function push(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(state === undefined, 'Hash history cannot push state; it is ignored') : 0;
    var action = 'PUSH';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);
        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
        var nextPaths = allPaths.slice(0, prevIndex + 1);
        nextPaths.push(path);
        allPaths = nextPaths;
        setState({
          action: action,
          location: location
        });
      } else {
         true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : 0;
        setState();
      }
    });
  }

  function replace(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(state === undefined, 'Hash history cannot replace state; it is ignored') : 0;
    var action = 'REPLACE';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf(createPath(history.location));
      if (prevIndex !== -1) allPaths[prevIndex] = path;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : 0;
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(HashChangeEvent$1, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
}
/**
 * Creates a history object that stores locations in memory.
 */


function createMemoryHistory(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      getUserConfirmation = _props.getUserConfirmation,
      _props$initialEntries = _props.initialEntries,
      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
      _props$initialIndex = _props.initialIndex,
      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var transitionManager = createTransitionManager();

  function setState(nextState) {
    (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)(history, nextState);

    history.length = history.entries.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
  }); // Public interface

  var createHref = createPath;

  function push(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : 0;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;
      var nextEntries = history.entries.slice(0);

      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  }

  function replace(path, state) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : 0;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      history.entries[history.index] = location;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
    var action = 'POP';
    var location = history.entries[nextIndex];
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  }

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    return transitionManager.setPrompt(prompt);
  }

  function listen(listener) {
    return transitionManager.appendListener(listener);
  }

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };
  return history;
}




/***/ }),

/***/ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var reactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

function getStatics(component) {
  // React v16.11 and below
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  } // React v16.12 and above


  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;


/***/ }),

/***/ "./node_modules/mini-create-react-context/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/mini-create-react-context/dist/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");





var MAX_SIGNED_31_BIT_INT = 1073741823;
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : {};

function getUniqueId() {
  var key = '__global_unique_id__';
  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
}

function objectIs(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function createEventEmitter(value) {
  var handlers = [];
  return {
    on: function on(handler) {
      handlers.push(handler);
    },
    off: function off(handler) {
      handlers = handlers.filter(function (h) {
        return h !== handler;
      });
    },
    get: function get() {
      return value;
    },
    set: function set(newValue, changedBits) {
      value = newValue;
      handlers.forEach(function (handler) {
        return handler(value, changedBits);
      });
    }
  };
}

function onlyChild(children) {
  return Array.isArray(children) ? children[0] : children;
}

function createReactContext(defaultValue, calculateChangedBits) {
  var _Provider$childContex, _Consumer$contextType;

  var contextProp = '__create-react-context-' + getUniqueId() + '__';

  var Provider = /*#__PURE__*/function (_Component) {
    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__.default)(Provider, _Component);

    function Provider() {
      var _this;

      _this = _Component.apply(this, arguments) || this;
      _this.emitter = createEventEmitter(_this.props.value);
      return _this;
    }

    var _proto = Provider.prototype;

    _proto.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
    };

    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        var oldValue = this.props.value;
        var newValue = nextProps.value;
        var changedBits;

        if (objectIs(oldValue, newValue)) {
          changedBits = 0;
        } else {
          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

          if (true) {
            (0,tiny_warning__WEBPACK_IMPORTED_MODULE_3__.default)((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);
          }

          changedBits |= 0;

          if (changedBits !== 0) {
            this.emitter.set(nextProps.value, changedBits);
          }
        }
      }
    };

    _proto.render = function render() {
      return this.props.children;
    };

    return Provider;
  }(react__WEBPACK_IMPORTED_MODULE_0__.Component);

  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = (prop_types__WEBPACK_IMPORTED_MODULE_2___default().object.isRequired), _Provider$childContex);

  var Consumer = /*#__PURE__*/function (_Component2) {
    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__.default)(Consumer, _Component2);

    function Consumer() {
      var _this2;

      _this2 = _Component2.apply(this, arguments) || this;
      _this2.state = {
        value: _this2.getValue()
      };

      _this2.onUpdate = function (newValue, changedBits) {
        var observedBits = _this2.observedBits | 0;

        if ((observedBits & changedBits) !== 0) {
          _this2.setState({
            value: _this2.getValue()
          });
        }
      };

      return _this2;
    }

    var _proto2 = Consumer.prototype;

    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var observedBits = nextProps.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };

    _proto2.componentDidMount = function componentDidMount() {
      if (this.context[contextProp]) {
        this.context[contextProp].on(this.onUpdate);
      }

      var observedBits = this.props.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };

    _proto2.componentWillUnmount = function componentWillUnmount() {
      if (this.context[contextProp]) {
        this.context[contextProp].off(this.onUpdate);
      }
    };

    _proto2.getValue = function getValue() {
      if (this.context[contextProp]) {
        return this.context[contextProp].get();
      } else {
        return defaultValue;
      }
    };

    _proto2.render = function render() {
      return onlyChild(this.props.children)(this.state.value);
    };

    return Consumer;
  }(react__WEBPACK_IMPORTED_MODULE_0__.Component);

  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = (prop_types__WEBPACK_IMPORTED_MODULE_2___default().object), _Consumer$contextType);
  return {
    Provider: Provider,
    Consumer: Consumer
  };
}

var index = react__WEBPACK_IMPORTED_MODULE_0__.createContext || createReactContext;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);


/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (true) {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;


/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
var assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
var checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {};

if (true) {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ( true && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (true) {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (true) {
  var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ "./node_modules/prop-types/factoryWithTypeCheckers.js")(ReactIs.isElement, throwOnDirectAccess);
} else {}


/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "./node_modules/react-dom/cjs/react-dom.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v17.0.1
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");
var Scheduler = __webpack_require__(/*! scheduler */ "./node_modules/scheduler/index.js");
var tracing = __webpack_require__(/*! scheduler/tracing */ "./node_modules/scheduler/tracing.js");

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

if (!React) {
  {
    throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
  }
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var FundamentalComponent = 20;
var ScopeComponent = 21;
var Block = 22;
var OffscreenComponent = 23;
var LegacyHiddenComponent = 24;

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

var enableFundamentalAPI = false; // Experimental Scope support.
var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
var warnAboutStringRefs = false;

var allNativeEvents = new Set();
/**
 * Mapping from registration name to event name
 */


var registrationNameDependencies = {};
/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */

var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

function registerTwoPhaseEvent(registrationName, dependencies) {
  registerDirectEvent(registrationName, dependencies);
  registerDirectEvent(registrationName + 'Capture', dependencies);
}
function registerDirectEvent(registrationName, dependencies) {
  {
    if (registrationNameDependencies[registrationName]) {
      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
    }
  }

  registrationNameDependencies[registrationName] = dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }

  for (var i = 0; i < dependencies.length; i++) {
    allNativeEvents.add(dependencies[i]);
  }
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0; // A simple string attribute.
// Attributes that aren't in the filter are presumed to have this type.

var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.

var BOOLEANISH_STRING = 2; // A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.

var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.

var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.

var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.

var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */

var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }

  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }

  illegalAttributeNameCache[attributeName] = true;

  {
    error('Invalid attribute name: `%s`', attributeName);
  }

  return false;
}
function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }

  return false;
}
function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }

  switch (typeof value) {
    case 'function': // $FlowIssue symbol is perfectly valid here

    case 'symbol':
      // eslint-disable-line
      return true;

    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }

        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }

    default:
      return false;
  }
}
function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }

  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (propertyInfo !== null) {

    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;

      case OVERLOADED_BOOLEAN:
        return value === false;

      case NUMERIC:
        return isNaN(value);

      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }

  return false;
}
function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
  this.sanitizeURL = sanitizeURL;
  this.removeEmptyString = removeEmptyString;
} // When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.


var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
reservedProps.forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.

[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).

['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.

['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML boolean attributes.

['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.

['checked', // Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.

['capture', 'download' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that must be positive numbers.

['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that must be numbers.

['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
});
var CAMELIZE = /[\-\:]([a-z])/g;

var capitalize = function (token) {
  return token[1].toUpperCase();
}; // This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML attribute filter.
// Some of these attributes can be hard to find. This list was created by
// scraping the MDN documentation.


['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // String SVG attributes with the xlink namespace.

['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
  false);
}); // String SVG attributes with the xml namespace.

['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
  false);
}); // These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.

['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.

var xlinkHref = 'xlinkHref';
properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
false);
['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  true, // sanitizeURL
  true);
});

// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space

/* eslint-disable max-len */

var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
var didWarn = false;

function sanitizeURL(url) {
  {
    if (!didWarn && isJavaScriptProtocol.test(url)) {
      didWarn = true;

      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
    }
  }
}

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      return node[propertyName];
    } else {
      if ( propertyInfo.sanitizeURL) {
        // If we haven't fully disabled javascript: URLs, and if
        // the hydration is successful of a javascript: URL, we
        // still want to warn on the client.
        sanitizeURL('' + expected);
      }

      var attributeName = propertyInfo.attributeName;
      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);

          if (value === '') {
            return true;
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }

          if (value === '' + expected) {
            return expected;
          }

          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }

        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        } // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.


        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}
/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    } // If the object is an opaque reference ID, it's expected that
    // the next prop is different than the server value, so just return
    // expected


    if (isOpaqueHydratingObject(expected)) {
      return expected;
    }

    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }

    var value = node.getAttribute(name);

    if (value === '' + expected) {
      return expected;
    }

    return value;
  }
}
/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);

  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }

  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  } // If the prop isn't in the special list, treat it as a simple attribute.


  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;

      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        node.setAttribute(_attributeName,  '' + value);
      }
    }

    return;
  }

  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;
      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }

    return;
  } // The rest are treated as attributes with special cases.


  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;
    var attributeValue;

    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      // If attribute type is boolean, we know for sure it won't be an execution sink
      // and we won't require Trusted Type here.
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      {
        attributeValue = '' + value;
      }

      if (propertyInfo.sanitizeURL) {
        sanitizeURL(attributeValue.toString());
      }
    }

    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
var REACT_FRAGMENT_TYPE = 0xeacb;
var REACT_STRICT_MODE_TYPE = 0xeacc;
var REACT_PROFILER_TYPE = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
var REACT_SUSPENSE_TYPE = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
  REACT_PROFILER_TYPE = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: _assign({}, props, {
          value: prevLog
        }),
        info: _assign({}, props, {
          value: prevInfo
        }),
        warn: _assign({}, props, {
          value: prevWarn
        }),
        error: _assign({}, props, {
          value: prevError
        }),
        group: _assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: _assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: _assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if (!fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}

function describeClassComponentFrame(ctor, source, ownerFn) {
  {
    return describeNativeComponentFrame(ctor, true);
  }
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_BLOCK_TYPE:
        return describeFunctionComponentFrame(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

function describeFiber(fiber) {
  var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;
  var source =  fiber._debugSource ;

  switch (fiber.tag) {
    case HostComponent:
      return describeBuiltInComponentFrame(fiber.type);

    case LazyComponent:
      return describeBuiltInComponentFrame('Lazy');

    case SuspenseComponent:
      return describeBuiltInComponentFrame('Suspense');

    case SuspenseListComponent:
      return describeBuiltInComponentFrame('SuspenseList');

    case FunctionComponent:
    case IndeterminateComponent:
    case SimpleMemoComponent:
      return describeFunctionComponentFrame(fiber.type);

    case ForwardRef:
      return describeFunctionComponentFrame(fiber.type.render);

    case Block:
      return describeFunctionComponentFrame(fiber.type._render);

    case ClassComponent:
      return describeClassComponentFrame(fiber.type);

    default:
      return '';
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  try {
    var info = '';
    var node = workInProgress;

    do {
      info += describeFiber(node);
      node = node.return;
    } while (node);

    return info;
  } catch (x) {
    return '\nError generating stack: ' + x.message + '\n' + x.stack;
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getContextName(type) {
  return type.displayName || 'Context';
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentName(init(payload));
          } catch (x) {
            return null;
          }
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
var current = null;
var isRendering = false;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }

  return null;
}

function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }
}

function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    isRendering = false;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    isRendering = false;
  }
}
function setIsRendering(rendering) {
  {
    isRendering = rendering;
  }
}
function getIsRendering() {
  {
    return isRendering;
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  return '' + value;
}
function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;

    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};
function checkControlledValueProps(tagName, props) {
  {
    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }

    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  }
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';

  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)

  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  var get = descriptor.get,
      set = descriptor.set;
  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  }); // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });
  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  } // TODO: Once it's just Fiber we can move this to node._wrapperState


  node._valueTracker = trackValueOnNode(node);
}
function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
  // that trying again will succeed

  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);

  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }

  return false;
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}
/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */


function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}
function initWrapperState(element, props) {
  {
    checkControlledValueProps('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnCheckedDefaultChecked = true;
    }

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}
function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;

  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}
function updateWrapper(element, props) {
  var node = element;

  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

      didWarnUncontrolledToControlled = true;
    }

    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);
  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}
function postMountWrapper(element, props, isHydrating) {
  var node = element; // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872

    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (!isHydrating) {
      {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (initialValue !== node.value) {
          node.value = initialValue;
        }
      }
    }

    {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = initialValue;
    }
  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.


  var name = node.name;

  if (name !== '') {
    node.name = '';
  }

  {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}
function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;

  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    } // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.


    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];

      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      } // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.


      var otherProps = getFiberCurrentPropsFromNode(otherNode);

      if (!otherProps) {
        {
          throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
        }
      } // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set


      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.

      updateWrapper(otherNode, otherProps);
    }
  }
} // In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253


function setDefaultValue(node, type, value) {
  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;

function flattenChildren(children) {
  var content = ''; // Flatten children. We'll warn if they are invalid
  // during validateProps() which runs for hydration too.
  // Note that this would throw on non-element objects.
  // Elements are stringified (which is normally irrelevant
  // but matters for <fbt>).

  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }

    content += child; // Note: we don't warn about invalid children here.
    // Instead, this is done separately below so that
    // it happens during the hydration code path too.
  });
  return content;
}
/**
 * Implements an <option> host component that warns when `selected` is set.
 */


function validateProps(element, props) {
  {
    // This mirrors the code path above, but runs for hydration too.
    // Warn about invalid children here so that client and hydration are consistent.
    // TODO: this seems like it could cause a DEV-only throw for hydration
    // if children contains a non-element object. We should try to avoid that.
    if (typeof props.children === 'object' && props.children !== null) {
      React.Children.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }

        if (typeof child === 'string' || typeof child === 'number') {
          return;
        }

        if (typeof child.type !== 'string') {
          return;
        }

        if (!didWarnInvalidChild) {
          didWarnInvalidChild = true;

          error('Only strings and numbers are supported as <option> children.');
        }
      });
    } // TODO: Remove support for `selected` in <option>.


    if (props.selected != null && !didWarnSelectedSetOnOption) {
      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

      didWarnSelectedSetOnOption = true;
    }
  }
}
function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}
function getHostProps$1(element, props) {
  var hostProps = _assign({
    children: undefined
  }, props);

  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

var didWarnValueDefaultValue$1;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }

  return '';
}

var valuePropNames = ['value', 'defaultValue'];
/**
 * Validation function for `value` and `defaultValue`.
 */

function checkSelectPropTypes(props) {
  {
    checkControlledValueProps('select', props);

    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];

      if (props[propName] == null) {
        continue;
      }

      var isArray = Array.isArray(props[propName]);

      if (props.multiple && !isArray) {
        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
      } else if (!props.multiple && isArray) {
        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
      }
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};

    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }

    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }

      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));

    var defaultSelected = null;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;

        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }

        return;
      }

      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }

    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}
/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */


function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}
function initWrapperState$1(element, props) {
  var node = element;

  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

      didWarnValueDefaultValue$1 = true;
    }
  }
}
function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}
function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}
function restoreControlledState$1(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
function getHostProps$3(element, props) {
  var node = element;

  if (!(props.dangerouslySetInnerHTML == null)) {
    {
      throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
    }
  } // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.


  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}
function initWrapperState$2(element, props) {
  var node = element;

  {
    checkControlledValueProps('textarea', props);

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value; // Only bother fetching default value if we're going to use it

  if (initialValue == null) {
    var children = props.children,
        defaultValue = props.defaultValue;

    if (children != null) {
      {
        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }

      {
        if (!(defaultValue == null)) {
          {
            throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
          }
        }

        if (Array.isArray(children)) {
          if (!(children.length <= 1)) {
            {
              throw Error( "<textarea> can only have at most one child." );
            }
          }

          children = children[0];
        }

        defaultValue = children;
      }
    }

    if (defaultValue == null) {
      defaultValue = '';
    }

    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}
function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);

  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

    if (newValue !== node.value) {
      node.value = newValue;
    }

    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }

  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}
function postMountWrapper$3(element, props) {
  var node = element; // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.

  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

  if (textContent === node._wrapperState.initialValue) {
    if (textContent !== '' && textContent !== null) {
      node.value = textContent;
    }
  }
}
function restoreControlledState$2(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
var Namespaces = {
  html: HTML_NAMESPACE,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
}; // Assumes there is no parent namespace.

function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;

    case 'math':
      return MATH_NAMESPACE;

    default:
      return HTML_NAMESPACE;
  }
}
function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }

  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE;
  } // By default, pass namespace below.


  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

var reusableSVGContainer;
/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */

var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  if (node.namespaceURI === Namespaces.svg) {

    if (!('innerHTML' in node)) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;

      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }

      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }

      return;
    }
  }

  node.innerHTML = html;
});

/**
 * HTML nodeType values that represent the type of the node
 */
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */

var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }

  node.textContent = text;
};

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */


var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.

Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901
  var isEmpty = value == null || typeof value === 'boolean' || value === '';

  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */

function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

  var badStyleValueWithSemicolonPattern = /;\s*$/;
  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;

    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;

    error('`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;

    error('`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var styleValue = styles[styleName];

      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
        delimiter = ';';
      }
    }

    return serialized || null;
  }
}
/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

function setValueForStyles(node, styles) {
  var style = node.style;

  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }

    var isCustomProperty = styleName.indexOf('--') === 0;

    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }

    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

    if (styleName === 'float') {
      styleName = 'cssFloat';
    }

    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}
/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */


function expandShorthandMap(styles) {
  var expanded = {};

  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];

    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }

  return expanded;
}
/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */


function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  {
    if (!nextStyles) {
      return;
    }

    var expandedUpdates = expandShorthandMap(styleUpdates);
    var expandedStyles = expandShorthandMap(nextStyles);
    var warnedAbout = {};

    for (var key in expandedUpdates) {
      var originalKey = expandedUpdates[key];
      var correctOriginalKey = expandedStyles[key];

      if (correctOriginalKey && originalKey !== correctOriginalKey) {
        var warningKey = originalKey + ',' + correctOriginalKey;

        if (warnedAbout[warningKey]) {
          continue;
        }

        warnedAbout[warningKey] = true;

        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
      }
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a list for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

var HTML = '__html';

function assertValidProps(tag, props) {
  if (!props) {
    return;
  } // Note the use of `==` which checks for null or undefined.


  if (voidElementTags[tag]) {
    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
      {
        throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." );
      }
    }
  }

  if (props.dangerouslySetInnerHTML != null) {
    if (!(props.children == null)) {
      {
        throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
      }
    }

    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
      {
        throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information." );
      }
    }
  }

  {
    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
    }
  }

  if (!(props.style == null || typeof props.style === 'object')) {
    {
      throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." );
    }
  }
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }

  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this list too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;

    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG allowed attribute list, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  disablepictureinpicture: 'disablePictureInPicture',
  disableremoteplayback: 'disableRemotePlayback',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  enterkeyhint: 'enterKeyHint',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0,
  // state
  'aria-details': 0,
  'aria-disabled': 0,
  // state
  'aria-hidden': 0,
  // state
  'aria-invalid': 0,
  // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function validateProperty(tagName, name) {
  {
    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
      return true;
    }

    if (rARIACamel.test(name)) {
      var ariaName = 'aria-' + name.slice(4).toLowerCase();
      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (correctName == null) {
        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

        warnedProperties[name] = true;
        return true;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== correctName) {
        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

        warnedProperties[name] = true;
        return true;
      }
    }

    if (rARIA.test(name)) {
      var lowerCasedName = name.toLowerCase();
      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (standardName == null) {
        warnedProperties[name] = true;
        return false;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== standardName) {
        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties[name] = true;
        return true;
      }
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  {
    var invalidProps = [];

    for (var key in props) {
      var isValid = validateProperty(type, key);

      if (!isValid) {
        invalidProps.push(key);
      }
    }

    var unknownPropString = invalidProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (invalidProps.length === 1) {
      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
    } else if (invalidProps.length > 1) {
      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
    }
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;
function validateProperties$1(type, props) {
  {
    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
      return;
    }

    if (props != null && props.value === null && !didWarnValueNull) {
      didWarnValueNull = true;

      if (type === 'select' && props.multiple) {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
      } else {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
      }
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, eventRegistry) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

      warnedProperties$1[name] = true;
      return true;
    } // We can't rely on the event system being injected on the server.


    if (eventRegistry != null) {
      var registrationNameDependencies = eventRegistry.registrationNameDependencies,
          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

      if (registrationNameDependencies.hasOwnProperty(name)) {
        return true;
      }

      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

      if (registrationName != null) {
        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

        warnedProperties$1[name] = true;
        return true;
      }

      if (EVENT_NAME_REGEX.test(name)) {
        error('Unknown event handler property `%s`. It will be ignored.', name);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Let the ARIA attribute hook validate ARIA attributes


    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];

      if (standardName !== name) {
        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Now that we've validated casing, do not validate
    // data types for reserved props


    if (isReserved) {
      return true;
    } // Warn when a known attribute is a bad type


    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    } // Warn when passing the strings 'false' or 'true' into a boolean prop


    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, eventRegistry) {
  {
    var unknownProps = [];

    for (var key in props) {
      var isValid = validateProperty$1(type, key, props[key], eventRegistry);

      if (!isValid) {
        unknownProps.push(key);
      }
    }

    var unknownPropString = unknownProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (unknownProps.length === 1) {
      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
    } else if (unknownProps.length > 1) {
      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
    }
  }
};

function validateProperties$2(type, props, eventRegistry) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnUnknownProperties(type, props, eventRegistry);
}

var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
var IS_NON_DELEGATED = 1 << 1;
var IS_CAPTURE_PHASE = 1 << 2;
var IS_REPLAYED = 1 << 4;
// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
// we call willDeferLaterForLegacyFBSupport, thus not bailing out
// will result in endless cycles like an infinite loop.
// We also don't want to defer during event replaying.

var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html


  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);

  if (!internalInstance) {
    // Unmounted
    return;
  }

  if (!(typeof restoreImpl === 'function')) {
    {
      throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

  if (stateNode) {
    var _props = getFiberCurrentPropsFromNode(stateNode);

    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
  }
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}
function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}
function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}
function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }

  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;
  restoreStateOfTarget(target);

  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults

var batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var discreteUpdatesImpl = function (fn, a, b, c, d) {
  return fn(a, b, c, d);
};

var flushDiscreteUpdatesImpl = function () {};

var batchedEventUpdatesImpl = batchedUpdatesImpl;
var isInsideEventHandler = false;
var isBatchingEventUpdates = false;

function finishEventHandler() {
  // Here we wait until all updates have propagated, which is important
  // when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  // Then we restore state of any controlled component.
  var controlledComponentsHavePendingUpdates = needsStateRestore();

  if (controlledComponentsHavePendingUpdates) {
    // If a controlled event was fired, we may need to restore the state of
    // the DOM node back to the controlled value. This is necessary when React
    // bails out of the update without touching the DOM.
    flushDiscreteUpdatesImpl();
    restoreStateIfNeeded();
  }
}

function batchedUpdates(fn, bookkeeping) {
  if (isInsideEventHandler) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }

  isInsideEventHandler = true;

  try {
    return batchedUpdatesImpl(fn, bookkeeping);
  } finally {
    isInsideEventHandler = false;
    finishEventHandler();
  }
}
function batchedEventUpdates(fn, a, b) {
  if (isBatchingEventUpdates) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(a, b);
  }

  isBatchingEventUpdates = true;

  try {
    return batchedEventUpdatesImpl(fn, a, b);
  } finally {
    isBatchingEventUpdates = false;
    finishEventHandler();
  }
}
function discreteUpdates(fn, a, b, c, d) {
  var prevIsInsideEventHandler = isInsideEventHandler;
  isInsideEventHandler = true;

  try {
    return discreteUpdatesImpl(fn, a, b, c, d);
  } finally {
    isInsideEventHandler = prevIsInsideEventHandler;

    if (!isInsideEventHandler) {
      finishEventHandler();
    }
  }
}
function flushDiscreteUpdatesIfNeeded(timeStamp) {
  {
    if (!isInsideEventHandler) {
      flushDiscreteUpdatesImpl();
    }
  }
}
function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
  batchedUpdatesImpl = _batchedUpdatesImpl;
  discreteUpdatesImpl = _discreteUpdatesImpl;
  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
    case 'onMouseEnter':
      return !!(props.disabled && isInteractive(type));

    default:
      return false;
  }
}
/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */


function getListener(inst, registrationName) {
  var stateNode = inst.stateNode;

  if (stateNode === null) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }

  var props = getFiberCurrentPropsFromNode(stateNode);

  if (props === null) {
    // Work in progress.
    return null;
  }

  var listener = props[registrationName];

  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }

  if (!(!listener || typeof listener === 'function')) {
    {
      throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
    }
  }

  return listener;
}

var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

if (canUseDOM) {
  try {
    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

    Object.defineProperty(options, 'passive', {
      get: function () {
        passiveBrowserEventsSupported = true;
      }
    });
    window.addEventListener('test', options, options);
    window.removeEventListener('test', options, options);
  } catch (e) {
    passiveBrowserEventsSupported = false;
  }
}

function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
}

var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (!(typeof document !== 'undefined')) {
        {
          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
        }
      }

      var evt = document.createEvent('Event');
      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

      function restoreAfterDispatch() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }
      } // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.


      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        didCall = true;
        restoreAfterDispatch();
        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didCall && didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);

      if (!didCall) {
        // Something went really wrong, and our event was not dispatched.
        // https://github.com/facebook/react/issues/16734
        // https://github.com/facebook/react/issues/16585
        // Fall back to the production implementation.
        restoreAfterDispatch();
        return invokeGuardedCallbackProd.apply(this, arguments);
      }
    };
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var hasRethrowError = false;
var rethrowError = null;
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);

  if (hasError) {
    var error = clearCaughtError();

    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}
/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    {
      {
        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */
function get(key) {
  return key._reactInternals;
}
function has(key) {
  return key._reactInternals !== undefined;
}
function set(key, value) {
  key._reactInternals = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoFlags =
/*                      */
0;
var PerformedWork =
/*                */
1; // You can change the rest (and add more).

var Placement =
/*                    */
2;
var Update =
/*                       */
4;
var PlacementAndUpdate =
/*           */
6;
var Deletion =
/*                     */
8;
var ContentReset =
/*                 */
16;
var Callback =
/*                     */
32;
var DidCapture =
/*                   */
64;
var Ref =
/*                          */
128;
var Snapshot =
/*                     */
256;
var Passive =
/*                      */
512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.

var PassiveUnmountPendingDev =
/*     */
8192;
var Hydrating =
/*                    */
1024;
var HydratingAndUpdate =
/*           */
1028; // Passive & Update & Callback & Ref & Snapshot

var LifecycleEffectMask =
/*          */
932; // Union of all host effects

var HostEffectMask =
/*               */
2047; // These are not really side effects, but we still reuse this field.

var Incomplete =
/*                   */
2048;
var ShouldCapture =
/*                */
4096;
var ForceUpdateForLegacySuspense =
/* */
16384; // Static tags describe aspects of a fiber that are not specific to a render,

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === SuspenseComponent) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState === null) {
      var current = fiber.alternate;

      if (current !== null) {
        suspenseState = current.memoizedState;
      }
    }

    if (suspenseState !== null) {
      return suspenseState.dehydrated;
    }
  }

  return null;
}
function getContainerFromFiber(fiber) {
  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;

      if (!instance._warnedAboutRefsInRender) {
        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
      }

      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (!(getNearestMountedFiber(fiber) === fiber)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (!(nearestMounted !== null)) {
      {
        throw Error( "Unable to find node on an unmounted component." );
      }
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      {
        {
          throw Error( "Unable to find node on an unmounted component." );
        }
      }
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          {
            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
          }
        }
      }
    }

    if (!(a.alternate === b)) {
      {
        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (!(a.tag === HostRoot)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function doesFiberContain(parentFiber, childFiber) {
  var node = childFiber;
  var parentFiberAlternate = parentFiber.alternate;

  while (node !== null) {
    if (node === parentFiber || node === parentFiberAlternate) {
      return true;
    }

    node = node.return;
  }

  return false;
}

var attemptUserBlockingHydration;
function setAttemptUserBlockingHydration(fn) {
  attemptUserBlockingHydration = fn;
}
var attemptContinuousHydration;
function setAttemptContinuousHydration(fn) {
  attemptContinuousHydration = fn;
}
var attemptHydrationAtCurrentPriority;
function setAttemptHydrationAtCurrentPriority(fn) {
  attemptHydrationAtCurrentPriority = fn;
}
var attemptHydrationAtPriority;
function setAttemptHydrationAtPriority(fn) {
  attemptHydrationAtPriority = fn;
} // TODO: Upgrade this definition once we're on a newer version of Flow that
var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
// if the last target was dehydrated.

var queuedFocus = null;
var queuedDrag = null;
var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

var queuedPointers = new Map();
var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

var queuedExplicitHydrationTargets = [];
function hasQueuedDiscreteEvents() {
  return queuedDiscreteEvents.length > 0;
}
var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
function isReplayableDiscreteEvent(eventType) {
  return discreteReplayableEvents.indexOf(eventType) > -1;
}

function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  return {
    blockedOn: blockedOn,
    domEventName: domEventName,
    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
    nativeEvent: nativeEvent,
    targetContainers: [targetContainer]
  };
}

function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
  queuedDiscreteEvents.push(queuedEvent);
} // Resets the replaying for this type of continuous event to no event.

function clearIfContinuousEvent(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'focusin':
    case 'focusout':
      queuedFocus = null;
      break;

    case 'dragenter':
    case 'dragleave':
      queuedDrag = null;
      break;

    case 'mouseover':
    case 'mouseout':
      queuedMouse = null;
      break;

    case 'pointerover':
    case 'pointerout':
      {
        var pointerId = nativeEvent.pointerId;
        queuedPointers.delete(pointerId);
        break;
      }

    case 'gotpointercapture':
    case 'lostpointercapture':
      {
        var _pointerId = nativeEvent.pointerId;
        queuedPointerCaptures.delete(_pointerId);
        break;
      }
  }
}

function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

    if (blockedOn !== null) {
      var _fiber2 = getInstanceFromNode(blockedOn);

      if (_fiber2 !== null) {
        // Attempt to increase the priority of this target.
        attemptContinuousHydration(_fiber2);
      }
    }

    return queuedEvent;
  } // If we have already queued this exact event, then it's because
  // the different event systems have different DOM event listeners.
  // We can accumulate the flags, and the targetContainers, and
  // store a single event to be replayed.


  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  var targetContainers = existingQueuedEvent.targetContainers;

  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
    targetContainers.push(targetContainer);
  }

  return existingQueuedEvent;
}

function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  // These set relatedTarget to null because the replayed event will be treated as if we
  // moved from outside the window (no target) onto the target once it hydrates.
  // Instead of mutating we could clone the event.
  switch (domEventName) {
    case 'focusin':
      {
        var focusEvent = nativeEvent;
        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
        return true;
      }

    case 'dragenter':
      {
        var dragEvent = nativeEvent;
        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
        return true;
      }

    case 'mouseover':
      {
        var mouseEvent = nativeEvent;
        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
        return true;
      }

    case 'pointerover':
      {
        var pointerEvent = nativeEvent;
        var pointerId = pointerEvent.pointerId;
        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
        return true;
      }

    case 'gotpointercapture':
      {
        var _pointerEvent = nativeEvent;
        var _pointerId2 = _pointerEvent.pointerId;
        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
        return true;
      }
  }

  return false;
} // Check if this target is unblocked. Returns true if it's unblocked.

function attemptExplicitHydrationTarget(queuedTarget) {
  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
  // Try to unify them. It's a bit tricky since it would require two return
  // values.
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted !== null) {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // We're blocked on hydrating this boundary.
          // Increase its priority.
          queuedTarget.blockedOn = instance;
          attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
            Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
              attemptHydrationAtCurrentPriority(nearestMounted);
            });
          });
          return;
        }
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
          // a root other than sync.

          return;
        }
      }
    }
  }

  queuedTarget.blockedOn = null;
}

function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null) {
    return false;
  }

  var targetContainers = queuedEvent.targetContainers;

  while (targetContainers.length > 0) {
    var targetContainer = targetContainers[0];
    var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

    if (nextBlockedOn !== null) {
      // We're still blocked. Try again later.
      var _fiber3 = getInstanceFromNode(nextBlockedOn);

      if (_fiber3 !== null) {
        attemptContinuousHydration(_fiber3);
      }

      queuedEvent.blockedOn = nextBlockedOn;
      return false;
    } // This target container was successfully dispatched. Try the next.


    targetContainers.shift();
  }

  return true;
}

function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
    map.delete(key);
  }
}

function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false; // First replay discrete events.

  while (queuedDiscreteEvents.length > 0) {
    var nextDiscreteEvent = queuedDiscreteEvents[0];

    if (nextDiscreteEvent.blockedOn !== null) {
      // We're still blocked.
      // Increase the priority of this boundary to unblock
      // the next discrete event.
      var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);

      if (_fiber4 !== null) {
        attemptUserBlockingHydration(_fiber4);
      }

      break;
    }

    var targetContainers = nextDiscreteEvent.targetContainers;

    while (targetContainers.length > 0) {
      var targetContainer = targetContainers[0];
      var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);

      if (nextBlockedOn !== null) {
        // We're still blocked. Try again later.
        nextDiscreteEvent.blockedOn = nextBlockedOn;
        break;
      } // This target container was successfully dispatched. Try the next.


      targetContainers.shift();
    }

    if (nextDiscreteEvent.blockedOn === null) {
      // We've successfully replayed the first event. Let's try the next one.
      queuedDiscreteEvents.shift();
    }
  } // Next replay any continuous events.


  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
    queuedFocus = null;
  }

  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
    queuedDrag = null;
  }

  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
    queuedMouse = null;
  }

  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}

function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  if (queuedEvent.blockedOn === unblocked) {
    queuedEvent.blockedOn = null;

    if (!hasScheduledReplayAttempt) {
      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
      // now unblocked. This first might not actually be unblocked yet.
      // We could check it early to avoid scheduling an unnecessary callback.

      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
    }
  }
}

function retryIfBlockedOn(unblocked) {
  // Mark anything that was blocked on this as no longer blocked
  // and eligible for a replay.
  if (queuedDiscreteEvents.length > 0) {
    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
    // worth it because we expect very few discrete events to queue up and once
    // we are actually fully unblocked it will be fast to replay them.

    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
      var queuedEvent = queuedDiscreteEvents[i];

      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
      }
    }
  }

  if (queuedFocus !== null) {
    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  }

  if (queuedDrag !== null) {
    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  }

  if (queuedMouse !== null) {
    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  }

  var unblock = function (queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  };

  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);

  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
    var queuedTarget = queuedExplicitHydrationTargets[_i];

    if (queuedTarget.blockedOn === unblocked) {
      queuedTarget.blockedOn = null;
    }
  }

  while (queuedExplicitHydrationTargets.length > 0) {
    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

    if (nextExplicitTarget.blockedOn !== null) {
      // We're still blocked.
      break;
    } else {
      attemptExplicitHydrationTarget(nextExplicitTarget);

      if (nextExplicitTarget.blockedOn === null) {
        // We're unblocked.
        queuedExplicitHydrationTargets.shift();
      }
    }
  }
}

var DiscreteEvent = 0;
var UserBlockingEvent = 1;
var ContinuousEvent = 2;

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  return prefixes;
}
/**
 * A list of event names to a configurable list of vendor prefixes.
 */


var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};
/**
 * Event names that have already been detected and prefixed (if applicable).
 */

var prefixedEventNames = {};
/**
 * Element to check for prefixes on.
 */

var style = {};
/**
 * Bootstrap if a DOM exists.
 */

if (canUseDOM) {
  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.

  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  } // Same as above


  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}
/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */


function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

var ANIMATION_END = getVendorPrefixedEventName('animationend');
var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
var ANIMATION_START = getVendorPrefixedEventName('animationstart');
var TRANSITION_END = getVendorPrefixedEventName('transitionend');

var topLevelEventsToReactNames = new Map();
var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
// the code required to apply the same logic for event prioritization and that of the
// SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
// duplication (for which there would be quite a bit). For the events that are not needed
// for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
// array of top level events.
// Lastly, we ignore prettier so we can keep the formatting sane.
// prettier-ignore

var discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close', 'contextmenu', 'contextMenu', 'copy', 'copy', 'cut', 'cut', 'auxclick', 'auxClick', 'dblclick', 'doubleClick', // Careful!
'dragend', 'dragEnd', 'dragstart', 'dragStart', 'drop', 'drop', 'focusin', 'focus', // Careful!
'focusout', 'blur', // Careful!
'input', 'input', 'invalid', 'invalid', 'keydown', 'keyDown', 'keypress', 'keyPress', 'keyup', 'keyUp', 'mousedown', 'mouseDown', 'mouseup', 'mouseUp', 'paste', 'paste', 'pause', 'pause', 'play', 'play', 'pointercancel', 'pointerCancel', 'pointerdown', 'pointerDown', 'pointerup', 'pointerUp', 'ratechange', 'rateChange', 'reset', 'reset', 'seeked', 'seeked', 'submit', 'submit', 'touchcancel', 'touchCancel', 'touchend', 'touchEnd', 'touchstart', 'touchStart', 'volumechange', 'volumeChange'];
var otherDiscreteEvents = ['change', 'selectionchange', 'textInput', 'compositionstart', 'compositionend', 'compositionupdate'];


var userBlockingPairsForSimpleEventPlugin = ['drag', 'drag', 'dragenter', 'dragEnter', 'dragexit', 'dragExit', 'dragleave', 'dragLeave', 'dragover', 'dragOver', 'mousemove', 'mouseMove', 'mouseout', 'mouseOut', 'mouseover', 'mouseOver', 'pointermove', 'pointerMove', 'pointerout', 'pointerOut', 'pointerover', 'pointerOver', 'scroll', 'scroll', 'toggle', 'toggle', 'touchmove', 'touchMove', 'wheel', 'wheel']; // prettier-ignore

var continuousPairsForSimpleEventPlugin = ['abort', 'abort', ANIMATION_END, 'animationEnd', ANIMATION_ITERATION, 'animationIteration', ANIMATION_START, 'animationStart', 'canplay', 'canPlay', 'canplaythrough', 'canPlayThrough', 'durationchange', 'durationChange', 'emptied', 'emptied', 'encrypted', 'encrypted', 'ended', 'ended', 'error', 'error', 'gotpointercapture', 'gotPointerCapture', 'load', 'load', 'loadeddata', 'loadedData', 'loadedmetadata', 'loadedMetadata', 'loadstart', 'loadStart', 'lostpointercapture', 'lostPointerCapture', 'playing', 'playing', 'progress', 'progress', 'seeking', 'seeking', 'stalled', 'stalled', 'suspend', 'suspend', 'timeupdate', 'timeUpdate', TRANSITION_END, 'transitionEnd', 'waiting', 'waiting'];
/**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */

function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
  // As the event types are in pairs of two, we need to iterate
  // through in twos. The events are in pairs of two to save code
  // and improve init perf of processing this array, as it will
  // result in far fewer object allocations and property accesses
  // if we only use three arrays to process all the categories of
  // instead of tuples.
  for (var i = 0; i < eventTypes.length; i += 2) {
    var topEvent = eventTypes[i];
    var event = eventTypes[i + 1];
    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
    var reactName = 'on' + capitalizedEvent;
    eventPriorities.set(topEvent, priority);
    topLevelEventsToReactNames.set(topEvent, reactName);
    registerTwoPhaseEvent(reactName, [topEvent]);
  }
}

function setEventPriorities(eventTypes, priority) {
  for (var i = 0; i < eventTypes.length; i++) {
    eventPriorities.set(eventTypes[i], priority);
  }
}

function getEventPriorityForPluginSystem(domEventName) {
  var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
  // want to warn if we can't detect the priority
  // for the event.

  return priority === undefined ? ContinuousEvent : priority;
}
function registerSimpleEvents() {
  registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
  registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
  registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
  setEventPriorities(otherDiscreteEvents, DiscreteEvent);
}

var Scheduler_now = Scheduler.unstable_now;

{
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
    }
  }
}
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority = 99;
var UserBlockingPriority = 98;
var NormalPriority = 97;
var LowPriority = 96;
var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority = 90;
var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.

var SyncLanePriority = 15;
var SyncBatchedLanePriority = 14;
var InputDiscreteHydrationLanePriority = 13;
var InputDiscreteLanePriority = 12;
var InputContinuousHydrationLanePriority = 11;
var InputContinuousLanePriority = 10;
var DefaultHydrationLanePriority = 9;
var DefaultLanePriority = 8;
var TransitionHydrationPriority = 7;
var TransitionPriority = 6;
var RetryLanePriority = 5;
var SelectiveHydrationLanePriority = 4;
var IdleHydrationLanePriority = 3;
var IdleLanePriority = 2;
var OffscreenLanePriority = 1;
var NoLanePriority = 0;
var TotalLanes = 31;
var NoLanes =
/*                        */
0;
var NoLane =
/*                          */
0;
var SyncLane =
/*                        */
1;
var SyncBatchedLane =
/*                 */
2;
var InputDiscreteHydrationLane =
/*      */
4;
var InputDiscreteLanes =
/*                    */
24;
var InputContinuousHydrationLane =
/*           */
32;
var InputContinuousLanes =
/*                  */
192;
var DefaultHydrationLane =
/*            */
256;
var DefaultLanes =
/*                   */
3584;
var TransitionHydrationLane =
/*                */
4096;
var TransitionLanes =
/*                       */
4186112;
var RetryLanes =
/*                            */
62914560;
var SomeRetryLane =
/*                  */
33554432;
var SelectiveHydrationLane =
/*          */
67108864;
var NonIdleLanes =
/*                                 */
134217727;
var IdleHydrationLane =
/*               */
134217728;
var IdleLanes =
/*                             */
805306368;
var OffscreenLane =
/*                   */
1073741824;
var NoTimestamp = -1;
function setCurrentUpdateLanePriority(newLanePriority) {
} // "Registers" used to "return" multiple values
// Used by getHighestPriorityLanes and getNextLanes:

var return_highestLanePriority = DefaultLanePriority;

function getHighestPriorityLanes(lanes) {
  if ((SyncLane & lanes) !== NoLanes) {
    return_highestLanePriority = SyncLanePriority;
    return SyncLane;
  }

  if ((SyncBatchedLane & lanes) !== NoLanes) {
    return_highestLanePriority = SyncBatchedLanePriority;
    return SyncBatchedLane;
  }

  if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
    return_highestLanePriority = InputDiscreteHydrationLanePriority;
    return InputDiscreteHydrationLane;
  }

  var inputDiscreteLanes = InputDiscreteLanes & lanes;

  if (inputDiscreteLanes !== NoLanes) {
    return_highestLanePriority = InputDiscreteLanePriority;
    return inputDiscreteLanes;
  }

  if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
    return_highestLanePriority = InputContinuousHydrationLanePriority;
    return InputContinuousHydrationLane;
  }

  var inputContinuousLanes = InputContinuousLanes & lanes;

  if (inputContinuousLanes !== NoLanes) {
    return_highestLanePriority = InputContinuousLanePriority;
    return inputContinuousLanes;
  }

  if ((lanes & DefaultHydrationLane) !== NoLanes) {
    return_highestLanePriority = DefaultHydrationLanePriority;
    return DefaultHydrationLane;
  }

  var defaultLanes = DefaultLanes & lanes;

  if (defaultLanes !== NoLanes) {
    return_highestLanePriority = DefaultLanePriority;
    return defaultLanes;
  }

  if ((lanes & TransitionHydrationLane) !== NoLanes) {
    return_highestLanePriority = TransitionHydrationPriority;
    return TransitionHydrationLane;
  }

  var transitionLanes = TransitionLanes & lanes;

  if (transitionLanes !== NoLanes) {
    return_highestLanePriority = TransitionPriority;
    return transitionLanes;
  }

  var retryLanes = RetryLanes & lanes;

  if (retryLanes !== NoLanes) {
    return_highestLanePriority = RetryLanePriority;
    return retryLanes;
  }

  if (lanes & SelectiveHydrationLane) {
    return_highestLanePriority = SelectiveHydrationLanePriority;
    return SelectiveHydrationLane;
  }

  if ((lanes & IdleHydrationLane) !== NoLanes) {
    return_highestLanePriority = IdleHydrationLanePriority;
    return IdleHydrationLane;
  }

  var idleLanes = IdleLanes & lanes;

  if (idleLanes !== NoLanes) {
    return_highestLanePriority = IdleLanePriority;
    return idleLanes;
  }

  if ((OffscreenLane & lanes) !== NoLanes) {
    return_highestLanePriority = OffscreenLanePriority;
    return OffscreenLane;
  }

  {
    error('Should have found matching lanes. This is a bug in React.');
  } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


  return_highestLanePriority = DefaultLanePriority;
  return lanes;
}

function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
  switch (schedulerPriorityLevel) {
    case ImmediatePriority:
      return SyncLanePriority;

    case UserBlockingPriority:
      return InputContinuousLanePriority;

    case NormalPriority:
    case LowPriority:
      // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
      return DefaultLanePriority;

    case IdlePriority:
      return IdleLanePriority;

    default:
      return NoLanePriority;
  }
}
function lanePriorityToSchedulerPriority(lanePriority) {
  switch (lanePriority) {
    case SyncLanePriority:
    case SyncBatchedLanePriority:
      return ImmediatePriority;

    case InputDiscreteHydrationLanePriority:
    case InputDiscreteLanePriority:
    case InputContinuousHydrationLanePriority:
    case InputContinuousLanePriority:
      return UserBlockingPriority;

    case DefaultHydrationLanePriority:
    case DefaultLanePriority:
    case TransitionHydrationPriority:
    case TransitionPriority:
    case SelectiveHydrationLanePriority:
    case RetryLanePriority:
      return NormalPriority;

    case IdleHydrationLanePriority:
    case IdleLanePriority:
    case OffscreenLanePriority:
      return IdlePriority;

    case NoLanePriority:
      return NoPriority;

    default:
      {
        {
          throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
        }
      }

  }
}
function getNextLanes(root, wipLanes) {
  // Early bailout if there's no pending work left.
  var pendingLanes = root.pendingLanes;

  if (pendingLanes === NoLanes) {
    return_highestLanePriority = NoLanePriority;
    return NoLanes;
  }

  var nextLanes = NoLanes;
  var nextLanePriority = NoLanePriority;
  var expiredLanes = root.expiredLanes;
  var suspendedLanes = root.suspendedLanes;
  var pingedLanes = root.pingedLanes; // Check if any work has expired.

  if (expiredLanes !== NoLanes) {
    nextLanes = expiredLanes;
    nextLanePriority = return_highestLanePriority = SyncLanePriority;
  } else {
    // Do not work on any idle work until all the non-idle work has finished,
    // even if the work is suspended.
    var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

    if (nonIdlePendingLanes !== NoLanes) {
      var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

      if (nonIdleUnblockedLanes !== NoLanes) {
        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
        nextLanePriority = return_highestLanePriority;
      } else {
        var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

        if (nonIdlePingedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
          nextLanePriority = return_highestLanePriority;
        }
      }
    } else {
      // The only remaining work is Idle.
      var unblockedLanes = pendingLanes & ~suspendedLanes;

      if (unblockedLanes !== NoLanes) {
        nextLanes = getHighestPriorityLanes(unblockedLanes);
        nextLanePriority = return_highestLanePriority;
      } else {
        if (pingedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(pingedLanes);
          nextLanePriority = return_highestLanePriority;
        }
      }
    }
  }

  if (nextLanes === NoLanes) {
    // This should only be reachable if we're suspended
    // TODO: Consider warning in this path if a fallback timer is not scheduled.
    return NoLanes;
  } // If there are higher priority lanes, we'll include them even if they
  // are suspended.


  nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
  // it and we'll lose our progress. We should only do this if the new lanes are
  // higher priority.

  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
  // bother waiting until the root is complete.
  (wipLanes & suspendedLanes) === NoLanes) {
    getHighestPriorityLanes(wipLanes);
    var wipLanePriority = return_highestLanePriority;

    if (nextLanePriority <= wipLanePriority) {
      return wipLanes;
    } else {
      return_highestLanePriority = nextLanePriority;
    }
  } // Check for entangled lanes and add them to the batch.
  //
  // A lane is said to be entangled with another when it's not allowed to render
  // in a batch that does not also include the other lane. Typically we do this
  // when multiple updates have the same source, and we only want to respond to
  // the most recent event from that source.
  //
  // Note that we apply entanglements *after* checking for partial work above.
  // This means that if a lane is entangled during an interleaved event while
  // it's already rendering, we won't interrupt it. This is intentional, since
  // entanglement is usually "best effort": we'll try our best to render the
  // lanes in the same batch, but it's not worth throwing out partially
  // completed work in order to do it.
  //
  // For those exceptions where entanglement is semantically important, like
  // useMutableSource, we should ensure that there is no partial work at the
  // time we apply the entanglement.


  var entangledLanes = root.entangledLanes;

  if (entangledLanes !== NoLanes) {
    var entanglements = root.entanglements;
    var lanes = nextLanes & entangledLanes;

    while (lanes > 0) {
      var index = pickArbitraryLaneIndex(lanes);
      var lane = 1 << index;
      nextLanes |= entanglements[index];
      lanes &= ~lane;
    }
  }

  return nextLanes;
}
function getMostRecentEventTime(root, lanes) {
  var eventTimes = root.eventTimes;
  var mostRecentEventTime = NoTimestamp;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    var eventTime = eventTimes[index];

    if (eventTime > mostRecentEventTime) {
      mostRecentEventTime = eventTime;
    }

    lanes &= ~lane;
  }

  return mostRecentEventTime;
}

function computeExpirationTime(lane, currentTime) {
  // TODO: Expiration heuristic is constant per lane, so could use a map.
  getHighestPriorityLanes(lane);
  var priority = return_highestLanePriority;

  if (priority >= InputContinuousLanePriority) {
    // User interactions should expire slightly more quickly.
    //
    // NOTE: This is set to the corresponding constant as in Scheduler.js. When
    // we made it larger, a product metric in www regressed, suggesting there's
    // a user interaction that's being starved by a series of synchronous
    // updates. If that theory is correct, the proper solution is to fix the
    // starvation. However, this scenario supports the idea that expiration
    // times are an important safeguard when starvation does happen.
    //
    // Also note that, in the case of user input specifically, this will soon no
    // longer be an issue because we plan to make user input synchronous by
    // default (until you enter `startTransition`, of course.)
    //
    // If weren't planning to make these updates synchronous soon anyway, I
    // would probably make this number a configurable parameter.
    return currentTime + 250;
  } else if (priority >= TransitionPriority) {
    return currentTime + 5000;
  } else {
    // Anything idle priority or lower should never expire.
    return NoTimestamp;
  }
}

function markStarvedLanesAsExpired(root, currentTime) {
  // TODO: This gets called every time we yield. We can optimize by storing
  // the earliest expiration time on the root. Then use that to quickly bail out
  // of this function.
  var pendingLanes = root.pendingLanes;
  var suspendedLanes = root.suspendedLanes;
  var pingedLanes = root.pingedLanes;
  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
  // expiration time. If so, we'll assume the update is being starved and mark
  // it as expired to force it to finish.

  var lanes = pendingLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    var expirationTime = expirationTimes[index];

    if (expirationTime === NoTimestamp) {
      // Found a pending lane with no expiration time. If it's not suspended, or
      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
      // using the current time.
      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
        // Assumes timestamps are monotonically increasing.
        expirationTimes[index] = computeExpirationTime(lane, currentTime);
      }
    } else if (expirationTime <= currentTime) {
      // This lane expired
      root.expiredLanes |= lane;
    }

    lanes &= ~lane;
  }
} // This returns the highest priority pending lanes regardless of whether they
function getLanesToRetrySynchronouslyOnError(root) {
  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

  if (everythingButOffscreen !== NoLanes) {
    return everythingButOffscreen;
  }

  if (everythingButOffscreen & OffscreenLane) {
    return OffscreenLane;
  }

  return NoLanes;
}
function returnNextLanesPriority() {
  return return_highestLanePriority;
}
function includesNonIdleWork(lanes) {
  return (lanes & NonIdleLanes) !== NoLanes;
}
function includesOnlyRetries(lanes) {
  return (lanes & RetryLanes) === lanes;
}
function includesOnlyTransitions(lanes) {
  return (lanes & TransitionLanes) === lanes;
} // To ensure consistency across multiple updates in the same event, this should
// be a pure function, so that it always returns the same lane for given inputs.

function findUpdateLane(lanePriority, wipLanes) {
  switch (lanePriority) {
    case NoLanePriority:
      break;

    case SyncLanePriority:
      return SyncLane;

    case SyncBatchedLanePriority:
      return SyncBatchedLane;

    case InputDiscreteLanePriority:
      {
        var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);

        if (_lane === NoLane) {
          // Shift to the next priority level
          return findUpdateLane(InputContinuousLanePriority, wipLanes);
        }

        return _lane;
      }

    case InputContinuousLanePriority:
      {
        var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);

        if (_lane2 === NoLane) {
          // Shift to the next priority level
          return findUpdateLane(DefaultLanePriority, wipLanes);
        }

        return _lane2;
      }

    case DefaultLanePriority:
      {
        var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);

        if (_lane3 === NoLane) {
          // If all the default lanes are already being worked on, look for a
          // lane in the transition range.
          _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);

          if (_lane3 === NoLane) {
            // All the transition lanes are taken, too. This should be very
            // rare, but as a last resort, pick a default lane. This will have
            // the effect of interrupting the current work-in-progress render.
            _lane3 = pickArbitraryLane(DefaultLanes);
          }
        }

        return _lane3;
      }

    case TransitionPriority: // Should be handled by findTransitionLane instead

    case RetryLanePriority:
      // Should be handled by findRetryLane instead
      break;

    case IdleLanePriority:
      var lane = pickArbitraryLane(IdleLanes & ~wipLanes);

      if (lane === NoLane) {
        lane = pickArbitraryLane(IdleLanes);
      }

      return lane;
  }

  {
    {
      throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
    }
  }
} // To ensure consistency across multiple updates in the same event, this should
// be pure function, so that it always returns the same lane for given inputs.

function findTransitionLane(wipLanes, pendingLanes) {
  // First look for lanes that are completely unclaimed, i.e. have no
  // pending work.
  var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);

  if (lane === NoLane) {
    // If all lanes have pending work, look for a lane that isn't currently
    // being worked on.
    lane = pickArbitraryLane(TransitionLanes & ~wipLanes);

    if (lane === NoLane) {
      // If everything is being worked on, pick any lane. This has the
      // effect of interrupting the current work-in-progress.
      lane = pickArbitraryLane(TransitionLanes);
    }
  }

  return lane;
} // To ensure consistency across multiple updates in the same event, this should
// be pure function, so that it always returns the same lane for given inputs.

function findRetryLane(wipLanes) {
  // This is a fork of `findUpdateLane` designed specifically for Suspense
  // "retries" — a special update that attempts to flip a Suspense boundary
  // from its placeholder state to its primary/resolved state.
  var lane = pickArbitraryLane(RetryLanes & ~wipLanes);

  if (lane === NoLane) {
    lane = pickArbitraryLane(RetryLanes);
  }

  return lane;
}

function getHighestPriorityLane(lanes) {
  return lanes & -lanes;
}

function getLowestPriorityLane(lanes) {
  // This finds the most significant non-zero bit.
  var index = 31 - clz32(lanes);
  return index < 0 ? NoLanes : 1 << index;
}

function getEqualOrHigherPriorityLanes(lanes) {
  return (getLowestPriorityLane(lanes) << 1) - 1;
}

function pickArbitraryLane(lanes) {
  // This wrapper function gets inlined. Only exists so to communicate that it
  // doesn't matter which bit is selected; you can pick any bit without
  // affecting the algorithms where its used. Here I'm using
  // getHighestPriorityLane because it requires the fewest operations.
  return getHighestPriorityLane(lanes);
}

function pickArbitraryLaneIndex(lanes) {
  return 31 - clz32(lanes);
}

function laneToIndex(lane) {
  return pickArbitraryLaneIndex(lane);
}

function includesSomeLane(a, b) {
  return (a & b) !== NoLanes;
}
function isSubsetOfLanes(set, subset) {
  return (set & subset) === subset;
}
function mergeLanes(a, b) {
  return a | b;
}
function removeLanes(set, subset) {
  return set & ~subset;
} // Seems redundant, but it changes the type from a single lane (used for
// updates) to a group of lanes (used for flushing work).

function laneToLanes(lane) {
  return lane;
}
function higherPriorityLane(a, b) {
  // This works because the bit ranges decrease in priority as you go left.
  return a !== NoLane && a < b ? a : b;
}
function createLaneMap(initial) {
  // Intentionally pushing one by one.
  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
  var laneMap = [];

  for (var i = 0; i < TotalLanes; i++) {
    laneMap.push(initial);
  }

  return laneMap;
}
function markRootUpdated(root, updateLane, eventTime) {
  root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
  // it's not practical to try every single possible combination. We need a
  // heuristic to decide which lanes to attempt to render, and in which batches.
  // For now, we use the same heuristic as in the old ExpirationTimes model:
  // retry any lane at equal or lower priority, but don't try updates at higher
  // priority without also including the lower priority updates. This works well
  // when considering updates across different priority levels, but isn't
  // sufficient for updates within the same priority, since we want to treat
  // those updates as parallel.
  // Unsuspend any update at equal or lower priority.

  var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111

  root.suspendedLanes &= higherPriorityLanes;
  root.pingedLanes &= higherPriorityLanes;
  var eventTimes = root.eventTimes;
  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
  // recent event, and we assume time is monotonically increasing.

  eventTimes[index] = eventTime;
}
function markRootSuspended(root, suspendedLanes) {
  root.suspendedLanes |= suspendedLanes;
  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

  var expirationTimes = root.expirationTimes;
  var lanes = suspendedLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    expirationTimes[index] = NoTimestamp;
    lanes &= ~lane;
  }
}
function markRootPinged(root, pingedLanes, eventTime) {
  root.pingedLanes |= root.suspendedLanes & pingedLanes;
}
function markDiscreteUpdatesExpired(root) {
  root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
}
function hasDiscreteLanes(lanes) {
  return (lanes & InputDiscreteLanes) !== NoLanes;
}
function markRootMutableRead(root, updateLane) {
  root.mutableReadLanes |= updateLane & root.pendingLanes;
}
function markRootFinished(root, remainingLanes) {
  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
  root.pendingLanes = remainingLanes; // Let's try everything again

  root.suspendedLanes = 0;
  root.pingedLanes = 0;
  root.expiredLanes &= remainingLanes;
  root.mutableReadLanes &= remainingLanes;
  root.entangledLanes &= remainingLanes;
  var entanglements = root.entanglements;
  var eventTimes = root.eventTimes;
  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

  var lanes = noLongerPendingLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    entanglements[index] = NoLanes;
    eventTimes[index] = NoTimestamp;
    expirationTimes[index] = NoTimestamp;
    lanes &= ~lane;
  }
}
function markRootEntangled(root, entangledLanes) {
  root.entangledLanes |= entangledLanes;
  var entanglements = root.entanglements;
  var lanes = entangledLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    entanglements[index] |= entangledLanes;
    lanes &= ~lane;
  }
}
var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
// Based on:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

var log = Math.log;
var LN2 = Math.LN2;

function clz32Fallback(lanes) {
  if (lanes === 0) {
    return 32;
  }

  return 31 - (log(lanes) / LN2 | 0) | 0;
}

// Intentionally not named imports because Rollup would use dynamic dispatch for
var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority,
    runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
// We'd like to remove this but it's not clear if this is safe.

function setEnabled(enabled) {
  _enabled = !!enabled;
}
function isEnabled() {
  return _enabled;
}
function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
  var eventPriority = getEventPriorityForPluginSystem(domEventName);
  var listenerWrapper;

  switch (eventPriority) {
    case DiscreteEvent:
      listenerWrapper = dispatchDiscreteEvent;
      break;

    case UserBlockingEvent:
      listenerWrapper = dispatchUserBlockingUpdate;
      break;

    case ContinuousEvent:
    default:
      listenerWrapper = dispatchEvent;
      break;
  }

  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
}

function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
  {
    flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
  }

  discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
}

function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
  {
    runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
  }
}

function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (!_enabled) {
    return;
  }

  var allowReplay = true;

  {
    // TODO: replaying capture phase events is currently broken
    // because we used to do it during top-level native bubble handlers
    // but now we use different bubble and capture handlers.
    // In eager mode, we attach capture listeners early, so we need
    // to filter them out until we fix the logic to handle them correctly.
    // This could've been outside the flag but I put it inside to reduce risk.
    allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
  }

  if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
    // If we already have a queue of discrete events, and this is another discrete
    // event, then we can't dispatch it regardless of its target, since they
    // need to dispatch in order.
    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
    domEventName, eventSystemFlags, targetContainer, nativeEvent);
    return;
  }

  var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

  if (blockedOn === null) {
    // We successfully dispatched this event.
    if (allowReplay) {
      clearIfContinuousEvent(domEventName, nativeEvent);
    }

    return;
  }

  if (allowReplay) {
    if (isReplayableDiscreteEvent(domEventName)) {
      // This this to be replayed later once the target is available.
      queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
      return;
    }

    if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
      return;
    } // We need to clear only if we didn't queue because
    // queueing is accummulative.


    clearIfContinuousEvent(domEventName, nativeEvent);
  } // This is not replayable so we'll invoke it but without a target,
  // in case the event system needs to trace it.


  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  // TODO: Warn if _enabled is false.
  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted === null) {
      // This tree has been unmounted already. Dispatch without a target.
      targetInst = null;
    } else {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // Queue the event to be replayed later. Abort dispatching since we
          // don't want this event dispatched twice through the event system.
          // TODO: If this is the first discrete event in the queue. Schedule an increased
          // priority for this boundary.
          return instance;
        } // This shouldn't happen, something went wrong but to avoid blocking
        // the whole system, dispatch the event without a target.
        // TODO: Warn.


        targetInst = null;
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          // If this happens during a replay something went wrong and it might block
          // the whole system.
          return getContainerFromFiber(nearestMounted);
        }

        targetInst = null;
      } else if (nearestMounted !== targetInst) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }
    }
  }

  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.

  return null;
}

function addEventBubbleListener(target, eventType, listener) {
  target.addEventListener(eventType, listener, false);
  return listener;
}
function addEventCaptureListener(target, eventType, listener) {
  target.addEventListener(eventType, listener, true);
  return listener;
}
function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
  target.addEventListener(eventType, listener, {
    capture: true,
    passive: passive
  });
  return listener;
}
function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
  target.addEventListener(eventType, listener, {
    passive: passive
  });
  return listener;
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var root = null;
var startText = null;
var fallbackText = null;
function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}
function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}
function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start;
  var startValue = startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;

  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}
function getText() {
  if ('value' in root) {
    return root.value;
  }

  return root.textContent;
}

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.


  if (charCode === 10) {
    charCode = 13;
  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.


  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
} // This is intentionally a factory so that we have different returned constructors.
// If we had a single constructor, it would be megamorphic and engines would deopt.


function createSyntheticEvent(Interface) {
  /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */
  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
    this._reactName = reactName;
    this._targetInst = targetInst;
    this.type = reactEventType;
    this.nativeEvent = nativeEvent;
    this.target = nativeEventTarget;
    this.currentTarget = null;

    for (var _propName in Interface) {
      if (!Interface.hasOwnProperty(_propName)) {
        continue;
      }

      var normalize = Interface[_propName];

      if (normalize) {
        this[_propName] = normalize(nativeEvent);
      } else {
        this[_propName] = nativeEvent[_propName];
      }
    }

    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

    if (defaultPrevented) {
      this.isDefaultPrevented = functionThatReturnsTrue;
    } else {
      this.isDefaultPrevented = functionThatReturnsFalse;
    }

    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _assign(SyntheticBaseEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;

      if (!event) {
        return;
      }

      if (event.preventDefault) {
        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
      } else if (typeof event.returnValue !== 'unknown') {
        event.returnValue = false;
      }

      this.isDefaultPrevented = functionThatReturnsTrue;
    },
    stopPropagation: function () {
      var event = this.nativeEvent;

      if (!event) {
        return;
      }

      if (event.stopPropagation) {
        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
      } else if (typeof event.cancelBubble !== 'unknown') {
        // The ChangeEventPlugin registers a "propertychange" event for
        // IE. This event does not support bubbling or cancelling, and
        // any references to cancelBubble throw "Member not found".  A
        // typeof check of "unknown" circumvents this issue (and is also
        // IE specific).
        event.cancelBubble = true;
      }

      this.isPropagationStopped = functionThatReturnsTrue;
    },

    /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */
    persist: function () {// Modern event system doesn't use pooling.
    },

    /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */
    isPersistent: functionThatReturnsTrue
  });

  return SyntheticBaseEvent;
}
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var EventInterface = {
  eventPhase: 0,
  bubbles: 0,
  cancelable: 0,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: 0,
  isTrusted: 0
};
var SyntheticEvent = createSyntheticEvent(EventInterface);

var UIEventInterface = _assign({}, EventInterface, {
  view: 0,
  detail: 0
});

var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
var lastMovementX;
var lastMovementY;
var lastMouseEvent;

function updateMouseMovementPolyfillState(event) {
  if (event !== lastMouseEvent) {
    if (lastMouseEvent && event.type === 'mousemove') {
      lastMovementX = event.screenX - lastMouseEvent.screenX;
      lastMovementY = event.screenY - lastMouseEvent.screenY;
    } else {
      lastMovementX = 0;
      lastMovementY = 0;
    }

    lastMouseEvent = event;
  }
}
/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var MouseEventInterface = _assign({}, UIEventInterface, {
  screenX: 0,
  screenY: 0,
  clientX: 0,
  clientY: 0,
  pageX: 0,
  pageY: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  getModifierState: getEventModifierState,
  button: 0,
  buttons: 0,
  relatedTarget: function (event) {
    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
    return event.relatedTarget;
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    updateMouseMovementPolyfillState(event);
    return lastMovementX;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    } // Don't need to call updateMouseMovementPolyfillState() here
    // because it's guaranteed to have already run when movementX
    // was copied.


    return lastMovementY;
  }
});

var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var DragEventInterface = _assign({}, MouseEventInterface, {
  dataTransfer: 0
});

var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var FocusEventInterface = _assign({}, UIEventInterface, {
  relatedTarget: 0
});

var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

var AnimationEventInterface = _assign({}, EventInterface, {
  animationName: 0,
  elapsedTime: 0,
  pseudoElement: 0
});

var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

var ClipboardEventInterface = _assign({}, EventInterface, {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

var CompositionEventInterface = _assign({}, EventInterface, {
  data: 0
});

var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
// Happens to share the same list for now.

var SyntheticInputEvent = SyntheticCompositionEvent;
/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};
/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

    if (key !== 'Unidentified') {
      return key;
    }
  } // Browser does not implement `key`, polyfill as much of it as we can.


  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.

    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  return '';
}
/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */


var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;

  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}
/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var KeyboardEventInterface = _assign({}, UIEventInterface, {
  key: getEventKey,
  code: 0,
  location: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  repeat: 0,
  locale: 0,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.
    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.
    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  }
});

var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */

var PointerEventInterface = _assign({}, MouseEventInterface, {
  pointerId: 0,
  width: 0,
  height: 0,
  pressure: 0,
  tangentialPressure: 0,
  tiltX: 0,
  tiltY: 0,
  twist: 0,
  pointerType: 0,
  isPrimary: 0
});

var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */

var TouchEventInterface = _assign({}, UIEventInterface, {
  touches: 0,
  targetTouches: 0,
  changedTouches: 0,
  altKey: 0,
  metaKey: 0,
  ctrlKey: 0,
  shiftKey: 0,
  getModifierState: getEventModifierState
});

var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */

var TransitionEventInterface = _assign({}, EventInterface, {
  propertyName: 0,
  elapsedTime: 0,
  pseudoElement: 0
});

var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var WheelEventInterface = _assign({}, MouseEventInterface, {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: 0,
  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: 0
});

var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

var START_KEYCODE = 229;
var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
var documentMode = null;

if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
} // Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.


var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.

var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

function registerEvents() {
  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
} // Track whether we've ever handled a keypress on the space key.


var hasSpaceKeypress = false;
/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}
/**
 * Translate native top level events into event types.
 */


function getCompositionEventType(domEventName) {
  switch (domEventName) {
    case 'compositionstart':
      return 'onCompositionStart';

    case 'compositionend':
      return 'onCompositionEnd';

    case 'compositionupdate':
      return 'onCompositionUpdate';
  }
}
/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */


function isFallbackCompositionStart(domEventName, nativeEvent) {
  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
}
/**
 * Does our fallback mode think that this event is the end of composition?
 */


function isFallbackCompositionEnd(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'keyup':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

    case 'keydown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;

    case 'keypress':
    case 'mousedown':
    case 'focusout':
      // Events are not possible without cancelling IME.
      return true;

    default:
      return false;
  }
}
/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */


function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;

  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }

  return null;
}
/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
} // Track the current IME composition status, if any.


var isComposing = false;
/**
 * @return {?object} A SyntheticCompositionEvent.
 */

function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(domEventName);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(domEventName, nativeEvent)) {
      eventType = 'onCompositionStart';
    }
  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
    eventType = 'onCompositionEnd';
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === 'onCompositionStart') {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === 'onCompositionEnd') {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

  if (listeners.length > 0) {
    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });

    if (fallbackData) {
      // Inject data generated from fallback path into the synthetic event.
      // This matches the property of native CompositionEventInterface.
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);

      if (customData !== null) {
        event.data = customData;
      }
    }
  }
}

function getNativeBeforeInputChars(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'compositionend':
      return getDataFromCustomEvent(nativeEvent);

    case 'keypress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;

      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'textInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.

      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}
/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */


function getFallbackBeforeInputChars(domEventName, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }

    return null;
  }

  switch (domEventName) {
    case 'paste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;

    case 'keypress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }

      return null;

    case 'compositionend':
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

    default:
      return null;
  }
}
/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */


function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(domEventName, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
  } // If no characters are being inserted, no BeforeInput event should
  // be fired.


  if (!chars) {
    return null;
  }

  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

  if (listeners.length > 0) {
    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
    event.data = chars;
  }
}
/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */


function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
}

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

function registerEvents$1() {
  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
}

function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

  if (listeners.length > 0) {
    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
  }
}
/**
 * For IE shims
 */


var activeElement = null;
var activeElementInst = null;
/**
 * SECTION: handle `change` event
 */

function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var dispatchQueue = [];
  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.

  batchedUpdates(runEventInBatch, dispatchQueue);
}

function runEventInBatch(dispatchQueue) {
  processDispatchQueue(dispatchQueue, 0);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance(targetInst);

  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(domEventName, targetInst) {
  if (domEventName === 'change') {
    return targetInst;
  }
}
/**
 * SECTION: handle `input` event
 */


var isInputEventSupported = false;

if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}
/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */


function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}
/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */


function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}
/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */


function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
  if (domEventName === 'focusin') {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (domEventName === 'focusout') {
    stopWatchingForValueChange();
  }
} // For IE8 and IE9.


function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}
/**
 * SECTION: handle `click` event
 */


function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(domEventName, targetInst) {
  if (domEventName === 'click') {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
  if (domEventName === 'input' || domEventName === 'change') {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}
/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */


function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
  var getTargetInstFunc, handleEventFunc;

  if (shouldUseChangeEvent(targetNode)) {
    getTargetInstFunc = getTargetInstForChangeEvent;
  } else if (isTextInputElement(targetNode)) {
    if (isInputEventSupported) {
      getTargetInstFunc = getTargetInstForInputOrChangeEvent;
    } else {
      getTargetInstFunc = getTargetInstForInputEventPolyfill;
      handleEventFunc = handleEventsForInputEventPolyfill;
    }
  } else if (shouldUseClickEvent(targetNode)) {
    getTargetInstFunc = getTargetInstForClickEvent;
  }

  if (getTargetInstFunc) {
    var inst = getTargetInstFunc(domEventName, targetInst);

    if (inst) {
      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
      return;
    }
  }

  if (handleEventFunc) {
    handleEventFunc(domEventName, targetNode, targetInst);
  } // When blurring, set the value attribute for number inputs


  if (domEventName === 'focusout') {
    handleControlledInputBlur(targetNode);
  }
}

function registerEvents$2() {
  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
}
/**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */


function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

  if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
    // If this is an over event with a target, we might have already dispatched
    // the event in the out event of the other target. If this is replayed,
    // then it's because we couldn't dispatch against this target previously
    // so we have to do it now instead.
    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

    if (related) {
      // If the related node is managed by React, we can assume that we have
      // already dispatched the corresponding events during its mouseout.
      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
        return;
      }
    }
  }

  if (!isOutEvent && !isOverEvent) {
    // Must not be a mouse or pointer in or out - ignoring.
    return;
  }

  var win; // TODO: why is this nullable in the types but we read from it?

  if (nativeEventTarget.window === nativeEventTarget) {
    // `nativeEventTarget` is probably a window object.
    win = nativeEventTarget;
  } else {
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    var doc = nativeEventTarget.ownerDocument;

    if (doc) {
      win = doc.defaultView || doc.parentWindow;
    } else {
      win = window;
    }
  }

  var from;
  var to;

  if (isOutEvent) {
    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

    from = targetInst;
    to = _related ? getClosestInstanceFromNode(_related) : null;

    if (to !== null) {
      var nearestMounted = getNearestMountedFiber(to);

      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
        to = null;
      }
    }
  } else {
    // Moving to a node from outside the window.
    from = null;
    to = targetInst;
  }

  if (from === to) {
    // Nothing pertains to our managed components.
    return;
  }

  var SyntheticEventCtor = SyntheticMouseEvent;
  var leaveEventType = 'onMouseLeave';
  var enterEventType = 'onMouseEnter';
  var eventTypePrefix = 'mouse';

  if (domEventName === 'pointerout' || domEventName === 'pointerover') {
    SyntheticEventCtor = SyntheticPointerEvent;
    leaveEventType = 'onPointerLeave';
    enterEventType = 'onPointerEnter';
    eventTypePrefix = 'pointer';
  }

  var fromNode = from == null ? win : getNodeFromInstance(from);
  var toNode = to == null ? win : getNodeFromInstance(to);
  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
  leave.target = fromNode;
  leave.relatedTarget = toNode;
  var enter = null; // We should only process this nativeEvent if we are processing
  // the first ancestor. Next time, we will ignore the event.

  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (nativeTargetInst === targetInst) {
    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
    enterEvent.target = toNode;
    enterEvent.relatedTarget = fromNode;
    enter = enterEvent;
  }

  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
}

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var objectIs = typeof Object.is === 'function' ? Object.is : is;

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (objectIs(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }

  return node;
}
/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */


function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }

    node = node.parentNode;
  }
}
/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */


function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;
  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}
/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }

      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      } // Moving from `node` to its first child `next`.


      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }

      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }

      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }

      if ((next = node.nextSibling) !== null) {
        break;
      }

      node = parentNode;
      parentNode = node.parentNode;
    } // Moving from `node` to its next sibling `next`.


    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}
/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)

  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.

  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }

    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();

  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }

    element = getActiveElement(win.document);
  }

  return element;
}
/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */


function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}
function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
  };
}
/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;

  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    } // Focusing a node can change the scroll position, which is undesirable


    var ancestors = [];
    var ancestor = priorFocusedElem;

    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}
/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

function getSelection(input) {
  var selection;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || {
    start: 0,
    end: 0
  };
}
/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

function setSelection(input, offsets) {
  var start = offsets.start;
  var end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

function registerEvents$3() {
  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
}

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;
/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */

function getSelection$1(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}
/**
 * Get document associated with the event target.
 */


function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}
/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */


function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return;
  } // Only fire when selection has actually changed.


  var currentSelection = getSelection$1(activeElement$1);

  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;
    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

    if (listeners.length > 0) {
      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
      dispatchQueue.push({
        event: event,
        listeners: listeners
      });
      event.target = activeElement$1;
    }
  }
}
/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */


function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {

  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

  switch (domEventName) {
    // Track the input node that has focus.
    case 'focusin':
      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
        activeElement$1 = targetNode;
        activeElementInst$1 = targetInst;
        lastSelection = null;
      }

      break;

    case 'focusout':
      activeElement$1 = null;
      activeElementInst$1 = null;
      lastSelection = null;
      break;
    // Don't fire the event while the user is dragging. This matches the
    // semantics of the native select event.

    case 'mousedown':
      mouseDown = true;
      break;

    case 'contextmenu':
    case 'mouseup':
    case 'dragend':
      mouseDown = false;
      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      break;
    // Chrome and IE fire non-standard event when selection is changed (and
    // sometimes when it hasn't). IE's event fires out of order with respect
    // to key and input events on deletion, so we discard it.
    //
    // Firefox doesn't support selectionchange, so check selection status
    // after each key entry. The selection changes after keydown and before
    // keyup, but we check on keydown as well in the case of holding down a
    // key, when multiple keydown events are fired but only one keyup is.
    // This is also our approach for IE handling, for the reason above.

    case 'selectionchange':
      if (skipSelectionChangeEvent) {
        break;
      }

    // falls through

    case 'keydown':
    case 'keyup':
      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
  }
}

function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var reactName = topLevelEventsToReactNames.get(domEventName);

  if (reactName === undefined) {
    return;
  }

  var SyntheticEventCtor = SyntheticEvent;
  var reactEventType = domEventName;

  switch (domEventName) {
    case 'keypress':
      // Firefox creates a keypress event for function keys too. This removes
      // the unwanted keypress events. Enter is however both printable and
      // non-printable. One would expect Tab to be as well (but it isn't).
      if (getEventCharCode(nativeEvent) === 0) {
        return;
      }

    /* falls through */

    case 'keydown':
    case 'keyup':
      SyntheticEventCtor = SyntheticKeyboardEvent;
      break;

    case 'focusin':
      reactEventType = 'focus';
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'focusout':
      reactEventType = 'blur';
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'beforeblur':
    case 'afterblur':
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'click':
      // Firefox creates a click event on right mouse clicks. This removes the
      // unwanted click events.
      if (nativeEvent.button === 2) {
        return;
      }

    /* falls through */

    case 'auxclick':
    case 'dblclick':
    case 'mousedown':
    case 'mousemove':
    case 'mouseup': // TODO: Disabled elements should not respond to mouse events

    /* falls through */

    case 'mouseout':
    case 'mouseover':
    case 'contextmenu':
      SyntheticEventCtor = SyntheticMouseEvent;
      break;

    case 'drag':
    case 'dragend':
    case 'dragenter':
    case 'dragexit':
    case 'dragleave':
    case 'dragover':
    case 'dragstart':
    case 'drop':
      SyntheticEventCtor = SyntheticDragEvent;
      break;

    case 'touchcancel':
    case 'touchend':
    case 'touchmove':
    case 'touchstart':
      SyntheticEventCtor = SyntheticTouchEvent;
      break;

    case ANIMATION_END:
    case ANIMATION_ITERATION:
    case ANIMATION_START:
      SyntheticEventCtor = SyntheticAnimationEvent;
      break;

    case TRANSITION_END:
      SyntheticEventCtor = SyntheticTransitionEvent;
      break;

    case 'scroll':
      SyntheticEventCtor = SyntheticUIEvent;
      break;

    case 'wheel':
      SyntheticEventCtor = SyntheticWheelEvent;
      break;

    case 'copy':
    case 'cut':
    case 'paste':
      SyntheticEventCtor = SyntheticClipboardEvent;
      break;

    case 'gotpointercapture':
    case 'lostpointercapture':
    case 'pointercancel':
    case 'pointerdown':
    case 'pointermove':
    case 'pointerout':
    case 'pointerover':
    case 'pointerup':
      SyntheticEventCtor = SyntheticPointerEvent;
      break;
  }

  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

  {
    // Some events don't bubble in the browser.
    // In the past, React has always bubbled them, but this can be surprising.
    // We're going to try aligning closer to the browser behavior by not bubbling
    // them in React either. We'll start by not bubbling onScroll, and then expand.
    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
    // nonDelegatedEvents list in DOMPluginEventSystem.
    // Then we can remove this special list.
    // This is a breaking change that can wait until React 18.
    domEventName === 'scroll';

    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

    if (_listeners.length > 0) {
      // Intentionally create event lazily.
      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

      dispatchQueue.push({
        event: _event,
        listeners: _listeners
      });
    }
  }
}

// TODO: remove top-level side effect.
registerSimpleEvents();
registerEvents$2();
registerEvents$1();
registerEvents$3();
registerEvents();

function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  // TODO: we should remove the concept of a "SimpleEventPlugin".
  // This is the basic functionality of the event system. All
  // the other plugins are essentially polyfills. So the plugin
  // should probably be inlined somewhere and have its logic
  // be core the to event system. This would potentially allow
  // us to ship builds of React without the polyfilled plugins below.
  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
  // event's native "bubble" phase, which means that we're
  // not in the capture phase. That's because we emulate
  // the capture phase here still. This is a trade-off,
  // because in an ideal world we would not emulate and use
  // the phases properly, like we do with the SimpleEvent
  // plugin. However, the plugins below either expect
  // emulation (EnterLeave) or use state localized to that
  // plugin (BeforeInput, Change, Select). The state in
  // these modules complicates things, as you'll essentially
  // get the case where the capture phase event might change
  // state, only for the following bubble event to come in
  // later and not trigger anything as the state now
  // invalidates the heuristics of the event plugin. We
  // could alter all these plugins to work in such ways, but
  // that might cause other unknown side-effects that we
  // can't forsee right now.

  if (shouldProcessPolyfillPlugins) {
    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
  }
} // List of events that need to be individually attached to media elements.


var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
// set them on the actual target element itself. This is primarily
// because these events do not consistently bubble in the DOM.

var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

function executeDispatch(event, listener, currentTarget) {
  var type = event.type || 'unknown-event';
  event.currentTarget = currentTarget;
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
  var previousInstance;

  if (inCapturePhase) {
    for (var i = dispatchListeners.length - 1; i >= 0; i--) {
      var _dispatchListeners$i = dispatchListeners[i],
          instance = _dispatchListeners$i.instance,
          currentTarget = _dispatchListeners$i.currentTarget,
          listener = _dispatchListeners$i.listener;

      if (instance !== previousInstance && event.isPropagationStopped()) {
        return;
      }

      executeDispatch(event, listener, currentTarget);
      previousInstance = instance;
    }
  } else {
    for (var _i = 0; _i < dispatchListeners.length; _i++) {
      var _dispatchListeners$_i = dispatchListeners[_i],
          _instance = _dispatchListeners$_i.instance,
          _currentTarget = _dispatchListeners$_i.currentTarget,
          _listener = _dispatchListeners$_i.listener;

      if (_instance !== previousInstance && event.isPropagationStopped()) {
        return;
      }

      executeDispatch(event, _listener, _currentTarget);
      previousInstance = _instance;
    }
  }
}

function processDispatchQueue(dispatchQueue, eventSystemFlags) {
  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

  for (var i = 0; i < dispatchQueue.length; i++) {
    var _dispatchQueue$i = dispatchQueue[i],
        event = _dispatchQueue$i.event,
        listeners = _dispatchQueue$i.listeners;
    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
  } // This would be a good time to rethrow if any of the event handlers threw.


  rethrowCaughtError();
}

function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
  var nativeEventTarget = getEventTarget(nativeEvent);
  var dispatchQueue = [];
  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  processDispatchQueue(dispatchQueue, eventSystemFlags);
}

function listenToNonDelegatedEvent(domEventName, targetElement) {
  var isCapturePhaseListener = false;
  var listenerSet = getEventListenerSet(targetElement);
  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

  if (!listenerSet.has(listenerSetKey)) {
    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
    listenerSet.add(listenerSetKey);
  }
}
var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
function listenToAllSupportedEvents(rootContainerElement) {
  {
    if (rootContainerElement[listeningMarker]) {
      // Performance optimization: don't iterate through events
      // for the same portal container or root node more than once.
      // TODO: once we remove the flag, we may be able to also
      // remove some of the bookkeeping maps used for laziness.
      return;
    }

    rootContainerElement[listeningMarker] = true;
    allNativeEvents.forEach(function (domEventName) {
      if (!nonDelegatedEvents.has(domEventName)) {
        listenToNativeEvent(domEventName, false, rootContainerElement, null);
      }

      listenToNativeEvent(domEventName, true, rootContainerElement, null);
    });
  }
}
function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
  var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var target = rootContainerElement; // selectionchange needs to be attached to the document
  // otherwise it won't capture incoming events that are only
  // triggered on the document directly.

  if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) {
    target = rootContainerElement.ownerDocument;
  } // If the event can be delegated (or is capture phase), we can
  // register it to the root container. Otherwise, we should
  // register the event to the target element and mark it as
  // a non-delegated event.


  if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
    // For all non-delegated events, apart from scroll, we attach
    // their event listeners to the respective elements that their
    // events fire on. That means we can skip this step, as event
    // listener has already been added previously. However, we
    // special case the scroll event because the reality is that any
    // element can scroll.
    // TODO: ideally, we'd eventually apply the same logic to all
    // events from the nonDelegatedEvents list. Then we can remove
    // this special case and use the same logic for all events.
    if (domEventName !== 'scroll') {
      return;
    }

    eventSystemFlags |= IS_NON_DELEGATED;
    target = targetElement;
  }

  var listenerSet = getEventListenerSet(target);
  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
  // we need to trap an event listener onto the target.

  if (!listenerSet.has(listenerSetKey)) {
    if (isCapturePhaseListener) {
      eventSystemFlags |= IS_CAPTURE_PHASE;
    }

    addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    listenerSet.add(listenerSetKey);
  }
}

function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
  // active and not passive.

  var isPassiveListener = undefined;

  if (passiveBrowserEventsSupported) {
    // Browsers introduced an intervention, making these events
    // passive by default on document. React doesn't bind them
    // to document anymore, but changing this now would undo
    // the performance wins from the change. So we emulate
    // the existing behavior manually on the roots now.
    // https://github.com/facebook/react/issues/19651
    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
      isPassiveListener = true;
    }
  }

  targetContainer =  targetContainer;
  var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we


  if (isCapturePhaseListener) {
    if (isPassiveListener !== undefined) {
      unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
    } else {
      unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
    }
  } else {
    if (isPassiveListener !== undefined) {
      unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
    } else {
      unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
  }
}

function isMatchingRootContainer(grandContainer, targetContainer) {
  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
}

function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
  var ancestorInst = targetInst;

  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

    if (targetInst !== null) {
      // The below logic attempts to work out if we need to change
      // the target fiber to a different ancestor. We had similar logic
      // in the legacy event system, except the big difference between
      // systems is that the modern event system now has an event listener
      // attached to each React Root and React Portal Root. Together,
      // the DOM nodes representing these roots are the "rootContainer".
      // To figure out which ancestor instance we should use, we traverse
      // up the fiber tree from the target instance and attempt to find
      // root boundaries that match that of our current "rootContainer".
      // If we find that "rootContainer", we find the parent fiber
      // sub-tree for that root and make that our ancestor instance.
      var node = targetInst;

      mainLoop: while (true) {
        if (node === null) {
          return;
        }

        var nodeTag = node.tag;

        if (nodeTag === HostRoot || nodeTag === HostPortal) {
          var container = node.stateNode.containerInfo;

          if (isMatchingRootContainer(container, targetContainerNode)) {
            break;
          }

          if (nodeTag === HostPortal) {
            // The target is a portal, but it's not the rootContainer we're looking for.
            // Normally portals handle their own events all the way down to the root.
            // So we should be able to stop now. However, we don't know if this portal
            // was part of *our* root.
            var grandNode = node.return;

            while (grandNode !== null) {
              var grandTag = grandNode.tag;

              if (grandTag === HostRoot || grandTag === HostPortal) {
                var grandContainer = grandNode.stateNode.containerInfo;

                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                  // This is the rootContainer we're looking for and we found it as
                  // a parent of the Portal. That means we can ignore it because the
                  // Portal will bubble through to us.
                  return;
                }
              }

              grandNode = grandNode.return;
            }
          } // Now we need to find it's corresponding host fiber in the other
          // tree. To do this we can use getClosestInstanceFromNode, but we
          // need to validate that the fiber is a host instance, otherwise
          // we need to traverse up through the DOM till we find the correct
          // node that is from the other tree.


          while (container !== null) {
            var parentNode = getClosestInstanceFromNode(container);

            if (parentNode === null) {
              return;
            }

            var parentTag = parentNode.tag;

            if (parentTag === HostComponent || parentTag === HostText) {
              node = ancestorInst = parentNode;
              continue mainLoop;
            }

            container = container.parentNode;
          }
        }

        node = node.return;
      }
    }
  }

  batchedEventUpdates(function () {
    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
  });
}

function createDispatchListener(instance, listener, currentTarget) {
  return {
    instance: instance,
    listener: listener,
    currentTarget: currentTarget
  };
}

function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
  var captureName = reactName !== null ? reactName + 'Capture' : null;
  var reactEventName = inCapturePhase ? captureName : reactName;
  var listeners = [];
  var instance = targetFiber;
  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

  while (instance !== null) {
    var _instance2 = instance,
        stateNode = _instance2.stateNode,
        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

    if (tag === HostComponent && stateNode !== null) {
      lastHostComponent = stateNode; // createEventHandle listeners


      if (reactEventName !== null) {
        var listener = getListener(instance, reactEventName);

        if (listener != null) {
          listeners.push(createDispatchListener(instance, listener, lastHostComponent));
        }
      }
    } // If we are only accumulating events for the target, then we don't
    // continue to propagate through the React fiber tree to find other
    // listeners.


    if (accumulateTargetOnly) {
      break;
    }

    instance = instance.return;
  }

  return listeners;
} // We should only use this function for:
// - BeforeInputEventPlugin
// - ChangeEventPlugin
// - SelectEventPlugin
// This is because we only process these plugins
// in the bubble phase, so we need to accumulate two
// phase event listeners (via emulation).

function accumulateTwoPhaseListeners(targetFiber, reactName) {
  var captureName = reactName + 'Capture';
  var listeners = [];
  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

  while (instance !== null) {
    var _instance3 = instance,
        stateNode = _instance3.stateNode,
        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

    if (tag === HostComponent && stateNode !== null) {
      var currentTarget = stateNode;
      var captureListener = getListener(instance, captureName);

      if (captureListener != null) {
        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
      }

      var bubbleListener = getListener(instance, reactName);

      if (bubbleListener != null) {
        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
      }
    }

    instance = instance.return;
  }

  return listeners;
}

function getParent(inst) {
  if (inst === null) {
    return null;
  }

  do {
    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);

  if (inst) {
    return inst;
  }

  return null;
}
/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */


function getLowestCommonAncestor(instA, instB) {
  var nodeA = instA;
  var nodeB = instB;
  var depthA = 0;

  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }

  var depthB = 0;

  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
    depthB++;
  } // If A is deeper, crawl up.


  while (depthA - depthB > 0) {
    nodeA = getParent(nodeA);
    depthA--;
  } // If B is deeper, crawl up.


  while (depthB - depthA > 0) {
    nodeB = getParent(nodeB);
    depthB--;
  } // Walk in lockstep until we find a match.


  var depth = depthA;

  while (depth--) {
    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
      return nodeA;
    }

    nodeA = getParent(nodeA);
    nodeB = getParent(nodeB);
  }

  return null;
}

function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
  var registrationName = event._reactName;
  var listeners = [];
  var instance = target;

  while (instance !== null) {
    if (instance === common) {
      break;
    }

    var _instance4 = instance,
        alternate = _instance4.alternate,
        stateNode = _instance4.stateNode,
        tag = _instance4.tag;

    if (alternate !== null && alternate === common) {
      break;
    }

    if (tag === HostComponent && stateNode !== null) {
      var currentTarget = stateNode;

      if (inCapturePhase) {
        var captureListener = getListener(instance, registrationName);

        if (captureListener != null) {
          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
        }
      } else if (!inCapturePhase) {
        var bubbleListener = getListener(instance, registrationName);

        if (bubbleListener != null) {
          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
        }
      }
    }

    instance = instance.return;
  }

  if (listeners.length !== 0) {
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
  }
} // We should only use this function for:
// - EnterLeaveEventPlugin
// This is because we only process this plugin
// in the bubble phase, so we need to accumulate two
// phase event listeners.


function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;

  if (from !== null) {
    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
  }

  if (to !== null && enterEvent !== null) {
    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
  }
}
function getListenerSetKey(domEventName, capture) {
  return domEventName + "__" + (capture ? 'capture' : 'bubble');
}

var didWarnInvalidHydration = false;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML$1 = '__html';
var HTML_NAMESPACE$1 = Namespaces.html;
var warnedUnknownTags;
var suppressHydrationWarning;
var validatePropertiesInDevelopment;
var warnForTextDifference;
var warnForPropDifference;
var warnForExtraAttributes;
var warnForInvalidEventListener;
var canDiffStyleForHydrationWarning;
var normalizeMarkupForTextOrAttribute;
var normalizeHTML;

{
  warnedUnknownTags = {
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props, {
      registrationNameDependencies: registrationNameDependencies,
      possibleRegistrationNames: possibleRegistrationNames
    });
  }; // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807


  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.

  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

    if (normalizedServerText === normalizedClientText) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

    if (normalizedServerValue === normalizedClientValue) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });

    error('Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  }; // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.


  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = nextProps[propKey];

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];

    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.

  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;

  if (namespaceURI === HTML_NAMESPACE$1) {
    namespaceURI = getIntrinsicNamespace(type);
  }

  if (namespaceURI === HTML_NAMESPACE$1) {
    {
      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.

      if (!isCustomComponentTag && type !== type.toLowerCase()) {
        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
      }
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');

      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.

      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, {
        is: props.is
      });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239

      if (type === 'select') {
        var node = domElement;

        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE$1) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;

        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}
function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}
function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);

  {
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  var props;

  switch (tag) {
    case 'dialog':
      listenToNonDelegatedEvent('cancel', domElement);
      listenToNonDelegatedEvent('close', domElement);
      props = rawProps;
      break;

    case 'iframe':
    case 'object':
    case 'embed':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the load event.
      listenToNonDelegatedEvent('load', domElement);
      props = rawProps;
      break;

    case 'video':
    case 'audio':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for all the media events.
      for (var i = 0; i < mediaEventTypes.length; i++) {
        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
      }

      props = rawProps;
      break;

    case 'source':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the error event.
      listenToNonDelegatedEvent('error', domElement);
      props = rawProps;
      break;

    case 'img':
    case 'image':
    case 'link':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for error and load events.
      listenToNonDelegatedEvent('error', domElement);
      listenToNonDelegatedEvent('load', domElement);
      props = rawProps;
      break;

    case 'details':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the toggle event.
      listenToNonDelegatedEvent('toggle', domElement);
      props = rawProps;
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;

    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;

    default:
      props = rawProps;
  }

  assertValidProps(tag, props);
  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;

    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;

    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }
} // Calculate the diff between the two objects.

function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;
  var lastProps;
  var nextProps;

  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;

    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;

      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  assertValidProps(tag, nextProps);
  var propKey;
  var styleName;
  var styleUpdates = null;

  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }

    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];

      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }

          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the allowed property list in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }

  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }

      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        } // Update styles that changed since `lastProp`.


        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }

          updatePayload.push(propKey, styleUpdates);
        }

        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, nextHtml);
        }
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string' || typeof nextProp === 'number') {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }

      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
      // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
      // In this case, call the opaque object's toString function which generates a new client
      // ID so client and server IDs match and throws to rerender.
      nextProp.toString();
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the allowed property list during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }

  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
    }

    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }

  return updatePayload;
} // Apply the diff.

function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.

  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;

    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;

    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();

    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }

    return possibleStandardNames[lowerCasedName] || null;
  }
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag;
  var extraAttributeNames;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  switch (tag) {
    case 'dialog':
      listenToNonDelegatedEvent('cancel', domElement);
      listenToNonDelegatedEvent('close', domElement);
      break;

    case 'iframe':
    case 'object':
    case 'embed':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the load event.
      listenToNonDelegatedEvent('load', domElement);
      break;

    case 'video':
    case 'audio':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for all the media events.
      for (var i = 0; i < mediaEventTypes.length; i++) {
        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
      }

      break;

    case 'source':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the error event.
      listenToNonDelegatedEvent('error', domElement);
      break;

    case 'img':
    case 'image':
    case 'link':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for error and load events.
      listenToNonDelegatedEvent('error', domElement);
      listenToNonDelegatedEvent('load', domElement);
      break;

    case 'details':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the toggle event.
      listenToNonDelegatedEvent('toggle', domElement);
      break;

    case 'input':
      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;

    case 'option':
      validateProps(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;

    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();

      switch (name) {
        // Built-in SSR attribute is allowed
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.

        case 'value':
          break;

        case 'checked':
          break;

        case 'selected':
          break;

        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;

  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = rawProps[propKey];

    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }
    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);

      if (suppressHydrationWarning) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

        if (nextHtml != null) {
          var expectedHTML = normalizeHTML(domElement, nextHtml);

          if (expectedHTML !== serverHTML) {
            warnForPropDifference(propKey, serverHTML, expectedHTML);
          }
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');

          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;

        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;

          if (ownNamespace === HTML_NAMESPACE$1) {
            ownNamespace = getIntrinsicNamespace(tag);
          }

          if (ownNamespace === HTML_NAMESPACE$1) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);

            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

              extraAttributeNames.delete(standardName);
            } // $FlowFixMe - Should be inferred as not undefined.


            extraAttributeNames.delete(propKey);
          }

          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;

    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  return updatePayload;
}
function diffHydratedText(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}
function warnForUnmatchedText(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}
function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}
function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }

    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}
function restoreControlledState$3(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;

    case 'textarea':
      restoreControlledState$2(domElement, props);
      return;

    case 'select':
      restoreControlledState$1(domElement, props);
      return;
  }
}

var validateDOMNesting = function () {};

var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.
  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  var emptyAncestorInfo = {
    current: null,
    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,
    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

    var info = {
      tag: tag
    };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    } // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };
  /**
   * Returns whether
   */


  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';

      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but

      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

      case 'html':
        return tag === 'head' || tag === 'body' || tag === 'frameset';

      case 'frameset':
        return tag === 'frame';

      case '#document':
        return tag === 'html';
    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frameset':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };
  /**
   * Returns whether
   */


  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn$1 = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      if (childTag != null) {
        error('validateDOMNesting: when childText is passed, childTag should be null');
      }

      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;

    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

    if (didWarn$1[warnKey]) {
      return;
    }

    didWarn$1[warnKey] = true;
    var tagDisplayName = childTag;
    var whitespaceInfo = '';

    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';

      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
      }

      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
    } else {
      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
    }
  };
}

var SUPPRESS_HYDRATION_WARNING$1;

{
  SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
}

var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';
var SUSPENSE_PENDING_START_DATA = '$?';
var SUSPENSE_FALLBACK_START_DATA = '$!';
var STYLE$1 = 'style';
var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }

  return false;
}
function getRootHostContext(rootContainerInstance) {
  var type;
  var namespace;
  var nodeType = rootContainerInstance.nodeType;

  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }

    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }

  {
    var validatedTag = type.toLowerCase();
    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getPublicInstance(instance) {
  return instance;
}
function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  var activeInstance = null;

  setEnabled(false);
  return activeInstance;
}
function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  setEnabled(eventsEnabled);
  eventsEnabled = null;
  selectionInformation = null;
}
function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace;

  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }

    parentNamespace = hostContextDev.namespace;
  }

  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}
function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}
function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;

    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }

  return diffProperties(domElement, type, oldProps, newProps);
}
function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }

  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.

var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1; // -------------------
function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}
function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}
function resetTextContent(domElement) {
  setTextContent(domElement, '');
}
function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}
function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function appendChildToContainer(container, child) {
  var parentNode;

  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  } // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918


  var reactRootContainer = container._reactRootContainer;

  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}
function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}
function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}

function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}
function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}
function hideInstance(instance) {
  // TODO: Does this work for all element types? What about MathML? Should we
  // pass host context to this method?
  instance = instance;
  var style = instance.style;

  if (typeof style.setProperty === 'function') {
    style.setProperty('display', 'none', 'important');
  } else {
    style.display = 'none';
  }
}
function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}
function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE$1];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}
function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
}
function clearContainer(container) {
  if (container.nodeType === ELEMENT_NODE) {
    container.textContent = '';
  } else if (container.nodeType === DOCUMENT_NODE) {
    var body = container.body;

    if (body != null) {
      body.textContent = '';
    }
  }
} // -------------------
function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  } // This has now been refined to an element node.


  return instance;
}
function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a text node.


  return instance;
}
function isSuspenseInstancePending(instance) {
  return instance.data === SUSPENSE_PENDING_START_DATA;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === SUSPENSE_FALLBACK_START_DATA;
}

function getNextHydratable(node) {
  // Skip non-hydratable nodes.
  for (; node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;

    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
      break;
    }
  }

  return node;
}

function getNextHydratableSibling(instance) {
  return getNextHydratable(instance.nextSibling);
}
function getFirstHydratableChild(parentInstance) {
  return getNextHydratable(parentInstance.firstChild);
}
function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
  // get attached.

  updateFiberProps(instance, props);
  var parentNamespace;

  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }

  return diffHydratedProperties(instance, type, props, parentNamespace);
}
function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}
function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        depth++;
      }
    }

    node = node.nextSibling;
  } // TODO: Warn, we didn't find the end comment boundary.


  return null;
} // Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.

function getParentSuspenseInstance(targetInstance) {
  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        if (depth === 0) {
          return node;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_END_DATA) {
        depth++;
      }
    }

    node = node.previousSibling;
  }

  return null;
}
function commitHydratedContainer(container) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(container);
}
function commitHydratedSuspenseInstance(suspenseInstance) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(suspenseInstance);
}
function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}
function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}
function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type);
  }
}
function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}
function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedElement(parentInstance, type);
  }
}
function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}
function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
}
var clientId = 0;
function makeClientIdInDEV(warnOnAccessInDEV) {
  var id = 'r:' + (clientId++).toString(36);
  return {
    toString: function () {
      warnOnAccessInDEV();
      return id;
    },
    valueOf: function () {
      warnOnAccessInDEV();
      return id;
    }
  };
}
function isOpaqueHydratingObject(value) {
  return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
}
function makeOpaqueHydratingObject(attemptToReadValue) {
  return {
    $$typeof: REACT_OPAQUE_ID_TYPE,
    toString: attemptToReadValue,
    valueOf: attemptToReadValue
  };
}
function preparePortalMount(portalInstance) {
  {
    listenToAllSupportedEvents(portalInstance);
  }
}

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactFiber$' + randomKey;
var internalPropsKey = '__reactProps$' + randomKey;
var internalContainerInstanceKey = '__reactContainer$' + randomKey;
var internalEventHandlersKey = '__reactEvents$' + randomKey;
function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}
function markContainerAsRoot(hostRoot, node) {
  node[internalContainerInstanceKey] = hostRoot;
}
function unmarkContainerAsRoot(node) {
  node[internalContainerInstanceKey] = null;
}
function isContainerMarkedAsRoot(node) {
  return !!node[internalContainerInstanceKey];
} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you will not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.

function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];

  if (targetInst) {
    // Don't return HostRoot or SuspenseComponent here.
    return targetInst;
  } // If the direct event target isn't a React owned DOM node, we need to look
  // to see if one of its parents is a React owned DOM node.


  var parentNode = targetNode.parentNode;

  while (parentNode) {
    // We'll check if this is a container root that could include
    // React nodes in the future. We need to check this first because
    // if we're a child of a dehydrated container, we need to first
    // find that inner container before moving on to finding the parent
    // instance. Note that we don't check this field on  the targetNode
    // itself because the fibers are conceptually between the container
    // node and the first child. It isn't surrounding the container node.
    // If it's not a container, we check if it's an instance.
    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

    if (targetInst) {
      // Since this wasn't the direct target of the event, we might have
      // stepped past dehydrated DOM nodes to get here. However they could
      // also have been non-React nodes. We need to answer which one.
      // If we the instance doesn't have any children, then there can't be
      // a nested suspense boundary within it. So we can use this as a fast
      // bailout. Most of the time, when people add non-React children to
      // the tree, it is using a ref to a child-less DOM node.
      // Normally we'd only need to check one of the fibers because if it
      // has ever gone from having children to deleting them or vice versa
      // it would have deleted the dehydrated boundary nested inside already.
      // However, since the HostRoot starts out with an alternate it might
      // have one on the alternate so we need to check in case this was a
      // root.
      var alternate = targetInst.alternate;

      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
        // Next we need to figure out if the node that skipped past is
        // nested within a dehydrated boundary and if so, which one.
        var suspenseInstance = getParentSuspenseInstance(targetNode);

        while (suspenseInstance !== null) {
          // We found a suspense instance. That means that we haven't
          // hydrated it yet. Even though we leave the comments in the
          // DOM after hydrating, and there are boundaries in the DOM
          // that could already be hydrated, we wouldn't have found them
          // through this pass since if the target is hydrated it would
          // have had an internalInstanceKey on it.
          // Let's get the fiber associated with the SuspenseComponent
          // as the deepest instance.
          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

          if (targetSuspenseInst) {
            return targetSuspenseInst;
          } // If we don't find a Fiber on the comment, it might be because
          // we haven't gotten to hydrate it yet. There might still be a
          // parent boundary that hasn't above this one so we need to find
          // the outer most that is known.


          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
          // host component also hasn't hydrated yet. We can return it
          // below since it will bail out on the isMounted check later.
        }
      }

      return targetInst;
    }

    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }

  return null;
}
/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

function getInstanceFromNode(node) {
  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
      return inst;
    } else {
      return null;
    }
  }

  return null;
}
/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

function getNodeFromInstance(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  } // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.


  {
    {
      throw Error( "getNodeFromInstance: Invalid argument." );
    }
  }
}
function getFiberCurrentPropsFromNode(node) {
  return node[internalPropsKey] || null;
}
function updateFiberProps(node, props) {
  node[internalPropsKey] = props;
}
function getEventListenerSet(node) {
  var elementListenerSet = node[internalEventHandlersKey];

  if (elementListenerSet === undefined) {
    elementListenerSet = node[internalEventHandlersKey] = new Set();
  }

  return elementListenerSet;
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      error('Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      error('Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  {
    if (!(contextStackCursor.current === emptyContextObject)) {
      {
        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentName(type) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;

          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext = instance.getChildContext();

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        {
          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
        }
      }
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name);
    }

    return _assign({}, parentContext, childContext);
  }
}

function pushContextProvider(workInProgress) {
  {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  {
    var instance = workInProgress.stateNode;

    if (!instance) {
      {
        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
      {
        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    {
      {
        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

var LegacyRoot = 0;
var BlockingRoot = 1;
var ConcurrentRoot = 2;

var rendererID = null;
var injectedHook = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    injectedHook = hook;
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      error('React instrumentation encountered an error: %s.', err);
    }
  } // DevTools exists


  return true;
}
function onScheduleRoot(root, children) {
  {
    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
      try {
        injectedHook.onScheduleFiberRoot(rendererID, root, children);
      } catch (err) {
        if ( !hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onCommitRoot(root, priorityLevel) {
  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
    try {
      var didError = (root.current.flags & DidCapture) === DidCapture;

      if (enableProfilerTimer) {
        injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
      } else {
        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
      }
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onCommitUnmount(fiber) {
  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
    try {
      injectedHook.onCommitFiberUnmount(rendererID, fiber);
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}

var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
    Scheduler_now$1 = Scheduler.unstable_now,
    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

{
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
    }
  }
}

var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority$1 = 99;
var UserBlockingPriority$2 = 98;
var NormalPriority$1 = 97;
var LowPriority$1 = 96;
var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority$1 = 90;
var shouldYield = Scheduler_shouldYield;
var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
var syncQueue = null;
var immediateQueueCallbackNode = null;
var isFlushingSyncQueue = false;
var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
// This will be the case for modern browsers that support `performance.now`. In
// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
// timestamp. In that case, subtract the module initialization time to simulate
// the behavior of performance.now and keep our times small enough to fit
// within 32 bits.
// TODO: Consider lifting this into Scheduler.

var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
  return Scheduler_now$1() - initialTimeMs$1;
};
function getCurrentPriorityLevel() {
  switch (Scheduler_getCurrentPriorityLevel()) {
    case Scheduler_ImmediatePriority:
      return ImmediatePriority$1;

    case Scheduler_UserBlockingPriority:
      return UserBlockingPriority$2;

    case Scheduler_NormalPriority:
      return NormalPriority$1;

    case Scheduler_LowPriority:
      return LowPriority$1;

    case Scheduler_IdlePriority:
      return IdlePriority$1;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function reactPriorityToSchedulerPriority(reactPriorityLevel) {
  switch (reactPriorityLevel) {
    case ImmediatePriority$1:
      return Scheduler_ImmediatePriority;

    case UserBlockingPriority$2:
      return Scheduler_UserBlockingPriority;

    case NormalPriority$1:
      return Scheduler_NormalPriority;

    case LowPriority$1:
      return Scheduler_LowPriority;

    case IdlePriority$1:
      return Scheduler_IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function runWithPriority$1(reactPriorityLevel, fn) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_runWithPriority(priorityLevel, fn);
}
function scheduleCallback(reactPriorityLevel, callback, options) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_scheduleCallback(priorityLevel, callback, options);
}
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }

  return fakeCallbackNode;
}
function cancelCallback(callbackNode) {
  if (callbackNode !== fakeCallbackNode) {
    Scheduler_cancelCallback(callbackNode);
  }
}
function flushSyncCallbackQueue() {
  if (immediateQueueCallbackNode !== null) {
    var node = immediateQueueCallbackNode;
    immediateQueueCallbackNode = null;
    Scheduler_cancelCallback(node);
  }

  flushSyncCallbackQueueImpl();
}

function flushSyncCallbackQueueImpl() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrancy.
    isFlushingSyncQueue = true;
    var i = 0;

    {
      try {
        var _isSync2 = true;
        var _queue = syncQueue;
        runWithPriority$1(ImmediatePriority$1, function () {
          for (; i < _queue.length; i++) {
            var callback = _queue[i];

            do {
              callback = callback(_isSync2);
            } while (callback !== null);
          }
        });
        syncQueue = null;
      } catch (error) {
        // If something throws, leave the remaining callbacks on the queue.
        if (syncQueue !== null) {
          syncQueue = syncQueue.slice(i + 1);
        } // Resume flushing in the next tick


        Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
        throw error;
      } finally {
        isFlushingSyncQueue = false;
      }
    }
  }
}

// TODO: this is special because it gets imported during build.
var ReactVersion = '17.0.1';

var NoMode = 0;
var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
// tag instead

var BlockingMode = 2;
var ConcurrentMode = 4;
var ProfileMode = 8;
var DebugTracingMode = 16;

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
var NoTransition = 0;
function requestCurrentTransition() {
  return ReactCurrentBatchConfig.transition;
}

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      if (fiberArray.length === 0) {
        return;
      }

      var firstFiber = fiberArray[0];
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);

      try {
        setCurrentFiber(firstFiber);

        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
      } finally {
        resetCurrentFiber();
      }
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);

    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var MAX_SIGNED_31_BIT_INT = 1073741823;

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
      }

      context._currentRenderer = rendererSigil;
    }
  }
}
function popProvider(providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);
  var context = providerFiber.type._context;

  {
    context._currentValue = currentValue;
  }
}
function calculateChangedBits(context, newValue, oldValue) {
  if (objectIs(oldValue, newValue)) {
    // No change
    return 0;
  } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

    {
      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
      }
    }

    return changedBits | 0;
  }
}
function scheduleWorkOnParentPath(parent, renderLanes) {
  // Update the child lanes of all the ancestors, including the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
      node.childLanes = mergeLanes(node.childLanes, renderLanes);

      if (alternate !== null) {
        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
      }
    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
    } else {
      // Neither alternate was updated, which means the rest of the
      // ancestor path already has sufficient priority.
      break;
    }

    node = node.return;
  }
}
function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.

            enqueueUpdate(fiber, update);
          }

          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
          var alternate = fiber.alternate;

          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
          }

          scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.

          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
          // dependency list.

          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderLanes) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    var firstContext = dependencies.firstContext;

    if (firstContext !== null) {
      if (includesSomeLane(dependencies.lanes, renderLanes)) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      dependencies.firstContext = null;
    }
  }
}
function readContext(context, observedBits) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    if (isDisallowedContextReadInDEV) {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    }
  }

  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      if (!(currentlyRenderingFiber !== null)) {
        {
          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
        }
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        lanes: NoLanes,
        firstContext: contextItem,
        responders: null
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return  context._currentValue ;
}

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;

{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
}

function initializeUpdateQueue(fiber) {
  var queue = {
    baseState: fiber.memoizedState,
    firstBaseUpdate: null,
    lastBaseUpdate: null,
    shared: {
      pending: null
    },
    effects: null
  };
  fiber.updateQueue = queue;
}
function cloneUpdateQueue(current, workInProgress) {
  // Clone the update queue from current. Unless it's already a clone.
  var queue = workInProgress.updateQueue;
  var currentQueue = current.updateQueue;

  if (queue === currentQueue) {
    var clone = {
      baseState: currentQueue.baseState,
      firstBaseUpdate: currentQueue.firstBaseUpdate,
      lastBaseUpdate: currentQueue.lastBaseUpdate,
      shared: currentQueue.shared,
      effects: currentQueue.effects
    };
    workInProgress.updateQueue = clone;
  }
}
function createUpdate(eventTime, lane) {
  var update = {
    eventTime: eventTime,
    lane: lane,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null
  };
  return update;
}
function enqueueUpdate(fiber, update) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return;
  }

  var sharedQueue = updateQueue.shared;
  var pending = sharedQueue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  sharedQueue.pending = update;

  {
    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

      didWarnUpdateInsideUpdate = true;
    }
  }
}
function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
  // Captured updates are updates that are thrown by a child during the render
  // phase. They should be discarded if the render is aborted. Therefore,
  // we should only put them on the work-in-progress queue, not the current one.
  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

  var current = workInProgress.alternate;

  if (current !== null) {
    var currentQueue = current.updateQueue;

    if (queue === currentQueue) {
      // The work-in-progress queue is the same as current. This happens when
      // we bail out on a parent fiber that then captures an error thrown by
      // a child. Since we want to append the update only to the work-in
      // -progress queue, we need to clone the updates. We usually clone during
      // processUpdateQueue, but that didn't happen in this case because we
      // skipped over the parent when we bailed out.
      var newFirst = null;
      var newLast = null;
      var firstBaseUpdate = queue.firstBaseUpdate;

      if (firstBaseUpdate !== null) {
        // Loop through the updates and clone them.
        var update = firstBaseUpdate;

        do {
          var clone = {
            eventTime: update.eventTime,
            lane: update.lane,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };

          if (newLast === null) {
            newFirst = newLast = clone;
          } else {
            newLast.next = clone;
            newLast = clone;
          }

          update = update.next;
        } while (update !== null); // Append the captured update the end of the cloned list.


        if (newLast === null) {
          newFirst = newLast = capturedUpdate;
        } else {
          newLast.next = capturedUpdate;
          newLast = capturedUpdate;
        }
      } else {
        // There are no base updates.
        newFirst = newLast = capturedUpdate;
      }

      queue = {
        baseState: currentQueue.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: currentQueue.shared,
        effects: currentQueue.effects
      };
      workInProgress.updateQueue = queue;
      return;
    }
  } // Append the update to the end of the list.


  var lastBaseUpdate = queue.lastBaseUpdate;

  if (lastBaseUpdate === null) {
    queue.firstBaseUpdate = capturedUpdate;
  } else {
    lastBaseUpdate.next = capturedUpdate;
  }

  queue.lastBaseUpdate = capturedUpdate;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            if ( workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                payload.call(instance, prevState, nextProps);
              } finally {
                reenableLogs();
              }
            }

            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            if ( workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                _payload.call(instance, prevState, nextProps);
              } finally {
                reenableLogs();
              }
            }

            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return _assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, props, instance, renderLanes) {
  // This is always non-null on a ClassComponent or HostRoot
  var queue = workInProgress.updateQueue;
  hasForceUpdate = false;

  {
    currentlyProcessingQueue = queue.shared;
  }

  var firstBaseUpdate = queue.firstBaseUpdate;
  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

  var pendingQueue = queue.shared.pending;

  if (pendingQueue !== null) {
    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
    // and last so that it's non-circular.

    var lastPendingUpdate = pendingQueue;
    var firstPendingUpdate = lastPendingUpdate.next;
    lastPendingUpdate.next = null; // Append pending updates to base queue

    if (lastBaseUpdate === null) {
      firstBaseUpdate = firstPendingUpdate;
    } else {
      lastBaseUpdate.next = firstPendingUpdate;
    }

    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
    // we need to transfer the updates to that queue, too. Because the base
    // queue is a singly-linked list with no cycles, we can append to both
    // lists and take advantage of structural sharing.
    // TODO: Pass `current` as argument

    var current = workInProgress.alternate;

    if (current !== null) {
      // This is always non-null on a ClassComponent or HostRoot
      var currentQueue = current.updateQueue;
      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

      if (currentLastBaseUpdate !== lastBaseUpdate) {
        if (currentLastBaseUpdate === null) {
          currentQueue.firstBaseUpdate = firstPendingUpdate;
        } else {
          currentLastBaseUpdate.next = firstPendingUpdate;
        }

        currentQueue.lastBaseUpdate = lastPendingUpdate;
      }
    }
  } // These values may change as we process the queue.


  if (firstBaseUpdate !== null) {
    // Iterate through the list of updates to compute the result.
    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
    // from the original lanes.

    var newLanes = NoLanes;
    var newBaseState = null;
    var newFirstBaseUpdate = null;
    var newLastBaseUpdate = null;
    var update = firstBaseUpdate;

    do {
      var updateLane = update.lane;
      var updateEventTime = update.eventTime;

      if (!isSubsetOfLanes(renderLanes, updateLane)) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          eventTime: updateEventTime,
          lane: updateLane,
          tag: update.tag,
          payload: update.payload,
          callback: update.callback,
          next: null
        };

        if (newLastBaseUpdate === null) {
          newFirstBaseUpdate = newLastBaseUpdate = clone;
          newBaseState = newState;
        } else {
          newLastBaseUpdate = newLastBaseUpdate.next = clone;
        } // Update the remaining priority in the queue.


        newLanes = mergeLanes(newLanes, updateLane);
      } else {
        // This update does have sufficient priority.
        if (newLastBaseUpdate !== null) {
          var _clone = {
            eventTime: updateEventTime,
            // This update is going to be committed so we never want uncommit
            // it. Using NoLane works because 0 is a subset of all bitmasks, so
            // this will never be skipped by the check above.
            lane: NoLane,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };
          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
        } // Process this update.


        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
        var callback = update.callback;

        if (callback !== null) {
          workInProgress.flags |= Callback;
          var effects = queue.effects;

          if (effects === null) {
            queue.effects = [update];
          } else {
            effects.push(update);
          }
        }
      }

      update = update.next;

      if (update === null) {
        pendingQueue = queue.shared.pending;

        if (pendingQueue === null) {
          break;
        } else {
          // An update was scheduled from inside a reducer. Add the new
          // pending updates to the end of the list and keep processing.
          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
          // unravel them when transferring them to the base queue.

          var _firstPendingUpdate = _lastPendingUpdate.next;
          _lastPendingUpdate.next = null;
          update = _firstPendingUpdate;
          queue.lastBaseUpdate = _lastPendingUpdate;
          queue.shared.pending = null;
        }
      }
    } while (true);

    if (newLastBaseUpdate === null) {
      newBaseState = newState;
    }

    queue.baseState = newBaseState;
    queue.firstBaseUpdate = newFirstBaseUpdate;
    queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
    // This should be fine because the only two other things that contribute to
    // expiration time are props and context. We're already in the middle of the
    // begin phase by the time we start processing the queue, so we've already
    // dealt with the props. Context in components that specify
    // shouldComponentUpdate is tricky; but we'll have to account for
    // that regardless.

    markSkippedUpdateLanes(newLanes);
    workInProgress.lanes = newLanes;
    workInProgress.memoizedState = newState;
  }

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (!(typeof callback === 'function')) {
    {
      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
    }
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance) {
  // Commit the effects
  var effects = finishedQueue.effects;
  finishedQueue.effects = null;

  if (effects !== null) {
    for (var i = 0; i < effects.length; i++) {
      var effect = effects[i];
      var callback = effect.callback;

      if (callback !== null) {
        effect.callback = null;
        callCallback(callback, instance);
      }
    }
  }
}

var fakeInternalInstance = {};
var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + '_' + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);

      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);

        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      {
        {
          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
        }
      }
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if ( workInProgress.mode & StrictMode) {
      disableLogs();

      try {
        // Invoke the function an extra time to help detect side-effects.
        getDerivedStateFromProps(nextProps, prevState);
      } finally {
        reenableLogs();
      }
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  if (workInProgress.lanes === NoLanes) {
    // Queue is always non-null for classes
    var updateQueue = workInProgress.updateQueue;
    updateQueue.baseState = memoizedState;
  }
}
var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'setState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleUpdateOnFiber(fiber, lane, eventTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleUpdateOnFiber(fiber, lane, eventTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleUpdateOnFiber(fiber, lane, eventTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    {
      if ( workInProgress.mode & StrictMode) {
        disableLogs();

        try {
          // Invoke the function an extra time to help detect side-effects.
          instance.shouldComponentUpdate(newProps, newState, nextContext);
        } finally {
          reenableLogs();
        }
      }
    }

    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

    {
      if (shouldUpdate === undefined) {
        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
      }
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
    }

    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
    }

    if (instance.propTypes) {
      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
    }

    if (instance.contextType) {
      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
    }

    {
      if (instance.contextTypes) {
        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      }

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);

        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    if (typeof instance.componentShouldUpdate === 'function') {
      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
    }

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }

    if (typeof instance.componentDidUnmount === 'function') {
      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
    }

    if (typeof instance.componentDidReceiveProps === 'function') {
      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
    }

    if (typeof instance.componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
    }

    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
    }

    var hasMutatedProps = instance.props !== newProps;

    if (instance.props !== undefined && hasMutatedProps) {
      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
    }

    if (instance.defaultProps) {
      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    if (typeof instance.getDerivedStateFromProps === 'function') {
      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof instance.getDerivedStateFromError === 'function') {
      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
    }

    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      error('%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  } // Instantiate twice to help detect side-effects.


  {
    if ( workInProgress.mode & StrictMode) {
      disableLogs();

      try {
        new ctor(props, context); // eslint-disable-line no-new
      } finally {
        reenableLogs();
      }
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);

        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  if (oldState !== instance.state) {
    {
      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);

        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  initializeUpdateQueue(workInProgress);
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  instance.state = workInProgress.memoizedState;
  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
    instance.state = workInProgress.memoizedState;
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.flags |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.flags |= Update;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }
    }

    if (typeof instance.componentDidMount === 'function') {
      workInProgress.flags |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.flags |= Update;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
  var instance = workInProgress.stateNode;
  cloneUpdateQueue(current, workInProgress);
  var unresolvedOldProps = workInProgress.memoizedProps;
  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
  instance.props = oldProps;
  var unresolvedNewProps = workInProgress.pendingProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  newState = workInProgress.memoizedState;

  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.flags |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.flags |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child, returnFiber) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child, returnFiber) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (!(typeof child._store === 'object')) {
      {
        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    child._store.validated = true;
    var componentName = getComponentName(returnFiber.type) || 'Component';

    if (ownerHasKeyUseWarning[componentName]) {
      return;
    }

    ownerHasKeyUseWarning[componentName] = true;

    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
  };
}

var isArray$1 = Array.isArray;

function coerceRef(returnFiber, current, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
      // because these cannot be automatically converted to an arrow function
      // using a codemod. Therefore, we don't have to warn about string refs again.
      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
        var componentName = getComponentName(returnFiber.type) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          {
            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (!(ownerFiber.tag === ClassComponent)) {
          {
            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref" );
          }
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        {
          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
        return current.ref;
      }

      var ref = function (value) {
        var refs = inst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (!(typeof mixedRef === 'string')) {
        {
          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
        }
      }

      if (!element._owner) {
        {
          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information." );
        }
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    {
      {
        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead." );
      }
    }
  }
}

function warnOnFunctionType(returnFiber) {
  {
    var componentName = getComponentName(returnFiber.type) || 'Component';

    if (ownerHasFunctionTypeWarning[componentName]) {
      return;
    }

    ownerHasFunctionTypeWarning[componentName] = true;

    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
  }
} // We avoid inlining this to avoid potential deopts from using try/catch.
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    } // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }

    childToDelete.nextEffect = null;
    childToDelete.flags = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }

    var current = newFiber.alternate;

    if (current !== null) {
      var oldIndex = current.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.flags = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.flags = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.flags = Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, lanes) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, lanes) {
    if (current !== null) {
      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
       isCompatibleFamilyForHotReloading(current, element) )) {
        // Move based on index
        var existing = useFiber(current, element.props);
        existing.ref = coerceRef(returnFiber, current, element);
        existing.return = returnFiber;

        {
          existing._debugSource = element._source;
          existing._debugOwner = element._owner;
        }

        return existing;
      }
    } // Insert


    var created = createFiberFromElement(element, returnFiber.mode, lanes);
    created.ref = coerceRef(returnFiber, current, element);
    created.return = returnFiber;
    return created;
  }

  function updatePortal(returnFiber, current, portal, lanes) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || []);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, lanes, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, lanes) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
              }

              return updateElement(returnFiber, oldFiber, newChild, lanes);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, lanes);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
            }

            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
          }

      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys, returnFiber) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child, returnFiber);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (!(typeof iteratorFn === 'function')) {
      {
        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        if (!didWarnAboutGenerators) {
          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
        }

        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        if (!didWarnAboutMaps) {
          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
        }

        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (!(newChildren != null)) {
      {
        throw Error( "An iterable object provided no iterator." );
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, lanes);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        switch (child.tag) {
          case Fragment:
            {
              if (element.type === REACT_FRAGMENT_TYPE) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                existing.return = returnFiber;

                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }

                return existing;
              }

              break;
            }

          case Block:

          // We intentionally fallthrough here if enableBlocksAPI is not on.
          // eslint-disable-next-lined no-fallthrough

          default:
            {
              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
               isCompatibleFamilyForHotReloading(child, element) )) {
                deleteRemainingChildren(returnFiber, child.sibling);

                var _existing3 = useFiber(child, element.props);

                _existing3.ref = coerceRef(returnFiber, child, element);
                _existing3.return = returnFiber;

                {
                  _existing3._debugSource = element._source;
                  _existing3._debugOwner = element._owner;
                }

                return _existing3;
              }

              break;
            }
        } // Didn't match.


        deleteRemainingChildren(returnFiber, child);
        break;
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || []);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;

              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough

        case Block:
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            {
              {
                throw Error( (getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
              }
            }
          }
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current, workInProgress) {
  if (!(current === null || workInProgress.child === current.child)) {
    {
      throw Error( "Resuming work not yet implemented." );
    }
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, lanes) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, lanes);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (!(c !== NO_CONTEXT)) {
    {
      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

  if (props.fallback === undefined) {
    return false;
  } // Regular boundaries always capture.


  if (props.unstable_avoidThisFallback !== true) {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
  // parent boundary if it is currently invisible.


  if (hasInvisibleParent) {
    return false;
  } // If the parent is not able to handle it, we must handle it.


  return true;
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.flags & DidCapture) !== NoFlags;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

var NoFlags$1 =
/*  */
0; // Represents whether effect should fire.

var HasEffect =
/* */
1; // Represents the phase in which the effect (not the clean-up) fires.

var Layout =
/*    */
2;
var Passive$1 =
/*   */
4;

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function enterHydrationState(fiber) {

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;

      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.

  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.flags = fiber.flags & ~Hydrating | Placement;

  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
              break;

            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;

            case SuspenseComponent:
              didNotFindHydratableSuspenseInstance(parentType, parentProps);
              break;
          }

          break;
        }

      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type);

        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {

        return false;
      }

    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }

  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;

      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }

  return shouldUpdate;
}

function skipPastDehydratedSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.

  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;

    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function resetHydrationState() {

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

function getIsHydrating() {
  return isHydrating;
}

// and should be reset before starting a new render.
// This tracks which mutable sources need to be reset after a render.

var workInProgressSources = [];
var rendererSigil$1;

{
  // Used to detect multiple renderers using the same mutable source.
  rendererSigil$1 = {};
}

function markSourceAsDirty(mutableSource) {
  workInProgressSources.push(mutableSource);
}
function resetWorkInProgressVersions() {
  for (var i = 0; i < workInProgressSources.length; i++) {
    var mutableSource = workInProgressSources[i];

    {
      mutableSource._workInProgressVersionPrimary = null;
    }
  }

  workInProgressSources.length = 0;
}
function getWorkInProgressVersion(mutableSource) {
  {
    return mutableSource._workInProgressVersionPrimary;
  }
}
function setWorkInProgressVersion(mutableSource, version) {
  {
    mutableSource._workInProgressVersionPrimary = version;
  }

  workInProgressSources.push(mutableSource);
}
function warnAboutMultipleRenderersDEV(mutableSource) {
  {
    {
      if (mutableSource._currentPrimaryRenderer == null) {
        mutableSource._currentPrimaryRenderer = rendererSigil$1;
      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
        error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
      }
    }
  }
} // Eager reads the version of a mutable source and stores it on the root.

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;
var didWarnAboutUseOpaqueIdentifier;

{
  didWarnAboutUseOpaqueIdentifier = {};
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
// does not get reset if we do another render pass; only when we're completely
// finished evaluating this component. This is an optimization so we know
// whether we need to clear render phase updates after a throw.

var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
// gets reset after each attempt.
// TODO: Maybe there's some way to consolidate this with
// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

var didScheduleRenderPhaseUpdateDuringThisPass = false;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentName(currentlyRenderingFiber$1.type);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (objectIs(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
  renderLanes = nextRenderLanes;
  currentlyRenderingFiber$1 = workInProgress;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  }

  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.lanes = NoLanes; // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // didScheduleRenderPhaseUpdate = false;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because memoizedState === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so memoizedState would be null during updates and mounts.

  {
    if (current !== null && current.memoizedState !== null) {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, secondArg); // Check if there was a render phase update

  if (didScheduleRenderPhaseUpdateDuringThisPass) {
    // Keep rendering in a loop for as long as render phase updates continue to
    // be scheduled. Use a counter to prevent infinite loops.
    var numberOfReRenders = 0;

    do {
      didScheduleRenderPhaseUpdateDuringThisPass = false;

      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
        {
          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
        }
      }

      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      currentHook = null;
      workInProgressHook = null;
      workInProgress.updateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
      children = Component(props, secondArg);
    } while (didScheduleRenderPhaseUpdateDuringThisPass);
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.


  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  {
    workInProgress._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderLanes = NoLanes;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
  }

  didScheduleRenderPhaseUpdate = false;

  if (!!didRenderTooFewHooks) {
    {
      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
    }
  }

  return children;
}
function bailoutHooks(current, workInProgress, lanes) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.flags &= ~(Passive | Update);
  current.lanes = removeLanes(current.lanes, lanes);
}
function resetHooksAfterThrow() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  if (didScheduleRenderPhaseUpdate) {
    // There were render phase updates. These are only valid for this render
    // phase, which we are now aborting. Remove the updates from the queues so
    // they do not persist to the next render. Do not remove updates from hooks
    // that weren't processed.
    //
    // Only reset the updates from the queue if it has a clone. If it does
    // not have a clone, that means it wasn't processed, and the updates were
    // scheduled before we entered the render phase.
    var hook = currentlyRenderingFiber$1.memoizedState;

    while (hook !== null) {
      var queue = hook.queue;

      if (queue !== null) {
        queue.pending = null;
      }

      hook = hook.next;
    }

    didScheduleRenderPhaseUpdate = false;
  }

  renderLanes = NoLanes;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
    isUpdatingOpaqueValueInRenderPhase = false;
  }

  didScheduleRenderPhaseUpdateDuringThisPass = false;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  var nextCurrentHook;

  if (currentHook === null) {
    var current = currentlyRenderingFiber$1.alternate;

    if (current !== null) {
      nextCurrentHook = current.memoizedState;
    } else {
      nextCurrentHook = null;
    }
  } else {
    nextCurrentHook = currentHook.next;
  }

  var nextWorkInProgressHook;

  if (workInProgressHook === null) {
    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
  } else {
    nextWorkInProgressHook = workInProgressHook.next;
  }

  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
  } else {
    // Clone from the current hook.
    if (!(nextCurrentHook !== null)) {
      {
        throw Error( "Rendered more hooks than during the previous render." );
      }
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null
  };
}

function basicStateReducer(state, action) {
  // $FlowFixMe: Flow doesn't like mixed types
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer;
  var current = currentHook; // The last rebase update that is NOT part of the base state.

  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    {
      if (current.baseQueue !== baseQueue) {
        // Internal invariant that should never happen, but feasibly could in
        // the future if we implement resuming, or some form of that.
        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
      }
    }

    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }

  if (baseQueue !== null) {
    // We have a queue to process.
    var first = baseQueue.next;
    var newState = current.baseState;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;
    var update = first;

    do {
      var updateLane = update.lane;

      if (!isSubsetOfLanes(renderLanes, updateLane)) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          lane: updateLane,
          action: update.action,
          eagerReducer: update.eagerReducer,
          eagerState: update.eagerState,
          next: null
        };

        if (newBaseQueueLast === null) {
          newBaseQueueFirst = newBaseQueueLast = clone;
          newBaseState = newState;
        } else {
          newBaseQueueLast = newBaseQueueLast.next = clone;
        } // Update the remaining priority in the queue.
        // TODO: Don't need to accumulate this. Instead, we can remove
        // renderLanes from the original lanes.


        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
        markSkippedUpdateLanes(updateLane);
      } else {
        // This update does have sufficient priority.
        if (newBaseQueueLast !== null) {
          var _clone = {
            // This update is going to be committed so we never want uncommit
            // it. Using NoLane works because 0 is a subset of all bitmasks, so
            // this will never be skipped by the check above.
            lane: NoLane,
            action: update.action,
            eagerReducer: update.eagerReducer,
            eagerState: update.eagerState,
            next: null
          };
          newBaseQueueLast = newBaseQueueLast.next = _clone;
        } // Process this update.


        if (update.eagerReducer === reducer) {
          // If this update was processed eagerly, and its reducer matches the
          // current reducer, we can use the eagerly computed state.
          newState = update.eagerState;
        } else {
          var action = update.action;
          newState = reducer(newState, action);
        }
      }

      update = update.next;
    } while (update !== null && update !== first);

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState;
    hook.baseState = newBaseState;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = newState;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function rerenderReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
  // work-in-progress hook.

  var dispatch = queue.dispatch;
  var lastRenderPhaseUpdate = queue.pending;
  var newState = hook.memoizedState;

  if (lastRenderPhaseUpdate !== null) {
    // The queue doesn't persist past this render pass.
    queue.pending = null;
    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
    var update = firstRenderPhaseUpdate;

    do {
      // Process this render phase update. We don't have to check the
      // priority because it will always be the same as the current
      // render's.
      var action = update.action;
      newState = reducer(newState, action);
      update = update.next;
    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
    // the base state unless the queue is empty.
    // TODO: Not sure if this is the desired semantics, but it's what we
    // do for gDSFP. I can't remember why.

    if (hook.baseQueue === null) {
      hook.baseState = newState;
    }

    queue.lastRenderedState = newState;
  }

  return [newState, dispatch];
}

function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
  {
    warnAboutMultipleRenderersDEV(source);
  }

  var getVersion = source._getVersion;
  var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?

  var isSafeToReadFromSource = false; // Check the version first.
  // If this render has already been started with a specific version,
  // we can use it alone to determine if we can safely read from the source.

  var currentRenderVersion = getWorkInProgressVersion(source);

  if (currentRenderVersion !== null) {
    // It's safe to read if the store hasn't been mutated since the last time
    // we read something.
    isSafeToReadFromSource = currentRenderVersion === version;
  } else {
    // If there's no version, then this is the first time we've read from the
    // source during the current render pass, so we need to do a bit more work.
    // What we need to determine is if there are any hooks that already
    // subscribed to the source, and if so, whether there are any pending
    // mutations that haven't been synchronized yet.
    //
    // If there are no pending mutations, then `root.mutableReadLanes` will be
    // empty, and we know we can safely read.
    //
    // If there *are* pending mutations, we may still be able to safely read
    // if the currently rendering lanes are inclusive of the pending mutation
    // lanes, since that guarantees that the value we're about to read from
    // the source is consistent with the values that we read during the most
    // recent mutation.
    isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);

    if (isSafeToReadFromSource) {
      // If it's safe to read from this source during the current render,
      // store the version in case other components read from it.
      // A changed version number will let those components know to throw and restart the render.
      setWorkInProgressVersion(source, version);
    }
  }

  if (isSafeToReadFromSource) {
    var snapshot = getSnapshot(source._source);

    {
      if (typeof snapshot === 'function') {
        error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
      }
    }

    return snapshot;
  } else {
    // This handles the special case of a mutable source being shared between renderers.
    // In that case, if the source is mutated between the first and second renderer,
    // The second renderer don't know that it needs to reset the WIP version during unwind,
    // (because the hook only marks sources as dirty if it's written to their WIP version).
    // That would cause this tear check to throw again and eventually be visible to the user.
    // We can avoid this infinite loop by explicitly marking the source as dirty.
    //
    // This can lead to tearing in the first renderer when it resumes,
    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
    markSourceAsDirty(source);

    {
      {
        throw Error( "Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue." );
      }
    }
  }
}

function useMutableSource(hook, source, getSnapshot, subscribe) {
  var root = getWorkInProgressRoot();

  if (!(root !== null)) {
    {
      throw Error( "Expected a work-in-progress root. This is a bug in React. Please file an issue." );
    }
  }

  var getVersion = source._getVersion;
  var version = getVersion(source._source);
  var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const

  var _dispatcher$useState = dispatcher.useState(function () {
    return readFromUnsubcribedMutableSource(root, source, getSnapshot);
  }),
      currentSnapshot = _dispatcher$useState[0],
      setSnapshot = _dispatcher$useState[1];

  var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
  // We use it to clear the pending update queue if we have a new source.

  var stateHook = workInProgressHook;
  var memoizedState = hook.memoizedState;
  var refs = memoizedState.refs;
  var prevGetSnapshot = refs.getSnapshot;
  var prevSource = memoizedState.source;
  var prevSubscribe = memoizedState.subscribe;
  var fiber = currentlyRenderingFiber$1;
  hook.memoizedState = {
    refs: refs,
    source: source,
    subscribe: subscribe
  }; // Sync the values needed by our subscription handler after each commit.

  dispatcher.useEffect(function () {
    refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
    // handleChange() below needs to reference the dispatch function without re-subscribing,
    // so we use a ref to ensure that it always has the latest version.

    refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.

    var maybeNewVersion = getVersion(source._source);

    if (!objectIs(version, maybeNewVersion)) {
      var maybeNewSnapshot = getSnapshot(source._source);

      {
        if (typeof maybeNewSnapshot === 'function') {
          error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
        }
      }

      if (!objectIs(snapshot, maybeNewSnapshot)) {
        setSnapshot(maybeNewSnapshot);
        var lane = requestUpdateLane(fiber);
        markRootMutableRead(root, lane);
      } // If the source mutated between render and now,
      // there may be state updates already scheduled from the old source.
      // Entangle the updates so that they render in the same batch.


      markRootEntangled(root, root.mutableReadLanes);
    }
  }, [getSnapshot, source, subscribe]); // If we got a new source or subscribe function, re-subscribe in a passive effect.

  dispatcher.useEffect(function () {
    var handleChange = function () {
      var latestGetSnapshot = refs.getSnapshot;
      var latestSetSnapshot = refs.setSnapshot;

      try {
        latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.

        var lane = requestUpdateLane(fiber);
        markRootMutableRead(root, lane);
      } catch (error) {
        // A selector might throw after a source mutation.
        // e.g. it might try to read from a part of the store that no longer exists.
        // In this case we should still schedule an update with React.
        // Worst case the selector will throw again and then an error boundary will handle it.
        latestSetSnapshot(function () {
          throw error;
        });
      }
    };

    var unsubscribe = subscribe(source._source, handleChange);

    {
      if (typeof unsubscribe !== 'function') {
        error('Mutable source subscribe function must return an unsubscribe function.');
      }
    }

    return unsubscribe;
  }, [source, subscribe]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
  //
  // If either the source or the subscription have changed we can't can't trust the update queue.
  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
  //
  // If the getSnapshot function changed, we also shouldn't rely on the update queue.
  // It's possible that the underlying source was mutated between the when the last "change" event fired,
  // and when the current render (with the new getSnapshot function) is processed.
  //
  // In both cases, we need to throw away pending updates (since they are no longer relevant)
  // and treat reading from the source as we do in the mount case.

  if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
    // Create a new queue and setState method,
    // So if there are interleaved updates, they get pushed to the older queue.
    // When this becomes current, the previous queue and dispatch method will be discarded,
    // including any interleaving updates that occur.
    var newQueue = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: snapshot
    };
    newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
    stateHook.queue = newQueue;
    stateHook.baseQueue = null;
    snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
    stateHook.memoizedState = stateHook.baseState = snapshot;
  }

  return snapshot;
}

function mountMutableSource(source, getSnapshot, subscribe) {
  var hook = mountWorkInProgressHook();
  hook.memoizedState = {
    refs: {
      getSnapshot: getSnapshot,
      setSnapshot: null
    },
    source: source,
    subscribe: subscribe
  };
  return useMutableSource(hook, source, getSnapshot, subscribe);
}

function updateMutableSource(source, getSnapshot, subscribe) {
  var hook = updateWorkInProgressHook();
  return useMutableSource(hook, source, getSnapshot, subscribe);
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    // $FlowFixMe: Flow doesn't like mixed types
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer);
}

function rerenderState(initialState) {
  return rerenderReducer(basicStateReducer);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();
  var ref = {
    current: initialValue
  };

  {
    Object.seal(ref);
  }

  hook.memoizedState = ref;
  return ref;
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  currentlyRenderingFiber$1.flags |= fiberFlags;
  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
}

function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        pushEffect(hookFlags, create, destroy, nextDeps);
        return;
      }
    }
  }

  currentlyRenderingFiber$1.flags |= fiberFlags;
  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
}

function updateEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
}

function mountLayoutEffect(create, deps) {
  return mountEffectImpl(Update, Layout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, Layout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      if (!refObject.hasOwnProperty('current')) {
        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
      }
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value) {
  var _mountState = mountState(value),
      prevValue = _mountState[0],
      setValue = _mountState[1];

  mountEffect(function () {
    var prevTransition = ReactCurrentBatchConfig$1.transition;
    ReactCurrentBatchConfig$1.transition = 1;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.transition = prevTransition;
    }
  }, [value]);
  return prevValue;
}

function updateDeferredValue(value) {
  var _updateState = updateState(),
      prevValue = _updateState[0],
      setValue = _updateState[1];

  updateEffect(function () {
    var prevTransition = ReactCurrentBatchConfig$1.transition;
    ReactCurrentBatchConfig$1.transition = 1;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.transition = prevTransition;
    }
  }, [value]);
  return prevValue;
}

function rerenderDeferredValue(value) {
  var _rerenderState = rerenderState(),
      prevValue = _rerenderState[0],
      setValue = _rerenderState[1];

  updateEffect(function () {
    var prevTransition = ReactCurrentBatchConfig$1.transition;
    ReactCurrentBatchConfig$1.transition = 1;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.transition = prevTransition;
    }
  }, [value]);
  return prevValue;
}

function startTransition(setPending, callback) {
  var priorityLevel = getCurrentPriorityLevel();

  {
    runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function () {
      setPending(true);
    });
    runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
      var prevTransition = ReactCurrentBatchConfig$1.transition;
      ReactCurrentBatchConfig$1.transition = 1;

      try {
        setPending(false);
        callback();
      } finally {
        ReactCurrentBatchConfig$1.transition = prevTransition;
      }
    });
  }
}

function mountTransition() {
  var _mountState2 = mountState(false),
      isPending = _mountState2[0],
      setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
  // never changes.


  var start = startTransition.bind(null, setPending);
  mountRef(start);
  return [start, isPending];
}

function updateTransition() {
  var _updateState2 = updateState(),
      isPending = _updateState2[0];

  var startRef = updateRef();
  var start = startRef.current;
  return [start, isPending];
}

function rerenderTransition() {
  var _rerenderState2 = rerenderState(),
      isPending = _rerenderState2[0];

  var startRef = updateRef();
  var start = startRef.current;
  return [start, isPending];
}

var isUpdatingOpaqueValueInRenderPhase = false;
function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
  {
    return isUpdatingOpaqueValueInRenderPhase;
  }
}

function warnOnOpaqueIdentifierAccessInDEV(fiber) {
  {
    // TODO: Should warn in effects and callbacks, too
    var name = getComponentName(fiber.type) || 'Unknown';

    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
      error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');

      didWarnAboutUseOpaqueIdentifier[name] = true;
    }
  }
}

function mountOpaqueIdentifier() {
  var makeId =  makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1)) ;

  if (getIsHydrating()) {
    var didUpgrade = false;
    var fiber = currentlyRenderingFiber$1;

    var readValue = function () {
      if (!didUpgrade) {
        // Only upgrade once. This works even inside the render phase because
        // the update is added to a shared queue, which outlasts the
        // in-progress render.
        didUpgrade = true;

        {
          isUpdatingOpaqueValueInRenderPhase = true;
          setId(makeId());
          isUpdatingOpaqueValueInRenderPhase = false;
          warnOnOpaqueIdentifierAccessInDEV(fiber);
        }
      }

      {
        {
          throw Error( "The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly." );
        }
      }
    };

    var id = makeOpaqueHydratingObject(readValue);
    var setId = mountState(id)[1];

    if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
      currentlyRenderingFiber$1.flags |= Update | Passive;
      pushEffect(HasEffect | Passive$1, function () {
        setId(makeId());
      }, undefined, null);
    }

    return id;
  } else {
    var _id = makeId();

    mountState(_id);
    return _id;
  }
}

function updateOpaqueIdentifier() {
  var id = updateState()[0];
  return id;
}

function rerenderOpaqueIdentifier() {
  var id = rerenderState()[0];
  return id;
}

function dispatchAction(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var eventTime = requestEventTime();
  var lane = requestUpdateLane(fiber);
  var update = {
    lane: lane,
    action: action,
    eagerReducer: null,
    eagerState: null,
    next: null
  }; // Append the update to the end of the list.

  var pending = queue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  queue.pending = update;
  var alternate = fiber.alternate;

  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -> linked list of updates. After this render pass, we'll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
  } else {
    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          update.eagerReducer = lastRenderedReducer;
          update.eagerState = eagerState;

          if (objectIs(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
      }
    }

    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotScopedWithMatchingAct(fiber);
        warnIfNotCurrentlyActingUpdatesInDev(fiber);
      }
    }

    scheduleUpdateOnFiber(fiber, lane, eventTime);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError,
  useMutableSource: throwInvalidHookError,
  useOpaqueIdentifier: throwInvalidHookError,
  unstable_isNewReconciler: enableNewReconciler
};
var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var HooksDispatcherOnRerenderInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

{
  var warnInvalidContextAccess = function () {
    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      mountHookTypesDev();
      return mountMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      mountHookTypesDev();
      return mountOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return mountMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      updateHookTypesDev();
      return mountOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return updateMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      updateHookTypesDev();
      return updateOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  HooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return rerenderTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return updateMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      updateHookTypesDev();
      return rerenderOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  InvalidNestedHooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
}

var now$1 = Scheduler.unstable_now;
var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {

  commitTime = now$1();
}

function startProfilerTimer(fiber) {

  profilerStartTime = now$1();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$1();
  }
}

function stopProfilerTimerIfRunning(fiber) {

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

  if (profilerStartTime >= 0) {
    var elapsedTime = now$1() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

function transferActualDuration(fiber) {
  // Transfer time spent rendering these children so we don't lose it
  // after we rerender. This is used as a helper in special cases
  // where we should count the work of multiple passes.
  var child = fiber.child;

  while (child) {
    fiber.actualDuration += child.actualDuration;
    child = child.sibling;
  }
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
}

function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
  if (current === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
  }
}

function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their
  // identities match.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
}

function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component));
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  prepareToReadContext(workInProgress, renderLanes);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);

    if ( workInProgress.mode & StrictMode) {
      disableLogs();

      try {
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
      } finally {
        reenableLogs();
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderLanes);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
  if (current === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(type));
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentName(_type));
    }
  }

  var currentChild = current.child; // This is always exactly one child

  if (!includesSomeLane(updateLanes, renderLanes)) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        var lazyComponent = outerMemoType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;

        try {
          outerMemoType = init(payload);
        } catch (x) {
          outerMemoType = null;
        } // Inner propTypes will be validated in the function component path.


        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

        if (outerPropTypes) {
          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
          'prop', getComponentName(outerMemoType));
        }
      }
    }
  }

  if (current !== null) {
    var prevProps = current.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
     workInProgress.type === current.type )) {
      didReceiveUpdate = false;

      if (!includesSomeLane(renderLanes, updateLanes)) {
        // The pending lanes were cleared at the beginning of beginWork. We're
        // about to bail out, but there might be other lanes that weren't
        // included in the current render. Usually, the priority level of the
        // remaining updates is accumlated during the evaluation of the
        // component (i.e. when processing the update queue). But since since
        // we're bailing out early *without* evaluating the component, we need
        // to account for it here, too. Reset to the value of the current fiber.
        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
        // because a MemoComponent fiber does not have hooks or an update queue;
        // rather, it wraps around an inner component, which may or may not
        // contains hooks.
        // TODO: Move the reset at in beginWork out of the common path so that
        // this is no longer necessary.
        workInProgress.lanes = current.lanes;
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
        // This is a special case that only exists for legacy mode.
        // See https://github.com/facebook/react/pull/19216.
        didReceiveUpdate = true;
      }
    }
  }

  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
}

function updateOffscreenComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  var prevState = current !== null ? current.memoizedState : null;

  if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
      // In legacy sync mode, don't defer the subtree. Render it now.
      // TODO: Figure out what we should do in Blocking mode.
      var nextState = {
        baseLanes: NoLanes
      };
      workInProgress.memoizedState = nextState;
      pushRenderLanes(workInProgress, renderLanes);
    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
      var nextBaseLanes;

      if (prevState !== null) {
        var prevBaseLanes = prevState.baseLanes;
        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
      } else {
        nextBaseLanes = renderLanes;
      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


      {
        markSpawnedWork(OffscreenLane);
      }

      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
      var _nextState = {
        baseLanes: nextBaseLanes
      };
      workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
      // to avoid a push/pop misalignment.

      pushRenderLanes(workInProgress, nextBaseLanes);
      return null;
    } else {
      // Rendering at offscreen, so we can clear the base lanes.
      var _nextState2 = {
        baseLanes: NoLanes
      };
      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
      pushRenderLanes(workInProgress, subtreeRenderLanes);
    }
  } else {
    var _subtreeRenderLanes;

    if (prevState !== null) {
      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state

      workInProgress.memoizedState = null;
    } else {
      // We weren't previously hidden, and we still aren't, so there's nothing
      // special to do. Need to push to the stack regardless, though, to avoid
      // a push/pop misalignment.
      _subtreeRenderLanes = renderLanes;
    }

    pushRenderLanes(workInProgress, _subtreeRenderLanes);
  }

  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
} // Note: These happen to have identical begin phases, for now. We shouldn't hold
// ourselves to this constraint, though. If the behavior diverges, we should
// fork the function.


var updateLegacyHiddenComponent = updateOffscreenComponent;

function updateFragment(current, workInProgress, renderLanes) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateMode(current, workInProgress, renderLanes) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateProfiler(current, workInProgress, renderLanes) {
  {
    workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
    // These are reset during render to allow the DevTools commit hook a chance to read them,

    var stateNode = workInProgress.stateNode;
    stateNode.effectDuration = 0;
    stateNode.passiveEffectDuration = 0;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function markRef(current, workInProgress) {
  var ref = workInProgress.ref;

  if (current === null && ref !== null || current !== null && current.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.flags |= Ref;
  }
}

function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component));
      }
    }
  }

  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  prepareToReadContext(workInProgress, renderLanes);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);

    if ( workInProgress.mode & StrictMode) {
      disableLogs();

      try {
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
      } finally {
        reenableLogs();
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderLanes);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component));
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderLanes);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    if (current !== null) {
      // A class component without an instance only mounts if it suspended
      // inside a non-concurrent tree, in an inconsistent state. We want to
      // treat it like a new mount, even though an empty version of it already
      // committed. Disconnect the alternate pointers.
      current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.flags |= Placement;
    } // In the initial pass we might need to construct the instance.


    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
    shouldUpdate = true;
  } else if (current === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
  } else {
    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
  }

  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

  {
    var inst = workInProgress.stateNode;

    if (shouldUpdate && inst.props !== nextProps) {
      if (!didWarnAboutReassigningProps) {
        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
      }

      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current, workInProgress);
  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$1.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFromError is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    {
      stopProfilerTimerIfRunning();
    }
  } else {
    {
      setIsRendering(true);
      nextChildren = instance.render();

      if ( workInProgress.mode & StrictMode) {
        disableLogs();

        try {
          instance.render();
        } finally {
          reenableLogs();
        }
      }

      setIsRendering(false);
    }
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;

  if (current !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current, workInProgress, renderLanes) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;

  if (!(current !== null && updateQueue !== null)) {
    {
      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  cloneUpdateQueue(current, workInProgress);
  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
  // being called "element".

  var nextChildren = nextState.element;

  if (nextChildren === prevChildren) {
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  var root = workInProgress.stateNode;

  if (root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.
    {
      var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;

      if (mutableSourceEagerHydrationData != null) {
        for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
          var mutableSource = mutableSourceEagerHydrationData[i];
          var version = mutableSourceEagerHydrationData[i + 1];
          setWorkInProgressVersion(mutableSource, version);
        }
      }
    }

    var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
    workInProgress.child = child;
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.flags = node.flags & ~Placement | Hydrating;
      node = node.sibling;
    }
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    resetHydrationState();
  }

  return workInProgress.child;
}

function updateHostComponent(current, workInProgress, renderLanes) {
  pushHostContext(workInProgress);

  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current !== null ? current.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also has access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.flags |= ContentReset;
  }

  markRef(current, workInProgress);
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateHostText(current, workInProgress) {
  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
  if (_current !== null) {
    // A lazy component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.flags |= Placement;
  }

  var props = workInProgress.pendingProps;
  var lazyComponent = elementType;
  var payload = lazyComponent._payload;
  var init = lazyComponent._init;
  var Component = init(payload); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentName(Component));
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        updateLanes, renderLanes);
        return child;
      }
  }

  var hint = '';

  {
    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
      hint = ' Did you wrap a component in React.lazy() more than once?';
    }
  } // This message intentionally doesn't mention ForwardRef or MemoComponent
  // because the fact that it's a separate type of work is an
  // implementation detail.


  {
    {
      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
    }
  }
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
  if (_current !== null) {
    // An incomplete component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.flags |= Placement;
  } // Promote the fiber to a class and try rendering again.


  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderLanes);
  constructClassInstance(workInProgress, Component, nextProps);
  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
  if (_current !== null) {
    // An indeterminate component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.flags |= Placement;
  }

  var props = workInProgress.pendingProps;
  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderLanes);
  var value;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    setIsRendering(true);
    ReactCurrentOwner$1.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;

  {
    // Support for module components is deprecated and is removed behind a flag.
    // Whether or not it would crash later, we want to show a good message in DEV first.
    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
      var _componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    }
  }

  if ( // Run these checks in production only if the flag is off.
  // Eventually we'll delete this branch altogether.
   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName2 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName2]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

        didWarnAboutModulePatternComponent[_componentName2] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    initializeUpdateQueue(workInProgress);
    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderLanes);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {

      if ( workInProgress.mode & StrictMode) {
        disableLogs();

        try {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        } finally {
          reenableLogs();
        }
      }
    }

    reconcileChildren(null, workInProgress, value, renderLanes);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  {
    if (Component) {
      if (Component.childContextTypes) {
        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
      }
    }

    if (workInProgress.ref !== null) {
      var info = '';
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }

      var warningKey = ownerName || workInProgress._debugID || '';
      var debugSource = workInProgress._debugSource;

      if (debugSource) {
        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
      }

      if (!didWarnAboutFunctionRefs[warningKey]) {
        didWarnAboutFunctionRefs[warningKey] = true;

        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
      }
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      var _componentName3 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
      }
    }

    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
      var _componentName4 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
        error('%s: Function components do not support contextType.', _componentName4);

        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
      }
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  retryLane: NoLane
};

function mountSuspenseOffscreenState(renderLanes) {
  return {
    baseLanes: renderLanes
  };
}

function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
  return {
    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
  };
} // TODO: Probably should inline this back


function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
  // If we're already showing a fallback, there are cases where we need to
  // remain on that fallback regardless of whether the content has resolved.
  // For example, SuspenseList coordinates when nested content appears.
  if (current !== null) {
    var suspenseState = current.memoizedState;

    if (suspenseState === null) {
      // Currently showing content. Don't hide it, even if ForceSuspenseFallack
      // is true. More precise name might be "ForceRemainSuspenseFallback".
      // Note: This is a factoring smell. Can't remain on a fallback if there's
      // no fallback to remain on.
      return false;
    }
  } // Not currently showing content. Consult the Suspense context.


  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
}

function getRemainingWorkInPrimaryTree(current, renderLanes) {
  // TODO: Should not remove render lanes that were pinged during this render
  return removeLanes(current.childLanes, renderLanes);
}

function updateSuspenseComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.flags |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var showFallback = false;
  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    showFallback = true;
    workInProgress.flags &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current === null || current.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Boundaries without fallbacks or should be avoided are not considered since
      // they cannot handle preferred fallback states.
      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
  // boundary's children. This involves some custom reconcilation logic. Two
  // main reasons this is so complicated.
  //
  // First, Legacy Mode has different semantics for backwards compatibility. The
  // primary tree will commit in an inconsistent state, so when we do the
  // second pass to render the fallback, we do some exceedingly, uh, clever
  // hacks to make that not totally break. Like transferring effects and
  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
  // because we bailout on the primary tree completely and leave it in its old
  // state, no effects. Same as what we do for Offscreen (except that
  // Offscreen doesn't have the first render pass).
  //
  // Second is hydration. During hydration, the Suspense fiber has a slightly
  // different layout, where the child points to a dehydrated fragment, which
  // contains the DOM rendered by the server.
  //
  // Third, even if you set all that aside, Suspense is like error boundaries in
  // that we first we try to render one tree, and if that fails, we render again
  // and switch to a different tree. Like a try/catch block. So we have to track
  // which branch we're currently rendering. Ideally we would model this using
  // a stack.

  if (current === null) {
    // Initial mount
    // If we're currently hydrating, try to hydrate this boundary.
    // But only if this has a fallback.
    if (nextProps.fallback !== undefined) {
      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
    }

    var nextPrimaryChildren = nextProps.children;
    var nextFallbackChildren = nextProps.fallback;

    if (showFallback) {
      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
      var primaryChildFragment = workInProgress.child;
      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return fallbackFragment;
    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
      // This is a CPU-bound tree. Skip this tree and show a placeholder to
      // unblock the surrounding content. Then immediately retry after the
      // initial commit.
      var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);

      var _primaryChildFragment = workInProgress.child;
      _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
      // get it started back up to attempt the next item. While in terms of
      // priority this work has the same priority as this current render, it's
      // not part of the same transition once the transition has committed. If
      // it's sync, we still want to yield so that it can be painted.
      // Conceptually, this is really the same as pinging. We can use any
      // RetryLane even if it's the one currently rendering since we're leaving
      // it behind on this node.

      workInProgress.lanes = SomeRetryLane;

      {
        markSpawnedWork(SomeRetryLane);
      }

      return _fallbackFragment;
    } else {
      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
    }
  } else {
    // This is an update.
    // If the current fiber has a SuspenseState, that means it's already showing
    // a fallback.
    var prevState = current.memoizedState;

    if (prevState !== null) {

      if (showFallback) {
        var _nextFallbackChildren2 = nextProps.fallback;
        var _nextPrimaryChildren2 = nextProps.children;

        var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);

        var _primaryChildFragment3 = workInProgress.child;
        var prevOffscreenState = current.child.memoizedState;
        _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
        _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return _fallbackChildFragment;
      } else {
        var _nextPrimaryChildren3 = nextProps.children;

        var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);

        workInProgress.memoizedState = null;
        return _primaryChildFragment4;
      }
    } else {
      // The current tree is not already showing a fallback.
      if (showFallback) {
        // Timed out.
        var _nextFallbackChildren3 = nextProps.fallback;
        var _nextPrimaryChildren4 = nextProps.children;

        var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);

        var _primaryChildFragment5 = workInProgress.child;
        var _prevOffscreenState = current.child.memoizedState;
        _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
        _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        return _fallbackChildFragment2;
      } else {
        // Still haven't timed out. Continue rendering the children, like we
        // normally do.
        var _nextPrimaryChildren5 = nextProps.children;

        var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);

        workInProgress.memoizedState = null;
        return _primaryChildFragment6;
      }
    }
  }
}

function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
  var mode = workInProgress.mode;
  var primaryChildProps = {
    mode: 'visible',
    children: primaryChildren
  };
  var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
  primaryChildFragment.return = workInProgress;
  workInProgress.child = primaryChildFragment;
  return primaryChildFragment;
}

function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var mode = workInProgress.mode;
  var progressedPrimaryFragment = workInProgress.child;
  var primaryChildProps = {
    mode: 'hidden',
    children: primaryChildren
  };
  var primaryChildFragment;
  var fallbackChildFragment;

  if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
    // In legacy mode, we commit the primary tree as if it successfully
    // completed, even though it's in an inconsistent state.
    primaryChildFragment = progressedPrimaryFragment;
    primaryChildFragment.childLanes = NoLanes;
    primaryChildFragment.pendingProps = primaryChildProps;

    if ( workInProgress.mode & ProfileMode) {
      // Reset the durations from the first pass so they aren't included in the
      // final amounts. This seems counterintuitive, since we're intentionally
      // not measuring part of the render phase, but this makes it match what we
      // do in Concurrent Mode.
      primaryChildFragment.actualDuration = 0;
      primaryChildFragment.actualStartTime = -1;
      primaryChildFragment.selfBaseDuration = 0;
      primaryChildFragment.treeBaseDuration = 0;
    }

    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
  } else {
    primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
  }

  primaryChildFragment.return = workInProgress;
  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;
  return fallbackChildFragment;
}

function createWorkInProgressOffscreenFiber(current, offscreenProps) {
  // The props argument to `createWorkInProgress` is `any` typed, so we use this
  // wrapper function to constrain it.
  return createWorkInProgress(current, offscreenProps);
}

function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
  var currentPrimaryChildFragment = current.child;
  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
  var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
    mode: 'visible',
    children: primaryChildren
  });

  if ((workInProgress.mode & BlockingMode) === NoMode) {
    primaryChildFragment.lanes = renderLanes;
  }

  primaryChildFragment.return = workInProgress;
  primaryChildFragment.sibling = null;

  if (currentFallbackChildFragment !== null) {
    // Delete the fallback child fragment
    currentFallbackChildFragment.nextEffect = null;
    currentFallbackChildFragment.flags = Deletion;
    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
  }

  workInProgress.child = primaryChildFragment;
  return primaryChildFragment;
}

function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var mode = workInProgress.mode;
  var currentPrimaryChildFragment = current.child;
  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
  var primaryChildProps = {
    mode: 'hidden',
    children: primaryChildren
  };
  var primaryChildFragment;

  if ( // In legacy mode, we commit the primary tree as if it successfully
  // completed, even though it's in an inconsistent state.
  (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
  // already cloned. In legacy mode, the only case where this isn't true is
  // when DevTools forces us to display a fallback; we skip the first render
  // pass entirely and go straight to rendering the fallback. (In Concurrent
  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
  // only codepath.)
  workInProgress.child !== currentPrimaryChildFragment) {
    var progressedPrimaryFragment = workInProgress.child;
    primaryChildFragment = progressedPrimaryFragment;
    primaryChildFragment.childLanes = NoLanes;
    primaryChildFragment.pendingProps = primaryChildProps;

    if ( workInProgress.mode & ProfileMode) {
      // Reset the durations from the first pass so they aren't included in the
      // final amounts. This seems counterintuitive, since we're intentionally
      // not measuring part of the render phase, but this makes it match what we
      // do in Concurrent Mode.
      primaryChildFragment.actualDuration = 0;
      primaryChildFragment.actualStartTime = -1;
      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
    } // The fallback fiber was added as a deletion effect during the first pass.
    // However, since we're going to remain on the fallback, we no longer want
    // to delete it. So we need to remove it from the list. Deletions are stored
    // on the same list as effects. We want to keep the effects from the primary
    // tree. So we copy the primary child fragment's effect list, which does not
    // include the fallback deletion effect.


    var progressedLastEffect = primaryChildFragment.lastEffect;

    if (progressedLastEffect !== null) {
      workInProgress.firstEffect = primaryChildFragment.firstEffect;
      workInProgress.lastEffect = progressedLastEffect;
      progressedLastEffect.nextEffect = null;
    } else {
      // TODO: Reset this somewhere else? Lol legacy mode is so weird.
      workInProgress.firstEffect = workInProgress.lastEffect = null;
    }
  } else {
    primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
  }

  var fallbackChildFragment;

  if (currentFallbackChildFragment !== null) {
    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
  } else {
    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
    // mounted but this is a new fiber.

    fallbackChildFragment.flags |= Placement;
  }

  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;
  return fallbackChildFragment;
}

function scheduleWorkOnFiber(fiber, renderLanes) {
  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
  var alternate = fiber.alternate;

  if (alternate !== null) {
    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
  }

  scheduleWorkOnParentPath(fiber.return, renderLanes);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleWorkOnFiber(node, renderLanes);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleWorkOnFiber(node, renderLanes);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          case 'forward':
          case 'backward':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          default:
            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

            break;
        }
      } else {
        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;

        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;

        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isArray = Array.isArray(childSlot);
    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

    if (isArray || isIterable) {
      var type = isArray ? 'array' : 'iterable';

      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.renderingStartTime = 0;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailMode = tailMode;
    renderState.lastEffect = lastEffectBeforeRendering;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.flags |= DidCapture;
  } else {
    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & BlockingMode) === NoMode) {
    // In legacy mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode, workInProgress.lastEffect);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode, workInProgress.lastEffect);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined, workInProgress.lastEffect);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current, workInProgress, renderLanes) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  }

  return workInProgress.child;
}

var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

function updateContextProvider(current, workInProgress, renderLanes) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    if (!('value' in newProps)) {
      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
      }
    }

    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);

    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderLanes);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current, workInProgress, renderLanes) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;

          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    if (typeof render !== 'function') {
      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
    }
  }

  prepareToReadContext(workInProgress, renderLanes);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren;

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    newChildren = render(newValue);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
  if (current !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current.dependencies;
  }

  {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning();
  }

  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current, workInProgress);
    return workInProgress.child;
  }
}

function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = current;
      returnFiber.lastEffect = current;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = current;
    }

    current.nextEffect = null;
    current.flags = Deletion;
    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function beginWork(current, workInProgress, renderLanes) {
  var updateLanes = workInProgress.lanes;

  {
    if (workInProgress._debugNeedsRemount && current !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
    }
  }

  if (current !== null) {
    var oldProps = current.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
     workInProgress.type !== current.type )) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else if (!includesSomeLane(renderLanes, updateLanes)) {
      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
      // the begin phase. There's still some bookkeeping we that needs to be done
      // in this optimized path, mostly pushing stuff onto the stack.

      switch (workInProgress.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;

        case HostComponent:
          pushHostContext(workInProgress);
          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress);
            }

            break;
          }

        case HostPortal:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case ContextProvider:
          {
            var newValue = workInProgress.memoizedProps.value;
            pushProvider(workInProgress, newValue);
            break;
          }

        case Profiler:
          {
            // Profiler should only call onRender when one of its descendants actually rendered.
            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

            if (hasChildWork) {
              workInProgress.flags |= Update;
            } // Reset effect durations for the next eventual effect phase.
            // These are reset during render to allow the DevTools commit hook a chance to read them,


            var stateNode = workInProgress.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }

          break;

        case SuspenseComponent:
          {
            var state = workInProgress.memoizedState;

            if (state !== null) {
              // whether to retry the primary children, or to skip over it and
              // go straight to the fallback. Check the priority of the primary
              // child fragment.


              var primaryChildFragment = workInProgress.child;
              var primaryChildLanes = primaryChildFragment.childLanes;

              if (includesSomeLane(renderLanes, primaryChildLanes)) {
                // The primary children have pending work. Use the normal path
                // to attempt to render the primary children again.
                return updateSuspenseComponent(current, workInProgress, renderLanes);
              } else {
                // The primary child fragment does not have pending work marked
                // on it
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                // priority. Bailout.

                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

                if (child !== null) {
                  // The fallback children have pending work. Skip over the
                  // primary children and work on the fallback.
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }

            break;
          }

        case SuspenseListComponent:
          {
            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

            if (didSuspendBefore) {
              if (_hasChildWork) {
                // If something was in fallback state last time, and we have all the
                // same children then we're still in progressive loading state.
                // Something might get unblocked by state updates or retries in the
                // tree which will affect the tail. So we need to use the normal
                // path to compute the correct tail.
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
              } // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.


              workInProgress.flags |= DidCapture;
            } // If nothing suspended before and we're rendering the same children,
            // then the tail doesn't matter. Anything new that suspends will work
            // in the "together" mode, so we can continue from the state we had.


            var renderState = workInProgress.memoizedState;

            if (renderState !== null) {
              // Reset to the "together" mode in case we've started a different
              // update in the past but didn't complete it.
              renderState.rendering = null;
              renderState.tail = null;
              renderState.lastEffect = null;
            }

            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

            if (_hasChildWork) {
              break;
            } else {
              // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.
              return null;
            }
          }

        case OffscreenComponent:
        case LegacyHiddenComponent:
          {
            // Need to check if the tree still needs to be deferred. This is
            // almost identical to the logic used in the normal update path,
            // so we'll just enter that. The only difference is we'll bail out
            // at the next level instead of this one, because the child props
            // have not changed. Which is fine.
            // TODO: Probably should refactor `beginWork` to split the bailout
            // path from the normal path. I'm tempted to do a labeled break here
            // but I won't :)
            workInProgress.lanes = NoLanes;
            return updateOffscreenComponent(current, workInProgress, renderLanes);
          }
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    } else {
      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
        // This is a special case that only exists for legacy mode.
        // See https://github.com/facebook/react/pull/19216.
        didReceiveUpdate = true;
      } else {
        // An update was scheduled on this fiber, but there are no new props
        // nor legacy context. Set this to false. If an update queue or context
        // consumer produces a changed value, it will set this to true. Otherwise,
        // the component will assume the children have not changed and bail out.
        didReceiveUpdate = false;
      }
    }
  } else {
    didReceiveUpdate = false;
  } // Before entering the begin phase, clear pending update priority.
  // TODO: This assumes that we're about to evaluate the component and process
  // the update queue. However, there's an exception: SimpleMemoComponent
  // sometimes bails out later in the begin phase. This indicates that we should
  // move this assignment out of the common path and into each branch.


  workInProgress.lanes = NoLanes;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
      }

    case FunctionComponent:
      {
        var _Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
      }

    case ClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
      }

    case HostRoot:
      return updateHostRoot(current, workInProgress, renderLanes);

    case HostComponent:
      return updateHostComponent(current, workInProgress, renderLanes);

    case HostText:
      return updateHostText(current, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current, workInProgress, renderLanes);

    case HostPortal:
      return updatePortalComponent(current, workInProgress, renderLanes);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
      }

    case Fragment:
      return updateFragment(current, workInProgress, renderLanes);

    case Mode:
      return updateMode(current, workInProgress, renderLanes);

    case Profiler:
      return updateProfiler(current, workInProgress, renderLanes);

    case ContextProvider:
      return updateContextProvider(current, workInProgress, renderLanes);

    case ContextConsumer:
      return updateContextConsumer(current, workInProgress, renderLanes);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentName(_type2));
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
      }

    case IncompleteClassComponent:
      {
        var _Component3 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current, workInProgress, renderLanes);
      }

    case FundamentalComponent:
      {

        break;
      }

    case ScopeComponent:
      {

        break;
      }

    case Block:
      {

        break;
      }

    case OffscreenComponent:
      {
        return updateOffscreenComponent(current, workInProgress, renderLanes);
      }

    case LegacyHiddenComponent:
      {
        return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.flags |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.flags |= Ref;
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

{
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  if (getIsHydrating()) {
    // If we're hydrating, we should consume as many items as we can
    // so we don't leave any behind.
    return;
  }

  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function completeWork(current, workInProgress, renderLanes) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
    case LazyComponent:
    case SimpleMemoComponent:
    case FunctionComponent:
    case ForwardRef:
    case Fragment:
    case Mode:
    case Profiler:
    case ContextConsumer:
    case MemoComponent:
      return null;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        resetWorkInProgressVersions();
        var fiberRoot = workInProgress.stateNode;

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          } else if (!fiberRoot.hydrate) {
            // Schedule an effect to clear this container at the start of the next commit.
            // This handles the case of React rendering into a container with previous children.
            // It's also safe to do for updates too, because current.child would only be null
            // if the previous render was null (so the the container would already be empty).
            workInProgress.flags |= Snapshot;
          }
        }

        updateHostContainer(workInProgress);
        return null;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.


            return null;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on whether we want to add them top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node need to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false);
            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.

            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        return null;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState;

        if ((workInProgress.flags & DidCapture) !== NoFlags) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.lanes = renderLanes; // Do not reset the effect list.

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = false;

        if (current === null) {
          if (workInProgress.memoizedProps.fallback !== undefined) {
            popHydrationState(workInProgress);
          }
        } else {
          var prevState = current.memoizedState;
          prevDidTimeout = prevState !== null;
        }

        if (nextDidTimeout && !prevDidTimeout) {
          // If this subtreee is running in blocking mode we can suspend,
          // otherwise we won't suspend.
          // TODO: This will still suspend a synchronous tree if anything
          // in the concurrent tree already suspended during this render.
          // This is a known bug.
          if ((workInProgress.mode & BlockingMode) !== NoMode) {
            // TODO: Move this back to throwException because this is too late
            // if this is a large tree which is common for initial loads. We
            // don't know if we should restart a render or not until we get
            // this marker, and this is too late.
            // If this render already had a ping or lower pri updates,
            // and this is the first time we know we're going to suspend we
            // should be able to immediately restart from within throwException.
            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
              // If this was in an invisible tree or a new render, then showing
              // this boundary is ok.
              renderDidSuspend();
            } else {
              // Otherwise, we're going to have to hide content so we should
              // suspend for longer if possible.
              renderDidSuspendDelayIfPossible();
            }
          }
        }

        {
          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
          if (nextDidTimeout || prevDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the promise. This flag is also used to hide the
            // primary children. In mutation mode, we also need the flag to
            // *unhide* children that were previously hidden, so check if this
            // is currently timed out, too.
            workInProgress.flags |= Update;
          }
        }

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);

      if (current === null) {
        preparePortalMount(workInProgress.stateNode.containerInfo);
      }

      return null;

    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      return null;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode.
          // We don't do anything in this mode.
          return null;
        }

        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.flags |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thennables. Instead, we'll transfer its thennables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThennables = suspended.updateQueue;

                  if (newThennables !== null) {
                    workInProgress.updateQueue = newThennables;
                    workInProgress.flags |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect list before doing the second pass since that's now invalid.


                  if (renderState.lastEffect === null) {
                    workInProgress.firstEffect = null;
                  }

                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }

            if (renderState.tail !== null && now() > getRenderTargetTime()) {
              // We have already passed our CPU deadline but we still have rows
              // left in the tail. We'll just give up further attempts to render
              // the main content and only render fallbacks.
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. While in terms
              // of priority this work has the same priority as this current render,
              // it's not part of the same transition once the transition has
              // committed. If it's sync, we still want to yield so that it can be
              // painted. Conceptually, this is really the same as pinging.
              // We can use any RetryLane even if it's the one currently rendering
              // since we're leaving it behind on this node.

              workInProgress.lanes = SomeRetryLane;

              {
                markSpawnedWork(SomeRetryLane);
              }
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThennables = _suspended.updateQueue;

              if (_newThennables !== null) {
                workInProgress.updateQueue = _newThennables;
                workInProgress.flags |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
              ) {
                  // We need to delete the row we just rendered.
                  // Reset the effect list to what it was before we rendered this
                  // child. The nested children have already appended themselves.
                  var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                  if (lastEffect !== null) {
                    lastEffect.nextEffect = null;
                  } // We're done.


                  return null;
                }
            } else if ( // The time it took to render last row is greater than the remaining
            // time we have to render. So rendering one more row would likely
            // exceed it.
            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. While in terms
              // of priority this work has the same priority as this current render,
              // it's not part of the same transition once the transition has
              // committed. If it's sync, we still want to yield so that it can be
              // painted. Conceptually, this is really the same as pinging.
              // We can use any RetryLane even if it's the one currently rendering
              // since we're leaving it behind on this node.

              workInProgress.lanes = SomeRetryLane;

              {
                markSpawnedWork(SomeRetryLane);
              }
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          // Pop a row.
          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.lastEffect = workInProgress.lastEffect;
          renderState.renderingStartTime = now();
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

          return next;
        }

        return null;
      }

    case FundamentalComponent:
      {

        break;
      }

    case ScopeComponent:
      {

        break;
      }

    case Block:

      break;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      {
        popRenderLanes(workInProgress);

        if (current !== null) {
          var _nextState = workInProgress.memoizedState;
          var _prevState = current.memoizedState;
          var prevIsHidden = _prevState !== null;
          var nextIsHidden = _nextState !== null;

          if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
            workInProgress.flags |= Update;
          }
        }

        return null;
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function unwindWork(workInProgress, renderLanes) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var flags = workInProgress.flags;

        if (flags & ShouldCapture) {
          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        resetWorkInProgressVersions();
        var _flags = workInProgress.flags;

        if (!((_flags & DidCapture) === NoFlags)) {
          {
            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
          }
        }

        workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
        return workInProgress;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);

        var _flags2 = workInProgress.flags;

        if (_flags2 & ShouldCapture) {
          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      popProvider(workInProgress);
      return null;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      popRenderLanes(workInProgress);
      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        resetWorkInProgressVersions();
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      popProvider(interruptedWork);
      break;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      popRenderLanes(interruptedWork);
      break;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(boundary, errorInfo) {
  return true;
}

function logCapturedError(boundary, errorInfo) {
  try {
    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
    // This enables renderers like ReactNative to better manage redbox behavior.

    if (logError === false) {
      return;
    }

    var error = errorInfo.value;

    if (true) {
      var source = errorInfo.source;
      var stack = errorInfo.stack;
      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
      // `preventDefault()` in window `error` handler.
      // We record this information as an expando on the error.

      if (error != null && error._suppressLogging) {
        if (boundary.tag === ClassComponent) {
          // The error is recoverable and was silenced.
          // Ignore it and don't print the stack addendum.
          // This is handy for testing error boundaries without noise.
          return;
        } // The error is fatal. Since the silencing might have
        // been accidental, we'll surface it anyway.
        // However, the browser would have silenced the original error
        // so we'll print it first, and then print the stack addendum.


        console['error'](error); // Don't transform to our wrapper
        // For a more detailed description of this block, see:
        // https://github.com/facebook/react/pull/13384
      }

      var componentName = source ? getComponentName(source.type) : null;
      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
      var errorBoundaryMessage;
      var errorBoundaryName = getComponentName(boundary.type);

      if (errorBoundaryName) {
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      } else {
        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
      }

      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
      // We don't include the original error message and JS stack because the browser
      // has already printed it. Even if the application swallows the error, it is still
      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

      console['error'](combinedMessage); // Don't transform to our wrapper
    } else {}
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, lane) {
  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logCapturedError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, lane) {
  var update = createUpdate(NoTimestamp, lane);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error$1 = errorInfo.value;

    update.payload = function () {
      logCapturedError(fiber, errorInfo);
      return getDerivedStateFromError(error$1);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

        logCapturedError(fiber, errorInfo);
      }

      var error$1 = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error$1, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          if (!includesSomeLane(fiber.lanes, SyncLane)) {
            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
          }
        }
      }
    };
  } else {
    update.callback = function () {
      markFailedErrorBoundaryForHotReloading(fiber);
    };
  }

  return update;
}

function attachPingListener(root, wakeable, lanes) {
  // Attach a listener to the promise to "ping" the root and retry. But only if
  // one does not already exist for the lanes we're currently rendering (which
  // acts like a "thread ID" here).
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap$1();
    threadIDs = new Set();
    pingCache.set(wakeable, threadIDs);
  } else {
    threadIDs = pingCache.get(wakeable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    }
  }

  if (!threadIDs.has(lanes)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(lanes);
    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
    wakeable.then(ping, ping);
  }
}

function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
  // The source fiber did not complete.
  sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.

  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a wakeable.
    var wakeable = value;

    if ((sourceFiber.mode & BlockingMode) === NoMode) {
      // Reset the memoizedState to what it was before we attempted
      // to render it.
      var currentSource = sourceFiber.alternate;

      if (currentSource) {
        sourceFiber.updateQueue = currentSource.updateQueue;
        sourceFiber.memoizedState = currentSource.memoizedState;
        sourceFiber.lanes = currentSource.lanes;
      } else {
        sourceFiber.updateQueue = null;
        sourceFiber.memoizedState = null;
      }
    }

    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

    var _workInProgress = returnFiber;

    do {
      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
        // Found the nearest boundary.
        // Stash the promise on the boundary fiber. If the boundary times out, we'll
        // attach another listener to flip the boundary back to its normal state.
        var wakeables = _workInProgress.updateQueue;

        if (wakeables === null) {
          var updateQueue = new Set();
          updateQueue.add(wakeable);
          _workInProgress.updateQueue = updateQueue;
        } else {
          wakeables.add(wakeable);
        } // If the boundary is outside of blocking mode, we should *not*
        // suspend the commit. Pretend as if the suspended component rendered
        // null and keep rendering. In the commit phase, we'll schedule a
        // subsequent synchronous update to re-render the Suspense.
        //
        // Note: It doesn't matter whether the component that suspended was
        // inside a blocking mode tree. If the Suspense is outside of it, we
        // should *not* suspend the commit.


        if ((_workInProgress.mode & BlockingMode) === NoMode) {
          _workInProgress.flags |= DidCapture;
          sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
          // But we shouldn't call any lifecycle methods or callbacks. Remove
          // all lifecycle effect tags.

          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;

            if (currentSourceFiber === null) {
              // This is a new mount. Change the tag so it's not mistaken for a
              // completed class component. For example, we should not call
              // componentWillUnmount if it is deleted.
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              // When we try rendering again, we should not reuse the current fiber,
              // since it's known to be in an inconsistent state. Use a force update to
              // prevent a bail out.
              var update = createUpdate(NoTimestamp, SyncLane);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update);
            }
          } // The source fiber did not complete. Mark it with Sync priority to
          // indicate that it still has pending work.


          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.

          return;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. Transitions apply
        // to this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.


        attachPingListener(root, wakeable, rootRenderLanes);
        _workInProgress.flags |= ShouldCapture;
        _workInProgress.lanes = rootRenderLanes;
        return;
      } // This boundary already captured during this render. Continue to the next
      // boundary.


      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
    // TODO: Use invariant so the message is stripped in prod?


    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
  } // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.


  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.flags |= ShouldCapture;
          var lane = pickArbitraryLane(rootRenderLanes);
          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);

          var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.flags |= ShouldCapture;

          var _lane = pickArbitraryLane(rootRenderLanes);

          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);

          enqueueCapturedUpdate(workInProgress, _update2);
          return;
        }

        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;

var callComponentWillUnmountWithTimer = function (current, instance) {
  instance.props = current.memoizedProps;
  instance.state = current.memoizedState;

  {
    instance.componentWillUnmount();
  }
}; // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current, unmountError);
    }
  }
}

function safelyDetachRef(current) {
  var ref = current.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);

        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current, destroy) {
  {
    invokeGuardedCallback(null, destroy, null);

    if (hasCaughtError()) {
      var error = clearCaughtError();
      captureCommitPhaseError(current, error);
    }
  }
}

function commitBeforeMutationLifeCycles(current, finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        return;
      }

    case ClassComponent:
      {
        if (finishedWork.flags & Snapshot) {
          if (current !== null) {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);

                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
          }
        }

        return;
      }

    case HostRoot:
      {
        {
          if (finishedWork.flags & Snapshot) {
            var root = finishedWork.stateNode;
            clearContainer(root.containerInfo);
          }
        }

        return;
      }

    case HostComponent:
    case HostText:
    case HostPortal:
    case IncompleteClassComponent:
      // Nothing to do for these component types
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitHookEffectListUnmount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          destroy();
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitHookEffectListMount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Mount
        var create = effect.create;
        effect.destroy = create();

        {
          var destroy = effect.destroy;

          if (destroy !== undefined && typeof destroy !== 'function') {
            var addendum = void 0;

            if (destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + destroy;
            }

            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function schedulePassiveEffects(finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      var _effect = effect,
          next = _effect.next,
          tag = _effect.tag;

      if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
        enqueuePendingPassiveHookEffectMount(finishedWork, effect);
      }

      effect = next;
    } while (effect !== firstEffect);
  }
}

function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        // At this point layout effects have already been destroyed (during mutation phase).
        // This is done to prevent sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        {
          commitHookEffectListMount(Layout | HasEffect, finishedWork);
        }

        schedulePassiveEffects(finishedWork);
        return;
      }

    case ClassComponent:
      {
        var instance = finishedWork.stateNode;

        if (finishedWork.flags & Update) {
          if (current === null) {
            // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            {
              instance.componentDidMount();
            }
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
            var prevState = current.memoizedState; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            {
              instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            }
          }
        } // TODO: I think this is now always non-null by the time it reaches the
        // commit phase. Consider removing the type check.


        var updateQueue = finishedWork.updateQueue;

        if (updateQueue !== null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              if (instance.props !== finishedWork.memoizedProps) {
                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }

              if (instance.state !== finishedWork.memoizedState) {
                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }
            }
          } // We could update instance props and state here,
          // but instead we rely on them being set during last render.
          // TODO: revisit this when we implement resuming.


          commitUpdateQueue(finishedWork, updateQueue, instance);
        }

        return;
      }

    case HostRoot:
      {
        // TODO: I think this is now always non-null by the time it reaches the
        // commit phase. Consider removing the type check.
        var _updateQueue = finishedWork.updateQueue;

        if (_updateQueue !== null) {
          var _instance = null;

          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;

              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }

          commitUpdateQueue(finishedWork, _updateQueue, _instance);
        }

        return;
      }

    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.

        if (current === null && finishedWork.flags & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props);
        }

        return;
      }

    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }

    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }

    case Profiler:
      {
        {
          var _finishedWork$memoize2 = finishedWork.memoizedProps,
              onCommit = _finishedWork$memoize2.onCommit,
              onRender = _finishedWork$memoize2.onRender;
          var effectDuration = finishedWork.stateNode.effectDuration;
          var commitTime = getCommitTime();

          if (typeof onRender === 'function') {
            {
              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
            }
          }
        }

        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        return;
      }

    case SuspenseListComponent:
    case IncompleteClassComponent:
    case FundamentalComponent:
    case ScopeComponent:
    case OffscreenComponent:
    case LegacyHiddenComponent:
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (isHidden) {
          hideInstance(instance);
        } else {
          unhideInstance(node.stateNode, node.memoizedProps);
        }
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (isHidden) {
          hideTextInstance(_instance3);
        } else {
          unhideTextInstance(_instance3, node.memoizedProps);
        }
      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag

    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current) {
  var currentRef = current.ref;

  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
} // User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay


function commitUnmount(finishedRoot, current, renderPriorityLevel) {
  onCommitUnmount(current);

  switch (current.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        var updateQueue = current.updateQueue;

        if (updateQueue !== null) {
          var lastEffect = updateQueue.lastEffect;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;

            do {
              var _effect2 = effect,
                  destroy = _effect2.destroy,
                  tag = _effect2.tag;

              if (destroy !== undefined) {
                if ((tag & Passive$1) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(current, effect);
                } else {
                  {
                    safelyCallDestroy(current, destroy);
                  }
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }

        return;
      }

    case ClassComponent:
      {
        safelyDetachRef(current);
        var instance = current.stateNode;

        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current, instance);
        }

        return;
      }

    case HostComponent:
      {
        safelyDetachRef(current);
        return;
      }

    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        {
          unmountHostComponents(finishedRoot, current);
        }

        return;
      }

    case FundamentalComponent:
      {

        return;
      }

    case DehydratedFragment:
      {

        return;
      }

    case ScopeComponent:
      {

        return;
      }
  }
}

function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  // we do an inner loop while we're still inside the host node.
  var node = root;

  while (true) {
    commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.

    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
     node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === root) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiberMutation(fiber) {
  // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.
  // Note: we cannot null out sibling here, otherwise it can cause issues
  // with findDOMNode and how it requires the sibling field to carry out
  // traversal in a later effect. See PR #16820. We now clear the sibling
  // field after effects, see: detachFiberAfterEffects.
  //
  // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
  // It may be required if the current component is an error boundary,
  // and one of its descendants throws while unmounting a passive effect.
  fiber.alternate = null;
  fiber.child = null;
  fiber.dependencies = null;
  fiber.firstEffect = null;
  fiber.lastEffect = null;
  fiber.memoizedProps = null;
  fiber.memoizedState = null;
  fiber.pendingProps = null;
  fiber.return = null;
  fiber.updateQueue = null;

  {
    fiber._debugOwner = null;
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  {
    {
      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.flags & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.flags & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  var parent;
  var isContainer;
  var parentStateNode = parentFiber.stateNode;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentStateNode;
      isContainer = false;
      break;

    case HostRoot:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case HostPortal:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case FundamentalComponent:

    // eslint-disable-next-line-no-fallthrough

    default:
      {
        {
          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

  }

  if (parentFiber.flags & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent); // Clear ContentReset from the effect tag

    parentFiber.flags &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
  // children to find all the terminal nodes.

  if (isContainer) {
    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
  } else {
    insertOrAppendPlacementNode(finishedWork, before, parent);
  }
}

function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertInContainerBefore(parent, stateNode, before);
    } else {
      appendChildToContainer(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertBefore(parent, stateNode, before);
    } else {
      appendChild(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNode(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNode(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
  // We only have the top Fiber that was deleted but we need to recurse down its
  // children to find all the terminal nodes.
  var node = current; // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.

  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

  var currentParent;
  var currentParentIsContainer;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;

      findParent: while (true) {
        if (!(parent !== null)) {
          {
            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var parentStateNode = parent.stateNode;

        switch (parent.tag) {
          case HostComponent:
            currentParent = parentStateNode;
            currentParentIsContainer = false;
            break findParent;

          case HostRoot:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case HostPortal:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

        }

        parent = parent.return;
      }

      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      } // Don't visit children because we already visited them.

    } else if (node.tag === HostPortal) {
      if (node.child !== null) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        currentParentIsContainer = true; // Visit children because portals might contain host components.

        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.

      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }

    if (node === current) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === current) {
        return;
      }

      node = node.return;

      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(finishedRoot, current, renderPriorityLevel) {
  {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(finishedRoot, current);
  }

  var alternate = current.alternate;
  detachFiberMutation(current);

  if (alternate !== null) {
    detachFiberMutation(alternate);
  }
}

function commitWork(current, finishedWork) {

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        // Layout effects are destroyed during the mutation phase so that all
        // destroy functions for all fibers are called before any create functions.
        // This prevents sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        {
          commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
        }

        return;
      }

    case ClassComponent:
      {
        return;
      }

    case HostComponent:
      {
        var instance = finishedWork.stateNode;

        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.

          var oldProps = current !== null ? current.memoizedProps : newProps;
          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;

          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps);
          }
        }

        return;
      }

    case HostText:
      {
        if (!(finishedWork.stateNode !== null)) {
          {
            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.

        var oldText = current !== null ? current.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }

    case HostRoot:
      {
        {
          var _root = finishedWork.stateNode;

          if (_root.hydrate) {
            // We've just hydrated. No need to hydrate again.
            _root.hydrate = false;
            commitHydratedContainer(_root.containerInfo);
          }
        }

        return;
      }

    case Profiler:
      {
        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseComponent(finishedWork);
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case SuspenseListComponent:
      {
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case IncompleteClassComponent:
      {
        return;
      }

    case FundamentalComponent:
      {

        break;
      }

    case ScopeComponent:
      {

        break;
      }

    case OffscreenComponent:
    case LegacyHiddenComponent:
      {
        var newState = finishedWork.memoizedState;
        var isHidden = newState !== null;
        hideOrUnhideAllChildren(finishedWork, isHidden);
        return;
      }
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitSuspenseComponent(finishedWork) {
  var newState = finishedWork.memoizedState;

  if (newState !== null) {
    markCommitTimeOfFallback();

    {
      // Hide the Offscreen component that contains the primary children. TODO:
      // Ideally, this effect would have been scheduled on the Offscreen fiber
      // itself. That's how unhiding works: the Offscreen component schedules an
      // effect on itself. However, in this case, the component didn't complete,
      // so the fiber was never added to the effect list in the normal path. We
      // could have appended it to the effect list in the Suspense component's
      // second pass, but doing it this way is less complicated. This would be
      // simpler if we got rid of the effect list and traversed the tree, like
      // we're planning to do.
      var primaryChildParent = finishedWork.child;
      hideOrUnhideAllChildren(primaryChildParent, true);
    }
  }
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current = finishedWork.alternate;

    if (current !== null) {
      var prevState = current.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of wakeables.
  // For each wakeable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var wakeables = finishedWork.updateQueue;

  if (wakeables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    wakeables.forEach(function (wakeable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

      if (!retryCache.has(wakeable)) {
        {
          if (wakeable.__reactDoNotTraceInteractions !== true) {
            retry = tracing.unstable_wrap(retry);
          }
        }

        retryCache.add(wakeable);
        wakeable.then(retry, retry);
      }
    });
  }
} // This function detects when a Suspense boundary goes from visible to hidden.
// It returns false if the boundary is already hidden.
// TODO: Use an effect tag.


function isSuspenseBoundaryBeingHidden(current, finishedWork) {
  if (current !== null) {
    var oldState = current.memoizedState;

    if (oldState === null || oldState.dehydrated !== null) {
      var newState = finishedWork.memoizedState;
      return newState !== null && newState.dehydrated === null;
    }
  }

  return false;
}

function commitResetTextContent(current) {

  resetTextContent(current.stateNode);
}

var COMPONENT_TYPE = 0;
var HAS_PSEUDO_CLASS_TYPE = 1;
var ROLE_TYPE = 2;
var TEST_NAME_TYPE = 3;
var TEXT_TYPE = 4;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor$1 = Symbol.for;
  COMPONENT_TYPE = symbolFor$1('selector.component');
  HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
  ROLE_TYPE = symbolFor$1('selector.role');
  TEST_NAME_TYPE = symbolFor$1('selector.test_id');
  TEXT_TYPE = symbolFor$1('selector.text');
}
var commitHooks = [];
function onCommitRoot$1() {
  {
    commitHooks.forEach(function (commitHook) {
      return commitHook();
    });
  }
}

var ceil = Math.ceil;
var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
var NoContext =
/*             */
0;
var BatchedContext =
/*               */
1;
var EventContext =
/*                 */
2;
var DiscreteEventContext =
/*         */
4;
var LegacyUnbatchedContext =
/*       */
8;
var RenderContext =
/*                */
16;
var CommitContext =
/*                */
32;
var RetryAfterError =
/*       */
64;
var RootIncomplete = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5; // Describes where we are in the React execution stack

var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The lanes we're rendering

var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
// This is a superset of the lanes we started working on at the root. The only
// case where it's different from `workInProgressRootRenderLanes` is when we
// enter a subtree that is hidden and needs to be unhidden: Suspense and
// Offscreen component.
//
// Most things in the work loop should deal with workInProgressRootRenderLanes.
// Most things in begin/complete phases should deal with subtreeRenderLanes.

var subtreeRenderLanes = NoLanes;
var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
// slightly different than `renderLanes` because `renderLanes` can change as you
// enter and exit an Offscreen tree. This value is the combination of all render
// lanes for the entire render phase.

var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.

var workInProgressRootPingedLanes = NoLanes;
var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
// more and prefer CPU suspense heuristics instead.

var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
// suspense heuristics and opt out of rendering more content.

var RENDER_TIMEOUT_MS = 500;

function resetRenderTimer() {
  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
}

function getRenderTargetTime() {
  return workInProgressRootRenderTargetTime;
}
var nextEffect = null;
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsRenderPriority = NoPriority$1;
var pendingPassiveEffectsLanes = NoLanes;
var pendingPassiveHookEffectsMount = [];
var pendingPassiveHookEffectsUnmount = [];
var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
// during the commit phase. This enables them to be traced across components
// that spawn new work during render. E.g. hidden boundaries, suspended SSR
// hydration or SuspenseList.
// TODO: Can use a bitmask instead of an array

var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
// event times as simultaneous, even if the actual clock time has advanced
// between the first and second call.

var currentEventTime = NoTimestamp;
var currentEventWipLanes = NoLanes;
var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
// We warn about state updates for unmounted components differently in this case.

var isFlushingPassiveEffects = false;
var focusedInstanceHandle = null;
var shouldFireAfterActiveInstanceBlur = false;
function getWorkInProgressRoot() {
  return workInProgressRoot;
}
function requestEventTime() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return now();
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoTimestamp) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = now();
  return currentEventTime;
}
function requestUpdateLane(fiber) {
  // Special cases
  var mode = fiber.mode;

  if ((mode & BlockingMode) === NoMode) {
    return SyncLane;
  } else if ((mode & ConcurrentMode) === NoMode) {
    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
  } // The algorithm for assigning an update to a lane should be stable for all
  // updates at the same priority within the same event. To do this, the inputs
  // to the algorithm must be the same. For example, we use the `renderLanes`
  // to avoid choosing a lane that is already in the middle of rendering.
  //
  // However, the "included" lanes could be mutated in between updates in the
  // same event, like if you perform an update inside `flushSync`. Or any other
  // code path that might call `prepareFreshStack`.
  //
  // The trick we use is to cache the first of each of these inputs within an
  // event. Then reset the cached values once we can be sure the event is over.
  // Our heuristic for that is whenever we enter a concurrent work loop.
  //
  // We'll do the same for `currentEventPendingLanes` below.


  if (currentEventWipLanes === NoLanes) {
    currentEventWipLanes = workInProgressRootIncludedLanes;
  }

  var isTransition = requestCurrentTransition() !== NoTransition;

  if (isTransition) {
    if (currentEventPendingLanes !== NoLanes) {
      currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
    }

    return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
  } // TODO: Remove this dependency on the Scheduler priority.
  // To do that, we're replacing it with an update lane priority.


  var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
  // This couples React to the Scheduler internals, so we're replacing it
  // with the currentUpdateLanePriority above. As an example of how this
  // could be problematic, if we're not inside `Scheduler.runWithPriority`,
  // then we'll get the priority of the current running Scheduler task,
  // which is probably not what we want.

  var lane;

  if ( // TODO: Temporary. We're removing the concept of discrete updates.
  (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
    lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
  } else {
    var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);

    lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
  }

  return lane;
}

function requestRetryLane(fiber) {
  // This is a fork of `requestUpdateLane` designed specifically for Suspense
  // "retries" — a special update that attempts to flip a Suspense boundary
  // from its placeholder state to its primary/resolved state.
  // Special cases
  var mode = fiber.mode;

  if ((mode & BlockingMode) === NoMode) {
    return SyncLane;
  } else if ((mode & ConcurrentMode) === NoMode) {
    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
  } // See `requestUpdateLane` for explanation of `currentEventWipLanes`


  if (currentEventWipLanes === NoLanes) {
    currentEventWipLanes = workInProgressRootIncludedLanes;
  }

  return findRetryLane(currentEventWipLanes);
}

function scheduleUpdateOnFiber(fiber, lane, eventTime) {
  checkForNestedUpdates();
  warnAboutRenderPhaseUpdatesInDEV(fiber);
  var root = markUpdateLaneFromFiberToRoot(fiber, lane);

  if (root === null) {
    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
    return null;
  } // Mark that the root has a pending update.


  markRootUpdated(root, lane, eventTime);

  if (root === workInProgressRoot) {
    // Received an update to a tree that's in the middle of rendering. Mark
    // that there was an interleaved update work on this root. Unless the
    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
    // phase update. In that case, we don't treat render phase updates as if
    // they were interleaved, for backwards compat reasons.
    {
      workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
    }

    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
      // The root already suspended with a delay, which means this render
      // definitely won't finish. Since we have a new update, let's mark it as
      // suspended now, right before marking the incoming update. This has the
      // effect of interrupting the current render and switching to the update.
      // TODO: Make sure this doesn't override pings that happen while we've
      // already started rendering.
      markRootSuspended$1(root, workInProgressRootRenderLanes);
    }
  } // TODO: requestUpdateLanePriority also reads the priority. Pass the
  // priority as an argument to that function and this one.


  var priorityLevel = getCurrentPriorityLevel();

  if (lane === SyncLane) {
    if ( // Check if we're inside unbatchedUpdates
    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
    (executionContext & (RenderContext | CommitContext)) === NoContext) {
      // Register pending interactions on the root to avoid losing traced interaction data.
      schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
      // root inside of batchedUpdates should be synchronous, but layout updates
      // should be deferred until the end of the batch.

      performSyncWorkOnRoot(root);
    } else {
      ensureRootIsScheduled(root, eventTime);
      schedulePendingInteractions(root, lane);

      if (executionContext === NoContext) {
        // Flush the synchronous work now, unless we're already working or inside
        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
        // scheduleCallbackForFiber to preserve the ability to schedule a callback
        // without immediately flushing it. We only do this for user-initiated
        // updates, to preserve historical behavior of legacy mode.
        resetRenderTimer();
        flushSyncCallbackQueue();
      }
    }
  } else {
    // Schedule a discrete update but only if it's not Sync.
    if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
    // discrete, even inside a discrete event.
    priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
      // This is the result of a discrete event. Track the lowest priority
      // discrete update per root so we can flush them early, if needed.
      if (rootsWithPendingDiscreteUpdates === null) {
        rootsWithPendingDiscreteUpdates = new Set([root]);
      } else {
        rootsWithPendingDiscreteUpdates.add(root);
      }
    } // Schedule other updates after in case the callback is sync.


    ensureRootIsScheduled(root, eventTime);
    schedulePendingInteractions(root, lane);
  } // We use this when assigning a lane for a transition inside
  // `requestUpdateLane`. We assume it's the same as the root being updated,
  // since in the common case of a single root app it probably is. If it's not
  // the same root, then it's not a huge deal, we just might batch more stuff
  // together more than necessary.


  mostRecentlyUpdatedRoot = root;
} // This is split into a separate function so we can mark a fiber with pending
// work without treating it as a typical update that originates from an event;
// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
// on a fiber.

function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
  // Update the source fiber's lanes
  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
  var alternate = sourceFiber.alternate;

  if (alternate !== null) {
    alternate.lanes = mergeLanes(alternate.lanes, lane);
  }

  {
    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
    }
  } // Walk the parent path to the root and update the child expiration time.


  var node = sourceFiber;
  var parent = sourceFiber.return;

  while (parent !== null) {
    parent.childLanes = mergeLanes(parent.childLanes, lane);
    alternate = parent.alternate;

    if (alternate !== null) {
      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
    } else {
      {
        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        }
      }
    }

    node = parent;
    parent = parent.return;
  }

  if (node.tag === HostRoot) {
    var root = node.stateNode;
    return root;
  } else {
    return null;
  }
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the priority
// of the existing task is the same as the priority of the next level that the
// root has work on. This function is called on every update, and right before
// exiting a task.


function ensureRootIsScheduled(root, currentTime) {
  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
  // expired so we know to work on those next.

  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.

  var newCallbackPriority = returnNextLanesPriority();

  if (nextLanes === NoLanes) {
    // Special case: There's nothing to work on.
    if (existingCallbackNode !== null) {
      cancelCallback(existingCallbackNode);
      root.callbackNode = null;
      root.callbackPriority = NoLanePriority;
    }

    return;
  } // Check if there's an existing task. We may be able to reuse it.


  if (existingCallbackNode !== null) {
    var existingCallbackPriority = root.callbackPriority;

    if (existingCallbackPriority === newCallbackPriority) {
      // The priority hasn't changed. We can reuse the existing task. Exit.
      return;
    } // The priority changed. Cancel the existing callback. We'll schedule a new
    // one below.


    cancelCallback(existingCallbackNode);
  } // Schedule a new callback.


  var newCallbackNode;

  if (newCallbackPriority === SyncLanePriority) {
    // Special case: Sync React callbacks are scheduled on a special
    // internal queue
    newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
  } else if (newCallbackPriority === SyncBatchedLanePriority) {
    newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
  } else {
    var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
    newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
  }

  root.callbackPriority = newCallbackPriority;
  root.callbackNode = newCallbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root) {
  // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.
  currentEventTime = NoTimestamp;
  currentEventWipLanes = NoLanes;
  currentEventPendingLanes = NoLanes;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  } // Flush any pending passive effects before deciding which lanes to work on,
  // in case they schedule additional work.


  var originalCallbackNode = root.callbackNode;
  var didFlushPassiveEffects = flushPassiveEffects();

  if (didFlushPassiveEffects) {
    // Something in the passive effect phase may have canceled the current task.
    // Check if the task node for this root was changed.
    if (root.callbackNode !== originalCallbackNode) {
      // The current task was canceled. Exit. We don't need to call
      // `ensureRootIsScheduled` because the check above implies either that
      // there's a new task, or that there's no remaining work on this root.
      return null;
    }
  } // Determine the next expiration time to work on, using the fields stored
  // on the root.


  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

  if (lanes === NoLanes) {
    // Defensive coding. This is never expected to happen.
    return null;
  }

  var exitStatus = renderRootConcurrent(root, lanes);

  if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
    // The render included lanes that were updated during the render phase.
    // For example, when unhiding a hidden tree, we include all the lanes
    // that were previously skipped when the tree was hidden. That set of
    // lanes is a superset of the lanes we started rendering with.
    //
    // So we'll throw out the current work and restart.
    prepareFreshStack(root, NoLanes);
  } else if (exitStatus !== RootIncomplete) {
    if (exitStatus === RootErrored) {
      executionContext |= RetryAfterError; // If an error occurred during hydration,
      // discard server response and fall back to client side render.

      if (root.hydrate) {
        root.hydrate = false;
        clearContainer(root.containerInfo);
      } // If something threw an error, try rendering one more time. We'll render
      // synchronously to block concurrent data mutations, and we'll includes
      // all pending updates are included. If it still fails after the second
      // attempt, we'll give up and commit the resulting tree.


      lanes = getLanesToRetrySynchronouslyOnError(root);

      if (lanes !== NoLanes) {
        exitStatus = renderRootSync(root, lanes);
      }
    }

    if (exitStatus === RootFatalErrored) {
      var fatalError = workInProgressRootFatalError;
      prepareFreshStack(root, NoLanes);
      markRootSuspended$1(root, lanes);
      ensureRootIsScheduled(root, now());
      throw fatalError;
    } // We now have a consistent tree. The next step is either to commit it,
    // or, if something suspended, wait to commit it after a timeout.


    var finishedWork = root.current.alternate;
    root.finishedWork = finishedWork;
    root.finishedLanes = lanes;
    finishConcurrentRender(root, exitStatus, lanes);
  }

  ensureRootIsScheduled(root, now());

  if (root.callbackNode === originalCallbackNode) {
    // The task node scheduled for this root is the same one that's
    // currently executed. Need to return a continuation.
    return performConcurrentWorkOnRoot.bind(null, root);
  }

  return null;
}

function finishConcurrentRender(root, exitStatus, lanes) {
  switch (exitStatus) {
    case RootIncomplete:
    case RootFatalErrored:
      {
        {
          {
            throw Error( "Root did not complete. This is a bug in React." );
          }
        }
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // We should have already attempted to retry this tree. If we reached
        // this point, it errored again. Commit it.
        commitRoot(root);
        break;
      }

    case RootSuspended:
      {
        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.

        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
        !shouldForceFlushFallbacksInDEV()) {
          // This render only included retries, no updates. Throttle committing
          // retries so that we don't show too many loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            var nextLanes = getNextLanes(root, NoLanes);

            if (nextLanes !== NoLanes) {
              // There's additional work on this root.
              break;
            }

            var suspendedLanes = root.suspendedLanes;

            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              // FIXME: What if the suspended lanes are Idle? Should not restart.
              var eventTime = requestEventTime();
              markRootPinged(root, suspendedLanes);
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspended$1(root, lanes);

        if (includesOnlyTransitions(lanes)) {
          // This is a transition, so we should exit without committing a
          // placeholder and without scheduling a timeout. Delay indefinitely
          // until we receive more data.
          break;
        }

        if (!shouldForceFlushFallbacksInDEV()) {
          // This is not a transition, but we did trigger an avoided state.
          // Schedule a placeholder to display after a short delay, using the Just
          // Noticeable Difference.
          // TODO: Is the JND optimization worth the added complexity? If this is
          // the only reason we track the event time, then probably not.
          // Consider removing.
          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
          var eventTimeMs = mostRecentEventTime;
          var timeElapsedMs = now() - eventTimeMs;

          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // Instead of committing the fallback immediately, wait for more data
            // to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
            break;
          }
        } // Commit the placeholder.


        commitRoot(root);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        commitRoot(root);
        break;
      }

    default:
      {
        {
          {
            throw Error( "Unknown root exit status." );
          }
        }
      }
  }
}

function markRootSuspended$1(root, suspendedLanes) {
  // When suspending, we should always exclude lanes that were pinged or (more
  // rarely, since we try to avoid it) updated during the render phase.
  // TODO: Lol maybe there's a better way to factor this besides this
  // obnoxiously named function :)
  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
  markRootSuspended(root, suspendedLanes);
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  flushPassiveEffects();
  var lanes;
  var exitStatus;

  if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
    // There's a partial tree, and at least one of its lanes has expired. Finish
    // rendering it before rendering the rest of the expired work.
    lanes = workInProgressRootRenderLanes;
    exitStatus = renderRootSync(root, lanes);

    if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
      // The render included lanes that were updated during the render phase.
      // For example, when unhiding a hidden tree, we include all the lanes
      // that were previously skipped when the tree was hidden. That set of
      // lanes is a superset of the lanes we started rendering with.
      //
      // Note that this only happens when part of the tree is rendered
      // concurrently. If the whole tree is rendered synchronously, then there
      // are no interleaved events.
      lanes = getNextLanes(root, lanes);
      exitStatus = renderRootSync(root, lanes);
    }
  } else {
    lanes = getNextLanes(root, NoLanes);
    exitStatus = renderRootSync(root, lanes);
  }

  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
    executionContext |= RetryAfterError; // If an error occurred during hydration,
    // discard server response and fall back to client side render.

    if (root.hydrate) {
      root.hydrate = false;
      clearContainer(root.containerInfo);
    } // If something threw an error, try rendering one more time. We'll render
    // synchronously to block concurrent data mutations, and we'll includes
    // all pending updates are included. If it still fails after the second
    // attempt, we'll give up and commit the resulting tree.


    lanes = getLanesToRetrySynchronouslyOnError(root);

    if (lanes !== NoLanes) {
      exitStatus = renderRootSync(root, lanes);
    }
  }

  if (exitStatus === RootFatalErrored) {
    var fatalError = workInProgressRootFatalError;
    prepareFreshStack(root, NoLanes);
    markRootSuspended$1(root, lanes);
    ensureRootIsScheduled(root, now());
    throw fatalError;
  } // We now have a consistent tree. Because this is a sync render, we
  // will commit it even if something suspended.


  var finishedWork = root.current.alternate;
  root.finishedWork = finishedWork;
  root.finishedLanes = lanes;
  commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next
  // pending level.

  ensureRootIsScheduled(root, now());
  return null;
}
function flushDiscreteUpdates() {
  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
  // those two cases. Need to fix this before exposing flushDiscreteUpdates
  // as a public API.
  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
    {
      if ((executionContext & RenderContext) !== NoContext) {
        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
      }
    } // We're already rendering, so we can't synchronously flush pending work.
    // This is probably a nested event dispatch triggered by a lifecycle/effect,
    // like `el.focus()`. Exit.


    return;
  }

  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
  // they fire before the next serial event.

  flushPassiveEffects();
}

function flushPendingDiscreteUpdates() {
  if (rootsWithPendingDiscreteUpdates !== null) {
    // For each root with pending discrete updates, schedule a callback to
    // immediately flush them.
    var roots = rootsWithPendingDiscreteUpdates;
    rootsWithPendingDiscreteUpdates = null;
    roots.forEach(function (root) {
      markDiscreteUpdatesExpired(root);
      ensureRootIsScheduled(root, now());
    });
  } // Now flush the immediate queue.


  flushSyncCallbackQueue();
}

function batchedUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      resetRenderTimer();
      flushSyncCallbackQueue();
    }
  }
}
function batchedEventUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= EventContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      resetRenderTimer();
      flushSyncCallbackQueue();
    }
  }
}
function discreteUpdates$1(fn, a, b, c, d) {
  var prevExecutionContext = executionContext;
  executionContext |= DiscreteEventContext;

  {
    try {
      return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
    } finally {
      executionContext = prevExecutionContext;

      if (executionContext === NoContext) {
        // Flush the immediate callbacks that were scheduled during this batch
        resetRenderTimer();
        flushSyncCallbackQueue();
      }
    }
  }
}
function unbatchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext &= ~BatchedContext;
  executionContext |= LegacyUnbatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      resetRenderTimer();
      flushSyncCallbackQueue();
    }
  }
}
function flushSync(fn, a) {
  var prevExecutionContext = executionContext;

  if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
    {
      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
    }

    return fn(a);
  }

  executionContext |= BatchedContext;

  {
    try {
      if (fn) {
        return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
      } else {
        return undefined;
      }
    } finally {
      executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
      // Note that this will happen even if batchedUpdates is higher up
      // the stack.

      flushSyncCallbackQueue();
    }
  }
}
function pushRenderLanes(fiber, lanes) {
  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
}
function popRenderLanes(fiber) {
  subtreeRenderLanes = subtreeRenderLanesCursor.current;
  pop(subtreeRenderLanesCursor, fiber);
}

function prepareFreshStack(root, lanes) {
  root.finishedWork = null;
  root.finishedLanes = NoLanes;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  workInProgress = createWorkInProgress(root.current, null);
  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
  workInProgressRootExitStatus = RootIncomplete;
  workInProgressRootFatalError = null;
  workInProgressRootSkippedLanes = NoLanes;
  workInProgressRootUpdatedLanes = NoLanes;
  workInProgressRootPingedLanes = NoLanes;

  {
    spawnedWorkDuringRender = null;
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
  }
}

function handleError(root, thrownValue) {
  do {
    var erroredWork = workInProgress;

    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooksAfterThrow();
      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
      // separate issue. Write a regression test using string refs.

      ReactCurrentOwner$2.current = null;

      if (erroredWork === null || erroredWork.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
        // sibling, or the parent if there are no siblings. But since the root
        // has no siblings nor a parent, we set it to null. Usually this is
        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
        // intentionally not calling those, we need set it here.
        // TODO: Consider calling `unwindWork` to pop the contexts.

        workInProgress = null;
        return;
      }

      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
      }

      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
      completeUnitOfWork(erroredWork);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;

      if (workInProgress === erroredWork && erroredWork !== null) {
        // If this boundary has already errored, then we had trouble processing
        // the error. Bubble it to the next boundary.
        erroredWork = erroredWork.return;
        workInProgress = erroredWork;
      } else {
        erroredWork = workInProgress;
      }

      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher() {
  var prevDispatcher = ReactCurrentDispatcher$2.current;
  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher$2.current = prevDispatcher;
}

function pushInteractions(root) {
  {
    var prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;
    return prevInteractions;
  }
}

function popInteractions(prevInteractions) {
  {
    tracing.__interactionsRef.current = prevInteractions;
  }
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now();
}
function markSkippedUpdateLanes(lane) {
  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there are updates that we skipped tree that might have unblocked
  // this render.


  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
    // Mark the current render as suspended so that we switch to working on
    // the updates that were skipped. Usually we only suspend at the end of
    // the render phase.
    // TODO: We should probably always mark the root as suspended immediately
    // (inside this function), since by suspending at the end of the render
    // phase introduces a potential mistake where we suspend lanes that were
    // pinged or updated while we were rendering.
    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
  }
}
function renderDidError() {
  if (workInProgressRootExitStatus !== RootCompleted) {
    workInProgressRootExitStatus = RootErrored;
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootIncomplete;
}

function renderRootSync(root, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= RenderContext;
  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
    prepareFreshStack(root, lanes);
    startWorkOnPendingInteractions(root, lanes);
  }

  var prevInteractions = pushInteractions(root);

  do {
    try {
      workLoopSync();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    }
  } while (true);

  resetContextDependencies();

  {
    popInteractions(prevInteractions);
  }

  executionContext = prevExecutionContext;
  popDispatcher(prevDispatcher);

  if (workInProgress !== null) {
    // This is a sync render, so we should have finished the whole tree.
    {
      {
        throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }


  workInProgressRoot = null;
  workInProgressRootRenderLanes = NoLanes;
  return workInProgressRootExitStatus;
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    performUnitOfWork(workInProgress);
  }
}

function renderRootConcurrent(root, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= RenderContext;
  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
    resetRenderTimer();
    prepareFreshStack(root, lanes);
    startWorkOnPendingInteractions(root, lanes);
  }

  var prevInteractions = pushInteractions(root);

  do {
    try {
      workLoopConcurrent();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    }
  } while (true);

  resetContextDependencies();

  {
    popInteractions(prevInteractions);
  }

  popDispatcher(prevDispatcher);
  executionContext = prevExecutionContext;


  if (workInProgress !== null) {

    return RootIncomplete;
  } else {


    workInProgressRoot = null;
    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

    return workInProgressRootExitStatus;
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current = unitOfWork.alternate;
  setCurrentFiber(unitOfWork);
  var next;

  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    completeUnitOfWork(unitOfWork);
  } else {
    workInProgress = next;
  }

  ReactCurrentOwner$2.current = null;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  var completedWork = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current = completedWork.alternate;
    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

    if ((completedWork.flags & Incomplete) === NoFlags) {
      setCurrentFiber(completedWork);
      var next = void 0;

      if ( (completedWork.mode & ProfileMode) === NoMode) {
        next = completeWork(current, completedWork, subtreeRenderLanes);
      } else {
        startProfilerTimer(completedWork);
        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
      }

      resetCurrentFiber();

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        workInProgress = next;
        return;
      }

      resetChildLanes(completedWork);

      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
      (returnFiber.flags & Incomplete) === NoFlags) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = completedWork.firstEffect;
        }

        if (completedWork.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
          }

          returnFiber.lastEffect = completedWork.lastEffect;
        } // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if needed,
        // by doing multiple passes over the effect list. We don't want to
        // schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.


        var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
        // list. PerformedWork effect is read by React DevTools but shouldn't be
        // committed.

        if (flags > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = completedWork;
          } else {
            returnFiber.firstEffect = completedWork;
          }

          returnFiber.lastEffect = completedWork;
        }
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.


      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        _next.flags &= HostEffectMask;
        workInProgress = _next;
        return;
      }

      if ( (completedWork.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

        var actualDuration = completedWork.actualDuration;
        var child = completedWork.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        completedWork.actualDuration = actualDuration;
      }

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.flags |= Incomplete;
      }
    }

    var siblingFiber = completedWork.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      workInProgress = siblingFiber;
      return;
    } // Otherwise, return to the parent


    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

    workInProgress = completedWork;
  } while (completedWork !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootCompleted;
  }
}

function resetChildLanes(completedWork) {
  if ( // TODO: Move this check out of the hot path by moving `resetChildLanes`
  // to switch statement in `completeWork`.
  (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildLanes = NoLanes; // Bubble up the earliest expiration time.

  if ( (completedWork.mode & ProfileMode) !== NoMode) {
    // In profiling mode, resetChildExpirationTime is also used to reset
    // profiler durations.
    var actualDuration = completedWork.actualDuration;
    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration. If
    // the fiber has not been cloned though, (meaning no work was done), then
    // this value will reflect the amount of time spent working on a previous
    // render. In that case it should not bubble. We determine whether it was
    // cloned by comparing the child pointer.

    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
    var child = completedWork.child;

    while (child !== null) {
      newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));

      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }

      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }

    var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;

    if (isTimedOutSuspense) {
      // Don't count time spent in a timed out Suspense subtree as part of the base duration.
      var primaryChildFragment = completedWork.child;

      if (primaryChildFragment !== null) {
        treeBaseDuration -= primaryChildFragment.treeBaseDuration;
      }
    }

    completedWork.actualDuration = actualDuration;
    completedWork.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = completedWork.child;

    while (_child !== null) {
      newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
      _child = _child.sibling;
    }
  }

  completedWork.childLanes = newChildLanes;
}

function commitRoot(root) {
  var renderPriorityLevel = getCurrentPriorityLevel();
  runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
  return null;
}

function commitRootImpl(root, renderPriorityLevel) {
  do {
    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
    // means `flushPassiveEffects` will sometimes result in additional
    // passive effects. So we need to keep flushing in a loop until there are
    // no more pending effects.
    // TODO: Might be better if `flushPassiveEffects` did not automatically
    // flush synchronous work at the end, to avoid factoring hazards like this.
    flushPassiveEffects();
  } while (rootWithPendingPassiveEffects !== null);

  flushRenderPhaseStrictModeWarningsInDEV();

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  var finishedWork = root.finishedWork;
  var lanes = root.finishedLanes;

  if (finishedWork === null) {

    return null;
  }

  root.finishedWork = null;
  root.finishedLanes = NoLanes;

  if (!(finishedWork !== root.current)) {
    {
      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
    }
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null; // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
  markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of
  // `flushDiscreteUpdates` starts a useless render pass which may cancels
  // a scheduled timeout.

  if (rootsWithPendingDiscreteUpdates !== null) {
    if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
      rootsWithPendingDiscreteUpdates.delete(root);
    }
  }

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    workInProgressRootRenderLanes = NoLanes;
  } // Get the list of effects.


  var firstEffect;

  if (finishedWork.flags > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if it
    // had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  if (firstEffect !== null) {

    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    focusedInstanceHandle = prepareForCommit(root.containerInfo);
    shouldFireAfterActiveInstanceBlur = false;
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null); // We no longer need to track the active instance fiber


    focusedInstanceHandle = null;

    {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    } // The next phase is the mutation phase, where we mutate the host tree.


    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
    // the host tree after it's been mutated. The idiomatic use case for this is
    // layout, but class component lifecycles also fire here for legacy reasons.

    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error2 = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error2);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
    // opportunity to paint.

    requestPaint();

    {
      popInteractions(prevInteractions);
    }

    executionContext = prevExecutionContext;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    {
      recordCommitTime();
    }
  }

  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsLanes = lanes;
    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
  } else {
    // We are done with the effect chain at this point so let's clear the
    // nextEffect pointers to assist with GC. If we have passive effects, we'll
    // clear this in flushPassiveEffects.
    nextEffect = firstEffect;

    while (nextEffect !== null) {
      var nextNextEffect = nextEffect.nextEffect;
      nextEffect.nextEffect = null;

      if (nextEffect.flags & Deletion) {
        detachFiberAfterEffects(nextEffect);
      }

      nextEffect = nextNextEffect;
    }
  } // Read this again, since an effect might have updated it


  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root

  if (remainingLanes !== NoLanes) {
    {
      if (spawnedWorkDuringRender !== null) {
        var expirationTimes = spawnedWorkDuringRender;
        spawnedWorkDuringRender = null;

        for (var i = 0; i < expirationTimes.length; i++) {
          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
        }
      }

      schedulePendingInteractions(root, remainingLanes);
    }
  } else {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  {
    if (!rootDidHavePassiveEffects) {
      // If there are no passive effects, then we can complete the pending interactions.
      // Otherwise, we'll wait until after the passive effects are flushed.
      // Wait to do this until after remaining work has been scheduled,
      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
      finishPendingInteractions(root, lanes);
    }
  }

  if (remainingLanes === SyncLane) {
    // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.
    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  }

  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

  {
    onCommitRoot$1();
  } // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.


  ensureRootIsScheduled(root, now());

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var _error3 = firstUncaughtError;
    firstUncaughtError = null;
    throw _error3;
  }

  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
    // synchronously, but layout updates should be deferred until the end
    // of the batch.


    return null;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbackQueue();

  return null;
}

function commitBeforeMutationEffects() {
  while (nextEffect !== null) {
    var current = nextEffect.alternate;

    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
      if ((nextEffect.flags & Deletion) !== NoFlags) {
        if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
          shouldFireAfterActiveInstanceBlur = true;
        }
      } else {
        // TODO: Move this out of the hot path using a dedicated effect tag.
        if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
          shouldFireAfterActiveInstanceBlur = true;
        }
      }
    }

    var flags = nextEffect.flags;

    if ((flags & Snapshot) !== NoFlags) {
      setCurrentFiber(nextEffect);
      commitBeforeMutationLifeCycles(current, nextEffect);
      resetCurrentFiber();
    }

    if ((flags & Passive) !== NoFlags) {
      // If there are passive effects, schedule a callback to flush at
      // the earliest opportunity.
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority$1, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }

    nextEffect = nextEffect.nextEffect;
  }
}

function commitMutationEffects(root, renderPriorityLevel) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var flags = nextEffect.flags;

    if (flags & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (flags & Ref) {
      var current = nextEffect.alternate;

      if (current !== null) {
        commitDetachRef(current);
      }
    } // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every possible
    // bitmap value, we remove the secondary effects from the effect tag and
    // switch on that value.


    var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);

    switch (primaryFlags) {
      case Placement:
        {
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted does
          // and isMounted is deprecated anyway so we should be able to kill this.

          nextEffect.flags &= ~Placement;
          break;
        }

      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.

          nextEffect.flags &= ~Placement; // Update

          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }

      case Hydrating:
        {
          nextEffect.flags &= ~Hydrating;
          break;
        }

      case HydratingAndUpdate:
        {
          nextEffect.flags &= ~Hydrating; // Update

          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }

      case Update:
        {
          var _current3 = nextEffect.alternate;
          commitWork(_current3, nextEffect);
          break;
        }

      case Deletion:
        {
          commitDeletion(root, nextEffect);
          break;
        }
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function commitLayoutEffects(root, committedLanes) {


  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var flags = nextEffect.flags;

    if (flags & (Update | Callback)) {
      var current = nextEffect.alternate;
      commitLifeCycles(root, current, nextEffect);
    }

    {
      if (flags & Ref) {
        commitAttachRef(nextEffect);
      }
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function flushPassiveEffects() {
  // Returns whether passive effects were flushed.
  if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
    pendingPassiveEffectsRenderPriority = NoPriority$1;

    {
      return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
    }
  }

  return false;
}
function enqueuePendingPassiveHookEffectMount(fiber, effect) {
  pendingPassiveHookEffectsMount.push(effect, fiber);

  if (!rootDoesHavePassiveEffects) {
    rootDoesHavePassiveEffects = true;
    scheduleCallback(NormalPriority$1, function () {
      flushPassiveEffects();
      return null;
    });
  }
}
function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
  pendingPassiveHookEffectsUnmount.push(effect, fiber);

  {
    fiber.flags |= PassiveUnmountPendingDev;
    var alternate = fiber.alternate;

    if (alternate !== null) {
      alternate.flags |= PassiveUnmountPendingDev;
    }
  }

  if (!rootDoesHavePassiveEffects) {
    rootDoesHavePassiveEffects = true;
    scheduleCallback(NormalPriority$1, function () {
      flushPassiveEffects();
      return null;
    });
  }
}

function invokePassiveEffectCreate(effect) {
  var create = effect.create;
  effect.destroy = create();
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  }

  var root = rootWithPendingPassiveEffects;
  var lanes = pendingPassiveEffectsLanes;
  rootWithPendingPassiveEffects = null;
  pendingPassiveEffectsLanes = NoLanes;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Cannot flush passive effects while already rendering." );
    }
  }

  {
    isFlushingPassiveEffects = true;
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  var prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called
  // before ANY passive effect create functions are called.
  // Otherwise effects in sibling components might interfere with each other.
  // e.g. a destroy function in one component may unintentionally override a ref
  // value set by a create function in another component.
  // Layout effects have the same constraint.
  // First pass: Destroy stale passive effects.

  var unmountEffects = pendingPassiveHookEffectsUnmount;
  pendingPassiveHookEffectsUnmount = [];

  for (var i = 0; i < unmountEffects.length; i += 2) {
    var _effect = unmountEffects[i];
    var fiber = unmountEffects[i + 1];
    var destroy = _effect.destroy;
    _effect.destroy = undefined;

    {
      fiber.flags &= ~PassiveUnmountPendingDev;
      var alternate = fiber.alternate;

      if (alternate !== null) {
        alternate.flags &= ~PassiveUnmountPendingDev;
      }
    }

    if (typeof destroy === 'function') {
      {
        setCurrentFiber(fiber);

        {
          invokeGuardedCallback(null, destroy, null);
        }

        if (hasCaughtError()) {
          if (!(fiber !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(fiber, error);
        }

        resetCurrentFiber();
      }
    }
  } // Second pass: Create new passive effects.


  var mountEffects = pendingPassiveHookEffectsMount;
  pendingPassiveHookEffectsMount = [];

  for (var _i = 0; _i < mountEffects.length; _i += 2) {
    var _effect2 = mountEffects[_i];
    var _fiber = mountEffects[_i + 1];

    {
      setCurrentFiber(_fiber);

      {
        invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
      }

      if (hasCaughtError()) {
        if (!(_fiber !== null)) {
          {
            throw Error( "Should be working on an effect." );
          }
        }

        var _error4 = clearCaughtError();

        captureCommitPhaseError(_fiber, _error4);
      }

      resetCurrentFiber();
    }
  } // Note: This currently assumes there are no passive effects on the root fiber
  // because the root is not part of its own effect list.
  // This could change in the future.


  var effect = root.current.firstEffect;

  while (effect !== null) {
    var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

    effect.nextEffect = null;

    if (effect.flags & Deletion) {
      detachFiberAfterEffects(effect);
    }

    effect = nextNextEffect;
  }

  {
    popInteractions(prevInteractions);
    finishPendingInteractions(root, lanes);
  }

  {
    isFlushingPassiveEffects = false;
  }

  executionContext = prevExecutionContext;
  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
  // exceeds the limit, we'll fire a warning.

  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValue(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
  enqueueUpdate(rootFiber, update);
  var eventTime = requestEventTime();
  var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);

  if (root !== null) {
    markRootUpdated(root, SyncLane, eventTime);
    ensureRootIsScheduled(root, eventTime);
    schedulePendingInteractions(root, SyncLane);
  }
}

function captureCommitPhaseError(sourceFiber, error) {
  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    return;
  }

  var fiber = sourceFiber.return;

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
        enqueueUpdate(fiber, update);
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);

        if (root !== null) {
          markRootUpdated(root, SyncLane, eventTime);
          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, SyncLane);
        } else {
          // This component has already been unmounted.
          // We can't schedule any follow up work for the root because the fiber is already unmounted,
          // but we can still call the log-only boundary so the error isn't swallowed.
          //
          // TODO This is only a temporary bandaid for the old reconciler fork.
          // We can delete this special case once the new fork is merged.
          if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
            try {
              instance.componentDidCatch(error, errorInfo);
            } catch (errorToIgnore) {// TODO Ignore this error? Rethrow it?
              // This is kind of an edge case.
            }
          }
        }

        return;
      }
    }

    fiber = fiber.return;
  }
}
function pingSuspendedRoot(root, wakeable, pingedLanes) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The wakeable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(wakeable);
  }

  var eventTime = requestEventTime();
  markRootPinged(root, pingedLanes);

  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, or if it's a retry, we'll always suspend
    // so we can always restart.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root.
      prepareFreshStack(root, NoLanes);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
    }
  }

  ensureRootIsScheduled(root, eventTime);
  schedulePendingInteractions(root, pingedLanes);
}

function retryTimedOutBoundary(boundaryFiber, retryLane) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new expiration time.
  if (retryLane === NoLane) {
    retryLane = requestRetryLane(boundaryFiber);
  } // TODO: Special case idle priority?


  var eventTime = requestEventTime();
  var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);

  if (root !== null) {
    markRootUpdated(root, retryLane, eventTime);
    ensureRootIsScheduled(root, eventTime);
    schedulePendingInteractions(root, retryLane);
  }
}
function resolveRetryWakeable(boundaryFiber, wakeable) {
  var retryLane = NoLane; // Default

  var retryCache;

  {
    retryCache = boundaryFiber.stateNode;
  }

  if (retryCache !== null) {
    // The wakeable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(wakeable);
  }

  retryTimedOutBoundary(boundaryFiber, retryLane);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;

    {
      {
        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
      }
    }
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;

      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

var didWarnStateUpdateForNotYetMountedComponent = null;

function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
  {
    if ((executionContext & RenderContext) !== NoContext) {
      // We let the other warning about render phase updates deal with this one.
      return;
    }

    if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
      return;
    }

    var tag = fiber.tag;

    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    } // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
    }

    var previousFiber = current;

    try {
      setCurrentFiber(fiber);

      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
    } finally {
      if (previousFiber) {
        setCurrentFiber(fiber);
      } else {
        resetCurrentFiber();
      }
    }
  }
}

var didWarnStateUpdateForUnmountedComponent = null;

function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
  {
    var tag = fiber.tag;

    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    } // If there are pending passive effects unmounts for this Fiber,
    // we can assume that they would have prevented this update.


    if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
      return;
    } // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForUnmountedComponent !== null) {
      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForUnmountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
    }

    if (isFlushingPassiveEffects) ; else {
      var previousFiber = current;

      try {
        setCurrentFiber(fiber);

        error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
      } finally {
        if (previousFiber) {
          setCurrentFiber(fiber);
        } else {
          resetCurrentFiber();
        }
      }
    }
  }
}

var beginWork$1;

{
  var dummyFiber = null;

  beginWork$1 = function (current, unitOfWork, lanes) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork(current, unitOfWork, lanes);
    } catch (originalError) {
      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises. Treat everything else like an error.
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if ( unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

      if (hasCaughtError()) {
        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
        // Rethrow this error instead of the original one.

        throw replayError;
      } else {
        // This branch is reachable if the render phase is impure.
        throw originalError;
      }
    }
  };
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInRenderForAnotherComponent;

{
  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
}

function warnAboutRenderPhaseUpdatesInDEV(fiber) {
  {
    if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

            var dedupeKey = renderingComponentName;

            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
            }

            break;
          }

        case ClassComponent:
          {
            if (!didWarnAboutUpdateInRender) {
              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

              didWarnAboutUpdateInRender = true;
            }

            break;
          }
      }
    }
  }
} // a 'shared' variable that changes when act() opens/closes in tests.


var IsThisRendererActing = {
  current: false
};
function warnIfNotScopedWithMatchingAct(fiber) {
  {
    if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
      var previousFiber = current;

      try {
        setCurrentFiber(fiber);

        error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
        'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
        'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
      } finally {
        if (previousFiber) {
          setCurrentFiber(fiber);
        } else {
          resetCurrentFiber();
        }
      }
    }
  }
}
function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
  {
    if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
    }
  }
}

function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
  {
    if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      var previousFiber = current;

      try {
        setCurrentFiber(fiber);

        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
      } finally {
        if (previousFiber) {
          setCurrentFiber(fiber);
        } else {
          resetCurrentFiber();
        }
      }
    }
  }
}

var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
// scheduler is the actual recommendation. The alternative could be a testing build,
// a new lib, or whatever; we dunno just yet. This message is for early adopters
// to get their tests right.

function warnIfUnmockedScheduler(fiber) {
  {
    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
        didWarnAboutUnmockedScheduler = true;

        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + // Break up requires to avoid accidentally parsing them as dependencies.
        "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
      }
    }
  }
}

function computeThreadID(root, lane) {
  // Interaction threads are unique per root and expiration time.
  // NOTE: Intentionally unsound cast. All that matters is that it's a number
  // and it represents a batch of work. Could make a helper function instead,
  // but meh this is fine for now.
  return lane * 1000 + root.interactionThreadID;
}

function markSpawnedWork(lane) {

  if (spawnedWorkDuringRender === null) {
    spawnedWorkDuringRender = [lane];
  } else {
    spawnedWorkDuringRender.push(lane);
  }
}

function scheduleInteractions(root, lane, interactions) {

  if (interactions.size > 0) {
    var pendingInteractionMap = root.pendingInteractionMap;
    var pendingInteractions = pendingInteractionMap.get(lane);

    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (!pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.

      interactions.forEach(function (interaction) {
        interaction.__count++;
      });
    }

    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, lane);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function schedulePendingInteractions(root, lane) {

  scheduleInteractions(root, lane, tracing.__interactionsRef.current);
}

function startWorkOnPendingInteractions(root, lanes) {
  // we can accurately attribute time spent working on it, And so that cascading
  // work triggered during the render phase will be associated with it.


  var interactions = new Set();
  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
    if (includesSomeLane(lanes, scheduledLane)) {
      scheduledInteractions.forEach(function (interaction) {
        return interactions.add(interaction);
      });
    }
  }); // Store the current set of interactions on the FiberRoot for a few reasons:
  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
  // without having to recalculate it. We will also use it in commitWork() to
  // pass to any Profiler onRender() hooks. This also provides DevTools with a
  // way to access it when the onCommitRoot() hook is called.

  root.memoizedInteractions = interactions;

  if (interactions.size > 0) {
    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, lanes);

      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority$1, function () {
          throw error;
        });
      }
    }
  }
}

function finishPendingInteractions(root, committedLanes) {

  var remainingLanesAfterCommit = root.pendingLanes;
  var subscriber;

  try {
    subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null && root.memoizedInteractions.size > 0) {
      // FIXME: More than one lane can finish in a single commit.
      var threadID = computeThreadID(root, committedLanes);
      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
    }
  } catch (error) {
    // If the subscriber throws, rethrow it in a separate task
    scheduleCallback(ImmediatePriority$1, function () {
      throw error;
    });
  } finally {
    // Clear completed interactions from the pending Map.
    // Unless the render was suspended or cascading work was scheduled,
    // In which case– leave pending interactions until the subsequent render.
    var pendingInteractionMap = root.pendingInteractionMap;
    pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
      // Only decrement the pending interaction count if we're done.
      // If there's still work at the current priority,
      // That indicates that we are waiting for suspense data.
      if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
        pendingInteractionMap.delete(lane);
        scheduledInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // If the subscriber throws, rethrow it in a separate task
              scheduleCallback(ImmediatePriority$1, function () {
                throw error;
              });
            }
          }
        });
      }
    });
  }
} // `act` testing API

function shouldForceFlushFallbacksInDEV() {
  // Never force flush in production. This function should get stripped out.
  return  actingUpdatesScopeDepth > 0;
}
// so we can tell if any async act() calls try to run in parallel.


var actingUpdatesScopeDepth = 0;

function detachFiberAfterEffects(fiber) {
  fiber.sibling = null;
  fiber.stateNode = null;
}

var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    flushSync(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    /* eslint-disable no-new */

    new Map([[nonExtensibleObject, null]]);
    new Set([nonExtensibleObject]);
    /* eslint-enable no-new */
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

var debugCounter = 1;

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.flags = NoFlags;
  this.nextEffect = null;
  this.firstEffect = null;
  this.lastEffect = null;
  this.lanes = NoLanes;
  this.childLanes = NoLanes;
  this.alternate = null;

  {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  }

  {
    // This isn't directly used but is handy for debugging internals:
    this._debugID = debugCounter++;
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct$1(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

    workInProgress.type = current.type; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.flags = NoFlags; // The effect list is no longer valid.

    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  workInProgress.childLanes = current.childLanes;
  workInProgress.lanes = current.lanes;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    lanes: currentDependencies.lanes,
    firstContext: currentDependencies.firstContext
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderLanes) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect tag but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.flags &= Placement; // The effect list is no longer valid.

  workInProgress.nextEffect = null;
  workInProgress.firstEffect = null;
  workInProgress.lastEffect = null;
  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childLanes = NoLanes;
    workInProgress.lanes = renderLanes;
    workInProgress.child = null;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;
    workInProgress.stateNode = null;

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      lanes: currentDependencies.lanes,
      firstContext: currentDependencies.firstContext
    };

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode | BlockingMode | StrictMode;
  } else if (tag === BlockingRoot) {
    mode = BlockingMode | StrictMode;
  } else {
    mode = NoMode;
  }

  if ( isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, lanes) {
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct$1(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

      case REACT_DEBUG_TRACING_MODE_TYPE:
        fiberTag = Mode;
        mode |= DebugTracingMode;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, lanes, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, lanes, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

      case REACT_LEGACY_HIDDEN_TYPE:
        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);

      case REACT_SCOPE_TYPE:

      // eslint-disable-next-line no-fallthrough

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;

              case REACT_BLOCK_TYPE:
                fiberTag = Block;
                break getTag;
            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentName(owner.type) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          {
            {
              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
            }
          }
        }
    }
  }

  var fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.lanes = lanes;

  {
    fiber._debugOwner = owner;
  }

  return fiber;
}
function createFiberFromElement(element, mode, lanes) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, lanes, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.lanes = lanes;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, lanes, key) {
  {
    if (typeof pendingProps.id !== 'string') {
      error('Profiler must specify an "id" as a prop');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.type = REACT_PROFILER_TYPE;
  fiber.lanes = lanes;

  {
    fiber.stateNode = {
      effectDuration: 0,
      passiveEffectDuration: 0
    };
  }

  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, lanes, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  fiber.type = REACT_SUSPENSE_TYPE;
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

  {
    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.
    fiber.type = REACT_SUSPENSE_LIST_TYPE;
  }

  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  {
    fiber.type = REACT_OFFSCREEN_TYPE;
  }

  fiber.elementType = REACT_OFFSCREEN_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
  var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  {
    fiber.type = REACT_LEGACY_HIDDEN_TYPE;
  }

  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromText(content, mode, lanes) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

  fiber.elementType = 'DELETED';
  fiber.type = 'DELETED';
  return fiber;
}
function createFiberFromPortal(portal, mode, lanes) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.lanes = lanes;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.flags = source.flags;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.lanes = source.lanes;
  target.childLanes = source.childLanes;
  target.alternate = source.alternate;

  {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  target._debugID = source._debugID;
  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate) {
  this.tag = tag;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.current = null;
  this.pingCache = null;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.hydrate = hydrate;
  this.callbackNode = null;
  this.callbackPriority = NoLanePriority;
  this.eventTimes = createLaneMap(NoLanes);
  this.expirationTimes = createLaneMap(NoTimestamp);
  this.pendingLanes = NoLanes;
  this.suspendedLanes = NoLanes;
  this.pingedLanes = NoLanes;
  this.expiredLanes = NoLanes;
  this.mutableReadLanes = NoLanes;
  this.finishedLanes = NoLanes;
  this.entangledLanes = NoLanes;
  this.entanglements = createLaneMap(NoLanes);

  {
    this.mutableSourceEagerHydrationData = null;
  }

  {
    this.interactionThreadID = tracing.unstable_getThreadID();
    this.memoizedInteractions = new Set();
    this.pendingInteractionMap = new Map();
  }

  {
    switch (tag) {
      case BlockingRoot:
        this._debugRootType = 'createBlockingRoot()';
        break;

      case ConcurrentRoot:
        this._debugRootType = 'createRoot()';
        break;

      case LegacyRoot:
        this._debugRootType = 'createLegacyRoot()';
        break;
    }
  }
}

function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate);
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;
  initializeUpdateQueue(uninitializedFiber);
  return root;
}

// This ensures that the version used for server rendering matches the one
// that is eventually read during hydration.
// If they don't match there's a potential tear and a full deopt render is required.

function registerMutableSourceForHydration(root, mutableSource) {
  var getVersion = mutableSource._getVersion;
  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
  // Retaining it forever may interfere with GC.

  if (root.mutableSourceEagerHydrationData == null) {
    root.mutableSourceEagerHydrationData = [mutableSource, version];
  } else {
    root.mutableSourceEagerHydrationData.push(mutableSource, version);
  }
}

function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        {
          {
            throw Error( "Unable to find node on an unmounted component." );
          }
        }
      } else {
        {
          {
            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
          }
        }
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictMode) {
      var componentName = getComponentName(fiber.type) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;
        var previousFiber = current;

        try {
          setCurrentFiber(hostFiber);

          if (fiber.mode & StrictMode) {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
          } else {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
          }
        } finally {
          // Ideally this should reset to previous but this shouldn't be called in
          // render and there's another warning for that anyway.
          if (previousFiber) {
            setCurrentFiber(previousFiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }

    return hostFiber.stateNode;
  }
}

function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
  return createFiberRoot(containerInfo, tag, hydrate);
}
function updateContainer(element, container, parentComponent, callback) {
  {
    onScheduleRoot(container, element);
  }

  var current$1 = container.current;
  var eventTime = requestEventTime();

  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfUnmockedScheduler(current$1);
      warnIfNotScopedWithMatchingAct(current$1);
    }
  }

  var lane = requestUpdateLane(current$1);

  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;

      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    {
      if (typeof callback !== 'function') {
        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
      }
    }

    update.callback = callback;
  }

  enqueueUpdate(current$1, update);
  scheduleUpdateOnFiber(current$1, lane, eventTime);
  return lane;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}

function markRetryLaneImpl(fiber, retryLane) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
  }
} // Increases the priority of thennables when they resolve within this boundary.


function markRetryLaneIfNotHydrated(fiber, retryLane) {
  markRetryLaneImpl(fiber, retryLane);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryLaneImpl(alternate, retryLane);
  }
}

function attemptUserBlockingHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var eventTime = requestEventTime();
  var lane = InputDiscreteHydrationLane;
  scheduleUpdateOnFiber(fiber, lane, eventTime);
  markRetryLaneIfNotHydrated(fiber, lane);
}
function attemptContinuousHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var eventTime = requestEventTime();
  var lane = SelectiveHydrationLane;
  scheduleUpdateOnFiber(fiber, lane, eventTime);
  markRetryLaneIfNotHydrated(fiber, lane);
}
function attemptHydrationAtCurrentPriority$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var eventTime = requestEventTime();
  var lane = requestUpdateLane(fiber);
  scheduleUpdateOnFiber(fiber, lane, eventTime);
  markRetryLaneIfNotHydrated(fiber, lane);
}
function runWithPriority$2(priority, fn) {

  try {
    setCurrentUpdateLanePriority(priority);
    return fn();
  } finally {
  }
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  if (hostFiber.tag === FundamentalComponent) {
    return hostFiber.stateNode.instance;
  }

  return hostFiber.stateNode;
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideHookStateDeletePath = null;
var overrideHookStateRenamePath = null;
var overrideProps = null;
var overridePropsDeletePath = null;
var overridePropsRenamePath = null;
var scheduleUpdate = null;
var setSuspenseHandler = null;

{
  var copyWithDeleteImpl = function (obj, path, index) {
    var key = path[index];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

    if (index + 1 === path.length) {
      if (Array.isArray(updated)) {
        updated.splice(key, 1);
      } else {
        delete updated[key];
      }

      return updated;
    } // $FlowFixMe number or string is fine here


    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
    return updated;
  };

  var copyWithDelete = function (obj, path) {
    return copyWithDeleteImpl(obj, path, 0);
  };

  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
    var oldKey = oldPath[index];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

    if (index + 1 === oldPath.length) {
      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

      updated[newKey] = updated[oldKey];

      if (Array.isArray(updated)) {
        updated.splice(oldKey, 1);
      } else {
        delete updated[oldKey];
      }
    } else {
      // $FlowFixMe number or string is fine here
      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
      obj[oldKey], oldPath, newPath, index + 1);
    }

    return updated;
  };

  var copyWithRename = function (obj, oldPath, newPath) {
    if (oldPath.length !== newPath.length) {
      warn('copyWithRename() expects paths of the same length');

      return;
    } else {
      for (var i = 0; i < newPath.length - 1; i++) {
        if (oldPath[i] !== newPath[i]) {
          warn('copyWithRename() expects paths to be the same except for the deepest key');

          return;
        }
      }
    }

    return copyWithRenameImpl(obj, oldPath, newPath, 0);
  };

  var copyWithSetImpl = function (obj, path, index, value) {
    if (index >= path.length) {
      return value;
    }

    var key = path[index];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  };

  var findHook = function (fiber, id) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    return currentHook;
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithSet(hook.memoizedState, path, value);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    }
  };

  overrideHookStateDeletePath = function (fiber, id, path) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithDelete(hook.memoizedState, path);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    }
  };

  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
  };

  overridePropsDeletePath = function (fiber, path) {
    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
  };

  overridePropsRenamePath = function (fiber, oldPath, newPath) {
    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
  };

  scheduleUpdate = function (fiber) {
    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function findHostInstanceByFiber(fiber) {
  var hostFiber = findCurrentHostFiber(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

function emptyFindFiberByHostInstance(instance) {
  return null;
}

function getCurrentFiberForDevTools() {
  return current;
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals({
    bundleType: devToolsConfig.bundleType,
    version: devToolsConfig.version,
    rendererPackageName: devToolsConfig.rendererPackageName,
    rendererConfig: devToolsConfig.rendererConfig,
    overrideHookState: overrideHookState,
    overrideHookStateDeletePath: overrideHookStateDeletePath,
    overrideHookStateRenamePath: overrideHookStateRenamePath,
    overrideProps: overrideProps,
    overridePropsDeletePath: overridePropsDeletePath,
    overridePropsRenamePath: overridePropsRenamePath,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: findHostInstanceByFiber,
    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
    // React Refresh
    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
    scheduleRefresh:  scheduleRefresh ,
    scheduleRoot:  scheduleRoot ,
    setRefreshHandler:  setRefreshHandler ,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber:  getCurrentFiberForDevTools 
  });
}

function ReactDOMRoot(container, options) {
  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
}

function ReactDOMBlockingRoot(container, tag, options) {
  this._internalRoot = createRootImpl(container, tag, options);
}

ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
  var root = this._internalRoot;

  {
    if (typeof arguments[1] === 'function') {
      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }

    var container = root.containerInfo;

    if (container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(root.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
        }
      }
    }
  }

  updateContainer(children, root, null, null);
};

ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
  {
    if (typeof arguments[0] === 'function') {
      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }
  }

  var root = this._internalRoot;
  var container = root.containerInfo;
  updateContainer(null, root, null, function () {
    unmarkContainerAsRoot(container);
  });
};

function createRootImpl(container, tag, options) {
  // Tag is either LegacyRoot or Concurrent Root
  var hydrate = options != null && options.hydrate === true;
  var hydrationCallbacks = options != null && options.hydrationOptions || null;
  var mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
  var root = createContainer(container, tag, hydrate);
  markContainerAsRoot(root.current, container);
  var containerNodeType = container.nodeType;

  {
    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
    listenToAllSupportedEvents(rootContainerElement);
  }

  if (mutableSources) {
    for (var i = 0; i < mutableSources.length; i++) {
      var mutableSource = mutableSources[i];
      registerMutableSourceForHydration(root, mutableSource);
    }
  }

  return root;
}
function createLegacyRoot(container, options) {
  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
}
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
var topLevelUpdateWarnings;
var warnedAboutHydrateAPI = false;

{
  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
        }
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
    }

    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
    }
  };
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

  if (!shouldHydrate) {
    var warned = false;
    var rootSibling;

    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;

          error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }

      container.removeChild(rootSibling);
    }
  }

  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;

      warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v18. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  }

  return createLegacyRoot(container, shouldHydrate ? {
    hydrate: true
  } : undefined);
}

function warnOnInvalidCallback$1(callback, callerName) {
  {
    if (callback !== null && typeof callback !== 'function') {
      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  }
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.


  var root = container._reactRootContainer;
  var fiberRoot;

  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);
        originalCallback.call(instance);
      };
    } // Initial mount should not be batched.


    unbatchedUpdates(function () {
      updateContainer(children, fiberRoot, parentComponent, callback);
    });
  } else {
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var _originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);

        _originalCallback.call(instance);
      };
    } // Update


    updateContainer(children, fiberRoot, parentComponent, callback);
  }

  return getPublicRootInstance(fiberRoot);
}

function findDOMNode(componentOrElement) {
  {
    var owner = ReactCurrentOwner$3.current;

    if (owner !== null && owner.stateNode !== null) {
      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

      if (!warnedAboutRefsInRender) {
        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
      }

      owner.stateNode._warnedAboutRefsInRender = true;
    }
  }

  if (componentOrElement == null) {
    return null;
  }

  if (componentOrElement.nodeType === ELEMENT_NODE) {
    return componentOrElement;
  }

  {
    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
  }
}
function hydrate(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
    }
  } // TODO: throw or warn if we couldn't hydrate?


  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
}
function render(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
    }
  }

  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
}
function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  if (!isValidContainer(containerNode)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  if (!(parentComponent != null && has(parentComponent))) {
    {
      throw Error( "parentComponent must be a valid React Component" );
    }
  }

  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
}
function unmountComponentAtNode(container) {
  if (!isValidContainer(container)) {
    {
      throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
    }
  }

  if (container._reactRootContainer) {
    {
      var rootEl = getReactRootElementInContainer(container);
      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

      if (renderedByDifferentReact) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }
    } // Unmount should not be batched.


    unbatchedUpdates(function () {
      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
        // $FlowFixMe This should probably use `delete container._reactRootContainer`
        container._reactRootContainer = null;
        unmarkContainerAsRoot(container);
      });
    }); // If you call unmountComponentAtNode twice in quick succession, you'll
    // get `true` twice. That's probably fine?

    return true;
  } else {
    {
      var _rootEl = getReactRootElementInContainer(container);

      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

      if (hasNonRootReactChild) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }
    }

    return false;
  }
}

setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
setAttemptContinuousHydration(attemptContinuousHydration$1);
setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
setAttemptHydrationAtPriority(runWithPriority$2);
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
  }
}

setRestoreImplementation(restoreControlledState$3);
setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

function createPortal$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  } // TODO: pass ReactDOM portal implementation as third argument
  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


  return createPortal(children, container, null, key);
}

function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
}

function unstable_createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;

      warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 18+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }
  }

  return createPortal$1(children, container, key);
}

var Internals = {
  // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
  // This is an array for better minification.
  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, flushPassiveEffects, // TODO: This is related to `act`, not events. Move to separate key?
  IsThisRendererActing]
};
var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType:  1 ,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

      if (/^(https?|file):$/.test(protocol)) {
        // eslint-disable-next-line react-internal/no-production-logging
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}

exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
exports.createPortal = createPortal$1;
exports.findDOMNode = findDOMNode;
exports.flushSync = flushSync;
exports.hydrate = hydrate;
exports.render = render;
exports.unmountComponentAtNode = unmountComponentAtNode;
exports.unstable_batchedUpdates = batchedUpdates$1;
exports.unstable_createPortal = unstable_createPortal;
exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
exports.version = ReactVersion;
  })();
}


/***/ }),

/***/ "./node_modules/react-dom/index.js":
/*!*****************************************!*\
  !*** ./node_modules/react-dom/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (true) {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ "./node_modules/react-dom/cjs/react-dom.development.js");
}


/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}


/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/react-is/cjs/react-is.development.js");
}


/***/ }),

/***/ "./node_modules/react-router-dom/esm/react-router-dom.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-router-dom/esm/react-router-dom.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MemoryRouter": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.MemoryRouter),
/* harmony export */   "Prompt": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.Prompt),
/* harmony export */   "Redirect": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.Redirect),
/* harmony export */   "Route": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.Route),
/* harmony export */   "Router": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.Router),
/* harmony export */   "StaticRouter": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.StaticRouter),
/* harmony export */   "Switch": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.Switch),
/* harmony export */   "generatePath": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.generatePath),
/* harmony export */   "matchPath": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.matchPath),
/* harmony export */   "useHistory": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.useHistory),
/* harmony export */   "useLocation": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.useLocation),
/* harmony export */   "useParams": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.useParams),
/* harmony export */   "useRouteMatch": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.useRouteMatch),
/* harmony export */   "withRouter": () => (/* reexport safe */ react_router__WEBPACK_IMPORTED_MODULE_0__.withRouter),
/* harmony export */   "BrowserRouter": () => (/* binding */ BrowserRouter),
/* harmony export */   "HashRouter": () => (/* binding */ HashRouter),
/* harmony export */   "Link": () => (/* binding */ Link),
/* harmony export */   "NavLink": () => (/* binding */ NavLink)
/* harmony export */ });
/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-router */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! history */ "./node_modules/history/esm/history.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/tiny-invariant.esm.js");











/**
 * The public API for a <Router> that uses HTML5 history.
 */

var BrowserRouter =
/*#__PURE__*/
function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__.default)(BrowserRouter, _React$Component);

  function BrowserRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = (0,history__WEBPACK_IMPORTED_MODULE_6__.createBrowserHistory)(_this.props);
    return _this;
  }

  var _proto = BrowserRouter.prototype;

  _proto.render = function render() {
    return react__WEBPACK_IMPORTED_MODULE_2__.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return BrowserRouter;
}(react__WEBPACK_IMPORTED_MODULE_2__.Component);

if (true) {
  BrowserRouter.propTypes = {
    basename: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().string),
    children: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().node),
    forceRefresh: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool),
    getUserConfirmation: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().func),
    keyLength: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().number)
  };

  BrowserRouter.prototype.componentDidMount = function () {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_7__.default)(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.") : 0;
  };
}

/**
 * The public API for a <Router> that uses window.location.hash.
 */

var HashRouter =
/*#__PURE__*/
function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__.default)(HashRouter, _React$Component);

  function HashRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = (0,history__WEBPACK_IMPORTED_MODULE_6__.createHashHistory)(_this.props);
    return _this;
  }

  var _proto = HashRouter.prototype;

  _proto.render = function render() {
    return react__WEBPACK_IMPORTED_MODULE_2__.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return HashRouter;
}(react__WEBPACK_IMPORTED_MODULE_2__.Component);

if (true) {
  HashRouter.propTypes = {
    basename: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().string),
    children: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().node),
    getUserConfirmation: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().func),
    hashType: prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOf(["hashbang", "noslash", "slash"])
  };

  HashRouter.prototype.componentDidMount = function () {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_7__.default)(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.") : 0;
  };
}

var resolveToLocation = function resolveToLocation(to, currentLocation) {
  return typeof to === "function" ? to(currentLocation) : to;
};
var normalizeToLocation = function normalizeToLocation(to, currentLocation) {
  return typeof to === "string" ? (0,history__WEBPACK_IMPORTED_MODULE_6__.createLocation)(to, null, null, currentLocation) : to;
};

var forwardRefShim = function forwardRefShim(C) {
  return C;
};

var forwardRef = react__WEBPACK_IMPORTED_MODULE_2__.forwardRef;

if (typeof forwardRef === "undefined") {
  forwardRef = forwardRefShim;
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

var LinkAnchor = forwardRef(function (_ref, forwardedRef) {
  var innerRef = _ref.innerRef,
      navigate = _ref.navigate,
      _onClick = _ref.onClick,
      rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__.default)(_ref, ["innerRef", "navigate", "onClick"]);

  var target = rest.target;

  var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, rest, {
    onClick: function onClick(event) {
      try {
        if (_onClick) _onClick(event);
      } catch (ex) {
        event.preventDefault();
        throw ex;
      }

      if (!event.defaultPrevented && // onClick prevented default
      event.button === 0 && ( // ignore everything but left clicks
      !target || target === "_self") && // let browser handle "target=_blank" etc.
      !isModifiedEvent(event) // ignore clicks with modifier keys
      ) {
          event.preventDefault();
          navigate();
        }
    }
  }); // React 15 compat


  if (forwardRefShim !== forwardRef) {
    props.ref = forwardedRef || innerRef;
  } else {
    props.ref = innerRef;
  }
  /* eslint-disable-next-line jsx-a11y/anchor-has-content */


  return react__WEBPACK_IMPORTED_MODULE_2__.createElement("a", props);
});

if (true) {
  LinkAnchor.displayName = "LinkAnchor";
}
/**
 * The public API for rendering a history-aware <a>.
 */


var Link = forwardRef(function (_ref2, forwardedRef) {
  var _ref2$component = _ref2.component,
      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,
      replace = _ref2.replace,
      to = _ref2.to,
      innerRef = _ref2.innerRef,
      rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__.default)(_ref2, ["component", "replace", "to", "innerRef"]);

  return react__WEBPACK_IMPORTED_MODULE_2__.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.__RouterContext.Consumer, null, function (context) {
    !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_8__.default)(false, "You should not use <Link> outside a <Router>") : 0 : void 0;
    var history = context.history;
    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
    var href = location ? history.createHref(location) : "";

    var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, rest, {
      href: href,
      navigate: function navigate() {
        var location = resolveToLocation(to, context.location);
        var method = replace ? history.replace : history.push;
        method(location);
      }
    }); // React 15 compat


    if (forwardRefShim !== forwardRef) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.innerRef = innerRef;
    }

    return react__WEBPACK_IMPORTED_MODULE_2__.createElement(component, props);
  });
});

if (true) {
  var toType = prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_3___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_3___default().object), (prop_types__WEBPACK_IMPORTED_MODULE_3___default().func)]);
  var refType = prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_3___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_3___default().func), prop_types__WEBPACK_IMPORTED_MODULE_3___default().shape({
    current: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().any)
  })]);
  Link.displayName = "Link";
  Link.propTypes = {
    innerRef: refType,
    onClick: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().func),
    replace: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool),
    target: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().string),
    to: toType.isRequired
  };
}

var forwardRefShim$1 = function forwardRefShim(C) {
  return C;
};

var forwardRef$1 = react__WEBPACK_IMPORTED_MODULE_2__.forwardRef;

if (typeof forwardRef$1 === "undefined") {
  forwardRef$1 = forwardRefShim$1;
}

function joinClassnames() {
  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
    classnames[_key] = arguments[_key];
  }

  return classnames.filter(function (i) {
    return i;
  }).join(" ");
}
/**
 * A <Link> wrapper that knows if it's "active" or not.
 */


var NavLink = forwardRef$1(function (_ref, forwardedRef) {
  var _ref$ariaCurrent = _ref["aria-current"],
      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,
      _ref$activeClassName = _ref.activeClassName,
      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,
      activeStyle = _ref.activeStyle,
      classNameProp = _ref.className,
      exact = _ref.exact,
      isActiveProp = _ref.isActive,
      locationProp = _ref.location,
      sensitive = _ref.sensitive,
      strict = _ref.strict,
      styleProp = _ref.style,
      to = _ref.to,
      innerRef = _ref.innerRef,
      rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__.default)(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);

  return react__WEBPACK_IMPORTED_MODULE_2__.createElement(react_router__WEBPACK_IMPORTED_MODULE_0__.__RouterContext.Consumer, null, function (context) {
    !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_8__.default)(false, "You should not use <NavLink> outside a <Router>") : 0 : void 0;
    var currentLocation = locationProp || context.location;
    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
    var match = escapedPath ? (0,react_router__WEBPACK_IMPORTED_MODULE_0__.matchPath)(currentLocation.pathname, {
      path: escapedPath,
      exact: exact,
      sensitive: sensitive,
      strict: strict
    }) : null;
    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
    var style = isActive ? (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, styleProp, {}, activeStyle) : styleProp;

    var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({
      "aria-current": isActive && ariaCurrent || null,
      className: className,
      style: style,
      to: toLocation
    }, rest); // React 15 compat


    if (forwardRefShim$1 !== forwardRef$1) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.innerRef = innerRef;
    }

    return react__WEBPACK_IMPORTED_MODULE_2__.createElement(Link, props);
  });
});

if (true) {
  NavLink.displayName = "NavLink";
  var ariaCurrentType = prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOf(["page", "step", "location", "date", "time", "true"]);
  NavLink.propTypes = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, Link.propTypes, {
    "aria-current": ariaCurrentType,
    activeClassName: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().string),
    activeStyle: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().object),
    className: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().string),
    exact: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool),
    isActive: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().func),
    location: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().object),
    sensitive: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool),
    strict: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().bool),
    style: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().object)
  });
}


//# sourceMappingURL=react-router-dom.js.map


/***/ }),

/***/ "./node_modules/react-router/esm/react-router.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-router/esm/react-router.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MemoryRouter": () => (/* binding */ MemoryRouter),
/* harmony export */   "Prompt": () => (/* binding */ Prompt),
/* harmony export */   "Redirect": () => (/* binding */ Redirect),
/* harmony export */   "Route": () => (/* binding */ Route),
/* harmony export */   "Router": () => (/* binding */ Router),
/* harmony export */   "StaticRouter": () => (/* binding */ StaticRouter),
/* harmony export */   "Switch": () => (/* binding */ Switch),
/* harmony export */   "__HistoryContext": () => (/* binding */ historyContext),
/* harmony export */   "__RouterContext": () => (/* binding */ context),
/* harmony export */   "generatePath": () => (/* binding */ generatePath),
/* harmony export */   "matchPath": () => (/* binding */ matchPath),
/* harmony export */   "useHistory": () => (/* binding */ useHistory),
/* harmony export */   "useLocation": () => (/* binding */ useLocation),
/* harmony export */   "useParams": () => (/* binding */ useParams),
/* harmony export */   "useRouteMatch": () => (/* binding */ useRouteMatch),
/* harmony export */   "withRouter": () => (/* binding */ withRouter)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! history */ "./node_modules/history/esm/history.js");
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");
/* harmony import */ var mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mini-create-react-context */ "./node_modules/mini-create-react-context/dist/esm/index.js");
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/tiny-invariant.esm.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! path-to-regexp */ "./node_modules/react-router/node_modules/path-to-regexp/index.js");
/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(path_to_regexp__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! hoist-non-react-statics */ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8__);













// TODO: Replace with React.createContext once we can assume React 16+

var createNamedContext = function createNamedContext(name) {
  var context = (0,mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__.default)();
  context.displayName = name;
  return context;
};

var historyContext =
/*#__PURE__*/
createNamedContext("Router-History");

// TODO: Replace with React.createContext once we can assume React 16+

var createNamedContext$1 = function createNamedContext(name) {
  var context = (0,mini_create_react_context__WEBPACK_IMPORTED_MODULE_3__.default)();
  context.displayName = name;
  return context;
};

var context =
/*#__PURE__*/
createNamedContext$1("Router");

/**
 * The public API for putting history on context.
 */

var Router =
/*#__PURE__*/
function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(Router, _React$Component);

  Router.computeRootMatch = function computeRootMatch(pathname) {
    return {
      path: "/",
      url: "/",
      params: {},
      isExact: pathname === "/"
    };
  };

  function Router(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      location: props.history.location
    }; // This is a bit of a hack. We have to start listening for location
    // changes here in the constructor in case there are any <Redirect>s
    // on the initial render. If there are, they will replace/push when
    // they mount and since cDM fires in children before parents, we may
    // get a new location before the <Router> is mounted.

    _this._isMounted = false;
    _this._pendingLocation = null;

    if (!props.staticContext) {
      _this.unlisten = props.history.listen(function (location) {
        if (_this._isMounted) {
          _this.setState({
            location: location
          });
        } else {
          _this._pendingLocation = location;
        }
      });
    }

    return _this;
  }

  var _proto = Router.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this._isMounted = true;

    if (this._pendingLocation) {
      this.setState({
        location: this._pendingLocation
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.unlisten) this.unlisten();
  };

  _proto.render = function render() {
    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(context.Provider, {
      value: {
        history: this.props.history,
        location: this.state.location,
        match: Router.computeRootMatch(this.state.location.pathname),
        staticContext: this.props.staticContext
      }
    }, react__WEBPACK_IMPORTED_MODULE_1__.createElement(historyContext.Provider, {
      children: this.props.children || null,
      value: this.props.history
    }));
  };

  return Router;
}(react__WEBPACK_IMPORTED_MODULE_1__.Component);

if (true) {
  Router.propTypes = {
    children: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().node),
    history: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().object.isRequired),
    staticContext: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().object)
  };

  Router.prototype.componentDidUpdate = function (prevProps) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_9__.default)(prevProps.history === this.props.history, "You cannot change <Router history>") : 0;
  };
}

/**
 * The public API for a <Router> that stores location in memory.
 */

var MemoryRouter =
/*#__PURE__*/
function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(MemoryRouter, _React$Component);

  function MemoryRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = (0,history__WEBPACK_IMPORTED_MODULE_10__.createMemoryHistory)(_this.props);
    return _this;
  }

  var _proto = MemoryRouter.prototype;

  _proto.render = function render() {
    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return MemoryRouter;
}(react__WEBPACK_IMPORTED_MODULE_1__.Component);

if (true) {
  MemoryRouter.propTypes = {
    initialEntries: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().array),
    initialIndex: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().number),
    getUserConfirmation: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().func),
    keyLength: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().number),
    children: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().node)
  };

  MemoryRouter.prototype.componentDidMount = function () {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_9__.default)(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.") : 0;
  };
}

var Lifecycle =
/*#__PURE__*/
function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(Lifecycle, _React$Component);

  function Lifecycle() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Lifecycle.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.onMount) this.props.onMount.call(this, this);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.props.onUnmount) this.props.onUnmount.call(this, this);
  };

  _proto.render = function render() {
    return null;
  };

  return Lifecycle;
}(react__WEBPACK_IMPORTED_MODULE_1__.Component);

/**
 * The public API for prompting the user before navigating away from a screen.
 */

function Prompt(_ref) {
  var message = _ref.message,
      _ref$when = _ref.when,
      when = _ref$when === void 0 ? true : _ref$when;
  return react__WEBPACK_IMPORTED_MODULE_1__.createElement(context.Consumer, null, function (context) {
    !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_11__.default)(false, "You should not use <Prompt> outside a <Router>") : 0 : void 0;
    if (!when || context.staticContext) return null;
    var method = context.history.block;
    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(Lifecycle, {
      onMount: function onMount(self) {
        self.release = method(message);
      },
      onUpdate: function onUpdate(self, prevProps) {
        if (prevProps.message !== message) {
          self.release();
          self.release = method(message);
        }
      },
      onUnmount: function onUnmount(self) {
        self.release();
      },
      message: message
    });
  });
}

if (true) {
  var messageType = prop_types__WEBPACK_IMPORTED_MODULE_2___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_2___default().func), (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string)]);
  Prompt.propTypes = {
    when: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().bool),
    message: messageType.isRequired
  };
}

var cache = {};
var cacheLimit = 10000;
var cacheCount = 0;

function compilePath(path) {
  if (cache[path]) return cache[path];
  var generator = path_to_regexp__WEBPACK_IMPORTED_MODULE_5___default().compile(path);

  if (cacheCount < cacheLimit) {
    cache[path] = generator;
    cacheCount++;
  }

  return generator;
}
/**
 * Public API for generating a URL pathname from a path and parameters.
 */


function generatePath(path, params) {
  if (path === void 0) {
    path = "/";
  }

  if (params === void 0) {
    params = {};
  }

  return path === "/" ? path : compilePath(path)(params, {
    pretty: true
  });
}

/**
 * The public API for navigating programmatically with a component.
 */

function Redirect(_ref) {
  var computedMatch = _ref.computedMatch,
      to = _ref.to,
      _ref$push = _ref.push,
      push = _ref$push === void 0 ? false : _ref$push;
  return react__WEBPACK_IMPORTED_MODULE_1__.createElement(context.Consumer, null, function (context) {
    !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_11__.default)(false, "You should not use <Redirect> outside a <Router>") : 0 : void 0;
    var history = context.history,
        staticContext = context.staticContext;
    var method = push ? history.push : history.replace;
    var location = (0,history__WEBPACK_IMPORTED_MODULE_10__.createLocation)(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, to, {
      pathname: generatePath(to.pathname, computedMatch.params)
    }) : to); // When rendering in a static context,
    // set the new location immediately.

    if (staticContext) {
      method(location);
      return null;
    }

    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(Lifecycle, {
      onMount: function onMount() {
        method(location);
      },
      onUpdate: function onUpdate(self, prevProps) {
        var prevLocation = (0,history__WEBPACK_IMPORTED_MODULE_10__.createLocation)(prevProps.to);

        if (!(0,history__WEBPACK_IMPORTED_MODULE_10__.locationsAreEqual)(prevLocation, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, location, {
          key: prevLocation.key
        }))) {
          method(location);
        }
      },
      to: to
    });
  });
}

if (true) {
  Redirect.propTypes = {
    push: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().bool),
    from: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string),
    to: prop_types__WEBPACK_IMPORTED_MODULE_2___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_2___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_2___default().object)]).isRequired
  };
}

var cache$1 = {};
var cacheLimit$1 = 10000;
var cacheCount$1 = 0;

function compilePath$1(path, options) {
  var cacheKey = "" + options.end + options.strict + options.sensitive;
  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
  if (pathCache[path]) return pathCache[path];
  var keys = [];
  var regexp = path_to_regexp__WEBPACK_IMPORTED_MODULE_5___default()(path, keys, options);
  var result = {
    regexp: regexp,
    keys: keys
  };

  if (cacheCount$1 < cacheLimit$1) {
    pathCache[path] = result;
    cacheCount$1++;
  }

  return result;
}
/**
 * Public API for matching a URL pathname to a path.
 */


function matchPath(pathname, options) {
  if (options === void 0) {
    options = {};
  }

  if (typeof options === "string" || Array.isArray(options)) {
    options = {
      path: options
    };
  }

  var _options = options,
      path = _options.path,
      _options$exact = _options.exact,
      exact = _options$exact === void 0 ? false : _options$exact,
      _options$strict = _options.strict,
      strict = _options$strict === void 0 ? false : _options$strict,
      _options$sensitive = _options.sensitive,
      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
  var paths = [].concat(path);
  return paths.reduce(function (matched, path) {
    if (!path && path !== "") return null;
    if (matched) return matched;

    var _compilePath = compilePath$1(path, {
      end: exact,
      strict: strict,
      sensitive: sensitive
    }),
        regexp = _compilePath.regexp,
        keys = _compilePath.keys;

    var match = regexp.exec(pathname);
    if (!match) return null;
    var url = match[0],
        values = match.slice(1);
    var isExact = pathname === url;
    if (exact && !isExact) return null;
    return {
      path: path,
      // the path used to match
      url: path === "/" && url === "" ? "/" : url,
      // the matched portion of the URL
      isExact: isExact,
      // whether or not we matched exactly
      params: keys.reduce(function (memo, key, index) {
        memo[key.name] = values[index];
        return memo;
      }, {})
    };
  }, null);
}

function isEmptyChildren(children) {
  return react__WEBPACK_IMPORTED_MODULE_1__.Children.count(children) === 0;
}

function evalChildrenDev(children, props, path) {
  var value = children(props);
   true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_9__.default)(value !== undefined, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`") : 0;
  return value || null;
}
/**
 * The public API for matching a single path and rendering.
 */


var Route =
/*#__PURE__*/
function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(Route, _React$Component);

  function Route() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Route.prototype;

  _proto.render = function render() {
    var _this = this;

    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(context.Consumer, null, function (context$1) {
      !context$1 ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_11__.default)(false, "You should not use <Route> outside a <Router>") : 0 : void 0;
      var location = _this.props.location || context$1.location;
      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;

      var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, context$1, {
        location: location,
        match: match
      });

      var _this$props = _this.props,
          children = _this$props.children,
          component = _this$props.component,
          render = _this$props.render; // Preact uses an empty array as children by
      // default, so use null if that's the case.

      if (Array.isArray(children) && children.length === 0) {
        children = null;
      }

      return react__WEBPACK_IMPORTED_MODULE_1__.createElement(context.Provider, {
        value: props
      }, props.match ? children ? typeof children === "function" ?  true ? evalChildrenDev(children, props, _this.props.path) : 0 : children : component ? react__WEBPACK_IMPORTED_MODULE_1__.createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  true ? evalChildrenDev(children, props, _this.props.path) : 0 : null);
    });
  };

  return Route;
}(react__WEBPACK_IMPORTED_MODULE_1__.Component);

if (true) {
  Route.propTypes = {
    children: prop_types__WEBPACK_IMPORTED_MODULE_2___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_2___default().func), (prop_types__WEBPACK_IMPORTED_MODULE_2___default().node)]),
    component: function component(props, propName) {
      if (props[propName] && !(0,react_is__WEBPACK_IMPORTED_MODULE_6__.isValidElementType)(props[propName])) {
        return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
      }
    },
    exact: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().bool),
    location: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().object),
    path: prop_types__WEBPACK_IMPORTED_MODULE_2___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_2___default().string), prop_types__WEBPACK_IMPORTED_MODULE_2___default().arrayOf((prop_types__WEBPACK_IMPORTED_MODULE_2___default().string))]),
    render: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().func),
    sensitive: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().bool),
    strict: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().bool)
  };

  Route.prototype.componentDidMount = function () {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_9__.default)(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") : 0;
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_9__.default)(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") : 0;
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_9__.default)(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") : 0;
  };

  Route.prototype.componentDidUpdate = function (prevProps) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_9__.default)(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : 0;
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_9__.default)(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : 0;
  };
}

function addLeadingSlash(path) {
  return path.charAt(0) === "/" ? path : "/" + path;
}

function addBasename(basename, location) {
  if (!basename) return location;
  return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, location, {
    pathname: addLeadingSlash(basename) + location.pathname
  });
}

function stripBasename(basename, location) {
  if (!basename) return location;
  var base = addLeadingSlash(basename);
  if (location.pathname.indexOf(base) !== 0) return location;
  return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, location, {
    pathname: location.pathname.substr(base.length)
  });
}

function createURL(location) {
  return typeof location === "string" ? location : (0,history__WEBPACK_IMPORTED_MODULE_10__.createPath)(location);
}

function staticHandler(methodName) {
  return function () {
      true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_11__.default)(false, "You cannot %s with <StaticRouter>", methodName) : 0 ;
  };
}

function noop() {}
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */


var StaticRouter =
/*#__PURE__*/
function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(StaticRouter, _React$Component);

  function StaticRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.handlePush = function (location) {
      return _this.navigateTo(location, "PUSH");
    };

    _this.handleReplace = function (location) {
      return _this.navigateTo(location, "REPLACE");
    };

    _this.handleListen = function () {
      return noop;
    };

    _this.handleBlock = function () {
      return noop;
    };

    return _this;
  }

  var _proto = StaticRouter.prototype;

  _proto.navigateTo = function navigateTo(location, action) {
    var _this$props = this.props,
        _this$props$basename = _this$props.basename,
        basename = _this$props$basename === void 0 ? "" : _this$props$basename,
        _this$props$context = _this$props.context,
        context = _this$props$context === void 0 ? {} : _this$props$context;
    context.action = action;
    context.location = addBasename(basename, (0,history__WEBPACK_IMPORTED_MODULE_10__.createLocation)(location));
    context.url = createURL(context.location);
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        _this$props2$basename = _this$props2.basename,
        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,
        _this$props2$context = _this$props2.context,
        context = _this$props2$context === void 0 ? {} : _this$props2$context,
        _this$props2$location = _this$props2.location,
        location = _this$props2$location === void 0 ? "/" : _this$props2$location,
        rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__.default)(_this$props2, ["basename", "context", "location"]);

    var history = {
      createHref: function createHref(path) {
        return addLeadingSlash(basename + createURL(path));
      },
      action: "POP",
      location: stripBasename(basename, (0,history__WEBPACK_IMPORTED_MODULE_10__.createLocation)(location)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler("go"),
      goBack: staticHandler("goBack"),
      goForward: staticHandler("goForward"),
      listen: this.handleListen,
      block: this.handleBlock
    };
    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(Router, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, rest, {
      history: history,
      staticContext: context
    }));
  };

  return StaticRouter;
}(react__WEBPACK_IMPORTED_MODULE_1__.Component);

if (true) {
  StaticRouter.propTypes = {
    basename: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string),
    context: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().object),
    location: prop_types__WEBPACK_IMPORTED_MODULE_2___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_2___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_2___default().object)])
  };

  StaticRouter.prototype.componentDidMount = function () {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_9__.default)(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.") : 0;
  };
}

/**
 * The public API for rendering the first <Route> that matches.
 */

var Switch =
/*#__PURE__*/
function (_React$Component) {
  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__.default)(Switch, _React$Component);

  function Switch() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Switch.prototype;

  _proto.render = function render() {
    var _this = this;

    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(context.Consumer, null, function (context) {
      !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_11__.default)(false, "You should not use <Switch> outside a <Router>") : 0 : void 0;
      var location = _this.props.location || context.location;
      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
      // here because toArray adds keys to all child elements and we do not want
      // to trigger an unmount/remount for two <Route>s that render the same
      // component at different URLs.

      react__WEBPACK_IMPORTED_MODULE_1__.Children.forEach(_this.props.children, function (child) {
        if (match == null && react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(child)) {
          element = child;
          var path = child.props.path || child.props.from;
          match = path ? matchPath(location.pathname, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, child.props, {
            path: path
          })) : context.match;
        }
      });
      return match ? react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(element, {
        location: location,
        computedMatch: match
      }) : null;
    });
  };

  return Switch;
}(react__WEBPACK_IMPORTED_MODULE_1__.Component);

if (true) {
  Switch.propTypes = {
    children: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().node),
    location: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().object)
  };

  Switch.prototype.componentDidUpdate = function (prevProps) {
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_9__.default)(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : 0;
     true ? (0,tiny_warning__WEBPACK_IMPORTED_MODULE_9__.default)(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : 0;
  };
}

/**
 * A public higher-order component to access the imperative API
 */

function withRouter(Component) {
  var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";

  var C = function C(props) {
    var wrappedComponentRef = props.wrappedComponentRef,
        remainingProps = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__.default)(props, ["wrappedComponentRef"]);

    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(context.Consumer, null, function (context) {
      !context ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_11__.default)(false, "You should not use <" + displayName + " /> outside a <Router>") : 0 : void 0;
      return react__WEBPACK_IMPORTED_MODULE_1__.createElement(Component, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_4__.default)({}, remainingProps, context, {
        ref: wrappedComponentRef
      }));
    });
  };

  C.displayName = displayName;
  C.WrappedComponent = Component;

  if (true) {
    C.propTypes = {
      wrappedComponentRef: prop_types__WEBPACK_IMPORTED_MODULE_2___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_2___default().string), (prop_types__WEBPACK_IMPORTED_MODULE_2___default().func), (prop_types__WEBPACK_IMPORTED_MODULE_2___default().object)])
    };
  }

  return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8___default()(C, Component);
}

var useContext = react__WEBPACK_IMPORTED_MODULE_1__.useContext;
function useHistory() {
  if (true) {
    !(typeof useContext === "function") ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_11__.default)(false, "You must use React >= 16.8 in order to use useHistory()") : 0 : void 0;
  }

  return useContext(historyContext);
}
function useLocation() {
  if (true) {
    !(typeof useContext === "function") ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_11__.default)(false, "You must use React >= 16.8 in order to use useLocation()") : 0 : void 0;
  }

  return useContext(context).location;
}
function useParams() {
  if (true) {
    !(typeof useContext === "function") ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_11__.default)(false, "You must use React >= 16.8 in order to use useParams()") : 0 : void 0;
  }

  var match = useContext(context).match;
  return match ? match.params : {};
}
function useRouteMatch(path) {
  if (true) {
    !(typeof useContext === "function") ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_11__.default)(false, "You must use React >= 16.8 in order to use useRouteMatch()") : 0 : void 0;
  }

  var location = useLocation();
  var match = useContext(context).match;
  return path ? matchPath(location.pathname, path) : match;
}

if (true) {
  if (typeof window !== "undefined") {
    var global = window;
    var key = "__react_router_build__";
    var buildNames = {
      cjs: "CommonJS",
      esm: "ES modules",
      umd: "UMD"
    };

    if (global[key] && global[key] !== "esm") {
      var initialBuildName = buildNames[global[key]];
      var secondaryBuildName = buildNames["esm"]; // TODO: Add link to article that explains in detail how to avoid
      // loading 2 different builds.

      throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
    }

    global[key] = "esm";
  }
}


//# sourceMappingURL=react-router.js.map


/***/ }),

/***/ "./node_modules/react-router/node_modules/isarray/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-router/node_modules/isarray/index.js ***!
  \*****************************************************************/
/***/ ((module) => {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/react-router/node_modules/path-to-regexp/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-router/node_modules/path-to-regexp/index.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isarray = __webpack_require__(/*! isarray */ "./node_modules/react-router/node_modules/isarray/index.js")

/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp
module.exports.parse = parse
module.exports.compile = compile
module.exports.tokensToFunction = tokensToFunction
module.exports.tokensToRegExp = tokensToRegExp

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g')

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = []
  var key = 0
  var index = 0
  var path = ''
  var defaultDelimiter = options && options.delimiter || '/'
  var res

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0]
    var escaped = res[1]
    var offset = res.index
    path += str.slice(index, offset)
    index = offset + m.length

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1]
      continue
    }

    var next = str[index]
    var prefix = res[2]
    var name = res[3]
    var capture = res[4]
    var group = res[5]
    var modifier = res[6]
    var asterisk = res[7]

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path)
      path = ''
    }

    var partial = prefix != null && next != null && next !== prefix
    var repeat = modifier === '+' || modifier === '*'
    var optional = modifier === '?' || modifier === '*'
    var delimiter = res[2] || defaultDelimiter
    var pattern = capture || group

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    })
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index)
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path)
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options), options)
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens, options) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length)

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))
    }
  }

  return function (obj, opts) {
    var path = ''
    var data = obj || {}
    var options = opts || {}
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i]

      if (typeof token === 'string') {
        path += token

        continue
      }

      var value = data[token.name]
      var segment

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j])

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value)

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options && options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g)

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      })
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = []

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source)
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  var strict = options.strict
  var end = options.end !== false
  var route = ''

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i]

    if (typeof token === 'string') {
      route += escapeString(token)
    } else {
      var prefix = escapeString(token.prefix)
      var capture = '(?:' + token.pattern + ')'

      keys.push(token)

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*'
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?'
        } else {
          capture = prefix + '(' + capture + ')?'
        }
      } else {
        capture = prefix + '(' + capture + ')'
      }

      route += capture
    }
  }

  var delimiter = escapeString(options.delimiter || '/')
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
  }

  if (end) {
    route += '$'
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (isarray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}


/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v17.0.1
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

// TODO: this is special because it gets imported during build.
var ReactVersion = '17.0.1';

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
exports.Fragment = 0xeacb;
exports.StrictMode = 0xeacc;
exports.Profiler = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
exports.Suspense = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  exports.Fragment = symbolFor('react.fragment');
  exports.StrictMode = symbolFor('react.strict_mode');
  exports.Profiler = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  exports.Suspense = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  transition: 0
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var ReactDebugCurrentFrame = {};
var currentExtraStackFrame = null;
function setExtraStackFrame(stack) {
  {
    currentExtraStackFrame = stack;
  }
}

{
  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
    {
      currentExtraStackFrame = stack;
    }
  }; // Stack implementation injected by the current renderer.


  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentExtraStackFrame) {
      stack += currentExtraStackFrame;
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

/**
 * Used by act() to track whether you're inside an act() scope.
 */
var IsSomeRendererActing = {
  current: false
};

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner,
  IsSomeRendererActing: IsSomeRendererActing,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
    {
      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
    }
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

_assign(pureComponentPrototype, Component.prototype);

pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getContextName(type) {
  return type.displayName || 'Context';
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case exports.Fragment:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case exports.Profiler:
      return 'Profiler';

    case exports.StrictMode:
      return 'StrictMode';

    case exports.Suspense:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentName(init(payload));
          } catch (x) {
            return null;
          }
        }
    }
  }

  return null;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (!!(element === null || element === undefined)) {
    {
      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
    }
  }

  var propName; // Original props are copied

  var props = _assign({}, element.props); // Reserved names are extracted


  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = key.replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return text.replace(userProvidedKeyEscapeRegex, '$&/');
}
/**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getElementKey(element, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof element === 'object' && element !== null && element.key != null) {
    // Explicit key
    return escape('' + element.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    var _child = children;
    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows:

    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

    if (Array.isArray(mappedChild)) {
      var escapedChildKey = '';

      if (childKey != null) {
        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
      }

      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
        return c;
      });
    } else if (mappedChild != null) {
      if (isValidElement(mappedChild)) {
        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
      }

      array.push(mappedChild);
    }

    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getElementKey(child, i);
      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {
      var iterableChildren = children;

      {
        // Warn about using Maps as children
        if (iteratorFn === iterableChildren.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(iterableChildren);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getElementKey(child, ii++);
        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
      }
    } else if (type === 'object') {
      var childrenString = '' + children;

      {
        {
          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead." );
        }
      }
    }
  }

  return subtreeCount;
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  var count = 0;
  mapIntoArray(children, result, '', '', function (child) {
    return func.call(context, child, count++);
  });
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  var n = 0;
  mapChildren(children, function () {
    n++; // Don't return anything
  });
  return n;
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  mapChildren(children, function () {
    forEachFunc.apply(this, arguments); // Don't return anything.
  }, forEachContext);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  return mapChildren(children, function (child) {
    return child;
  }) || [];
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    {
      throw Error( "React.Children.only expected to receive a single React element child." );
    }
  }

  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
      }
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;
  var hasWarnedAboutDisplayNameOnConsumer = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context,
      _calculateChangedBits: context._calculateChangedBits
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      },
      displayName: {
        get: function () {
          return context.displayName;
        },
        set: function (displayName) {
          if (!hasWarnedAboutDisplayNameOnConsumer) {
            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

            hasWarnedAboutDisplayNameOnConsumer = true;
          }
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;

function lazyInitializer(payload) {
  if (payload._status === Uninitialized) {
    var ctor = payload._result;
    var thenable = ctor(); // Transition to the next state.

    var pending = payload;
    pending._status = Pending;
    pending._result = thenable;
    thenable.then(function (moduleObject) {
      if (payload._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
          }
        } // Transition to the next state.


        var resolved = payload;
        resolved._status = Resolved;
        resolved._result = defaultExport;
      }
    }, function (error) {
      if (payload._status === Pending) {
        // Transition to the next state.
        var rejected = payload;
        rejected._status = Rejected;
        rejected._result = error;
      }
    });
  }

  if (payload._status === Resolved) {
    return payload._result;
  } else {
    throw payload._result;
  }
}

function lazy(ctor) {
  var payload = {
    // We use these fields to store the result.
    _status: -1,
    _result: ctor
  };
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _payload: payload,
    _init: lazyInitializer
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes; // $FlowFixMe

    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  var elementType = {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name;

        if (render.displayName == null) {
          render.displayName = name;
        }
      }
    });
  }

  return elementType;
}

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableScopeAPI = false; // Experimental Create Event Handle API.

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
      return true;
    }
  }

  return false;
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  var elementType = {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name;

        if (type.displayName == null) {
          type.displayName = name;
        }
      }
    });
  }

  return elementType;
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  if (!(dispatcher !== null)) {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }

  return dispatcher;
}

function useContext(Context, unstable_observedBits) {
  var dispatcher = resolveDispatcher();

  {
    if (unstable_observedBits !== undefined) {
      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
    } // TODO: add a more generic warning for invalid values.


    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context, unstable_observedBits);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: _assign({}, props, {
          value: prevLog
        }),
        info: _assign({}, props, {
          value: prevInfo
        }),
        warn: _assign({}, props, {
          value: prevWarn
        }),
        error: _assign({}, props, {
          value: prevError
        }),
        group: _assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: _assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: _assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if (!fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher$1.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher$1.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case exports.Suspense:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_BLOCK_TYPE:
        return describeFunctionComponentFrame(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      setExtraStackFrame(stack);
    } else {
      setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
  }

  {
    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentName(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentName(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === exports.Fragment) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

{

  try {
    var frozenObject = Object.freeze({});
    /* eslint-disable no-new */

    new Map([[frozenObject, null]]);
    new Set([frozenObject]);
    /* eslint-enable no-new */
  } catch (e) {
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.PureComponent = PureComponent;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useEffect = useEffect;
exports.useImperativeHandle = useImperativeHandle;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.version = ReactVersion;
  })();
}


/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");
}


/***/ }),

/***/ "./node_modules/resolve-pathname/esm/resolve-pathname.js":
/*!***************************************************************!*\
  !*** ./node_modules/resolve-pathname/esm/resolve-pathname.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
}

// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
}

// This implementation is based heavily on node's url.parse
function resolvePathname(to, from) {
  if (from === undefined) from = '';

  var toParts = (to && to.split('/')) || [];
  var fromParts = (from && from.split('/')) || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');

  if (
    mustEndAbs &&
    fromParts[0] !== '' &&
    (!fromParts[0] || !isAbsolute(fromParts[0]))
  )
    fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (resolvePathname);


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Observable.js":
/*!********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Observable.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observable": () => (/* binding */ Observable)
/* harmony export */ });
/* harmony import */ var _util_canReportError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/canReportError */ "./node_modules/rxjs/_esm5/internal/util/canReportError.js");
/* harmony import */ var _util_toSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/toSubscriber */ "./node_modules/rxjs/_esm5/internal/util/toSubscriber.js");
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./symbol/observable */ "./node_modules/rxjs/_esm5/internal/symbol/observable.js");
/* harmony import */ var _util_pipe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/pipe */ "./node_modules/rxjs/_esm5/internal/util/pipe.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ "./node_modules/rxjs/_esm5/internal/config.js");
/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */





var Observable = /*@__PURE__*/ (function () {
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = (0,_util_toSubscriber__WEBPACK_IMPORTED_MODULE_0__.toSubscriber)(observerOrNext, error, complete);
        if (operator) {
            sink.add(operator.call(sink, this.source));
        }
        else {
            sink.add(this.source || (_config__WEBPACK_IMPORTED_MODULE_1__.config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                this._subscribe(sink) :
                this._trySubscribe(sink));
        }
        if (_config__WEBPACK_IMPORTED_MODULE_1__.config.useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (_config__WEBPACK_IMPORTED_MODULE_1__.config.useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            if ((0,_util_canReportError__WEBPACK_IMPORTED_MODULE_2__.canReportError)(sink)) {
                sink.error(err);
            }
            else {
                console.warn(err);
            }
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    Observable.prototype[_symbol_observable__WEBPACK_IMPORTED_MODULE_3__.observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return (0,_util_pipe__WEBPACK_IMPORTED_MODULE_4__.pipeFromArray)(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = _config__WEBPACK_IMPORTED_MODULE_1__.config.Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}
//# sourceMappingURL=Observable.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Observer.js":
/*!******************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Observer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "empty": () => (/* binding */ empty)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "./node_modules/rxjs/_esm5/internal/config.js");
/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/hostReportError */ "./node_modules/rxjs/_esm5/internal/util/hostReportError.js");
/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */


var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (_config__WEBPACK_IMPORTED_MODULE_0__.config.useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_1__.hostReportError)(err);
        }
    },
    complete: function () { }
};
//# sourceMappingURL=Observer.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Subject.js":
/*!*****************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Subject.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SubjectSubscriber": () => (/* binding */ SubjectSubscriber),
/* harmony export */   "Subject": () => (/* binding */ Subject),
/* harmony export */   "AnonymousSubject": () => (/* binding */ AnonymousSubject)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ "./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js");
/* harmony import */ var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SubjectSubscription */ "./node_modules/rxjs/_esm5/internal/SubjectSubscription.js");
/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ "./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js");
/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */







var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__.Subscriber));

var Subject = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__.rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return _Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return _Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new _Observable__WEBPACK_IMPORTED_MODULE_6__.Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(_Observable__WEBPACK_IMPORTED_MODULE_6__.Observable));

var AnonymousSubject = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return _Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));

//# sourceMappingURL=Subject.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/SubjectSubscription.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/SubjectSubscription.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SubjectSubscription": () => (/* binding */ SubjectSubscription)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */


var SubjectSubscription = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(_Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription));

//# sourceMappingURL=SubjectSubscription.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Subscriber.js":
/*!********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Subscriber.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Subscriber": () => (/* binding */ Subscriber),
/* harmony export */   "SafeSubscriber": () => (/* binding */ SafeSubscriber)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/isFunction */ "./node_modules/rxjs/_esm5/internal/util/isFunction.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Observer */ "./node_modules/rxjs/_esm5/internal/Observer.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ "./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config */ "./node_modules/rxjs/_esm5/internal/config.js");
/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/hostReportError */ "./node_modules/rxjs/_esm5/internal/util/hostReportError.js");
/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */







var Subscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this.syncErrorValue = null;
        _this.syncErrorThrown = false;
        _this.syncErrorThrowable = false;
        _this.isStopped = false;
        switch (arguments.length) {
            case 0:
                _this.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                        _this.destination = destinationOrNext;
                        destinationOrNext.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__.rxSubscriber] = function () { return this; };
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _parentOrParents = this._parentOrParents;
        this._parentOrParents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parentOrParents = _parentOrParents;
        return this;
    };
    return Subscriber;
}(_Subscription__WEBPACK_IMPORTED_MODULE_3__.Subscription));

var SafeSubscriber = /*@__PURE__*/ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_4__.isFunction)(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== _Observer__WEBPACK_IMPORTED_MODULE_1__.empty) {
                context = Object.create(observerOrNext);
                if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_4__.isFunction)(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = _config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__.hostReportError)(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__.hostReportError)(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!_config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (_config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__.hostReportError)(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!_config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (_config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__.hostReportError)(err);
                return true;
            }
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));

//# sourceMappingURL=Subscriber.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Subscription.js":
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Subscription.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Subscription": () => (/* binding */ Subscription)
/* harmony export */ });
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
/* harmony import */ var _util_isObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/isObject */ "./node_modules/rxjs/_esm5/internal/util/isObject.js");
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/isFunction */ "./node_modules/rxjs/_esm5/internal/util/isFunction.js");
/* harmony import */ var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/UnsubscriptionError */ "./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js");
/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */




var Subscription = /*@__PURE__*/ (function () {
    function Subscription(unsubscribe) {
        this.closed = false;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._ctorUnsubscribe = true;
            this._unsubscribe = unsubscribe;
        }
    }
    Subscription.prototype.unsubscribe = function () {
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parentOrParents = _a._parentOrParents, _ctorUnsubscribe = _a._ctorUnsubscribe, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (_parentOrParents instanceof Subscription) {
            _parentOrParents.remove(this);
        }
        else if (_parentOrParents !== null) {
            for (var index = 0; index < _parentOrParents.length; ++index) {
                var parent_1 = _parentOrParents[index];
                parent_1.remove(this);
            }
        }
        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(_unsubscribe)) {
            if (_ctorUnsubscribe) {
                this._unsubscribe = undefined;
            }
            try {
                _unsubscribe.call(this);
            }
            catch (e) {
                errors = e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
            }
        }
        if ((0,_util_isArray__WEBPACK_IMPORTED_MODULE_2__.isArray)(_subscriptions)) {
            var index = -1;
            var len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if ((0,_util_isObject__WEBPACK_IMPORTED_MODULE_3__.isObject)(sub)) {
                    try {
                        sub.unsubscribe();
                    }
                    catch (e) {
                        errors = errors || [];
                        if (e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                        }
                        else {
                            errors.push(e);
                        }
                    }
                }
            }
        }
        if (errors) {
            throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError(errors);
        }
    };
    Subscription.prototype.add = function (teardown) {
        var subscription = teardown;
        if (!teardown) {
            return Subscription.EMPTY;
        }
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (!(subscription instanceof Subscription)) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default: {
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
        }
        var _parentOrParents = subscription._parentOrParents;
        if (_parentOrParents === null) {
            subscription._parentOrParents = this;
        }
        else if (_parentOrParents instanceof Subscription) {
            if (_parentOrParents === this) {
                return subscription;
            }
            subscription._parentOrParents = [_parentOrParents, this];
        }
        else if (_parentOrParents.indexOf(this) === -1) {
            _parentOrParents.push(this);
        }
        else {
            return subscription;
        }
        var subscriptions = this._subscriptions;
        if (subscriptions === null) {
            this._subscriptions = [subscription];
        }
        else {
            subscriptions.push(subscription);
        }
        return subscription;
    };
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());

function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError) ? err.errors : err); }, []);
}
//# sourceMappingURL=Subscription.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/config.js":
/*!****************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/config.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "config": () => (/* binding */ config)
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var _enable_super_gross_mode_that_will_cause_bad_things = false;
var config = {
    Promise: undefined,
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = /*@__PURE__*/ new Error();
            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};
//# sourceMappingURL=config.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/symbol/observable.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/symbol/observable.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "observable": () => (/* binding */ observable)
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var observable = /*@__PURE__*/ (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();
//# sourceMappingURL=observable.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rxSubscriber": () => (/* binding */ rxSubscriber),
/* harmony export */   "$$rxSubscriber": () => (/* binding */ $$rxSubscriber)
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var rxSubscriber = /*@__PURE__*/ (function () {
    return typeof Symbol === 'function'
        ? /*@__PURE__*/ Symbol('rxSubscriber')
        : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
})();
var $$rxSubscriber = rxSubscriber;
//# sourceMappingURL=rxSubscriber.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js":
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectUnsubscribedError": () => (/* binding */ ObjectUnsubscribedError)
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var ObjectUnsubscribedErrorImpl = /*@__PURE__*/ (function () {
    function ObjectUnsubscribedErrorImpl() {
        Error.call(this);
        this.message = 'object unsubscribed';
        this.name = 'ObjectUnsubscribedError';
        return this;
    }
    ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return ObjectUnsubscribedErrorImpl;
})();
var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;
//# sourceMappingURL=ObjectUnsubscribedError.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnsubscriptionError": () => (/* binding */ UnsubscriptionError)
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var UnsubscriptionErrorImpl = /*@__PURE__*/ (function () {
    function UnsubscriptionErrorImpl(errors) {
        Error.call(this);
        this.message = errors ?
            errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
        return this;
    }
    UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return UnsubscriptionErrorImpl;
})();
var UnsubscriptionError = UnsubscriptionErrorImpl;
//# sourceMappingURL=UnsubscriptionError.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/canReportError.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/canReportError.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "canReportError": () => (/* binding */ canReportError)
/* harmony export */ });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */

function canReportError(observer) {
    while (observer) {
        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
        if (closed_1 || isStopped) {
            return false;
        }
        else if (destination && destination instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber) {
            observer = destination;
        }
        else {
            observer = null;
        }
    }
    return true;
}
//# sourceMappingURL=canReportError.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/hostReportError.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/hostReportError.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hostReportError": () => (/* binding */ hostReportError)
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function hostReportError(err) {
    setTimeout(function () { throw err; }, 0);
}
//# sourceMappingURL=hostReportError.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/identity.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/identity.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "identity": () => (/* binding */ identity)
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isArray.js":
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isArray.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArray": () => (/* binding */ isArray)
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArray = /*@__PURE__*/ (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();
//# sourceMappingURL=isArray.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isFunction.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isFunction.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFunction": () => (/* binding */ isFunction)
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isFunction(x) {
    return typeof x === 'function';
}
//# sourceMappingURL=isFunction.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isObject.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isObject.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isObject": () => (/* binding */ isObject)
/* harmony export */ });
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isObject(x) {
    return x !== null && typeof x === 'object';
}
//# sourceMappingURL=isObject.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/pipe.js":
/*!*******************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/pipe.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pipe": () => (/* binding */ pipe),
/* harmony export */   "pipeFromArray": () => (/* binding */ pipeFromArray)
/* harmony export */ });
/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity */ "./node_modules/rxjs/_esm5/internal/util/identity.js");
/** PURE_IMPORTS_START _identity PURE_IMPORTS_END */

function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (fns.length === 0) {
        return _identity__WEBPACK_IMPORTED_MODULE_0__.identity;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map


/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/toSubscriber.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/toSubscriber.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toSubscriber": () => (/* binding */ toSubscriber)
/* harmony export */ });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
/* harmony import */ var _symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/rxSubscriber */ "./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observer */ "./node_modules/rxjs/_esm5/internal/Observer.js");
/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */



function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__.rxSubscriber]) {
            return nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__.rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber(_Observer__WEBPACK_IMPORTED_MODULE_2__.empty);
    }
    return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber(nextOrObserver, error, complete);
}
//# sourceMappingURL=toSubscriber.js.map


/***/ }),

/***/ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/node_modules/tslib/tslib.es6.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__values": () => (/* binding */ __values),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler-tracing.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.20.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

var interactionIDCounter = 0;
var threadIDCounter = 0; // Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.

exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

exports.__subscriberRef = null;

{
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}
function unstable_clear(callback) {

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}
function unstable_getCurrent() {
  {
    return exports.__interactionsRef.current;
  }
}
function unstable_getThreadID() {
  return ++threadIDCounter;
}
function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };
  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.

  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;
  var subscriber = exports.__subscriberRef.current;
  var returnValue;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--; // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}
function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  var wrappedInteractions = exports.__interactionsRef.current;
  var subscriber = exports.__subscriberRef.current;

  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  } // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.


  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });
  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;
    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true; // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;

{
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}
function unstable_unsubscribe(subscriber) {
  {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_trace = unstable_trace;
exports.unstable_unsubscribe = unstable_unsubscribe;
exports.unstable_wrap = unstable_wrap;
  })();
}


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.20.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var enableSchedulerDebugging = false;
var enableProfiling = true;

var requestHostCallback;
var requestHostTimeout;
var cancelHostTimeout;
var requestPaint;
var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

if (hasPerformanceNow) {
  var localPerformance = performance;

  exports.unstable_now = function () {
    return localPerformance.now();
  };
} else {
  var localDate = Date;
  var initialTime = localDate.now();

  exports.unstable_now = function () {
    return localDate.now() - initialTime;
  };
}

if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' || // Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;

  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;

        _callback(hasRemainingTime, currentTime);

        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };

  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };

  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };

  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };

  exports.unstable_shouldYield = function () {
    return false;
  };

  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;

  if (typeof console !== 'undefined') {
    // TODO: Scheduler no longer requires these methods to be polyfilled. But
    // maybe we want to continue warning if they don't exist, to preserve the
    // option to rely on it in the future?
    var requestAnimationFrame = window.requestAnimationFrame;
    var cancelAnimationFrame = window.cancelAnimationFrame;

    if (typeof requestAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
    }

    if (typeof cancelAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
    }
  }

  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
  // thread, like user events. By default, it yields multiple times per frame.
  // It does not attempt to align with frame boundaries, since most tasks don't
  // need to be frame aligned; for those that do, use requestAnimationFrame.

  var yieldInterval = 5;
  var deadline = 0; // TODO: Make this configurable

  {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    exports.unstable_shouldYield = function () {
      return exports.unstable_now() >= deadline;
    }; // Since we yield every frame regardless, `requestPaint` has no effect.


    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      // Using console['error'] to evade Babel and ESLint
      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
      return;
    }

    if (fps > 0) {
      yieldInterval = Math.floor(1000 / fps);
    } else {
      // reset the framerate
      yieldInterval = 5;
    }
  };

  var performWorkUntilDeadline = function () {
    if (scheduledHostCallback !== null) {
      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
      // cycle. This means there's always time remaining at the beginning of
      // the message event.

      deadline = currentTime + yieldInterval;
      var hasTimeRemaining = true;

      try {
        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

        if (!hasMoreWork) {
          isMessageLoopRunning = false;
          scheduledHostCallback = null;
        } else {
          // If there's more work, schedule the next message event at the end
          // of the preceding one.
          port.postMessage(null);
        }
      } catch (error) {
        // If a scheduler task throws, exit the current browser task so the
        // error can be observed.
        port.postMessage(null);
        throw error;
      }
    } else {
      isMessageLoopRunning = false;
    } // Yielding to the browser will give it a chance to paint, so we can
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;

    if (!isMessageLoopRunning) {
      isMessageLoopRunning = true;
      port.postMessage(null);
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);

    taskTimeoutID = -1;
  };
}

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  var first = heap[0];
  return first === undefined ? null : first;
}
function pop(heap) {
  var first = heap[0];

  if (first !== undefined) {
    var last = heap.pop();

    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }

    return first;
  } else {
    return null;
  }
}

function siftUp(heap, node, i) {
  var index = i;

  while (true) {
    var parentIndex = index - 1 >>> 1;
    var parent = heap[parentIndex];

    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;

  while (index < length) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var NoPriority = 0;
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

var runIdCounter = 0;
var mainThreadIdCounter = 0;
var profilingStateSize = 4;
var sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer
typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
;
var profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

var PRIORITY = 0;
var CURRENT_TASK_ID = 1;
var CURRENT_RUN_ID = 2;
var QUEUE_SIZE = 3;

{
  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
  // array might include canceled tasks.

  profilingState[QUEUE_SIZE] = 0;
  profilingState[CURRENT_TASK_ID] = 0;
} // Bytes per element is 4


var INITIAL_EVENT_LOG_SIZE = 131072;
var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

var eventLogSize = 0;
var eventLogBuffer = null;
var eventLog = null;
var eventLogIndex = 0;
var TaskStartEvent = 1;
var TaskCompleteEvent = 2;
var TaskErrorEvent = 3;
var TaskCancelEvent = 4;
var TaskRunEvent = 5;
var TaskYieldEvent = 6;
var SchedulerSuspendEvent = 7;
var SchedulerResumeEvent = 8;

function logEvent(entries) {
  if (eventLog !== null) {
    var offset = eventLogIndex;
    eventLogIndex += entries.length;

    if (eventLogIndex + 1 > eventLogSize) {
      eventLogSize *= 2;

      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
        // Using console['error'] to evade Babel and ESLint
        console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
        stopLoggingProfilingEvents();
        return;
      }

      var newEventLog = new Int32Array(eventLogSize * 4);
      newEventLog.set(eventLog);
      eventLogBuffer = newEventLog.buffer;
      eventLog = newEventLog;
    }

    eventLog.set(entries, offset);
  }
}

function startLoggingProfilingEvents() {
  eventLogSize = INITIAL_EVENT_LOG_SIZE;
  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
  eventLog = new Int32Array(eventLogBuffer);
  eventLogIndex = 0;
}
function stopLoggingProfilingEvents() {
  var buffer = eventLogBuffer;
  eventLogSize = 0;
  eventLogBuffer = null;
  eventLog = null;
  eventLogIndex = 0;
  return buffer;
}
function markTaskStart(task, ms) {
  {
    profilingState[QUEUE_SIZE]++;

    if (eventLog !== null) {
      // performance.now returns a float, representing milliseconds. When the
      // event is logged, it's coerced to an int. Convert to microseconds to
      // maintain extra degrees of precision.
      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
    }
  }
}
function markTaskCompleted(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskCanceled(task, ms) {
  {
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCancelEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskErrored(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskErrorEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskRun(task, ms) {
  {
    runIdCounter++;
    profilingState[PRIORITY] = task.priorityLevel;
    profilingState[CURRENT_TASK_ID] = task.id;
    profilingState[CURRENT_RUN_ID] = runIdCounter;

    if (eventLog !== null) {
      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markTaskYield(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[CURRENT_RUN_ID] = 0;

    if (eventLog !== null) {
      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markSchedulerSuspended(ms) {
  {
    mainThreadIdCounter++;

    if (eventLog !== null) {
      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}
function markSchedulerUnsuspended(ms) {
  {
    if (eventLog !== null) {
      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}

/* eslint-disable no-var */
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111

var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);

      {
        markTaskStart(timer, currentTime);
        timer.isQueued = true;
      }
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {
  {
    markSchedulerUnsuspended(initialTime);
  } // We'll need a host callback the next time work is scheduled.


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod code path.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;

    {
      var _currentTime = exports.unstable_now();

      markSchedulerSuspended(_currentTime);
    }
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging )) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (typeof callback === 'function') {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
      markTaskRun(currentTask, currentTime);
      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
        markTaskYield(currentTask, currentTime);
      } else {
        {
          markTaskCompleted(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }
  } else {
    startTime = currentTime;
  }

  var timeout;

  switch (priorityLevel) {
    case ImmediatePriority:
      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
      break;

    case UserBlockingPriority:
      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
      break;

    case IdlePriority:
      timeout = IDLE_PRIORITY_TIMEOUT;
      break;

    case LowPriority:
      timeout = LOW_PRIORITY_TIMEOUT;
      break;

    case NormalPriority:
    default:
      timeout = NORMAL_PRIORITY_TIMEOUT;
      break;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  {
    newTask.isQueued = false;
  }

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);

    {
      markTaskStart(newTask, currentTime);
      newTask.isQueued = true;
    } // Schedule a host callback, if needed. If we're already performing work,
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
}

function unstable_continueExecution() {

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  {
    if (task.isQueued) {
      var currentTime = exports.unstable_now();
      markTaskCanceled(task, currentTime);
      task.isQueued = false;
    }
  } // Null out the callback to indicate the task has been canceled. (Can't
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling =  {
  startLoggingProfilingEvents: startLoggingProfilingEvents,
  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
  sharedProfilingBuffer: sharedProfilingBuffer
} ;

exports.unstable_IdlePriority = IdlePriority;
exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_Profiling = unstable_Profiling;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_next = unstable_next;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_wrapCallback = unstable_wrapCallback;
  })();
}


/***/ }),

/***/ "./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "./node_modules/scheduler/cjs/scheduler.development.js");
}


/***/ }),

/***/ "./node_modules/scheduler/tracing.js":
/*!*******************************************!*\
  !*** ./node_modules/scheduler/tracing.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler-tracing.development.js */ "./node_modules/scheduler/cjs/scheduler-tracing.development.js");
}


/***/ }),

/***/ "./node_modules/seedrandom/index.js":
/*!******************************************!*\
  !*** ./node_modules/seedrandom/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = __webpack_require__(/*! ./lib/alea */ "./node_modules/seedrandom/lib/alea.js");

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = __webpack_require__(/*! ./lib/xor128 */ "./node_modules/seedrandom/lib/xor128.js");

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = __webpack_require__(/*! ./lib/xorwow */ "./node_modules/seedrandom/lib/xorwow.js");

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = __webpack_require__(/*! ./lib/xorshift7 */ "./node_modules/seedrandom/lib/xorshift7.js");

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = __webpack_require__(/*! ./lib/xor4096 */ "./node_modules/seedrandom/lib/xor4096.js");

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = __webpack_require__(/*! ./lib/tychei */ "./node_modules/seedrandom/lib/tychei.js");

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = __webpack_require__(/*! ./seedrandom */ "./node_modules/seedrandom/seedrandom.js");

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

module.exports = sr;


/***/ }),

/***/ "./node_modules/seedrandom/lib/alea.js":
/*!*********************************************!*\
  !*** ./node_modules/seedrandom/lib/alea.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



(function(global, module, define) {

function Alea(seed) {
  var me = this, mash = Mash();

  me.next = function() {
    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
    me.s0 = me.s1;
    me.s1 = me.s2;
    return me.s2 = t - (me.c = t | 0);
  };

  // Apply the seeding algorithm from Baagoe.
  me.c = 1;
  me.s0 = mash(' ');
  me.s1 = mash(' ');
  me.s2 = mash(' ');
  me.s0 -= mash(seed);
  if (me.s0 < 0) { me.s0 += 1; }
  me.s1 -= mash(seed);
  if (me.s1 < 0) { me.s1 += 1; }
  me.s2 -= mash(seed);
  if (me.s2 < 0) { me.s2 += 1; }
  mash = null;
}

function copy(f, t) {
  t.c = f.c;
  t.s0 = f.s0;
  t.s1 = f.s1;
  t.s2 = f.s2;
  return t;
}

function impl(seed, opts) {
  var xg = new Alea(seed),
      state = opts && opts.state,
      prng = xg.next;
  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }
  prng.double = function() {
    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
  };
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

function Mash() {
  var n = 0xefc8249d;

  var mash = function(data) {
    data = data.toString();
    for (var i = 0; i < data.length; i++) {
      n += data.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 0x100000000; // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
  };

  return mash;
}


if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.alea = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);




/***/ }),

/***/ "./node_modules/seedrandom/lib/tychei.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/tychei.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var b = me.b, c = me.c, d = me.d, a = me.a;
    b = (b << 25) ^ (b >>> 7) ^ c;
    c = (c - d) | 0;
    d = (d << 24) ^ (d >>> 8) ^ a;
    a = (a - b) | 0;
    me.b = b = (b << 20) ^ (b >>> 12) ^ c;
    me.c = c = (c - d) | 0;
    me.d = (d << 16) ^ (c >>> 16) ^ a;
    return me.a = (a - b) | 0;
  };

  /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */

  me.a = 0;
  me.b = 0;
  me.c = 2654435769 | 0;
  me.d = 1367130551;

  if (seed === Math.floor(seed)) {
    // Integer seed.
    me.a = (seed / 0x100000000) | 0;
    me.b = seed | 0;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 20; k++) {
    me.b ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.a = f.a;
  t.b = f.b;
  t.c = f.c;
  t.d = f.d;
  return t;
};

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.tychei = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);




/***/ }),

/***/ "./node_modules/seedrandom/lib/xor128.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xor128.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;

  // Set up generator function.
  me.next = function() {
    var t = me.x ^ (me.x << 11);
    me.x = me.y;
    me.y = me.z;
    me.z = me.w;
    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
  };

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xor128 = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);




/***/ }),

/***/ "./node_modules/seedrandom/lib/xor4096.js":
/*!************************************************!*\
  !*** ./node_modules/seedrandom/lib/xor4096.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    var w = me.w,
        X = me.X, i = me.i, t, v;
    // Update Weyl generator.
    me.w = w = (w + 0x61c88647) | 0;
    // Update xor generator.
    v = X[(i + 34) & 127];
    t = X[i = ((i + 1) & 127)];
    v ^= v << 13;
    t ^= t << 17;
    v ^= v >>> 15;
    t ^= t >>> 12;
    // Update Xor generator array state.
    v = X[i] = v ^ t;
    me.i = i;
    // Result is the combination.
    return (v + (w ^ (w >>> 16))) | 0;
  };

  function init(me, seed) {
    var t, v, i, j, w, X = [], limit = 128;
    if (seed === (seed | 0)) {
      // Numeric seeds initialize v, which is used to generates X.
      v = seed;
      seed = null;
    } else {
      // String seeds are mixed into v and X one character at a time.
      seed = seed + '\0';
      v = 0;
      limit = Math.max(limit, seed.length);
    }
    // Initialize circular array and weyl value.
    for (i = 0, j = -32; j < limit; ++j) {
      // Put the unicode characters into the array, and shuffle them.
      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
      // After 32 shuffles, take v as the starting w value.
      if (j === 0) w = v;
      v ^= v << 10;
      v ^= v >>> 15;
      v ^= v << 4;
      v ^= v >>> 13;
      if (j >= 0) {
        w = (w + 0x61c88647) | 0;     // Weyl.
        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
        i = (0 == t) ? i + 1 : 0;     // Count zeroes.
      }
    }
    // We have detected all zeroes; make the key nonzero.
    if (i >= 128) {
      X[(seed && seed.length || 0) & 127] = -1;
    }
    // Run the generator 512 times to further mix the state before using it.
    // Factoring this as a function slows the main generator, so it is just
    // unrolled here.  The weyl generator is not advanced while warming up.
    i = 127;
    for (j = 4 * 128; j > 0; --j) {
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      X[i] = v ^ t;
    }
    // Storing state as object members is faster than using closure variables.
    me.w = w;
    me.X = X;
    me.i = i;
  }

  init(me, seed);
}

function copy(f, t) {
  t.i = f.i;
  t.w = f.w;
  t.X = f.X.slice();
  return t;
};

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.X) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xor4096 = impl;
}

})(
  this,                                     // window object or global
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);


/***/ }),

/***/ "./node_modules/seedrandom/lib/xorshift7.js":
/*!**************************************************!*\
  !*** ./node_modules/seedrandom/lib/xorshift7.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    // Update xor generator.
    var X = me.x, i = me.i, t, v, w;
    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
    X[i] = v;
    me.i = (i + 1) & 7;
    return v;
  };

  function init(me, seed) {
    var j, w, X = [];

    if (seed === (seed | 0)) {
      // Seed state array using a 32-bit integer.
      w = X[0] = seed;
    } else {
      // Seed state using a string.
      seed = '' + seed;
      for (j = 0; j < seed.length; ++j) {
        X[j & 7] = (X[j & 7] << 15) ^
            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
      }
    }
    // Enforce an array length of 8, not all zeroes.
    while (X.length < 8) X.push(0);
    for (j = 0; j < 8 && X[j] === 0; ++j);
    if (j == 8) w = X[7] = -1; else w = X[j];

    me.x = X;
    me.i = 0;

    // Discard an initial 256 values.
    for (j = 256; j > 0; --j) {
      me.next();
    }
  }

  init(me, seed);
}

function copy(f, t) {
  t.x = f.x.slice();
  t.i = f.i;
  return t;
}

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.x) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xorshift7 = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);



/***/ }),

/***/ "./node_modules/seedrandom/lib/xorwow.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xorwow.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var t = (me.x ^ (me.x >>> 2));
    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
    return (me.d = (me.d + 362437 | 0)) +
       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
  };

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;
  me.v = 0;

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    if (k == strseed.length) {
      me.d = me.x << 10 ^ me.x >>> 4;
    }
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  t.v = f.v;
  t.d = f.d;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__.amdD && __webpack_require__.amdO) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xorwow = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__.amdD   // present with an AMD loader
);




/***/ }),

/***/ "./node_modules/seedrandom/seedrandom.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/seedrandom.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;/*
Copyright 2014 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (pool, math) {
//
// The following constants are related to IEEE 754 limits.
//
var global = this,
    width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}
math['seed' + rngname] = seedrandom;

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    var out;
    if (nodecrypto && (out = nodecrypto.randomBytes)) {
      // The use of 'out' to remember randomBytes makes tight minified code.
      out = out(width);
    } else {
      out = new Uint8Array(width);
      (global.crypto || global.msCrypto).getRandomValues(out);
    }
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ( true && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = __webpack_require__(/*! crypto */ "?8465");
  } catch (ex) {}
} else if (true) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return seedrandom; }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}

// End anonymous scope, and pass initial values.
})(
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);


/***/ }),

/***/ "./src/client/component/canvas.scss":
/*!******************************************!*\
  !*** ./src/client/component/canvas.scss ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_canvas_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!../../../node_modules/sass-loader/dist/cjs.js!./canvas.scss */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/component/canvas.scss");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_canvas_scss__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_canvas_scss__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./src/client/component/canvas/button.scss":
/*!*************************************************!*\
  !*** ./src/client/component/canvas/button.scss ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_button_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!../../../../node_modules/sass-loader/dist/cjs.js!./button.scss */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/component/canvas/button.scss");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_button_scss__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_button_scss__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./src/client/index.scss":
/*!*******************************!*\
  !*** ./src/client/index.scss ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_index_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!../../node_modules/sass-loader/dist/cjs.js!./index.scss */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/index.scss");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_index_scss__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_index_scss__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./src/client/pages/board.scss":
/*!*************************************!*\
  !*** ./src/client/pages/board.scss ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_board_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!../../../node_modules/sass-loader/dist/cjs.js!./board.scss */ "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/sass-loader/dist/cjs.js!./src/client/pages/board.scss");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_board_scss__WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_1_use_1_node_modules_sass_loader_dist_cjs_js_board_scss__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : 0;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/tiny-invariant/dist/tiny-invariant.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var isProduction = "development" === 'production';
var prefix = 'Invariant failed';
function invariant(condition, message) {
    if (condition) {
        return;
    }
    if (isProduction) {
        throw new Error(prefix);
    }
    throw new Error(prefix + ": " + (message || ''));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (invariant);


/***/ }),

/***/ "./node_modules/tiny-warning/dist/tiny-warning.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/tiny-warning/dist/tiny-warning.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var isProduction = "development" === 'production';
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }

    var text = "Warning: " + message;

    if (typeof console !== 'undefined') {
      console.warn(text);
    }

    try {
      throw Error(text);
    } catch (x) {}
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (warning);


/***/ }),

/***/ "./node_modules/value-equal/esm/value-equal.js":
/*!*****************************************************!*\
  !*** ./node_modules/value-equal/esm/value-equal.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function valueOf(obj) {
  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
}

function valueEqual(a, b) {
  // Test for strict equality first.
  if (a === b) return true;

  // Otherwise, if either of them == null they are not equal.
  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return (
      Array.isArray(b) &&
      a.length === b.length &&
      a.every(function(item, index) {
        return valueEqual(item, b[index]);
      })
    );
  }

  if (typeof a === 'object' || typeof b === 'object') {
    var aValue = valueOf(a);
    var bValue = valueOf(b);

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    return Object.keys(Object.assign({}, a, b)).every(function(key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (valueEqual);


/***/ }),

/***/ "?8465":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?7581":
/*!****************************!*\
  !*** node-fetch (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?0bed":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd define */
/******/ 	(() => {
/******/ 		__webpack_require__.amdD = function () {
/******/ 			throw new Error('define cannot be used indirect');
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "profilecard:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// Promise = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"client": 0
/******/ 		};
/******/ 		
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => {
/******/ 								installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 							});
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						} else installedChunks[chunkId] = 0;
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no deferred startup
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0, resolves = [];
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					resolves.push(installedChunks[chunkId][0]);
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			while(resolves.length) {
/******/ 				resolves.shift()();
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkprofilecard"] = self["webpackChunkprofilecard"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 		
/******/ 		// no deferred startup
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/client/index.tsx");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;
//# sourceMappingURL=client.bundle.js.map